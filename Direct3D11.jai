// This file was auto generated

#import "Win32/Basics";
#import "Win32/DXGI";
#import "Win32/Direct3D";

// Constants

D3D11_16BIT_INDEX_STRIP_CUT_VALUE :: 65535;
D3D11_1_UAV_SLOT_COUNT :: 64;
D3D11_2_TILED_RESOURCE_TILE_SIZE_IN_BYTES :: 65536;
D3D11_32BIT_INDEX_STRIP_CUT_VALUE :: 4294967295;
D3D11_4_VIDEO_DECODER_HISTOGRAM_OFFSET_ALIGNMENT :: 256;
D3D11_4_VIDEO_DECODER_MAX_HISTOGRAM_COMPONENTS :: 4;
D3D11_8BIT_INDEX_STRIP_CUT_VALUE :: 255;
D3D11_ANISOTROPIC_FILTERING_BIT :: 64;
D3D11_APPEND_ALIGNED_ELEMENT :: 4294967295;
D3D11_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT :: 9;
D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION :: "6346cc54-2cfc-4ad4-8224-d15837de7700";
D3D11_AUTHENTICATED_CONFIGURE_ENCRYPTION_WHEN_ACCESSIBLE :: "41fff286-6ae0-4d43-9d55-a46e9efd158a";
D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE :: "06114bdb-3523-470a-8dca-fbc2845154f0";
D3D11_AUTHENTICATED_CONFIGURE_PROTECTION :: "50455658-3f47-4362-bf99-bfdfcde9ed29";
D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE :: "0772d047-1b40-48e8-9ca6-b5f510de9f01";
D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ATTRIBUTES :: "6214d9d2-432c-4abb-9fce-216eea269e3b";
D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE :: "bc1b18a5-b1fb-42ab-bd94-b5828b4bf7be";
D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION :: "2634499e-d018-4d74-ac17-7f724059528d";
D3D11_AUTHENTICATED_QUERY_CURRENT_ENCRYPTION_WHEN_ACCESSIBLE :: "ec1791c7-dad3-4f15-9ec3-faa93d60d4f0";
D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE :: "ec1c539d-8cff-4e2a-bcc4-f5692f99f480";
D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID :: "f83a5958-e986-4bda-beb0-411f6a7a01b7";
D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID_COUNT :: "b30f7066-203c-4b07-93fc-ceaafd61241e";
D3D11_AUTHENTICATED_QUERY_OUTPUT_ID :: "839ddca3-9b4e-41e4-b053-892bd2a11ee7";
D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT :: "2c042b5e-8c07-46d5-aabe-8f75cbad4c31";
D3D11_AUTHENTICATED_QUERY_PROTECTION :: "a84eb584-c495-48aa-b94d-8bd2d6fbce05";
D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS :: "649bbadb-f0f4-4639-a15b-24393fc3abac";
D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT :: "0db207b3-9450-46a6-82de-1b96d44f9cf2";
D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT :: "012f0bd6-e662-4474-befd-aa53e5143c6d";
D3D11_CLIP_OR_CULL_DISTANCE_COUNT :: 8;
D3D11_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT :: 2;
D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT :: 14;
D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS :: 4;
D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT :: 32;
D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT :: 15;
D3D11_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT :: 16;
D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS :: 4;
D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT :: 15;
D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST :: 1;
D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS :: 1;
D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT :: 64;
D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS :: 4;
D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT :: 1;
D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST :: 1;
D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS :: 1;
D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT :: 32;
D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS :: 1;
D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT :: 128;
D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST :: 1;
D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS :: 1;
D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT :: 128;
D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS :: 1;
D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT :: 16;
D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST :: 1;
D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS :: 1;
D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT :: 16;
D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT :: 32;
D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS :: 4;
D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D11_COMMONSHADER_TEMP_REGISTER_COUNT :: 4096;
D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST :: 3;
D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS :: 3;
D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX :: 10;
D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN :: -10;
D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE :: -8;
D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE :: 7;
D3D11_COMPARISON_FILTERING_BIT :: 128;
D3D11_CRYPTO_TYPE_AES128_CTR :: "9b6bd711-4f74-41c9-9e7b-0be2d7d93b4f";
D3D11_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 256;
D3D11_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP :: 64;
D3D11_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 240;
D3D11_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP :: 68;
D3D11_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 224;
D3D11_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP :: 72;
D3D11_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 208;
D3D11_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP :: 76;
D3D11_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 192;
D3D11_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP :: 84;
D3D11_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 176;
D3D11_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP :: 92;
D3D11_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 160;
D3D11_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP :: 100;
D3D11_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 144;
D3D11_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP :: 112;
D3D11_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 128;
D3D11_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP :: 128;
D3D11_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 112;
D3D11_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP :: 144;
D3D11_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 96;
D3D11_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP :: 168;
D3D11_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 80;
D3D11_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP :: 204;
D3D11_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 64;
D3D11_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP :: 256;
D3D11_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 48;
D3D11_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP :: 340;
D3D11_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 32;
D3D11_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP :: 512;
D3D11_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 16;
D3D11_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP :: 768;
D3D11_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION :: 1;
D3D11_CS_4_X_RAW_UAV_BYTE_ALIGNMENT :: 256;
D3D11_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP :: 768;
D3D11_CS_4_X_THREAD_GROUP_MAX_X :: 768;
D3D11_CS_4_X_THREAD_GROUP_MAX_Y :: 768;
D3D11_CS_4_X_UAV_REGISTER_COUNT :: 1;
D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION :: 65535;
D3D11_CS_TGSM_REGISTER_COUNT :: 8192;
D3D11_CS_TGSM_REGISTER_READS_PER_INST :: 1;
D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS :: 1;
D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS :: 1;
D3D11_CS_THREADGROUPID_REGISTER_COMPONENTS :: 3;
D3D11_CS_THREADGROUPID_REGISTER_COUNT :: 1;
D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS :: 1;
D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT :: 1;
D3D11_CS_THREADIDINGROUP_REGISTER_COMPONENTS :: 3;
D3D11_CS_THREADIDINGROUP_REGISTER_COUNT :: 1;
D3D11_CS_THREADID_REGISTER_COMPONENTS :: 3;
D3D11_CS_THREADID_REGISTER_COUNT :: 1;
D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP :: 1024;
D3D11_CS_THREAD_GROUP_MAX_X :: 1024;
D3D11_CS_THREAD_GROUP_MAX_Y :: 1024;
D3D11_CS_THREAD_GROUP_MAX_Z :: 64;
D3D11_CS_THREAD_GROUP_MIN_X :: 1;
D3D11_CS_THREAD_GROUP_MIN_Y :: 1;
D3D11_CS_THREAD_GROUP_MIN_Z :: 1;
D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL :: 16384;
D3D11_DEBUG_FEATURE_ALWAYS_DISCARD_OFFERED_RESOURCE :: 8;
D3D11_DEBUG_FEATURE_AVOID_BEHAVIOR_CHANGING_DEBUG_AIDS :: 64;
D3D11_DEBUG_FEATURE_DISABLE_TILED_RESOURCE_MAPPING_TRACKING_AND_VALIDATION :: 128;
D3D11_DEBUG_FEATURE_FINISH_PER_RENDER_OP :: 2;
D3D11_DEBUG_FEATURE_FLUSH_PER_RENDER_OP :: 1;
D3D11_DEBUG_FEATURE_NEVER_DISCARD_OFFERED_RESOURCE :: 16;
D3D11_DEBUG_FEATURE_PRESENT_PER_RENDER_OP :: 4;
D3D11_DECODER_BITSTREAM_ENCRYPTION_TYPE_CBCS :: "422d9319-9d21-4bb7-9371-faf5a82c3e04";
D3D11_DECODER_BITSTREAM_ENCRYPTION_TYPE_CENC :: "b0405235-c13d-44f2-9ae5-dd48e08e5b67";
D3D11_DECODER_ENCRYPTION_HW_CENC :: "89d6ac4f-09f2-4229-b2cd-37740a6dfd81";
D3D11_DECODER_PROFILE_AV1_VLD_12BIT_PROFILE2 :: "17127009-a00f-4ce1-994e-bf4081f6f3f0";
D3D11_DECODER_PROFILE_AV1_VLD_12BIT_PROFILE2_420 :: "2d80bed6-9cac-4835-9e91-327bbc4f9ee8";
D3D11_DECODER_PROFILE_AV1_VLD_PROFILE0 :: "b8be4ccb-cf53-46ba-8d59-d6b8a6da5d2a";
D3D11_DECODER_PROFILE_AV1_VLD_PROFILE1 :: "6936ff0f-45b1-4163-9cc1-646ef6946108";
D3D11_DECODER_PROFILE_AV1_VLD_PROFILE2 :: "0c5f2aa1-e541-4089-bb7b-98110a19d7c8";
D3D11_DECODER_PROFILE_H264_IDCT_FGT :: "1b81be67-a0c7-11d3-b984-00c04f2e73c5";
D3D11_DECODER_PROFILE_H264_IDCT_NOFGT :: "1b81be66-a0c7-11d3-b984-00c04f2e73c5";
D3D11_DECODER_PROFILE_H264_MOCOMP_FGT :: "1b81be65-a0c7-11d3-b984-00c04f2e73c5";
D3D11_DECODER_PROFILE_H264_MOCOMP_NOFGT :: "1b81be64-a0c7-11d3-b984-00c04f2e73c5";
D3D11_DECODER_PROFILE_H264_VLD_FGT :: "1b81be69-a0c7-11d3-b984-00c04f2e73c5";
D3D11_DECODER_PROFILE_H264_VLD_MULTIVIEW_NOFGT :: "705b9d82-76cf-49d6-b7e6-ac8872db013c";
D3D11_DECODER_PROFILE_H264_VLD_NOFGT :: "1b81be68-a0c7-11d3-b984-00c04f2e73c5";
D3D11_DECODER_PROFILE_H264_VLD_STEREO_NOFGT :: "f9aaccbb-c2b6-4cfc-8779-5707b1760552";
D3D11_DECODER_PROFILE_H264_VLD_STEREO_PROGRESSIVE_NOFGT :: "d79be8da-0cf1-4c81-b82a-69a4e236f43d";
D3D11_DECODER_PROFILE_H264_VLD_WITHFMOASO_NOFGT :: "d5f04ff9-3418-45d8-9561-32a76aae2ddd";
D3D11_DECODER_PROFILE_HEVC_VLD_MAIN :: "5b11d51b-2f4c-4452-bcc3-09f2a1160cc0";
D3D11_DECODER_PROFILE_HEVC_VLD_MAIN10 :: "107af0e0-ef1a-4d19-aba8-67a163073d13";
D3D11_DECODER_PROFILE_MPEG1_VLD :: "6f3ec719-3735-42cc-8063-65cc3cb36616";
D3D11_DECODER_PROFILE_MPEG2_IDCT :: "bf22ad00-03ea-4690-8077-473346209b7e";
D3D11_DECODER_PROFILE_MPEG2_MOCOMP :: "e6a9f44b-61b0-4563-9ea4-63d2a3c6fe66";
D3D11_DECODER_PROFILE_MPEG2_VLD :: "ee27417f-5e28-4e65-beea-1d26b508adc9";
D3D11_DECODER_PROFILE_MPEG2and1_VLD :: "86695f12-340e-4f04-9fd3-9253dd327460";
D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_GMC :: "ab998b5b-4258-44a9-9feb-94e597a6baae";
D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_NOGMC :: "ed418a9f-010d-4eda-9ae3-9a65358d8d2e";
D3D11_DECODER_PROFILE_MPEG4PT2_VLD_SIMPLE :: "efd64d74-c9e8-41d7-a5e9-e9b0e39fa319";
D3D11_DECODER_PROFILE_VC1_D2010 :: "1b81bea4-a0c7-11d3-b984-00c04f2e73c5";
D3D11_DECODER_PROFILE_VC1_IDCT :: "1b81bea2-a0c7-11d3-b984-00c04f2e73c5";
D3D11_DECODER_PROFILE_VC1_MOCOMP :: "1b81bea1-a0c7-11d3-b984-00c04f2e73c5";
D3D11_DECODER_PROFILE_VC1_POSTPROC :: "1b81bea0-a0c7-11d3-b984-00c04f2e73c5";
D3D11_DECODER_PROFILE_VC1_VLD :: "1b81bea3-a0c7-11d3-b984-00c04f2e73c5";
D3D11_DECODER_PROFILE_VP8_VLD :: "90b899ea-3a62-4705-88b3-8df04b2744e7";
D3D11_DECODER_PROFILE_VP9_VLD_10BIT_PROFILE2 :: "a4c749ef-6ecf-48aa-8448-50a7a1165ff7";
D3D11_DECODER_PROFILE_VP9_VLD_PROFILE0 :: "463707f8-a1d0-4585-876d-83aa6d60b89e";
D3D11_DECODER_PROFILE_WMV8_MOCOMP :: "1b81be81-a0c7-11d3-b984-00c04f2e73c5";
D3D11_DECODER_PROFILE_WMV8_POSTPROC :: "1b81be80-a0c7-11d3-b984-00c04f2e73c5";
D3D11_DECODER_PROFILE_WMV9_IDCT :: "1b81be94-a0c7-11d3-b984-00c04f2e73c5";
D3D11_DECODER_PROFILE_WMV9_MOCOMP :: "1b81be91-a0c7-11d3-b984-00c04f2e73c5";
D3D11_DECODER_PROFILE_WMV9_POSTPROC :: "1b81be90-a0c7-11d3-b984-00c04f2e73c5";
D3D11_DEFAULT_BLEND_FACTOR_ALPHA :: 1.0;
D3D11_DEFAULT_BLEND_FACTOR_BLUE :: 1.0;
D3D11_DEFAULT_BLEND_FACTOR_GREEN :: 1.0;
D3D11_DEFAULT_BLEND_FACTOR_RED :: 1.0;
D3D11_DEFAULT_BORDER_COLOR_COMPONENT :: 0.0;
D3D11_DEFAULT_DEPTH_BIAS :: 0;
D3D11_DEFAULT_DEPTH_BIAS_CLAMP :: 0.0;
D3D11_DEFAULT_MAX_ANISOTROPY :: 16;
D3D11_DEFAULT_MIP_LOD_BIAS :: 0.0;
D3D11_DEFAULT_RENDER_TARGET_ARRAY_INDEX :: 0;
D3D11_DEFAULT_SAMPLE_MASK :: 4294967295;
D3D11_DEFAULT_SCISSOR_ENDX :: 0;
D3D11_DEFAULT_SCISSOR_ENDY :: 0;
D3D11_DEFAULT_SCISSOR_STARTX :: 0;
D3D11_DEFAULT_SCISSOR_STARTY :: 0;
D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS :: 0.0;
D3D11_DEFAULT_STENCIL_READ_MASK :: 255;
D3D11_DEFAULT_STENCIL_REFERENCE :: 0;
D3D11_DEFAULT_STENCIL_WRITE_MASK :: 255;
D3D11_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX :: 0;
D3D11_DEFAULT_VIEWPORT_HEIGHT :: 0;
D3D11_DEFAULT_VIEWPORT_MAX_DEPTH :: 0.0;
D3D11_DEFAULT_VIEWPORT_MIN_DEPTH :: 0.0;
D3D11_DEFAULT_VIEWPORT_TOPLEFTX :: 0;
D3D11_DEFAULT_VIEWPORT_TOPLEFTY :: 0;
D3D11_DEFAULT_VIEWPORT_WIDTH :: 0;
D3D11_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS :: 3968;
D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS :: 4;
D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COUNT :: 32;
D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST :: 2;
D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS :: 1;
D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS :: 3;
D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT :: 1;
D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST :: 2;
D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS :: 1;
D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS :: 4;
D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT :: 32;
D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST :: 2;
D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS :: 1;
D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS :: 1;
D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT :: 1;
D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST :: 2;
D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS :: 1;
D3D11_DS_OUTPUT_REGISTER_COMPONENTS :: 4;
D3D11_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D11_DS_OUTPUT_REGISTER_COUNT :: 32;
D3D11_ERROR_DEFERRED_CONTEXT_MAP_WITHOUT_INITIAL_DISCARD :: cast, no_check(HRESULT) -2005139452;
D3D11_ERROR_FILE_NOT_FOUND :: cast, no_check(HRESULT) -2005139454;
D3D11_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS :: cast, no_check(HRESULT) -2005139455;
D3D11_ERROR_TOO_MANY_UNIQUE_VIEW_OBJECTS :: cast, no_check(HRESULT) -2005139453;
D3D11_FILTER_REDUCTION_TYPE_MASK :: 3;
D3D11_FILTER_REDUCTION_TYPE_SHIFT :: 7;
D3D11_FILTER_TYPE_MASK :: 3;
D3D11_FLOAT16_FUSED_TOLERANCE_IN_ULP :: 0.6;
D3D11_FLOAT32_MAX :: 340282349999999992000000000000000000000.0;
D3D11_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP :: 0.6;
D3D11_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR :: 2.4;
D3D11_FLOAT_TO_SRGB_EXPONENT_NUMERATOR :: 1.0;
D3D11_FLOAT_TO_SRGB_OFFSET :: 0.055;
D3D11_FLOAT_TO_SRGB_SCALE_1 :: 12.92;
D3D11_FLOAT_TO_SRGB_SCALE_2 :: 1.055;
D3D11_FLOAT_TO_SRGB_THRESHOLD :: 0.003131;
D3D11_FTOI_INSTRUCTION_MAX_INPUT :: 2147483600.0;
D3D11_FTOI_INSTRUCTION_MIN_INPUT :: -2147483600.0;
D3D11_FTOU_INSTRUCTION_MAX_INPUT :: 4294967300.0;
D3D11_FTOU_INSTRUCTION_MIN_INPUT :: 0.0;
D3D11_GS_INPUT_INSTANCE_ID_READS_PER_INST :: 2;
D3D11_GS_INPUT_INSTANCE_ID_READ_PORTS :: 1;
D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS :: 1;
D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COUNT :: 1;
D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS :: 1;
D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D11_GS_INPUT_PRIM_CONST_REGISTER_COUNT :: 1;
D3D11_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST :: 2;
D3D11_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS :: 1;
D3D11_GS_INPUT_REGISTER_COMPONENTS :: 4;
D3D11_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D11_GS_INPUT_REGISTER_COUNT :: 32;
D3D11_GS_INPUT_REGISTER_READS_PER_INST :: 2;
D3D11_GS_INPUT_REGISTER_READ_PORTS :: 1;
D3D11_GS_INPUT_REGISTER_VERTICES :: 32;
D3D11_GS_MAX_INSTANCE_COUNT :: 32;
D3D11_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES :: 1024;
D3D11_GS_OUTPUT_ELEMENTS :: 32;
D3D11_GS_OUTPUT_REGISTER_COMPONENTS :: 4;
D3D11_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D11_GS_OUTPUT_REGISTER_COUNT :: 32;
D3D11_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT :: 32;
D3D11_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT :: 32;
D3D11_HS_CONTROL_POINT_REGISTER_COMPONENTS :: 4;
D3D11_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D11_HS_CONTROL_POINT_REGISTER_READS_PER_INST :: 2;
D3D11_HS_CONTROL_POINT_REGISTER_READ_PORTS :: 1;
D3D11_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND :: 4294967295;
D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS :: 1;
D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT :: 1;
D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST :: 2;
D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS :: 1;
D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS :: 1;
D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT :: 1;
D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST :: 2;
D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS :: 1;
D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS :: 1;
D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT :: 1;
D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST :: 2;
D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS :: 1;
D3D11_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND :: 4294967295;
D3D11_HS_MAXTESSFACTOR_LOWER_BOUND :: 1.0;
D3D11_HS_MAXTESSFACTOR_UPPER_BOUND :: 64.0;
D3D11_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS :: 3968;
D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS :: 1;
D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT :: 1;
D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST :: 2;
D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS :: 1;
D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS :: 4;
D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT :: 32;
D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST :: 2;
D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS :: 1;
D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS :: 128;
D3D11_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES :: 0;
D3D11_IA_DEFAULT_PRIMITIVE_TOPOLOGY :: 0;
D3D11_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES :: 0;
D3D11_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT :: 1;
D3D11_IA_INSTANCE_ID_BIT_COUNT :: 32;
D3D11_IA_INTEGER_ARITHMETIC_BIT_COUNT :: 32;
D3D11_IA_PATCH_MAX_CONTROL_POINT_COUNT :: 32;
D3D11_IA_PRIMITIVE_ID_BIT_COUNT :: 32;
D3D11_IA_VERTEX_ID_BIT_COUNT :: 32;
D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT :: 32;
D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS :: 128;
D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT :: 32;
D3D11_INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT :: 1024;
D3D11_INTEGER_DIVIDE_BY_ZERO_QUOTIENT :: 4294967295;
D3D11_INTEGER_DIVIDE_BY_ZERO_REMAINDER :: 4294967295;
D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL :: 4294967295;
D3D11_KEEP_UNORDERED_ACCESS_VIEWS :: 4294967295;
D3D11_KEY_EXCHANGE_HW_PROTECTION :: "b1170d8a-628d-4da3-ad3b-82ddb08b4970";
D3D11_KEY_EXCHANGE_RSAES_OAEP :: "c1949895-d72a-4a1d-8e5d-ed857d171520";
D3D11_LINEAR_GAMMA :: 1.0;
D3D11_MAG_FILTER_SHIFT :: 2;
D3D11_MAJOR_VERSION :: 11;
D3D11_MAX_BORDER_COLOR_COMPONENT :: 1.0;
D3D11_MAX_DEPTH :: 1.0;
D3D11_MAX_MAXANISOTROPY :: 16;
D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT :: 32;
D3D11_MAX_POSITION_VALUE :: 34028235999999998700000000000000000.0;
D3D11_MAX_TEXTURE_DIMENSION_2_TO_EXP :: 17;
D3D11_MINOR_VERSION :: 0;
D3D11_MIN_BORDER_COLOR_COMPONENT :: 0.0;
D3D11_MIN_DEPTH :: 0.0;
D3D11_MIN_FILTER_SHIFT :: 4;
D3D11_MIN_MAXANISOTROPY :: 0;
D3D11_MIP_FILTER_SHIFT :: 0;
D3D11_MIP_LOD_BIAS_MAX :: 15.99;
D3D11_MIP_LOD_BIAS_MIN :: -16.0;
D3D11_MIP_LOD_FRACTIONAL_BIT_COUNT :: 8;
D3D11_MIP_LOD_RANGE_BIT_COUNT :: 8;
D3D11_MULTISAMPLE_ANTIALIAS_LINE_WIDTH :: 1.4;
D3D11_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT :: 0;
D3D11_PACKED_TILE :: 4294967295;
D3D11_PIXEL_ADDRESS_RANGE_BIT_COUNT :: 15;
D3D11_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT :: 16;
D3D11_PS_CS_UAV_REGISTER_COMPONENTS :: 1;
D3D11_PS_CS_UAV_REGISTER_COUNT :: 8;
D3D11_PS_CS_UAV_REGISTER_READS_PER_INST :: 1;
D3D11_PS_CS_UAV_REGISTER_READ_PORTS :: 1;
D3D11_PS_FRONTFACING_DEFAULT_VALUE :: 4294967295;
D3D11_PS_FRONTFACING_FALSE_VALUE :: 0;
D3D11_PS_FRONTFACING_TRUE_VALUE :: 4294967295;
D3D11_PS_INPUT_REGISTER_COMPONENTS :: 4;
D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D11_PS_INPUT_REGISTER_COUNT :: 32;
D3D11_PS_INPUT_REGISTER_READS_PER_INST :: 2;
D3D11_PS_INPUT_REGISTER_READ_PORTS :: 1;
D3D11_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT :: 0.0;
D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS :: 1;
D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT :: 1;
D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS :: 1;
D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D11_PS_OUTPUT_MASK_REGISTER_COUNT :: 1;
D3D11_PS_OUTPUT_REGISTER_COMPONENTS :: 4;
D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D11_PS_OUTPUT_REGISTER_COUNT :: 8;
D3D11_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT :: 0.5;
D3D11_RAW_UAV_SRV_BYTE_ALIGNMENT :: 16;
D3D11_REQ_BLEND_OBJECT_COUNT_PER_DEVICE :: 4096;
D3D11_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP :: 27;
D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT :: 4096;
D3D11_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE :: 4096;
D3D11_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP :: 32;
D3D11_REQ_DRAW_VERTEX_COUNT_2_TO_EXP :: 32;
D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION :: 16384;
D3D11_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT :: 1024;
D3D11_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT :: 4096;
D3D11_REQ_MAXANISOTROPY :: 16;
D3D11_REQ_MIP_LEVELS :: 15;
D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES :: 2048;
D3D11_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE :: 4096;
D3D11_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH :: 16384;
D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM :: 128;
D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM :: 0.25;
D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM :: 2048;
D3D11_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP :: 20;
D3D11_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE :: 4096;
D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION :: 2048;
D3D11_REQ_TEXTURE1D_U_DIMENSION :: 16384;
D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION :: 2048;
D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION :: 16384;
D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION :: 2048;
D3D11_REQ_TEXTURECUBE_DIMENSION :: 16384;
D3D11_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL :: 0;
D3D11_SDK_LAYERS_VERSION :: 1;
D3D11_SDK_VERSION :: 7;
D3D11_SHADER_MAJOR_VERSION :: 5;
D3D11_SHADER_MAX_INSTANCES :: 65535;
D3D11_SHADER_MAX_INTERFACES :: 253;
D3D11_SHADER_MAX_INTERFACE_CALL_SITES :: 4096;
D3D11_SHADER_MAX_TYPES :: 65535;
D3D11_SHADER_MINOR_VERSION :: 0;
D3D11_SHADER_TRACE_FLAG_RECORD_REGISTER_READS :: 2;
D3D11_SHADER_TRACE_FLAG_RECORD_REGISTER_WRITES :: 1;
D3D11_SHIFT_INSTRUCTION_PAD_VALUE :: 0;
D3D11_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT :: 5;
D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT :: 8;
D3D11_SO_BUFFER_MAX_STRIDE_IN_BYTES :: 2048;
D3D11_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES :: 512;
D3D11_SO_BUFFER_SLOT_COUNT :: 4;
D3D11_SO_DDI_REGISTER_INDEX_DENOTING_GAP :: 4294967295;
D3D11_SO_NO_RASTERIZED_STREAM :: 4294967295;
D3D11_SO_OUTPUT_COMPONENT_COUNT :: 128;
D3D11_SO_STREAM_COUNT :: 4;
D3D11_SPEC_DATE_DAY :: 16;
D3D11_SPEC_DATE_MONTH :: 5;
D3D11_SPEC_DATE_YEAR :: 2011;
D3D11_SPEC_VERSION :: 1.07;
D3D11_SRGB_GAMMA :: 2.2;
D3D11_SRGB_TO_FLOAT_DENOMINATOR_1 :: 12.92;
D3D11_SRGB_TO_FLOAT_DENOMINATOR_2 :: 1.055;
D3D11_SRGB_TO_FLOAT_EXPONENT :: 2.4;
D3D11_SRGB_TO_FLOAT_OFFSET :: 0.055;
D3D11_SRGB_TO_FLOAT_THRESHOLD :: 0.04045;
D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP :: 0.5;
D3D11_STANDARD_COMPONENT_BIT_COUNT :: 32;
D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED :: 64;
D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE :: 4;
D3D11_STANDARD_PIXEL_COMPONENT_COUNT :: 128;
D3D11_STANDARD_PIXEL_ELEMENT_COUNT :: 32;
D3D11_STANDARD_VECTOR_SIZE :: 4;
D3D11_STANDARD_VERTEX_ELEMENT_COUNT :: 32;
D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT :: 64;
D3D11_SUBPIXEL_FRACTIONAL_BIT_COUNT :: 8;
D3D11_SUBTEXEL_FRACTIONAL_BIT_COUNT :: 8;
D3D11_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR :: 64;
D3D11_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR :: 64;
D3D11_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR :: 63;
D3D11_TESSELLATOR_MAX_TESSELLATION_FACTOR :: 64;
D3D11_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR :: 2;
D3D11_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR :: 1;
D3D11_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR :: 1;
D3D11_TEXEL_ADDRESS_RANGE_BIT_COUNT :: 16;
D3D11_TRACE_COMPONENT_W :: 8;
D3D11_TRACE_COMPONENT_X :: 1;
D3D11_TRACE_COMPONENT_Y :: 2;
D3D11_TRACE_COMPONENT_Z :: 4;
D3D11_TRACE_MISC_GS_CUT :: 2;
D3D11_TRACE_MISC_GS_CUT_STREAM :: 16;
D3D11_TRACE_MISC_GS_EMIT :: 1;
D3D11_TRACE_MISC_GS_EMIT_STREAM :: 8;
D3D11_TRACE_MISC_HALT :: 32;
D3D11_TRACE_MISC_MESSAGE :: 64;
D3D11_TRACE_MISC_PS_DISCARD :: 4;
D3D11_TRACE_REGISTER_FLAGS_RELATIVE_INDEXING :: 1;
D3D11_UNBOUND_MEMORY_ACCESS_RESULT :: 0;
D3D11_VIEWPORT_AND_SCISSORRECT_MAX_INDEX :: 15;
D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE :: 16;
D3D11_VIEWPORT_BOUNDS_MAX :: 32767;
D3D11_VIEWPORT_BOUNDS_MIN :: -32768;
D3D11_VS_INPUT_REGISTER_COMPONENTS :: 4;
D3D11_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D11_VS_INPUT_REGISTER_COUNT :: 32;
D3D11_VS_INPUT_REGISTER_READS_PER_INST :: 2;
D3D11_VS_INPUT_REGISTER_READ_PORTS :: 1;
D3D11_VS_OUTPUT_REGISTER_COMPONENTS :: 4;
D3D11_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D11_VS_OUTPUT_REGISTER_COUNT :: 32;
D3D11_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT :: 10;
D3D11_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP :: 25;
D3D11_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP :: 25;
D3DX11_FFT_MAX_DIMENSIONS :: 32;
D3DX11_FFT_MAX_PRECOMPUTE_BUFFERS :: 4;
D3DX11_FFT_MAX_TEMP_BUFFERS :: 4;
_FACD3D11 :: 2172;

// Types

CD3D11_VIDEO_DEFAULT :: struct
{
}

D3D11_1_CREATE_DEVICE_CONTEXT_STATE_FLAG :: enum s32
{
    D3D11_1_CREATE_DEVICE_CONTEXT_STATE_SINGLETHREADED :: 1;
}

D3D11_1_CREATE_DEVICE_CONTEXT_STATE_SINGLETHREADED :: 1;

D3D11_AES_CTR_IV :: struct
{
    IV : u64;
    Count : u64;
}

D3D11_ASYNC_GETDATA_FLAG :: enum s32
{
    D3D11_ASYNC_GETDATA_DONOTFLUSH :: 1;
}

D3D11_ASYNC_GETDATA_DONOTFLUSH :: 1;

D3D11_AUTHENTICATED_CHANNEL_TYPE :: enum s32
{
    D3D11_AUTHENTICATED_CHANNEL_D3D11 :: 1;
    D3D11_AUTHENTICATED_CHANNEL_DRIVER_SOFTWARE :: 2;
    D3D11_AUTHENTICATED_CHANNEL_DRIVER_HARDWARE :: 3;
}

D3D11_AUTHENTICATED_CHANNEL_D3D11 :: 1;
D3D11_AUTHENTICATED_CHANNEL_DRIVER_SOFTWARE :: 2;
D3D11_AUTHENTICATED_CHANNEL_DRIVER_HARDWARE :: 3;

D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT :: struct
{
    Parameters : D3D11_AUTHENTICATED_CONFIGURE_INPUT;
    EncryptionGuid : GUID;
}

D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT :: struct
{
    Parameters : D3D11_AUTHENTICATED_CONFIGURE_INPUT;
    DecoderHandle : HANDLE;
    CryptoSessionHandle : HANDLE;
    DeviceHandle : HANDLE;
}

D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT :: struct
{
    Parameters : D3D11_AUTHENTICATED_CONFIGURE_INPUT;
    StartSequenceQuery : u32;
    StartSequenceConfigure : u32;
}

D3D11_AUTHENTICATED_CONFIGURE_INPUT :: struct
{
    omac : D3D11_OMAC;
    ConfigureType : GUID;
    hChannel : HANDLE;
    SequenceNumber : u32;
}

D3D11_AUTHENTICATED_CONFIGURE_OUTPUT :: struct
{
    omac : D3D11_OMAC;
    ConfigureType : GUID;
    hChannel : HANDLE;
    SequenceNumber : u32;
    ReturnCode : HRESULT;
}

D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT :: struct
{
    Parameters : D3D11_AUTHENTICATED_CONFIGURE_INPUT;
    Protections : D3D11_AUTHENTICATED_PROTECTION_FLAGS;
}

D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT :: struct
{
    Parameters : D3D11_AUTHENTICATED_CONFIGURE_INPUT;
    ProcessType : D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE;
    ProcessHandle : HANDLE;
    AllowAccess : BOOL;
}

D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE :: enum s32
{
    D3D11_PROCESSIDTYPE_UNKNOWN :: 0;
    D3D11_PROCESSIDTYPE_DWM :: 1;
    D3D11_PROCESSIDTYPE_HANDLE :: 2;
}

D3D11_PROCESSIDTYPE_UNKNOWN :: 0;
D3D11_PROCESSIDTYPE_DWM :: 1;
D3D11_PROCESSIDTYPE_HANDLE :: 2;

D3D11_AUTHENTICATED_PROTECTION_FLAGS :: union
{
    Flags : _Flags_e__Struct;
    Value : u32;

    _Flags_e__Struct :: struct
    {
        _bitfield : u32;
    }
}

D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT :: struct
{
    Output : D3D11_AUTHENTICATED_QUERY_OUTPUT;
    EncryptionGuidCount : u32;
}

D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT :: struct
{
    Input : D3D11_AUTHENTICATED_QUERY_INPUT;
    EncryptionGuidIndex : u32;
}

D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT :: struct
{
    Output : D3D11_AUTHENTICATED_QUERY_OUTPUT;
    EncryptionGuidIndex : u32;
    EncryptionGuid : GUID;
}

D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT :: struct
{
    Output : D3D11_AUTHENTICATED_QUERY_OUTPUT;
    BusType : D3D11_BUS_TYPE;
    AccessibleInContiguousBlocks : BOOL;
    AccessibleInNonContiguousBlocks : BOOL;
}

D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT :: struct
{
    Output : D3D11_AUTHENTICATED_QUERY_OUTPUT;
    ChannelType : D3D11_AUTHENTICATED_CHANNEL_TYPE;
}

D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT :: struct
{
    Input : D3D11_AUTHENTICATED_QUERY_INPUT;
    DecoderHandle : HANDLE;
}

D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT :: struct
{
    Output : D3D11_AUTHENTICATED_QUERY_OUTPUT;
    DecoderHandle : HANDLE;
    CryptoSessionHandle : HANDLE;
    DeviceHandle : HANDLE;
}

D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT :: struct
{
    Output : D3D11_AUTHENTICATED_QUERY_OUTPUT;
    EncryptionGuid : GUID;
}

D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT :: struct
{
    Output : D3D11_AUTHENTICATED_QUERY_OUTPUT;
    DeviceHandle : HANDLE;
}

D3D11_AUTHENTICATED_QUERY_INPUT :: struct
{
    QueryType : GUID;
    hChannel : HANDLE;
    SequenceNumber : u32;
}

D3D11_AUTHENTICATED_QUERY_OUTPUT :: struct
{
    omac : D3D11_OMAC;
    QueryType : GUID;
    hChannel : HANDLE;
    SequenceNumber : u32;
    ReturnCode : HRESULT;
}

D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT :: struct
{
    Input : D3D11_AUTHENTICATED_QUERY_INPUT;
    DeviceHandle : HANDLE;
    CryptoSessionHandle : HANDLE;
}

D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT :: struct
{
    Output : D3D11_AUTHENTICATED_QUERY_OUTPUT;
    DeviceHandle : HANDLE;
    CryptoSessionHandle : HANDLE;
    OutputIDCount : u32;
}

D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT :: struct
{
    Input : D3D11_AUTHENTICATED_QUERY_INPUT;
    DeviceHandle : HANDLE;
    CryptoSessionHandle : HANDLE;
    OutputIDIndex : u32;
}

D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT :: struct
{
    Output : D3D11_AUTHENTICATED_QUERY_OUTPUT;
    DeviceHandle : HANDLE;
    CryptoSessionHandle : HANDLE;
    OutputIDIndex : u32;
    OutputID : u64;
}

D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT :: struct
{
    Output : D3D11_AUTHENTICATED_QUERY_OUTPUT;
    ProtectionFlags : D3D11_AUTHENTICATED_PROTECTION_FLAGS;
}

D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT :: struct
{
    Output : D3D11_AUTHENTICATED_QUERY_OUTPUT;
    RestrictedSharedResourceProcessCount : u32;
}

D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT :: struct
{
    Input : D3D11_AUTHENTICATED_QUERY_INPUT;
    ProcessIndex : u32;
}

D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT :: struct
{
    Output : D3D11_AUTHENTICATED_QUERY_OUTPUT;
    ProcessIndex : u32;
    ProcessIdentifier : D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE;
    ProcessHandle : HANDLE;
}

D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT :: struct
{
    Output : D3D11_AUTHENTICATED_QUERY_OUTPUT;
    UnrestrictedProtectedSharedResourceCount : u32;
}

D3D11_BIND_FLAG :: enum_flags u32
{
    D3D11_BIND_VERTEX_BUFFER :: 1;
    D3D11_BIND_INDEX_BUFFER :: 2;
    D3D11_BIND_CONSTANT_BUFFER :: 4;
    D3D11_BIND_SHADER_RESOURCE :: 8;
    D3D11_BIND_STREAM_OUTPUT :: 16;
    D3D11_BIND_RENDER_TARGET :: 32;
    D3D11_BIND_DEPTH_STENCIL :: 64;
    D3D11_BIND_UNORDERED_ACCESS :: 128;
    D3D11_BIND_DECODER :: 512;
    D3D11_BIND_VIDEO_ENCODER :: 1024;
}

D3D11_BIND_VERTEX_BUFFER :: 1;
D3D11_BIND_INDEX_BUFFER :: 2;
D3D11_BIND_CONSTANT_BUFFER :: 4;
D3D11_BIND_SHADER_RESOURCE :: 8;
D3D11_BIND_STREAM_OUTPUT :: 16;
D3D11_BIND_RENDER_TARGET :: 32;
D3D11_BIND_DEPTH_STENCIL :: 64;
D3D11_BIND_UNORDERED_ACCESS :: 128;
D3D11_BIND_DECODER :: 512;
D3D11_BIND_VIDEO_ENCODER :: 1024;

D3D11_BLEND :: enum s32
{
    ZERO :: 1;
    ONE :: 2;
    SRC_COLOR :: 3;
    INV_SRC_COLOR :: 4;
    SRC_ALPHA :: 5;
    INV_SRC_ALPHA :: 6;
    DEST_ALPHA :: 7;
    INV_DEST_ALPHA :: 8;
    DEST_COLOR :: 9;
    INV_DEST_COLOR :: 10;
    SRC_ALPHA_SAT :: 11;
    BLEND_FACTOR :: 14;
    INV_BLEND_FACTOR :: 15;
    SRC1_COLOR :: 16;
    INV_SRC1_COLOR :: 17;
    SRC1_ALPHA :: 18;
    INV_SRC1_ALPHA :: 19;
}

D3D11_BLEND_ZERO :: 1;
D3D11_BLEND_ONE :: 2;
D3D11_BLEND_SRC_COLOR :: 3;
D3D11_BLEND_INV_SRC_COLOR :: 4;
D3D11_BLEND_SRC_ALPHA :: 5;
D3D11_BLEND_INV_SRC_ALPHA :: 6;
D3D11_BLEND_DEST_ALPHA :: 7;
D3D11_BLEND_INV_DEST_ALPHA :: 8;
D3D11_BLEND_DEST_COLOR :: 9;
D3D11_BLEND_INV_DEST_COLOR :: 10;
D3D11_BLEND_SRC_ALPHA_SAT :: 11;
D3D11_BLEND_BLEND_FACTOR :: 14;
D3D11_BLEND_INV_BLEND_FACTOR :: 15;
D3D11_BLEND_SRC1_COLOR :: 16;
D3D11_BLEND_INV_SRC1_COLOR :: 17;
D3D11_BLEND_SRC1_ALPHA :: 18;
D3D11_BLEND_INV_SRC1_ALPHA :: 19;

D3D11_BLEND_DESC :: struct
{
    AlphaToCoverageEnable : BOOL;
    IndependentBlendEnable : BOOL;
    RenderTarget : [8]D3D11_RENDER_TARGET_BLEND_DESC;
}

D3D11_BLEND_DESC1 :: struct
{
    AlphaToCoverageEnable : BOOL;
    IndependentBlendEnable : BOOL;
    RenderTarget : [8]D3D11_RENDER_TARGET_BLEND_DESC1;
}

D3D11_BLEND_OP :: enum s32
{
    ADD :: 1;
    SUBTRACT :: 2;
    REV_SUBTRACT :: 3;
    MIN :: 4;
    MAX :: 5;
}

D3D11_BLEND_OP_ADD :: 1;
D3D11_BLEND_OP_SUBTRACT :: 2;
D3D11_BLEND_OP_REV_SUBTRACT :: 3;
D3D11_BLEND_OP_MIN :: 4;
D3D11_BLEND_OP_MAX :: 5;

D3D11_BOX :: struct
{
    left : u32;
    top : u32;
    front : u32;
    right : u32;
    bottom : u32;
    back : u32;
}

D3D11_BUFFEREX_SRV :: struct
{
    FirstElement : u32;
    NumElements : u32;
    Flags : u32;
}

D3D11_BUFFEREX_SRV_FLAG :: enum s32
{
    RAW :: 1;
}

D3D11_BUFFEREX_SRV_FLAG_RAW :: 1;

D3D11_BUFFER_DESC :: struct
{
    ByteWidth : u32;
    Usage : D3D11_USAGE;
    BindFlags : u32;
    CPUAccessFlags : u32;
    MiscFlags : u32;
    StructureByteStride : u32;
}

D3D11_BUFFER_RTV :: struct
{
    union
    {
        FirstElement : u32;
        ElementOffset : u32;
    }; // Anonymous
    union
    {
        NumElements : u32;
        ElementWidth : u32;
    }; // Anonymous
}

D3D11_BUFFER_SRV :: struct
{
    union
    {
        FirstElement : u32;
        ElementOffset : u32;
    }; // Anonymous
    union
    {
        NumElements : u32;
        ElementWidth : u32;
    }; // Anonymous
}

D3D11_BUFFER_UAV :: struct
{
    FirstElement : u32;
    NumElements : u32;
    Flags : u32;
}

D3D11_BUFFER_UAV_FLAG :: enum s32
{
    RAW :: 1;
    APPEND :: 2;
    COUNTER :: 4;
}

D3D11_BUFFER_UAV_FLAG_RAW :: 1;
D3D11_BUFFER_UAV_FLAG_APPEND :: 2;
D3D11_BUFFER_UAV_FLAG_COUNTER :: 4;

D3D11_BUS_TYPE :: enum s32
{
    OTHER :: 0;
    PCI :: 1;
    PCIX :: 2;
    PCIEXPRESS :: 3;
    AGP :: 4;
    D3D11_BUS_IMPL_MODIFIER_INSIDE_OF_CHIPSET :: 65536;
    D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP :: 131072;
    D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET :: 196608;
    D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR :: 262144;
    D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE :: 327680;
    D3D11_BUS_IMPL_MODIFIER_NON_STANDARD :: -2147483648;
}

D3D11_BUS_TYPE_OTHER :: 0;
D3D11_BUS_TYPE_PCI :: 1;
D3D11_BUS_TYPE_PCIX :: 2;
D3D11_BUS_TYPE_PCIEXPRESS :: 3;
D3D11_BUS_TYPE_AGP :: 4;
D3D11_BUS_IMPL_MODIFIER_INSIDE_OF_CHIPSET :: 65536;
D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP :: 131072;
D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET :: 196608;
D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR :: 262144;
D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE :: 327680;
D3D11_BUS_IMPL_MODIFIER_NON_STANDARD :: -2147483648;

D3D11_CHECK_MULTISAMPLE_QUALITY_LEVELS_FLAG :: enum s32
{
    D3D11_CHECK_MULTISAMPLE_QUALITY_LEVELS_TILED_RESOURCE :: 1;
}

D3D11_CHECK_MULTISAMPLE_QUALITY_LEVELS_TILED_RESOURCE :: 1;

D3D11_CLASS_INSTANCE_DESC :: struct
{
    InstanceId : u32;
    InstanceIndex : u32;
    TypeId : u32;
    ConstantBuffer : u32;
    BaseConstantBufferOffset : u32;
    BaseTexture : u32;
    BaseSampler : u32;
    Created : BOOL;
}

D3D11_CLEAR_FLAG :: enum s32
{
    D3D11_CLEAR_DEPTH :: 1;
    D3D11_CLEAR_STENCIL :: 2;
}

D3D11_CLEAR_DEPTH :: 1;
D3D11_CLEAR_STENCIL :: 2;

D3D11_COLOR_WRITE_ENABLE :: enum s32
{
    RED :: 1;
    GREEN :: 2;
    BLUE :: 4;
    ALPHA :: 8;
    ALL :: 15;
}

D3D11_COLOR_WRITE_ENABLE_RED :: 1;
D3D11_COLOR_WRITE_ENABLE_GREEN :: 2;
D3D11_COLOR_WRITE_ENABLE_BLUE :: 4;
D3D11_COLOR_WRITE_ENABLE_ALPHA :: 8;
D3D11_COLOR_WRITE_ENABLE_ALL :: 15;

D3D11_COMPARISON_FUNC :: enum s32
{
    D3D11_COMPARISON_NEVER :: 1;
    D3D11_COMPARISON_LESS :: 2;
    D3D11_COMPARISON_EQUAL :: 3;
    D3D11_COMPARISON_LESS_EQUAL :: 4;
    D3D11_COMPARISON_GREATER :: 5;
    D3D11_COMPARISON_NOT_EQUAL :: 6;
    D3D11_COMPARISON_GREATER_EQUAL :: 7;
    D3D11_COMPARISON_ALWAYS :: 8;
}

D3D11_COMPARISON_NEVER :: 1;
D3D11_COMPARISON_LESS :: 2;
D3D11_COMPARISON_EQUAL :: 3;
D3D11_COMPARISON_LESS_EQUAL :: 4;
D3D11_COMPARISON_GREATER :: 5;
D3D11_COMPARISON_NOT_EQUAL :: 6;
D3D11_COMPARISON_GREATER_EQUAL :: 7;
D3D11_COMPARISON_ALWAYS :: 8;

D3D11_COMPUTE_SHADER_TRACE_DESC :: struct
{
    Invocation : u64;
    ThreadIDInGroup : [3]u32;
    ThreadGroupID : [3]u32;
}

D3D11_CONSERVATIVE_RASTERIZATION_MODE :: enum s32
{
    OFF :: 0;
    ON :: 1;
}

D3D11_CONSERVATIVE_RASTERIZATION_MODE_OFF :: 0;
D3D11_CONSERVATIVE_RASTERIZATION_MODE_ON :: 1;

D3D11_CONSERVATIVE_RASTERIZATION_TIER :: enum s32
{
    D3D11_CONSERVATIVE_RASTERIZATION_NOT_SUPPORTED :: 0;
    _1 :: 1;
    _2 :: 2;
    _3 :: 3;
}

D3D11_CONSERVATIVE_RASTERIZATION_NOT_SUPPORTED :: 0;
D3D11_CONSERVATIVE_RASTERIZATION_TIER_1 :: 1;
D3D11_CONSERVATIVE_RASTERIZATION_TIER_2 :: 2;
D3D11_CONSERVATIVE_RASTERIZATION_TIER_3 :: 3;

D3D11_CONTENT_PROTECTION_CAPS :: enum s32
{
    SOFTWARE :: 1;
    HARDWARE :: 2;
    PROTECTION_ALWAYS_ON :: 4;
    PARTIAL_DECRYPTION :: 8;
    CONTENT_KEY :: 16;
    FRESHEN_SESSION_KEY :: 32;
    ENCRYPTED_READ_BACK :: 64;
    ENCRYPTED_READ_BACK_KEY :: 128;
    SEQUENTIAL_CTR_IV :: 256;
    ENCRYPT_SLICEDATA_ONLY :: 512;
    DECRYPTION_BLT :: 1024;
    HARDWARE_PROTECT_UNCOMPRESSED :: 2048;
    HARDWARE_PROTECTED_MEMORY_PAGEABLE :: 4096;
    HARDWARE_TEARDOWN :: 8192;
    HARDWARE_DRM_COMMUNICATION :: 16384;
    HARDWARE_DRM_COMMUNICATION_MULTI_THREADED :: 32768;
}

D3D11_CONTENT_PROTECTION_CAPS_SOFTWARE :: 1;
D3D11_CONTENT_PROTECTION_CAPS_HARDWARE :: 2;
D3D11_CONTENT_PROTECTION_CAPS_PROTECTION_ALWAYS_ON :: 4;
D3D11_CONTENT_PROTECTION_CAPS_PARTIAL_DECRYPTION :: 8;
D3D11_CONTENT_PROTECTION_CAPS_CONTENT_KEY :: 16;
D3D11_CONTENT_PROTECTION_CAPS_FRESHEN_SESSION_KEY :: 32;
D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK :: 64;
D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK_KEY :: 128;
D3D11_CONTENT_PROTECTION_CAPS_SEQUENTIAL_CTR_IV :: 256;
D3D11_CONTENT_PROTECTION_CAPS_ENCRYPT_SLICEDATA_ONLY :: 512;
D3D11_CONTENT_PROTECTION_CAPS_DECRYPTION_BLT :: 1024;
D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECT_UNCOMPRESSED :: 2048;
D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECTED_MEMORY_PAGEABLE :: 4096;
D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_TEARDOWN :: 8192;
D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION :: 16384;
D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION_MULTI_THREADED :: 32768;

D3D11_CONTEXT_TYPE :: enum s32
{
    ALL :: 0;
    _3D :: 1;
    COMPUTE :: 2;
    COPY :: 3;
    VIDEO :: 4;
}

D3D11_CONTEXT_TYPE_ALL :: 0;
D3D11_CONTEXT_TYPE_3D :: 1;
D3D11_CONTEXT_TYPE_COMPUTE :: 2;
D3D11_CONTEXT_TYPE_COPY :: 3;
D3D11_CONTEXT_TYPE_VIDEO :: 4;

D3D11_COPY_FLAGS :: enum s32
{
    NO_OVERWRITE :: 1;
    DISCARD :: 2;
}

D3D11_COPY_NO_OVERWRITE :: 1;
D3D11_COPY_DISCARD :: 2;

D3D11_COUNTER :: enum s32
{
    DEVICE_DEPENDENT_0 :: 1073741824;
}

D3D11_COUNTER_DEVICE_DEPENDENT_0 :: 1073741824;

D3D11_COUNTER_DESC :: struct
{
    Counter : D3D11_COUNTER;
    MiscFlags : u32;
}

D3D11_COUNTER_INFO :: struct
{
    LastDeviceDependentCounter : D3D11_COUNTER;
    NumSimultaneousCounters : u32;
    NumDetectableParallelUnits : u8;
}

D3D11_COUNTER_TYPE :: enum s32
{
    FLOAT32 :: 0;
    UINT16 :: 1;
    UINT32 :: 2;
    UINT64 :: 3;
}

D3D11_COUNTER_TYPE_FLOAT32 :: 0;
D3D11_COUNTER_TYPE_UINT16 :: 1;
D3D11_COUNTER_TYPE_UINT32 :: 2;
D3D11_COUNTER_TYPE_UINT64 :: 3;

D3D11_CPU_ACCESS_FLAG :: enum_flags u32
{
    D3D11_CPU_ACCESS_WRITE :: 65536;
    D3D11_CPU_ACCESS_READ :: 131072;
}

D3D11_CPU_ACCESS_WRITE :: 65536;
D3D11_CPU_ACCESS_READ :: 131072;

D3D11_CREATE_DEVICE_FLAG :: enum_flags u32
{
    D3D11_CREATE_DEVICE_SINGLETHREADED :: 1;
    D3D11_CREATE_DEVICE_DEBUG :: 2;
    D3D11_CREATE_DEVICE_SWITCH_TO_REF :: 4;
    D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS :: 8;
    D3D11_CREATE_DEVICE_BGRA_SUPPORT :: 32;
    D3D11_CREATE_DEVICE_DEBUGGABLE :: 64;
    D3D11_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY :: 128;
    D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT :: 256;
    D3D11_CREATE_DEVICE_VIDEO_SUPPORT :: 2048;
}

D3D11_CREATE_DEVICE_SINGLETHREADED :: 1;
D3D11_CREATE_DEVICE_DEBUG :: 2;
D3D11_CREATE_DEVICE_SWITCH_TO_REF :: 4;
D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS :: 8;
D3D11_CREATE_DEVICE_BGRA_SUPPORT :: 32;
D3D11_CREATE_DEVICE_DEBUGGABLE :: 64;
D3D11_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY :: 128;
D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT :: 256;
D3D11_CREATE_DEVICE_VIDEO_SUPPORT :: 2048;

D3D11_CRYPTO_SESSION_KEY_EXCHANGE_FLAGS :: enum_flags u32
{
    NONE :: 0;
}

D3D11_CRYPTO_SESSION_KEY_EXCHANGE_FLAG_NONE :: 0;

D3D11_CRYPTO_SESSION_STATUS :: enum s32
{
    OK :: 0;
    KEY_LOST :: 1;
    KEY_AND_CONTENT_LOST :: 2;
}

D3D11_CRYPTO_SESSION_STATUS_OK :: 0;
D3D11_CRYPTO_SESSION_STATUS_KEY_LOST :: 1;
D3D11_CRYPTO_SESSION_STATUS_KEY_AND_CONTENT_LOST :: 2;

D3D11_CULL_MODE :: enum s32
{
    D3D11_CULL_NONE :: 1;
    D3D11_CULL_FRONT :: 2;
    D3D11_CULL_BACK :: 3;
}

D3D11_CULL_NONE :: 1;
D3D11_CULL_FRONT :: 2;
D3D11_CULL_BACK :: 3;

D3D11_DEPTH_STENCILOP_DESC :: struct
{
    StencilFailOp : D3D11_STENCIL_OP;
    StencilDepthFailOp : D3D11_STENCIL_OP;
    StencilPassOp : D3D11_STENCIL_OP;
    StencilFunc : D3D11_COMPARISON_FUNC;
}

D3D11_DEPTH_STENCIL_DESC :: struct
{
    DepthEnable : BOOL;
    DepthWriteMask : D3D11_DEPTH_WRITE_MASK;
    DepthFunc : D3D11_COMPARISON_FUNC;
    StencilEnable : BOOL;
    StencilReadMask : u8;
    StencilWriteMask : u8;
    FrontFace : D3D11_DEPTH_STENCILOP_DESC;
    BackFace : D3D11_DEPTH_STENCILOP_DESC;
}

D3D11_DEPTH_STENCIL_VIEW_DESC :: struct
{
    Format : DXGI_FORMAT;
    ViewDimension : D3D11_DSV_DIMENSION;
    Flags : u32;
    union
    {
        Texture1D : D3D11_TEX1D_DSV;
        Texture1DArray : D3D11_TEX1D_ARRAY_DSV;
        Texture2D : D3D11_TEX2D_DSV;
        Texture2DArray : D3D11_TEX2D_ARRAY_DSV;
        Texture2DMS : D3D11_TEX2DMS_DSV;
        Texture2DMSArray : D3D11_TEX2DMS_ARRAY_DSV;
    }; // Anonymous
}

D3D11_DEPTH_WRITE_MASK :: enum s32
{
    ZERO :: 0;
    ALL :: 1;
}

D3D11_DEPTH_WRITE_MASK_ZERO :: 0;
D3D11_DEPTH_WRITE_MASK_ALL :: 1;

D3D11_DEVICE_CONTEXT_TYPE :: enum s32
{
    D3D11_DEVICE_CONTEXT_IMMEDIATE :: 0;
    D3D11_DEVICE_CONTEXT_DEFERRED :: 1;
}

D3D11_DEVICE_CONTEXT_IMMEDIATE :: 0;
D3D11_DEVICE_CONTEXT_DEFERRED :: 1;

D3D11_DOMAIN_SHADER_TRACE_DESC :: struct
{
    Invocation : u64;
}

D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS :: struct
{
    IndexCountPerInstance : u32;
    InstanceCount : u32;
    StartIndexLocation : u32;
    BaseVertexLocation : s32;
    StartInstanceLocation : u32;
}

D3D11_DRAW_INSTANCED_INDIRECT_ARGS :: struct
{
    VertexCountPerInstance : u32;
    InstanceCount : u32;
    StartVertexLocation : u32;
    StartInstanceLocation : u32;
}

D3D11_DSV_DIMENSION :: enum s32
{
    UNKNOWN :: 0;
    TEXTURE1D :: 1;
    TEXTURE1DARRAY :: 2;
    TEXTURE2D :: 3;
    TEXTURE2DARRAY :: 4;
    TEXTURE2DMS :: 5;
    TEXTURE2DMSARRAY :: 6;
}

D3D11_DSV_DIMENSION_UNKNOWN :: 0;
D3D11_DSV_DIMENSION_TEXTURE1D :: 1;
D3D11_DSV_DIMENSION_TEXTURE1DARRAY :: 2;
D3D11_DSV_DIMENSION_TEXTURE2D :: 3;
D3D11_DSV_DIMENSION_TEXTURE2DARRAY :: 4;
D3D11_DSV_DIMENSION_TEXTURE2DMS :: 5;
D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY :: 6;

D3D11_DSV_FLAG :: enum s32
{
    D3D11_DSV_READ_ONLY_DEPTH :: 1;
    D3D11_DSV_READ_ONLY_STENCIL :: 2;
}

D3D11_DSV_READ_ONLY_DEPTH :: 1;
D3D11_DSV_READ_ONLY_STENCIL :: 2;

D3D11_ENCRYPTED_BLOCK_INFO :: struct
{
    NumEncryptedBytesAtBeginning : u32;
    NumBytesInSkipPattern : u32;
    NumBytesInEncryptPattern : u32;
}

D3D11_FEATURE :: enum s32
{
    THREADING :: 0;
    DOUBLES :: 1;
    FORMAT_SUPPORT :: 2;
    FORMAT_SUPPORT2 :: 3;
    D3D10_X_HARDWARE_OPTIONS :: 4;
    D3D11_OPTIONS :: 5;
    ARCHITECTURE_INFO :: 6;
    D3D9_OPTIONS :: 7;
    SHADER_MIN_PRECISION_SUPPORT :: 8;
    D3D9_SHADOW_SUPPORT :: 9;
    D3D11_OPTIONS1 :: 10;
    D3D9_SIMPLE_INSTANCING_SUPPORT :: 11;
    MARKER_SUPPORT :: 12;
    D3D9_OPTIONS1 :: 13;
    D3D11_OPTIONS2 :: 14;
    D3D11_OPTIONS3 :: 15;
    GPU_VIRTUAL_ADDRESS_SUPPORT :: 16;
    D3D11_OPTIONS4 :: 17;
    SHADER_CACHE :: 18;
    D3D11_OPTIONS5 :: 19;
    DISPLAYABLE :: 20;
}

D3D11_FEATURE_THREADING :: 0;
D3D11_FEATURE_DOUBLES :: 1;
D3D11_FEATURE_FORMAT_SUPPORT :: 2;
D3D11_FEATURE_FORMAT_SUPPORT2 :: 3;
D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS :: 4;
D3D11_FEATURE_D3D11_OPTIONS :: 5;
D3D11_FEATURE_ARCHITECTURE_INFO :: 6;
D3D11_FEATURE_D3D9_OPTIONS :: 7;
D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT :: 8;
D3D11_FEATURE_D3D9_SHADOW_SUPPORT :: 9;
D3D11_FEATURE_D3D11_OPTIONS1 :: 10;
D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT :: 11;
D3D11_FEATURE_MARKER_SUPPORT :: 12;
D3D11_FEATURE_D3D9_OPTIONS1 :: 13;
D3D11_FEATURE_D3D11_OPTIONS2 :: 14;
D3D11_FEATURE_D3D11_OPTIONS3 :: 15;
D3D11_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT :: 16;
D3D11_FEATURE_D3D11_OPTIONS4 :: 17;
D3D11_FEATURE_SHADER_CACHE :: 18;
D3D11_FEATURE_D3D11_OPTIONS5 :: 19;
D3D11_FEATURE_DISPLAYABLE :: 20;

D3D11_FEATURE_DATA_ARCHITECTURE_INFO :: struct
{
    TileBasedDeferredRenderer : BOOL;
}

D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS :: struct
{
    ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x : BOOL;
}

D3D11_FEATURE_DATA_D3D11_OPTIONS :: struct
{
    OutputMergerLogicOp : BOOL;
    UAVOnlyRenderingForcedSampleCount : BOOL;
    DiscardAPIsSeenByDriver : BOOL;
    FlagsForUpdateAndCopySeenByDriver : BOOL;
    ClearView : BOOL;
    CopyWithOverlap : BOOL;
    ConstantBufferPartialUpdate : BOOL;
    ConstantBufferOffsetting : BOOL;
    MapNoOverwriteOnDynamicConstantBuffer : BOOL;
    MapNoOverwriteOnDynamicBufferSRV : BOOL;
    MultisampleRTVWithForcedSampleCountOne : BOOL;
    SAD4ShaderInstructions : BOOL;
    ExtendedDoublesShaderInstructions : BOOL;
    ExtendedResourceSharing : BOOL;
}

D3D11_FEATURE_DATA_D3D11_OPTIONS1 :: struct
{
    TiledResourcesTier : D3D11_TILED_RESOURCES_TIER;
    MinMaxFiltering : BOOL;
    ClearViewAlsoSupportsDepthOnlyFormats : BOOL;
    MapOnDefaultBuffers : BOOL;
}

D3D11_FEATURE_DATA_D3D11_OPTIONS2 :: struct
{
    PSSpecifiedStencilRefSupported : BOOL;
    TypedUAVLoadAdditionalFormats : BOOL;
    ROVsSupported : BOOL;
    ConservativeRasterizationTier : D3D11_CONSERVATIVE_RASTERIZATION_TIER;
    TiledResourcesTier : D3D11_TILED_RESOURCES_TIER;
    MapOnDefaultTextures : BOOL;
    StandardSwizzle : BOOL;
    UnifiedMemoryArchitecture : BOOL;
}

D3D11_FEATURE_DATA_D3D11_OPTIONS3 :: struct
{
    VPAndRTArrayIndexFromAnyShaderFeedingRasterizer : BOOL;
}

D3D11_FEATURE_DATA_D3D11_OPTIONS4 :: struct
{
    ExtendedNV12SharedTextureSupported : BOOL;
}

D3D11_FEATURE_DATA_D3D11_OPTIONS5 :: struct
{
    SharedResourceTier : D3D11_SHARED_RESOURCE_TIER;
}

D3D11_FEATURE_DATA_D3D9_OPTIONS :: struct
{
    FullNonPow2TextureSupport : BOOL;
}

D3D11_FEATURE_DATA_D3D9_OPTIONS1 :: struct
{
    FullNonPow2TextureSupported : BOOL;
    DepthAsTextureWithLessEqualComparisonFilterSupported : BOOL;
    SimpleInstancingSupported : BOOL;
    TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported : BOOL;
}

D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT :: struct
{
    SupportsDepthAsTextureWithLessEqualComparisonFilter : BOOL;
}

D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT :: struct
{
    SimpleInstancingSupported : BOOL;
}

D3D11_FEATURE_DATA_DISPLAYABLE :: struct
{
    DisplayableTexture : BOOL;
    SharedResourceTier : D3D11_SHARED_RESOURCE_TIER;
}

D3D11_FEATURE_DATA_DOUBLES :: struct
{
    DoublePrecisionFloatShaderOps : BOOL;
}

D3D11_FEATURE_DATA_FORMAT_SUPPORT :: struct
{
    InFormat : DXGI_FORMAT;
    OutFormatSupport : u32;
}

D3D11_FEATURE_DATA_FORMAT_SUPPORT2 :: struct
{
    InFormat : DXGI_FORMAT;
    OutFormatSupport2 : u32;
}

D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT :: struct
{
    MaxGPUVirtualAddressBitsPerResource : u32;
    MaxGPUVirtualAddressBitsPerProcess : u32;
}

D3D11_FEATURE_DATA_MARKER_SUPPORT :: struct
{
    Profile : BOOL;
}

D3D11_FEATURE_DATA_SHADER_CACHE :: struct
{
    SupportFlags : u32;
}

D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT :: struct
{
    PixelShaderMinPrecision : u32;
    AllOtherShaderStagesMinPrecision : u32;
}

D3D11_FEATURE_DATA_THREADING :: struct
{
    DriverConcurrentCreates : BOOL;
    DriverCommandLists : BOOL;
}

D3D11_FEATURE_DATA_VIDEO_DECODER_HISTOGRAM :: struct
{
    DecoderDesc : D3D11_VIDEO_DECODER_DESC;
    Components : D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS;
    BinCount : u32;
    CounterBitDepth : u32;
}

D3D11_FEATURE_VIDEO :: enum s32
{
    DECODER_HISTOGRAM :: 0;
}

D3D11_FEATURE_VIDEO_DECODER_HISTOGRAM :: 0;

D3D11_FENCE_FLAG :: enum_flags u32
{
    NONE :: 0;
    SHARED :: 2;
    SHARED_CROSS_ADAPTER :: 4;
    NON_MONITORED :: 8;
}

D3D11_FENCE_FLAG_NONE :: 0;
D3D11_FENCE_FLAG_SHARED :: 2;
D3D11_FENCE_FLAG_SHARED_CROSS_ADAPTER :: 4;
D3D11_FENCE_FLAG_NON_MONITORED :: 8;

D3D11_FILL_MODE :: enum s32
{
    D3D11_FILL_WIREFRAME :: 2;
    D3D11_FILL_SOLID :: 3;
}

D3D11_FILL_WIREFRAME :: 2;
D3D11_FILL_SOLID :: 3;

D3D11_FILTER :: enum s32
{
    MIN_MAG_MIP_POINT :: 0;
    MIN_MAG_POINT_MIP_LINEAR :: 1;
    MIN_POINT_MAG_LINEAR_MIP_POINT :: 4;
    MIN_POINT_MAG_MIP_LINEAR :: 5;
    MIN_LINEAR_MAG_MIP_POINT :: 16;
    MIN_LINEAR_MAG_POINT_MIP_LINEAR :: 17;
    MIN_MAG_LINEAR_MIP_POINT :: 20;
    MIN_MAG_MIP_LINEAR :: 21;
    ANISOTROPIC :: 85;
    COMPARISON_MIN_MAG_MIP_POINT :: 128;
    COMPARISON_MIN_MAG_POINT_MIP_LINEAR :: 129;
    COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT :: 132;
    COMPARISON_MIN_POINT_MAG_MIP_LINEAR :: 133;
    COMPARISON_MIN_LINEAR_MAG_MIP_POINT :: 144;
    COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR :: 145;
    COMPARISON_MIN_MAG_LINEAR_MIP_POINT :: 148;
    COMPARISON_MIN_MAG_MIP_LINEAR :: 149;
    COMPARISON_ANISOTROPIC :: 213;
    MINIMUM_MIN_MAG_MIP_POINT :: 256;
    MINIMUM_MIN_MAG_POINT_MIP_LINEAR :: 257;
    MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT :: 260;
    MINIMUM_MIN_POINT_MAG_MIP_LINEAR :: 261;
    MINIMUM_MIN_LINEAR_MAG_MIP_POINT :: 272;
    MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR :: 273;
    MINIMUM_MIN_MAG_LINEAR_MIP_POINT :: 276;
    MINIMUM_MIN_MAG_MIP_LINEAR :: 277;
    MINIMUM_ANISOTROPIC :: 341;
    MAXIMUM_MIN_MAG_MIP_POINT :: 384;
    MAXIMUM_MIN_MAG_POINT_MIP_LINEAR :: 385;
    MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT :: 388;
    MAXIMUM_MIN_POINT_MAG_MIP_LINEAR :: 389;
    MAXIMUM_MIN_LINEAR_MAG_MIP_POINT :: 400;
    MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR :: 401;
    MAXIMUM_MIN_MAG_LINEAR_MIP_POINT :: 404;
    MAXIMUM_MIN_MAG_MIP_LINEAR :: 405;
    MAXIMUM_ANISOTROPIC :: 469;
}

D3D11_FILTER_MIN_MAG_MIP_POINT :: 0;
D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR :: 1;
D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT :: 4;
D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR :: 5;
D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT :: 16;
D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR :: 17;
D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT :: 20;
D3D11_FILTER_MIN_MAG_MIP_LINEAR :: 21;
D3D11_FILTER_ANISOTROPIC :: 85;
D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT :: 128;
D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR :: 129;
D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT :: 132;
D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR :: 133;
D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT :: 144;
D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR :: 145;
D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT :: 148;
D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR :: 149;
D3D11_FILTER_COMPARISON_ANISOTROPIC :: 213;
D3D11_FILTER_MINIMUM_MIN_MAG_MIP_POINT :: 256;
D3D11_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR :: 257;
D3D11_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT :: 260;
D3D11_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR :: 261;
D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT :: 272;
D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR :: 273;
D3D11_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT :: 276;
D3D11_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR :: 277;
D3D11_FILTER_MINIMUM_ANISOTROPIC :: 341;
D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_POINT :: 384;
D3D11_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR :: 385;
D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT :: 388;
D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR :: 389;
D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT :: 400;
D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR :: 401;
D3D11_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT :: 404;
D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR :: 405;
D3D11_FILTER_MAXIMUM_ANISOTROPIC :: 469;

D3D11_FILTER_REDUCTION_TYPE :: enum s32
{
    STANDARD :: 0;
    COMPARISON :: 1;
    MINIMUM :: 2;
    MAXIMUM :: 3;
}

D3D11_FILTER_REDUCTION_TYPE_STANDARD :: 0;
D3D11_FILTER_REDUCTION_TYPE_COMPARISON :: 1;
D3D11_FILTER_REDUCTION_TYPE_MINIMUM :: 2;
D3D11_FILTER_REDUCTION_TYPE_MAXIMUM :: 3;

D3D11_FILTER_TYPE :: enum s32
{
    POINT :: 0;
    LINEAR :: 1;
}

D3D11_FILTER_TYPE_POINT :: 0;
D3D11_FILTER_TYPE_LINEAR :: 1;

D3D11_FORMAT_SUPPORT :: enum s32
{
    BUFFER :: 1;
    IA_VERTEX_BUFFER :: 2;
    IA_INDEX_BUFFER :: 4;
    SO_BUFFER :: 8;
    TEXTURE1D :: 16;
    TEXTURE2D :: 32;
    TEXTURE3D :: 64;
    TEXTURECUBE :: 128;
    SHADER_LOAD :: 256;
    SHADER_SAMPLE :: 512;
    SHADER_SAMPLE_COMPARISON :: 1024;
    SHADER_SAMPLE_MONO_TEXT :: 2048;
    MIP :: 4096;
    MIP_AUTOGEN :: 8192;
    RENDER_TARGET :: 16384;
    BLENDABLE :: 32768;
    DEPTH_STENCIL :: 65536;
    CPU_LOCKABLE :: 131072;
    MULTISAMPLE_RESOLVE :: 262144;
    DISPLAY :: 524288;
    CAST_WITHIN_BIT_LAYOUT :: 1048576;
    MULTISAMPLE_RENDERTARGET :: 2097152;
    MULTISAMPLE_LOAD :: 4194304;
    SHADER_GATHER :: 8388608;
    BACK_BUFFER_CAST :: 16777216;
    TYPED_UNORDERED_ACCESS_VIEW :: 33554432;
    SHADER_GATHER_COMPARISON :: 67108864;
    DECODER_OUTPUT :: 134217728;
    VIDEO_PROCESSOR_OUTPUT :: 268435456;
    VIDEO_PROCESSOR_INPUT :: 536870912;
    VIDEO_ENCODER :: 1073741824;
}

D3D11_FORMAT_SUPPORT_BUFFER :: 1;
D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER :: 2;
D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER :: 4;
D3D11_FORMAT_SUPPORT_SO_BUFFER :: 8;
D3D11_FORMAT_SUPPORT_TEXTURE1D :: 16;
D3D11_FORMAT_SUPPORT_TEXTURE2D :: 32;
D3D11_FORMAT_SUPPORT_TEXTURE3D :: 64;
D3D11_FORMAT_SUPPORT_TEXTURECUBE :: 128;
D3D11_FORMAT_SUPPORT_SHADER_LOAD :: 256;
D3D11_FORMAT_SUPPORT_SHADER_SAMPLE :: 512;
D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON :: 1024;
D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT :: 2048;
D3D11_FORMAT_SUPPORT_MIP :: 4096;
D3D11_FORMAT_SUPPORT_MIP_AUTOGEN :: 8192;
D3D11_FORMAT_SUPPORT_RENDER_TARGET :: 16384;
D3D11_FORMAT_SUPPORT_BLENDABLE :: 32768;
D3D11_FORMAT_SUPPORT_DEPTH_STENCIL :: 65536;
D3D11_FORMAT_SUPPORT_CPU_LOCKABLE :: 131072;
D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE :: 262144;
D3D11_FORMAT_SUPPORT_DISPLAY :: 524288;
D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT :: 1048576;
D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET :: 2097152;
D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD :: 4194304;
D3D11_FORMAT_SUPPORT_SHADER_GATHER :: 8388608;
D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST :: 16777216;
D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW :: 33554432;
D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON :: 67108864;
D3D11_FORMAT_SUPPORT_DECODER_OUTPUT :: 134217728;
D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_OUTPUT :: 268435456;
D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_INPUT :: 536870912;
D3D11_FORMAT_SUPPORT_VIDEO_ENCODER :: 1073741824;

D3D11_FORMAT_SUPPORT2 :: enum s32
{
    UAV_ATOMIC_ADD :: 1;
    UAV_ATOMIC_BITWISE_OPS :: 2;
    UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE :: 4;
    UAV_ATOMIC_EXCHANGE :: 8;
    UAV_ATOMIC_SIGNED_MIN_OR_MAX :: 16;
    UAV_ATOMIC_UNSIGNED_MIN_OR_MAX :: 32;
    UAV_TYPED_LOAD :: 64;
    UAV_TYPED_STORE :: 128;
    OUTPUT_MERGER_LOGIC_OP :: 256;
    TILED :: 512;
    SHAREABLE :: 1024;
    MULTIPLANE_OVERLAY :: 16384;
}

D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD :: 1;
D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS :: 2;
D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE :: 4;
D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE :: 8;
D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX :: 16;
D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX :: 32;
D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD :: 64;
D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE :: 128;
D3D11_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP :: 256;
D3D11_FORMAT_SUPPORT2_TILED :: 512;
D3D11_FORMAT_SUPPORT2_SHAREABLE :: 1024;
D3D11_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY :: 16384;

D3D11_FUNCTION_DESC :: struct
{
    Version : u32;
    Creator : PSTR; // Const
    Flags : u32;
    ConstantBuffers : u32;
    BoundResources : u32;
    InstructionCount : u32;
    TempRegisterCount : u32;
    TempArrayCount : u32;
    DefCount : u32;
    DclCount : u32;
    TextureNormalInstructions : u32;
    TextureLoadInstructions : u32;
    TextureCompInstructions : u32;
    TextureBiasInstructions : u32;
    TextureGradientInstructions : u32;
    FloatInstructionCount : u32;
    IntInstructionCount : u32;
    UintInstructionCount : u32;
    StaticFlowControlCount : u32;
    DynamicFlowControlCount : u32;
    MacroInstructionCount : u32;
    ArrayInstructionCount : u32;
    MovInstructionCount : u32;
    MovcInstructionCount : u32;
    ConversionInstructionCount : u32;
    BitwiseInstructionCount : u32;
    MinFeatureLevel : D3D_FEATURE_LEVEL;
    RequiredFeatureFlags : u64;
    Name : PSTR; // Const
    FunctionParameterCount : s32;
    HasReturn : BOOL;
    Has10Level9VertexShader : BOOL;
    Has10Level9PixelShader : BOOL;
}

D3D11_GEOMETRY_SHADER_TRACE_DESC :: struct
{
    Invocation : u64;
}

D3D11_HULL_SHADER_TRACE_DESC :: struct
{
    Invocation : u64;
}

D3D11_INFO_QUEUE_FILTER :: struct
{
    AllowList : D3D11_INFO_QUEUE_FILTER_DESC;
    DenyList : D3D11_INFO_QUEUE_FILTER_DESC;
}

D3D11_INFO_QUEUE_FILTER_DESC :: struct
{
    NumCategories : u32;
    pCategoryList : *D3D11_MESSAGE_CATEGORY;
    NumSeverities : u32;
    pSeverityList : *D3D11_MESSAGE_SEVERITY;
    NumIDs : u32;
    pIDList : *D3D11_MESSAGE_ID;
}

D3D11_INPUT_CLASSIFICATION :: enum s32
{
    D3D11_INPUT_PER_VERTEX_DATA :: 0;
    D3D11_INPUT_PER_INSTANCE_DATA :: 1;
}

D3D11_INPUT_PER_VERTEX_DATA :: 0;
D3D11_INPUT_PER_INSTANCE_DATA :: 1;

D3D11_INPUT_ELEMENT_DESC :: struct
{
    SemanticName : PSTR; // Const
    SemanticIndex : u32;
    Format : DXGI_FORMAT;
    InputSlot : u32;
    AlignedByteOffset : u32;
    InputSlotClass : D3D11_INPUT_CLASSIFICATION;
    InstanceDataStepRate : u32;
}

D3D11_KEY_EXCHANGE_HW_PROTECTION_DATA :: struct
{
    HWProtectionFunctionID : u32;
    pInputData : *D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA;
    pOutputData : *D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA;
    Status : HRESULT;
}

D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA :: struct
{
    PrivateDataSize : u32;
    HWProtectionDataSize : u32;
    pbInput : [4]u8;
}

D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA :: struct
{
    PrivateDataSize : u32;
    MaxHWProtectionDataSize : u32;
    HWProtectionDataSize : u32;
    TransportTime : u64;
    ExecutionTime : u64;
    pbOutput : [4]u8;
}

D3D11_LIBRARY_DESC :: struct
{
    Creator : PSTR; // Const
    Flags : u32;
    FunctionCount : u32;
}

D3D11_LOGIC_OP :: enum s32
{
    CLEAR :: 0;
    SET :: 1;
    COPY :: 2;
    COPY_INVERTED :: 3;
    NOOP :: 4;
    INVERT :: 5;
    AND :: 6;
    NAND :: 7;
    OR :: 8;
    NOR :: 9;
    XOR :: 10;
    EQUIV :: 11;
    AND_REVERSE :: 12;
    AND_INVERTED :: 13;
    OR_REVERSE :: 14;
    OR_INVERTED :: 15;
}

D3D11_LOGIC_OP_CLEAR :: 0;
D3D11_LOGIC_OP_SET :: 1;
D3D11_LOGIC_OP_COPY :: 2;
D3D11_LOGIC_OP_COPY_INVERTED :: 3;
D3D11_LOGIC_OP_NOOP :: 4;
D3D11_LOGIC_OP_INVERT :: 5;
D3D11_LOGIC_OP_AND :: 6;
D3D11_LOGIC_OP_NAND :: 7;
D3D11_LOGIC_OP_OR :: 8;
D3D11_LOGIC_OP_NOR :: 9;
D3D11_LOGIC_OP_XOR :: 10;
D3D11_LOGIC_OP_EQUIV :: 11;
D3D11_LOGIC_OP_AND_REVERSE :: 12;
D3D11_LOGIC_OP_AND_INVERTED :: 13;
D3D11_LOGIC_OP_OR_REVERSE :: 14;
D3D11_LOGIC_OP_OR_INVERTED :: 15;

D3D11_MAP :: enum s32
{
    READ :: 1;
    WRITE :: 2;
    READ_WRITE :: 3;
    WRITE_DISCARD :: 4;
    WRITE_NO_OVERWRITE :: 5;
}

D3D11_MAP_READ :: 1;
D3D11_MAP_WRITE :: 2;
D3D11_MAP_READ_WRITE :: 3;
D3D11_MAP_WRITE_DISCARD :: 4;
D3D11_MAP_WRITE_NO_OVERWRITE :: 5;

D3D11_MAPPED_SUBRESOURCE :: struct
{
    pData : *void;
    RowPitch : u32;
    DepthPitch : u32;
}

D3D11_MAP_FLAG :: enum s32
{
    DO_NOT_WAIT :: 1048576;
}

D3D11_MAP_FLAG_DO_NOT_WAIT :: 1048576;

D3D11_MESSAGE :: struct
{
    Category : D3D11_MESSAGE_CATEGORY;
    Severity : D3D11_MESSAGE_SEVERITY;
    ID : D3D11_MESSAGE_ID;
    pDescription : *u8; // Const
    DescriptionByteLength : u64;
}

D3D11_MESSAGE_CATEGORY :: enum s32
{
    APPLICATION_DEFINED :: 0;
    MISCELLANEOUS :: 1;
    INITIALIZATION :: 2;
    CLEANUP :: 3;
    COMPILATION :: 4;
    STATE_CREATION :: 5;
    STATE_SETTING :: 6;
    STATE_GETTING :: 7;
    RESOURCE_MANIPULATION :: 8;
    EXECUTION :: 9;
    SHADER :: 10;
}

D3D11_MESSAGE_CATEGORY_APPLICATION_DEFINED :: 0;
D3D11_MESSAGE_CATEGORY_MISCELLANEOUS :: 1;
D3D11_MESSAGE_CATEGORY_INITIALIZATION :: 2;
D3D11_MESSAGE_CATEGORY_CLEANUP :: 3;
D3D11_MESSAGE_CATEGORY_COMPILATION :: 4;
D3D11_MESSAGE_CATEGORY_STATE_CREATION :: 5;
D3D11_MESSAGE_CATEGORY_STATE_SETTING :: 6;
D3D11_MESSAGE_CATEGORY_STATE_GETTING :: 7;
D3D11_MESSAGE_CATEGORY_RESOURCE_MANIPULATION :: 8;
D3D11_MESSAGE_CATEGORY_EXECUTION :: 9;
D3D11_MESSAGE_CATEGORY_SHADER :: 10;

D3D11_MESSAGE_ID :: enum s32
{
    UNKNOWN :: 0;
    DEVICE_IASETVERTEXBUFFERS_HAZARD :: 1;
    DEVICE_IASETINDEXBUFFER_HAZARD :: 2;
    DEVICE_VSSETSHADERRESOURCES_HAZARD :: 3;
    DEVICE_VSSETCONSTANTBUFFERS_HAZARD :: 4;
    DEVICE_GSSETSHADERRESOURCES_HAZARD :: 5;
    DEVICE_GSSETCONSTANTBUFFERS_HAZARD :: 6;
    DEVICE_PSSETSHADERRESOURCES_HAZARD :: 7;
    DEVICE_PSSETCONSTANTBUFFERS_HAZARD :: 8;
    DEVICE_OMSETRENDERTARGETS_HAZARD :: 9;
    DEVICE_SOSETTARGETS_HAZARD :: 10;
    STRING_FROM_APPLICATION :: 11;
    CORRUPTED_THIS :: 12;
    CORRUPTED_PARAMETER1 :: 13;
    CORRUPTED_PARAMETER2 :: 14;
    CORRUPTED_PARAMETER3 :: 15;
    CORRUPTED_PARAMETER4 :: 16;
    CORRUPTED_PARAMETER5 :: 17;
    CORRUPTED_PARAMETER6 :: 18;
    CORRUPTED_PARAMETER7 :: 19;
    CORRUPTED_PARAMETER8 :: 20;
    CORRUPTED_PARAMETER9 :: 21;
    CORRUPTED_PARAMETER10 :: 22;
    CORRUPTED_PARAMETER11 :: 23;
    CORRUPTED_PARAMETER12 :: 24;
    CORRUPTED_PARAMETER13 :: 25;
    CORRUPTED_PARAMETER14 :: 26;
    CORRUPTED_PARAMETER15 :: 27;
    CORRUPTED_MULTITHREADING :: 28;
    MESSAGE_REPORTING_OUTOFMEMORY :: 29;
    IASETINPUTLAYOUT_UNBINDDELETINGOBJECT :: 30;
    IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT :: 31;
    IASETINDEXBUFFER_UNBINDDELETINGOBJECT :: 32;
    VSSETSHADER_UNBINDDELETINGOBJECT :: 33;
    VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT :: 34;
    VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT :: 35;
    VSSETSAMPLERS_UNBINDDELETINGOBJECT :: 36;
    GSSETSHADER_UNBINDDELETINGOBJECT :: 37;
    GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT :: 38;
    GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT :: 39;
    GSSETSAMPLERS_UNBINDDELETINGOBJECT :: 40;
    SOSETTARGETS_UNBINDDELETINGOBJECT :: 41;
    PSSETSHADER_UNBINDDELETINGOBJECT :: 42;
    PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT :: 43;
    PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT :: 44;
    PSSETSAMPLERS_UNBINDDELETINGOBJECT :: 45;
    RSSETSTATE_UNBINDDELETINGOBJECT :: 46;
    OMSETBLENDSTATE_UNBINDDELETINGOBJECT :: 47;
    OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT :: 48;
    OMSETRENDERTARGETS_UNBINDDELETINGOBJECT :: 49;
    SETPREDICATION_UNBINDDELETINGOBJECT :: 50;
    GETPRIVATEDATA_MOREDATA :: 51;
    SETPRIVATEDATA_INVALIDFREEDATA :: 52;
    SETPRIVATEDATA_INVALIDIUNKNOWN :: 53;
    SETPRIVATEDATA_INVALIDFLAGS :: 54;
    SETPRIVATEDATA_CHANGINGPARAMS :: 55;
    SETPRIVATEDATA_OUTOFMEMORY :: 56;
    CREATEBUFFER_UNRECOGNIZEDFORMAT :: 57;
    CREATEBUFFER_INVALIDSAMPLES :: 58;
    CREATEBUFFER_UNRECOGNIZEDUSAGE :: 59;
    CREATEBUFFER_UNRECOGNIZEDBINDFLAGS :: 60;
    CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS :: 61;
    CREATEBUFFER_UNRECOGNIZEDMISCFLAGS :: 62;
    CREATEBUFFER_INVALIDCPUACCESSFLAGS :: 63;
    CREATEBUFFER_INVALIDBINDFLAGS :: 64;
    CREATEBUFFER_INVALIDINITIALDATA :: 65;
    CREATEBUFFER_INVALIDDIMENSIONS :: 66;
    CREATEBUFFER_INVALIDMIPLEVELS :: 67;
    CREATEBUFFER_INVALIDMISCFLAGS :: 68;
    CREATEBUFFER_INVALIDARG_RETURN :: 69;
    CREATEBUFFER_OUTOFMEMORY_RETURN :: 70;
    CREATEBUFFER_NULLDESC :: 71;
    CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS :: 72;
    CREATEBUFFER_LARGEALLOCATION :: 73;
    CREATETEXTURE1D_UNRECOGNIZEDFORMAT :: 74;
    CREATETEXTURE1D_UNSUPPORTEDFORMAT :: 75;
    CREATETEXTURE1D_INVALIDSAMPLES :: 76;
    CREATETEXTURE1D_UNRECOGNIZEDUSAGE :: 77;
    CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS :: 78;
    CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS :: 79;
    CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS :: 80;
    CREATETEXTURE1D_INVALIDCPUACCESSFLAGS :: 81;
    CREATETEXTURE1D_INVALIDBINDFLAGS :: 82;
    CREATETEXTURE1D_INVALIDINITIALDATA :: 83;
    CREATETEXTURE1D_INVALIDDIMENSIONS :: 84;
    CREATETEXTURE1D_INVALIDMIPLEVELS :: 85;
    CREATETEXTURE1D_INVALIDMISCFLAGS :: 86;
    CREATETEXTURE1D_INVALIDARG_RETURN :: 87;
    CREATETEXTURE1D_OUTOFMEMORY_RETURN :: 88;
    CREATETEXTURE1D_NULLDESC :: 89;
    CREATETEXTURE1D_LARGEALLOCATION :: 90;
    CREATETEXTURE2D_UNRECOGNIZEDFORMAT :: 91;
    CREATETEXTURE2D_UNSUPPORTEDFORMAT :: 92;
    CREATETEXTURE2D_INVALIDSAMPLES :: 93;
    CREATETEXTURE2D_UNRECOGNIZEDUSAGE :: 94;
    CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS :: 95;
    CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS :: 96;
    CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS :: 97;
    CREATETEXTURE2D_INVALIDCPUACCESSFLAGS :: 98;
    CREATETEXTURE2D_INVALIDBINDFLAGS :: 99;
    CREATETEXTURE2D_INVALIDINITIALDATA :: 100;
    CREATETEXTURE2D_INVALIDDIMENSIONS :: 101;
    CREATETEXTURE2D_INVALIDMIPLEVELS :: 102;
    CREATETEXTURE2D_INVALIDMISCFLAGS :: 103;
    CREATETEXTURE2D_INVALIDARG_RETURN :: 104;
    CREATETEXTURE2D_OUTOFMEMORY_RETURN :: 105;
    CREATETEXTURE2D_NULLDESC :: 106;
    CREATETEXTURE2D_LARGEALLOCATION :: 107;
    CREATETEXTURE3D_UNRECOGNIZEDFORMAT :: 108;
    CREATETEXTURE3D_UNSUPPORTEDFORMAT :: 109;
    CREATETEXTURE3D_INVALIDSAMPLES :: 110;
    CREATETEXTURE3D_UNRECOGNIZEDUSAGE :: 111;
    CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS :: 112;
    CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS :: 113;
    CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS :: 114;
    CREATETEXTURE3D_INVALIDCPUACCESSFLAGS :: 115;
    CREATETEXTURE3D_INVALIDBINDFLAGS :: 116;
    CREATETEXTURE3D_INVALIDINITIALDATA :: 117;
    CREATETEXTURE3D_INVALIDDIMENSIONS :: 118;
    CREATETEXTURE3D_INVALIDMIPLEVELS :: 119;
    CREATETEXTURE3D_INVALIDMISCFLAGS :: 120;
    CREATETEXTURE3D_INVALIDARG_RETURN :: 121;
    CREATETEXTURE3D_OUTOFMEMORY_RETURN :: 122;
    CREATETEXTURE3D_NULLDESC :: 123;
    CREATETEXTURE3D_LARGEALLOCATION :: 124;
    CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT :: 125;
    CREATESHADERRESOURCEVIEW_INVALIDDESC :: 126;
    CREATESHADERRESOURCEVIEW_INVALIDFORMAT :: 127;
    CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS :: 128;
    CREATESHADERRESOURCEVIEW_INVALIDRESOURCE :: 129;
    CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS :: 130;
    CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN :: 131;
    CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN :: 132;
    CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT :: 133;
    CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT :: 134;
    CREATERENDERTARGETVIEW_INVALIDDESC :: 135;
    CREATERENDERTARGETVIEW_INVALIDFORMAT :: 136;
    CREATERENDERTARGETVIEW_INVALIDDIMENSIONS :: 137;
    CREATERENDERTARGETVIEW_INVALIDRESOURCE :: 138;
    CREATERENDERTARGETVIEW_TOOMANYOBJECTS :: 139;
    CREATERENDERTARGETVIEW_INVALIDARG_RETURN :: 140;
    CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN :: 141;
    CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT :: 142;
    CREATEDEPTHSTENCILVIEW_INVALIDDESC :: 143;
    CREATEDEPTHSTENCILVIEW_INVALIDFORMAT :: 144;
    CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS :: 145;
    CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE :: 146;
    CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS :: 147;
    CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN :: 148;
    CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN :: 149;
    CREATEINPUTLAYOUT_OUTOFMEMORY :: 150;
    CREATEINPUTLAYOUT_TOOMANYELEMENTS :: 151;
    CREATEINPUTLAYOUT_INVALIDFORMAT :: 152;
    CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT :: 153;
    CREATEINPUTLAYOUT_INVALIDSLOT :: 154;
    CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS :: 155;
    CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH :: 156;
    CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE :: 157;
    CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE :: 158;
    CREATEINPUTLAYOUT_INVALIDALIGNMENT :: 159;
    CREATEINPUTLAYOUT_DUPLICATESEMANTIC :: 160;
    CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE :: 161;
    CREATEINPUTLAYOUT_NULLSEMANTIC :: 162;
    CREATEINPUTLAYOUT_MISSINGELEMENT :: 163;
    CREATEINPUTLAYOUT_NULLDESC :: 164;
    CREATEVERTEXSHADER_OUTOFMEMORY :: 165;
    CREATEVERTEXSHADER_INVALIDSHADERBYTECODE :: 166;
    CREATEVERTEXSHADER_INVALIDSHADERTYPE :: 167;
    CREATEGEOMETRYSHADER_OUTOFMEMORY :: 168;
    CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE :: 169;
    CREATEGEOMETRYSHADER_INVALIDSHADERTYPE :: 170;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY :: 171;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE :: 172;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE :: 173;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES :: 174;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED :: 175;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL :: 176;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL :: 177;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED :: 178;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT :: 179;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT :: 180;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT :: 181;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT :: 182;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION :: 183;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT :: 184;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE :: 185;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC :: 186;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH :: 187;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS :: 188;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX :: 189;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE :: 190;
    CREATEPIXELSHADER_OUTOFMEMORY :: 191;
    CREATEPIXELSHADER_INVALIDSHADERBYTECODE :: 192;
    CREATEPIXELSHADER_INVALIDSHADERTYPE :: 193;
    CREATERASTERIZERSTATE_INVALIDFILLMODE :: 194;
    CREATERASTERIZERSTATE_INVALIDCULLMODE :: 195;
    CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP :: 196;
    CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS :: 197;
    CREATERASTERIZERSTATE_TOOMANYOBJECTS :: 198;
    CREATERASTERIZERSTATE_NULLDESC :: 199;
    CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK :: 200;
    CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC :: 201;
    CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP :: 202;
    CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP :: 203;
    CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP :: 204;
    CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC :: 205;
    CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP :: 206;
    CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP :: 207;
    CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP :: 208;
    CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC :: 209;
    CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS :: 210;
    CREATEDEPTHSTENCILSTATE_NULLDESC :: 211;
    CREATEBLENDSTATE_INVALIDSRCBLEND :: 212;
    CREATEBLENDSTATE_INVALIDDESTBLEND :: 213;
    CREATEBLENDSTATE_INVALIDBLENDOP :: 214;
    CREATEBLENDSTATE_INVALIDSRCBLENDALPHA :: 215;
    CREATEBLENDSTATE_INVALIDDESTBLENDALPHA :: 216;
    CREATEBLENDSTATE_INVALIDBLENDOPALPHA :: 217;
    CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK :: 218;
    CREATEBLENDSTATE_TOOMANYOBJECTS :: 219;
    CREATEBLENDSTATE_NULLDESC :: 220;
    CREATESAMPLERSTATE_INVALIDFILTER :: 221;
    CREATESAMPLERSTATE_INVALIDADDRESSU :: 222;
    CREATESAMPLERSTATE_INVALIDADDRESSV :: 223;
    CREATESAMPLERSTATE_INVALIDADDRESSW :: 224;
    CREATESAMPLERSTATE_INVALIDMIPLODBIAS :: 225;
    CREATESAMPLERSTATE_INVALIDMAXANISOTROPY :: 226;
    CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC :: 227;
    CREATESAMPLERSTATE_INVALIDMINLOD :: 228;
    CREATESAMPLERSTATE_INVALIDMAXLOD :: 229;
    CREATESAMPLERSTATE_TOOMANYOBJECTS :: 230;
    CREATESAMPLERSTATE_NULLDESC :: 231;
    CREATEQUERYORPREDICATE_INVALIDQUERY :: 232;
    CREATEQUERYORPREDICATE_INVALIDMISCFLAGS :: 233;
    CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG :: 234;
    CREATEQUERYORPREDICATE_NULLDESC :: 235;
    DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED :: 236;
    DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED :: 237;
    IASETVERTEXBUFFERS_INVALIDBUFFER :: 238;
    DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE :: 239;
    DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY :: 240;
    IASETINDEXBUFFER_INVALIDBUFFER :: 241;
    DEVICE_IASETINDEXBUFFER_FORMAT_INVALID :: 242;
    DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE :: 243;
    DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED :: 244;
    DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY :: 245;
    VSSETCONSTANTBUFFERS_INVALIDBUFFER :: 246;
    DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY :: 247;
    DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY :: 248;
    DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY :: 249;
    GSSETCONSTANTBUFFERS_INVALIDBUFFER :: 250;
    DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY :: 251;
    DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY :: 252;
    SOSETTARGETS_INVALIDBUFFER :: 253;
    DEVICE_SOSETTARGETS_OFFSET_UNALIGNED :: 254;
    DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY :: 255;
    PSSETCONSTANTBUFFERS_INVALIDBUFFER :: 256;
    DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY :: 257;
    DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY :: 258;
    DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT :: 259;
    DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR :: 260;
    CLEARRENDERTARGETVIEW_DENORMFLUSH :: 261;
    CLEARDEPTHSTENCILVIEW_DENORMFLUSH :: 262;
    CLEARDEPTHSTENCILVIEW_INVALID :: 263;
    DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY :: 264;
    DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY :: 265;
    DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY :: 266;
    DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY :: 267;
    DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY :: 268;
    DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY :: 269;
    DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY :: 270;
    DEVICE_SOGETTARGETS_BUFFERS_EMPTY :: 271;
    DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY :: 272;
    DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY :: 273;
    DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY :: 274;
    DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY :: 275;
    DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY :: 276;
    DEVICE_GENERATEMIPS_RESOURCE_INVALID :: 277;
    COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE :: 278;
    COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE :: 279;
    COPYSUBRESOURCEREGION_INVALIDSOURCEBOX :: 280;
    COPYSUBRESOURCEREGION_INVALIDSOURCE :: 281;
    COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE :: 282;
    COPYSUBRESOURCEREGION_INVALIDSOURCESTATE :: 283;
    COPYRESOURCE_INVALIDSOURCE :: 284;
    COPYRESOURCE_INVALIDDESTINATIONSTATE :: 285;
    COPYRESOURCE_INVALIDSOURCESTATE :: 286;
    UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE :: 287;
    UPDATESUBRESOURCE_INVALIDDESTINATIONBOX :: 288;
    UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE :: 289;
    DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID :: 290;
    DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID :: 291;
    DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID :: 292;
    DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID :: 293;
    DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID :: 294;
    BUFFER_MAP_INVALIDMAPTYPE :: 295;
    BUFFER_MAP_INVALIDFLAGS :: 296;
    BUFFER_MAP_ALREADYMAPPED :: 297;
    BUFFER_MAP_DEVICEREMOVED_RETURN :: 298;
    BUFFER_UNMAP_NOTMAPPED :: 299;
    TEXTURE1D_MAP_INVALIDMAPTYPE :: 300;
    TEXTURE1D_MAP_INVALIDSUBRESOURCE :: 301;
    TEXTURE1D_MAP_INVALIDFLAGS :: 302;
    TEXTURE1D_MAP_ALREADYMAPPED :: 303;
    TEXTURE1D_MAP_DEVICEREMOVED_RETURN :: 304;
    TEXTURE1D_UNMAP_INVALIDSUBRESOURCE :: 305;
    TEXTURE1D_UNMAP_NOTMAPPED :: 306;
    TEXTURE2D_MAP_INVALIDMAPTYPE :: 307;
    TEXTURE2D_MAP_INVALIDSUBRESOURCE :: 308;
    TEXTURE2D_MAP_INVALIDFLAGS :: 309;
    TEXTURE2D_MAP_ALREADYMAPPED :: 310;
    TEXTURE2D_MAP_DEVICEREMOVED_RETURN :: 311;
    TEXTURE2D_UNMAP_INVALIDSUBRESOURCE :: 312;
    TEXTURE2D_UNMAP_NOTMAPPED :: 313;
    TEXTURE3D_MAP_INVALIDMAPTYPE :: 314;
    TEXTURE3D_MAP_INVALIDSUBRESOURCE :: 315;
    TEXTURE3D_MAP_INVALIDFLAGS :: 316;
    TEXTURE3D_MAP_ALREADYMAPPED :: 317;
    TEXTURE3D_MAP_DEVICEREMOVED_RETURN :: 318;
    TEXTURE3D_UNMAP_INVALIDSUBRESOURCE :: 319;
    TEXTURE3D_UNMAP_NOTMAPPED :: 320;
    CHECKFORMATSUPPORT_FORMAT_DEPRECATED :: 321;
    CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED :: 322;
    SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS :: 323;
    SETEXCEPTIONMODE_INVALIDARG_RETURN :: 324;
    SETEXCEPTIONMODE_DEVICEREMOVED_RETURN :: 325;
    REF_SIMULATING_INFINITELY_FAST_HARDWARE :: 326;
    REF_THREADING_MODE :: 327;
    REF_UMDRIVER_EXCEPTION :: 328;
    REF_KMDRIVER_EXCEPTION :: 329;
    REF_HARDWARE_EXCEPTION :: 330;
    REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE :: 331;
    REF_PROBLEM_PARSING_SHADER :: 332;
    REF_OUT_OF_MEMORY :: 333;
    REF_INFO :: 334;
    DEVICE_DRAW_VERTEXPOS_OVERFLOW :: 335;
    DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW :: 336;
    DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW :: 337;
    DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW :: 338;
    DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW :: 339;
    DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW :: 340;
    DEVICE_DRAW_VERTEX_SHADER_NOT_SET :: 341;
    DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND :: 342;
    DEVICE_SHADER_LINKAGE_REGISTERINDEX :: 343;
    DEVICE_SHADER_LINKAGE_COMPONENTTYPE :: 344;
    DEVICE_SHADER_LINKAGE_REGISTERMASK :: 345;
    DEVICE_SHADER_LINKAGE_SYSTEMVALUE :: 346;
    DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS :: 347;
    DEVICE_DRAW_VERTEX_BUFFER_NOT_SET :: 348;
    DEVICE_DRAW_INPUTLAYOUT_NOT_SET :: 349;
    DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET :: 350;
    DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL :: 351;
    DEVICE_DRAW_SAMPLER_NOT_SET :: 352;
    DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET :: 353;
    DEVICE_DRAW_VIEW_DIMENSION_MISMATCH :: 354;
    DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL :: 355;
    DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL :: 356;
    DEVICE_DRAW_INDEX_BUFFER_NOT_SET :: 357;
    DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID :: 358;
    DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL :: 359;
    DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH :: 360;
    DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH :: 361;
    DEVICE_DRAW_POSITION_NOT_PRESENT :: 362;
    DEVICE_DRAW_OUTPUT_STREAM_NOT_SET :: 363;
    DEVICE_DRAW_BOUND_RESOURCE_MAPPED :: 364;
    DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY :: 365;
    DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED :: 366;
    DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED :: 367;
    DEVICE_DRAW_INDEX_OFFSET_UNALIGNED :: 368;
    DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED :: 369;
    DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED :: 370;
    DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED :: 371;
    DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED :: 372;
    DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED :: 373;
    DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE :: 374;
    DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER :: 375;
    DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING :: 376;
    DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 :: 377;
    DEVICE_REMOVAL_PROCESS_AT_FAULT :: 378;
    DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT :: 379;
    DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT :: 380;
    DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN :: 381;
    DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN :: 382;
    DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN :: 383;
    DEVICE_DRAW_VIEWPORT_NOT_SET :: 384;
    CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC :: 385;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC :: 386;
    DEVICE_RSSETVIEWPORTS_DENORMFLUSH :: 387;
    OMSETRENDERTARGETS_INVALIDVIEW :: 388;
    DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS :: 389;
    DEVICE_DRAW_SAMPLER_MISMATCH :: 390;
    CREATEINPUTLAYOUT_TYPE_MISMATCH :: 391;
    BLENDSTATE_GETDESC_LEGACY :: 392;
    SHADERRESOURCEVIEW_GETDESC_LEGACY :: 393;
    CREATEQUERY_OUTOFMEMORY_RETURN :: 394;
    CREATEPREDICATE_OUTOFMEMORY_RETURN :: 395;
    CREATECOUNTER_OUTOFRANGE_COUNTER :: 396;
    CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED :: 397;
    CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER :: 398;
    CREATECOUNTER_OUTOFMEMORY_RETURN :: 399;
    CREATECOUNTER_NONEXCLUSIVE_RETURN :: 400;
    CREATECOUNTER_NULLDESC :: 401;
    CHECKCOUNTER_OUTOFRANGE_COUNTER :: 402;
    CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER :: 403;
    SETPREDICATION_INVALID_PREDICATE_STATE :: 404;
    QUERY_BEGIN_UNSUPPORTED :: 405;
    PREDICATE_BEGIN_DURING_PREDICATION :: 406;
    QUERY_BEGIN_DUPLICATE :: 407;
    QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS :: 408;
    PREDICATE_END_DURING_PREDICATION :: 409;
    QUERY_END_ABANDONING_PREVIOUS_RESULTS :: 410;
    QUERY_END_WITHOUT_BEGIN :: 411;
    QUERY_GETDATA_INVALID_DATASIZE :: 412;
    QUERY_GETDATA_INVALID_FLAGS :: 413;
    QUERY_GETDATA_INVALID_CALL :: 414;
    DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH :: 415;
    DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED :: 416;
    DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN :: 417;
    DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE :: 418;
    DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE :: 419;
    CREATEINPUTLAYOUT_EMPTY_LAYOUT :: 420;
    DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH :: 421;
    LIVE_OBJECT_SUMMARY :: 422;
    LIVE_BUFFER :: 423;
    LIVE_TEXTURE1D :: 424;
    LIVE_TEXTURE2D :: 425;
    LIVE_TEXTURE3D :: 426;
    LIVE_SHADERRESOURCEVIEW :: 427;
    LIVE_RENDERTARGETVIEW :: 428;
    LIVE_DEPTHSTENCILVIEW :: 429;
    LIVE_VERTEXSHADER :: 430;
    LIVE_GEOMETRYSHADER :: 431;
    LIVE_PIXELSHADER :: 432;
    LIVE_INPUTLAYOUT :: 433;
    LIVE_SAMPLER :: 434;
    LIVE_BLENDSTATE :: 435;
    LIVE_DEPTHSTENCILSTATE :: 436;
    LIVE_RASTERIZERSTATE :: 437;
    LIVE_QUERY :: 438;
    LIVE_PREDICATE :: 439;
    LIVE_COUNTER :: 440;
    LIVE_DEVICE :: 441;
    LIVE_SWAPCHAIN :: 442;
    D3D10_MESSAGES_END :: 443;
    D3D10L9_MESSAGES_START :: 1048576;
    CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED :: 1048577;
    CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED :: 1048578;
    CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT :: 1048579;
    CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY :: 1048580;
    CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE :: 1048581;
    VSSETSAMPLERS_NOT_SUPPORTED :: 1048582;
    VSSETSAMPLERS_TOO_MANY_SAMPLERS :: 1048583;
    PSSETSAMPLERS_TOO_MANY_SAMPLERS :: 1048584;
    CREATERESOURCE_NO_ARRAYS :: 1048585;
    CREATERESOURCE_NO_VB_AND_IB_BIND :: 1048586;
    CREATERESOURCE_NO_TEXTURE_1D :: 1048587;
    CREATERESOURCE_DIMENSION_OUT_OF_RANGE :: 1048588;
    CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE :: 1048589;
    OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS :: 1048590;
    OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS :: 1048591;
    IASETVERTEXBUFFERS_BAD_BUFFER_INDEX :: 1048592;
    DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS :: 1048593;
    DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED :: 1048594;
    DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS :: 1048595;
    COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY :: 1048596;
    COPYRESOURCE_NO_TEXTURE_3D_READBACK :: 1048597;
    COPYRESOURCE_NO_TEXTURE_ONLY_READBACK :: 1048598;
    CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT :: 1048599;
    CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE :: 1048600;
    CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE :: 1048601;
    DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE :: 1048602;
    CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD :: 1048603;
    CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL :: 1048604;
    CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX :: 1048605;
    CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO :: 1048606;
    CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES :: 1048607;
    CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET :: 1048608;
    CREATERESOURCE_NO_DWORD_INDEX_BUFFER :: 1048609;
    CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE :: 1048610;
    CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE :: 1048611;
    CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE :: 1048612;
    CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS :: 1048613;
    CREATERESOURCE_NO_STREAM_OUT :: 1048614;
    CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS :: 1048615;
    CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES :: 1048616;
    CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED :: 1048617;
    VSSHADERRESOURCES_NOT_SUPPORTED :: 1048618;
    GEOMETRY_SHADER_NOT_SUPPORTED :: 1048619;
    STREAM_OUT_NOT_SUPPORTED :: 1048620;
    TEXT_FILTER_NOT_SUPPORTED :: 1048621;
    CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND :: 1048622;
    CREATEBLENDSTATE_NO_MRT_BLEND :: 1048623;
    CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED :: 1048624;
    CREATESAMPLERSTATE_NO_MIRRORONCE :: 1048625;
    DRAWINSTANCED_NOT_SUPPORTED :: 1048626;
    DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 :: 1048627;
    DRAWINDEXED_POINTLIST_UNSUPPORTED :: 1048628;
    SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO :: 1048629;
    CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION :: 1048630;
    CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED :: 1048631;
    DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR :: 1048632;
    SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA :: 1048633;
    CREATERESOURCE_NON_POW_2_MIPMAP :: 1048634;
    CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED :: 1048635;
    OMSETRENDERTARGETS_NO_SRGB_MRT :: 1048636;
    COPYRESOURCE_NO_3D_MISMATCHED_UPDATES :: 1048637;
    D3D10L9_MESSAGES_END :: 1048638;
    D3D11_MESSAGES_START :: 2097152;
    CREATEDEPTHSTENCILVIEW_INVALIDFLAGS :: 2097153;
    CREATEVERTEXSHADER_INVALIDCLASSLINKAGE :: 2097154;
    CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE :: 2097155;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS :: 2097156;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER :: 2097157;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS :: 2097158;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE :: 2097159;
    CREATEPIXELSHADER_INVALIDCLASSLINKAGE :: 2097160;
    CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS :: 2097161;
    CREATEDEFERREDCONTEXT_SINGLETHREADED :: 2097162;
    CREATEDEFERREDCONTEXT_INVALIDARG_RETURN :: 2097163;
    CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN :: 2097164;
    CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN :: 2097165;
    FINISHDISPLAYLIST_ONIMMEDIATECONTEXT :: 2097166;
    FINISHDISPLAYLIST_OUTOFMEMORY_RETURN :: 2097167;
    FINISHDISPLAYLIST_INVALID_CALL_RETURN :: 2097168;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM :: 2097169;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES :: 2097170;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES :: 2097171;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES :: 2097172;
    DEVICE_HSSETSHADERRESOURCES_HAZARD :: 2097173;
    DEVICE_HSSETCONSTANTBUFFERS_HAZARD :: 2097174;
    HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT :: 2097175;
    HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT :: 2097176;
    CREATEHULLSHADER_INVALIDCALL :: 2097177;
    CREATEHULLSHADER_OUTOFMEMORY :: 2097178;
    CREATEHULLSHADER_INVALIDSHADERBYTECODE :: 2097179;
    CREATEHULLSHADER_INVALIDSHADERTYPE :: 2097180;
    CREATEHULLSHADER_INVALIDCLASSLINKAGE :: 2097181;
    DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY :: 2097182;
    HSSETCONSTANTBUFFERS_INVALIDBUFFER :: 2097183;
    DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY :: 2097184;
    DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY :: 2097185;
    DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY :: 2097186;
    DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY :: 2097187;
    DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY :: 2097188;
    DEVICE_DSSETSHADERRESOURCES_HAZARD :: 2097189;
    DEVICE_DSSETCONSTANTBUFFERS_HAZARD :: 2097190;
    DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT :: 2097191;
    DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT :: 2097192;
    CREATEDOMAINSHADER_INVALIDCALL :: 2097193;
    CREATEDOMAINSHADER_OUTOFMEMORY :: 2097194;
    CREATEDOMAINSHADER_INVALIDSHADERBYTECODE :: 2097195;
    CREATEDOMAINSHADER_INVALIDSHADERTYPE :: 2097196;
    CREATEDOMAINSHADER_INVALIDCLASSLINKAGE :: 2097197;
    DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY :: 2097198;
    DSSETCONSTANTBUFFERS_INVALIDBUFFER :: 2097199;
    DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY :: 2097200;
    DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY :: 2097201;
    DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY :: 2097202;
    DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY :: 2097203;
    DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY :: 2097204;
    DEVICE_DRAW_HS_XOR_DS_MISMATCH :: 2097205;
    DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT :: 2097206;
    DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER :: 2097207;
    DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED :: 2097208;
    DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW :: 2097209;
    RESOURCE_MAP_INVALIDMAPTYPE :: 2097210;
    RESOURCE_MAP_INVALIDSUBRESOURCE :: 2097211;
    RESOURCE_MAP_INVALIDFLAGS :: 2097212;
    RESOURCE_MAP_ALREADYMAPPED :: 2097213;
    RESOURCE_MAP_DEVICEREMOVED_RETURN :: 2097214;
    RESOURCE_MAP_OUTOFMEMORY_RETURN :: 2097215;
    RESOURCE_MAP_WITHOUT_INITIAL_DISCARD :: 2097216;
    RESOURCE_UNMAP_INVALIDSUBRESOURCE :: 2097217;
    RESOURCE_UNMAP_NOTMAPPED :: 2097218;
    DEVICE_DRAW_RASTERIZING_CONTROL_POINTS :: 2097219;
    DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED :: 2097220;
    DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH :: 2097221;
    DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH :: 2097222;
    DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH :: 2097223;
    DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH :: 2097224;
    CREATE_CONTEXT :: 2097225;
    LIVE_CONTEXT :: 2097226;
    DESTROY_CONTEXT :: 2097227;
    CREATE_BUFFER :: 2097228;
    LIVE_BUFFER_WIN7 :: 2097229;
    DESTROY_BUFFER :: 2097230;
    CREATE_TEXTURE1D :: 2097231;
    LIVE_TEXTURE1D_WIN7 :: 2097232;
    DESTROY_TEXTURE1D :: 2097233;
    CREATE_TEXTURE2D :: 2097234;
    LIVE_TEXTURE2D_WIN7 :: 2097235;
    DESTROY_TEXTURE2D :: 2097236;
    CREATE_TEXTURE3D :: 2097237;
    LIVE_TEXTURE3D_WIN7 :: 2097238;
    DESTROY_TEXTURE3D :: 2097239;
    CREATE_SHADERRESOURCEVIEW :: 2097240;
    LIVE_SHADERRESOURCEVIEW_WIN7 :: 2097241;
    DESTROY_SHADERRESOURCEVIEW :: 2097242;
    CREATE_RENDERTARGETVIEW :: 2097243;
    LIVE_RENDERTARGETVIEW_WIN7 :: 2097244;
    DESTROY_RENDERTARGETVIEW :: 2097245;
    CREATE_DEPTHSTENCILVIEW :: 2097246;
    LIVE_DEPTHSTENCILVIEW_WIN7 :: 2097247;
    DESTROY_DEPTHSTENCILVIEW :: 2097248;
    CREATE_VERTEXSHADER :: 2097249;
    LIVE_VERTEXSHADER_WIN7 :: 2097250;
    DESTROY_VERTEXSHADER :: 2097251;
    CREATE_HULLSHADER :: 2097252;
    LIVE_HULLSHADER :: 2097253;
    DESTROY_HULLSHADER :: 2097254;
    CREATE_DOMAINSHADER :: 2097255;
    LIVE_DOMAINSHADER :: 2097256;
    DESTROY_DOMAINSHADER :: 2097257;
    CREATE_GEOMETRYSHADER :: 2097258;
    LIVE_GEOMETRYSHADER_WIN7 :: 2097259;
    DESTROY_GEOMETRYSHADER :: 2097260;
    CREATE_PIXELSHADER :: 2097261;
    LIVE_PIXELSHADER_WIN7 :: 2097262;
    DESTROY_PIXELSHADER :: 2097263;
    CREATE_INPUTLAYOUT :: 2097264;
    LIVE_INPUTLAYOUT_WIN7 :: 2097265;
    DESTROY_INPUTLAYOUT :: 2097266;
    CREATE_SAMPLER :: 2097267;
    LIVE_SAMPLER_WIN7 :: 2097268;
    DESTROY_SAMPLER :: 2097269;
    CREATE_BLENDSTATE :: 2097270;
    LIVE_BLENDSTATE_WIN7 :: 2097271;
    DESTROY_BLENDSTATE :: 2097272;
    CREATE_DEPTHSTENCILSTATE :: 2097273;
    LIVE_DEPTHSTENCILSTATE_WIN7 :: 2097274;
    DESTROY_DEPTHSTENCILSTATE :: 2097275;
    CREATE_RASTERIZERSTATE :: 2097276;
    LIVE_RASTERIZERSTATE_WIN7 :: 2097277;
    DESTROY_RASTERIZERSTATE :: 2097278;
    CREATE_QUERY :: 2097279;
    LIVE_QUERY_WIN7 :: 2097280;
    DESTROY_QUERY :: 2097281;
    CREATE_PREDICATE :: 2097282;
    LIVE_PREDICATE_WIN7 :: 2097283;
    DESTROY_PREDICATE :: 2097284;
    CREATE_COUNTER :: 2097285;
    DESTROY_COUNTER :: 2097286;
    CREATE_COMMANDLIST :: 2097287;
    LIVE_COMMANDLIST :: 2097288;
    DESTROY_COMMANDLIST :: 2097289;
    CREATE_CLASSINSTANCE :: 2097290;
    LIVE_CLASSINSTANCE :: 2097291;
    DESTROY_CLASSINSTANCE :: 2097292;
    CREATE_CLASSLINKAGE :: 2097293;
    LIVE_CLASSLINKAGE :: 2097294;
    DESTROY_CLASSLINKAGE :: 2097295;
    LIVE_DEVICE_WIN7 :: 2097296;
    LIVE_OBJECT_SUMMARY_WIN7 :: 2097297;
    CREATE_COMPUTESHADER :: 2097298;
    LIVE_COMPUTESHADER :: 2097299;
    DESTROY_COMPUTESHADER :: 2097300;
    CREATE_UNORDEREDACCESSVIEW :: 2097301;
    LIVE_UNORDEREDACCESSVIEW :: 2097302;
    DESTROY_UNORDEREDACCESSVIEW :: 2097303;
    DEVICE_SETSHADER_INTERFACES_FEATURELEVEL :: 2097304;
    DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH :: 2097305;
    DEVICE_SETSHADER_INVALID_INSTANCE :: 2097306;
    DEVICE_SETSHADER_INVALID_INSTANCE_INDEX :: 2097307;
    DEVICE_SETSHADER_INVALID_INSTANCE_TYPE :: 2097308;
    DEVICE_SETSHADER_INVALID_INSTANCE_DATA :: 2097309;
    DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA :: 2097310;
    DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS :: 2097311;
    DEVICE_CREATESHADER_CLASSLINKAGE_FULL :: 2097312;
    DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE :: 2097313;
    DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE :: 2097314;
    DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN :: 2097315;
    DEVICE_CSSETSHADERRESOURCES_HAZARD :: 2097316;
    DEVICE_CSSETCONSTANTBUFFERS_HAZARD :: 2097317;
    CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT :: 2097318;
    CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT :: 2097319;
    CREATECOMPUTESHADER_INVALIDCALL :: 2097320;
    CREATECOMPUTESHADER_OUTOFMEMORY :: 2097321;
    CREATECOMPUTESHADER_INVALIDSHADERBYTECODE :: 2097322;
    CREATECOMPUTESHADER_INVALIDSHADERTYPE :: 2097323;
    CREATECOMPUTESHADER_INVALIDCLASSLINKAGE :: 2097324;
    DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY :: 2097325;
    CSSETCONSTANTBUFFERS_INVALIDBUFFER :: 2097326;
    DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY :: 2097327;
    DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY :: 2097328;
    DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY :: 2097329;
    DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY :: 2097330;
    DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY :: 2097331;
    DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 2097332;
    DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 2097333;
    DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 2097334;
    DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 2097335;
    DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED :: 2097336;
    DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 2097337;
    DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 2097338;
    CREATEBUFFER_INVALIDSTRUCTURESTRIDE :: 2097339;
    CREATESHADERRESOURCEVIEW_INVALIDFLAGS :: 2097340;
    CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE :: 2097341;
    CREATEUNORDEREDACCESSVIEW_INVALIDDESC :: 2097342;
    CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT :: 2097343;
    CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS :: 2097344;
    CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT :: 2097345;
    DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD :: 2097346;
    DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS :: 2097347;
    DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP :: 2097348;
    CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT :: 2097349;
    PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT :: 2097350;
    CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN :: 2097351;
    CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN :: 2097352;
    CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS :: 2097353;
    DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD :: 2097354;
    CLEARUNORDEREDACCESSVIEW_DENORMFLUSH :: 2097355;
    DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY :: 2097356;
    DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY :: 2097357;
    CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS :: 2097358;
    CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS :: 2097359;
    DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER :: 2097360;
    DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED :: 2097361;
    DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW :: 2097362;
    DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT :: 2097363;
    DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE :: 2097364;
    DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD :: 2097365;
    DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT :: 2097366;
    DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE :: 2097367;
    OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT :: 2097368;
    CLEARDEPTHSTENCILVIEW_DEPTH_READONLY :: 2097369;
    CLEARDEPTHSTENCILVIEW_STENCIL_READONLY :: 2097370;
    CHECKFEATURESUPPORT_FORMAT_DEPRECATED :: 2097371;
    DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH :: 2097372;
    DEVICE_UNORDEREDACCESSVIEW_NOT_SET :: 2097373;
    DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP :: 2097374;
    DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH :: 2097375;
    DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED :: 2097376;
    DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED :: 2097377;
    DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH :: 2097378;
    DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH :: 2097379;
    DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED :: 2097380;
    DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED :: 2097381;
    DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED :: 2097382;
    DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED :: 2097383;
    DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED :: 2097384;
    DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED :: 2097385;
    DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED :: 2097386;
    DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED :: 2097387;
    DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED :: 2097388;
    DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED :: 2097389;
    DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW :: 2097390;
    DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO :: 2097391;
    DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH :: 2097392;
    DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH :: 2097393;
    DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED :: 2097394;
    DEVICE_DISPATCH_UNSUPPORTED :: 2097395;
    DEVICE_DISPATCHINDIRECT_UNSUPPORTED :: 2097396;
    COPYSTRUCTURECOUNT_INVALIDOFFSET :: 2097397;
    COPYSTRUCTURECOUNT_LARGEOFFSET :: 2097398;
    COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE :: 2097399;
    COPYSTRUCTURECOUNT_INVALIDSOURCESTATE :: 2097400;
    CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED :: 2097401;
    DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW :: 2097402;
    DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET :: 2097403;
    DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS :: 2097404;
    CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT :: 2097405;
    DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED :: 2097406;
    REF_WARNING :: 2097407;
    DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV :: 2097408;
    SHADER_ABORT :: 2097409;
    SHADER_MESSAGE :: 2097410;
    SHADER_ERROR :: 2097411;
    OFFERRESOURCES_INVALIDRESOURCE :: 2097412;
    HSSETSAMPLERS_UNBINDDELETINGOBJECT :: 2097413;
    DSSETSAMPLERS_UNBINDDELETINGOBJECT :: 2097414;
    CSSETSAMPLERS_UNBINDDELETINGOBJECT :: 2097415;
    HSSETSHADER_UNBINDDELETINGOBJECT :: 2097416;
    DSSETSHADER_UNBINDDELETINGOBJECT :: 2097417;
    CSSETSHADER_UNBINDDELETINGOBJECT :: 2097418;
    ENQUEUESETEVENT_INVALIDARG_RETURN :: 2097419;
    ENQUEUESETEVENT_OUTOFMEMORY_RETURN :: 2097420;
    ENQUEUESETEVENT_ACCESSDENIED_RETURN :: 2097421;
    DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NUMUAVS_INVALIDRANGE :: 2097422;
    USE_OF_ZERO_REFCOUNT_OBJECT :: 2097423;
    D3D11_MESSAGES_END :: 2097424;
    D3D11_1_MESSAGES_START :: 3145728;
    CREATE_VIDEODECODER :: 3145729;
    CREATE_VIDEOPROCESSORENUM :: 3145730;
    CREATE_VIDEOPROCESSOR :: 3145731;
    CREATE_DECODEROUTPUTVIEW :: 3145732;
    CREATE_PROCESSORINPUTVIEW :: 3145733;
    CREATE_PROCESSOROUTPUTVIEW :: 3145734;
    CREATE_DEVICECONTEXTSTATE :: 3145735;
    LIVE_VIDEODECODER :: 3145736;
    LIVE_VIDEOPROCESSORENUM :: 3145737;
    LIVE_VIDEOPROCESSOR :: 3145738;
    LIVE_DECODEROUTPUTVIEW :: 3145739;
    LIVE_PROCESSORINPUTVIEW :: 3145740;
    LIVE_PROCESSOROUTPUTVIEW :: 3145741;
    LIVE_DEVICECONTEXTSTATE :: 3145742;
    DESTROY_VIDEODECODER :: 3145743;
    DESTROY_VIDEOPROCESSORENUM :: 3145744;
    DESTROY_VIDEOPROCESSOR :: 3145745;
    DESTROY_DECODEROUTPUTVIEW :: 3145746;
    DESTROY_PROCESSORINPUTVIEW :: 3145747;
    DESTROY_PROCESSOROUTPUTVIEW :: 3145748;
    DESTROY_DEVICECONTEXTSTATE :: 3145749;
    CREATEDEVICECONTEXTSTATE_INVALIDFLAGS :: 3145750;
    CREATEDEVICECONTEXTSTATE_INVALIDFEATURELEVEL :: 3145751;
    CREATEDEVICECONTEXTSTATE_FEATURELEVELS_NOT_SUPPORTED :: 3145752;
    CREATEDEVICECONTEXTSTATE_INVALIDREFIID :: 3145753;
    DEVICE_DISCARDVIEW_INVALIDVIEW :: 3145754;
    COPYSUBRESOURCEREGION1_INVALIDCOPYFLAGS :: 3145755;
    UPDATESUBRESOURCE1_INVALIDCOPYFLAGS :: 3145756;
    CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT :: 3145757;
    CREATEVIDEODECODER_OUTOFMEMORY_RETURN :: 3145758;
    CREATEVIDEODECODER_NULLPARAM :: 3145759;
    CREATEVIDEODECODER_INVALIDFORMAT :: 3145760;
    CREATEVIDEODECODER_ZEROWIDTHHEIGHT :: 3145761;
    CREATEVIDEODECODER_DRIVER_INVALIDBUFFERSIZE :: 3145762;
    CREATEVIDEODECODER_DRIVER_INVALIDBUFFERUSAGE :: 3145763;
    GETVIDEODECODERPROFILECOUNT_OUTOFMEMORY :: 3145764;
    GETVIDEODECODERPROFILE_NULLPARAM :: 3145765;
    GETVIDEODECODERPROFILE_INVALIDINDEX :: 3145766;
    GETVIDEODECODERPROFILE_OUTOFMEMORY_RETURN :: 3145767;
    CHECKVIDEODECODERFORMAT_NULLPARAM :: 3145768;
    CHECKVIDEODECODERFORMAT_OUTOFMEMORY_RETURN :: 3145769;
    GETVIDEODECODERCONFIGCOUNT_NULLPARAM :: 3145770;
    GETVIDEODECODERCONFIGCOUNT_OUTOFMEMORY_RETURN :: 3145771;
    GETVIDEODECODERCONFIG_NULLPARAM :: 3145772;
    GETVIDEODECODERCONFIG_INVALIDINDEX :: 3145773;
    GETVIDEODECODERCONFIG_OUTOFMEMORY_RETURN :: 3145774;
    GETDECODERCREATIONPARAMS_NULLPARAM :: 3145775;
    GETDECODERDRIVERHANDLE_NULLPARAM :: 3145776;
    GETDECODERBUFFER_NULLPARAM :: 3145777;
    GETDECODERBUFFER_INVALIDBUFFER :: 3145778;
    GETDECODERBUFFER_INVALIDTYPE :: 3145779;
    GETDECODERBUFFER_LOCKED :: 3145780;
    RELEASEDECODERBUFFER_NULLPARAM :: 3145781;
    RELEASEDECODERBUFFER_INVALIDTYPE :: 3145782;
    RELEASEDECODERBUFFER_NOTLOCKED :: 3145783;
    DECODERBEGINFRAME_NULLPARAM :: 3145784;
    DECODERBEGINFRAME_HAZARD :: 3145785;
    DECODERENDFRAME_NULLPARAM :: 3145786;
    SUBMITDECODERBUFFERS_NULLPARAM :: 3145787;
    SUBMITDECODERBUFFERS_INVALIDTYPE :: 3145788;
    DECODEREXTENSION_NULLPARAM :: 3145789;
    DECODEREXTENSION_INVALIDRESOURCE :: 3145790;
    CREATEVIDEOPROCESSORENUMERATOR_OUTOFMEMORY_RETURN :: 3145791;
    CREATEVIDEOPROCESSORENUMERATOR_NULLPARAM :: 3145792;
    CREATEVIDEOPROCESSORENUMERATOR_INVALIDFRAMEFORMAT :: 3145793;
    CREATEVIDEOPROCESSORENUMERATOR_INVALIDUSAGE :: 3145794;
    CREATEVIDEOPROCESSORENUMERATOR_INVALIDINPUTFRAMERATE :: 3145795;
    CREATEVIDEOPROCESSORENUMERATOR_INVALIDOUTPUTFRAMERATE :: 3145796;
    CREATEVIDEOPROCESSORENUMERATOR_INVALIDWIDTHHEIGHT :: 3145797;
    GETVIDEOPROCESSORCONTENTDESC_NULLPARAM :: 3145798;
    CHECKVIDEOPROCESSORFORMAT_NULLPARAM :: 3145799;
    GETVIDEOPROCESSORCAPS_NULLPARAM :: 3145800;
    GETVIDEOPROCESSORRATECONVERSIONCAPS_NULLPARAM :: 3145801;
    GETVIDEOPROCESSORRATECONVERSIONCAPS_INVALIDINDEX :: 3145802;
    GETVIDEOPROCESSORCUSTOMRATE_NULLPARAM :: 3145803;
    GETVIDEOPROCESSORCUSTOMRATE_INVALIDINDEX :: 3145804;
    GETVIDEOPROCESSORFILTERRANGE_NULLPARAM :: 3145805;
    GETVIDEOPROCESSORFILTERRANGE_UNSUPPORTED :: 3145806;
    CREATEVIDEOPROCESSOR_OUTOFMEMORY_RETURN :: 3145807;
    CREATEVIDEOPROCESSOR_NULLPARAM :: 3145808;
    VIDEOPROCESSORSETOUTPUTTARGETRECT_NULLPARAM :: 3145809;
    VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_NULLPARAM :: 3145810;
    VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_INVALIDALPHA :: 3145811;
    VIDEOPROCESSORSETOUTPUTCOLORSPACE_NULLPARAM :: 3145812;
    VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_NULLPARAM :: 3145813;
    VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_UNSUPPORTED :: 3145814;
    VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDSTREAM :: 3145815;
    VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDFILLMODE :: 3145816;
    VIDEOPROCESSORSETOUTPUTCONSTRICTION_NULLPARAM :: 3145817;
    VIDEOPROCESSORSETOUTPUTSTEREOMODE_NULLPARAM :: 3145818;
    VIDEOPROCESSORSETOUTPUTSTEREOMODE_UNSUPPORTED :: 3145819;
    VIDEOPROCESSORSETOUTPUTEXTENSION_NULLPARAM :: 3145820;
    VIDEOPROCESSORGETOUTPUTTARGETRECT_NULLPARAM :: 3145821;
    VIDEOPROCESSORGETOUTPUTBACKGROUNDCOLOR_NULLPARAM :: 3145822;
    VIDEOPROCESSORGETOUTPUTCOLORSPACE_NULLPARAM :: 3145823;
    VIDEOPROCESSORGETOUTPUTALPHAFILLMODE_NULLPARAM :: 3145824;
    VIDEOPROCESSORGETOUTPUTCONSTRICTION_NULLPARAM :: 3145825;
    VIDEOPROCESSORSETOUTPUTCONSTRICTION_UNSUPPORTED :: 3145826;
    VIDEOPROCESSORSETOUTPUTCONSTRICTION_INVALIDSIZE :: 3145827;
    VIDEOPROCESSORGETOUTPUTSTEREOMODE_NULLPARAM :: 3145828;
    VIDEOPROCESSORGETOUTPUTEXTENSION_NULLPARAM :: 3145829;
    VIDEOPROCESSORSETSTREAMFRAMEFORMAT_NULLPARAM :: 3145830;
    VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDFORMAT :: 3145831;
    VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDSTREAM :: 3145832;
    VIDEOPROCESSORSETSTREAMCOLORSPACE_NULLPARAM :: 3145833;
    VIDEOPROCESSORSETSTREAMCOLORSPACE_INVALIDSTREAM :: 3145834;
    VIDEOPROCESSORSETSTREAMOUTPUTRATE_NULLPARAM :: 3145835;
    VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDRATE :: 3145836;
    VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDFLAG :: 3145837;
    VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDSTREAM :: 3145838;
    VIDEOPROCESSORSETSTREAMSOURCERECT_NULLPARAM :: 3145839;
    VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDSTREAM :: 3145840;
    VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDRECT :: 3145841;
    VIDEOPROCESSORSETSTREAMDESTRECT_NULLPARAM :: 3145842;
    VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDSTREAM :: 3145843;
    VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDRECT :: 3145844;
    VIDEOPROCESSORSETSTREAMALPHA_NULLPARAM :: 3145845;
    VIDEOPROCESSORSETSTREAMALPHA_INVALIDSTREAM :: 3145846;
    VIDEOPROCESSORSETSTREAMALPHA_INVALIDALPHA :: 3145847;
    VIDEOPROCESSORSETSTREAMPALETTE_NULLPARAM :: 3145848;
    VIDEOPROCESSORSETSTREAMPALETTE_INVALIDSTREAM :: 3145849;
    VIDEOPROCESSORSETSTREAMPALETTE_INVALIDCOUNT :: 3145850;
    VIDEOPROCESSORSETSTREAMPALETTE_INVALIDALPHA :: 3145851;
    VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_NULLPARAM :: 3145852;
    VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDSTREAM :: 3145853;
    VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDRATIO :: 3145854;
    VIDEOPROCESSORSETSTREAMLUMAKEY_NULLPARAM :: 3145855;
    VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDSTREAM :: 3145856;
    VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDRANGE :: 3145857;
    VIDEOPROCESSORSETSTREAMLUMAKEY_UNSUPPORTED :: 3145858;
    VIDEOPROCESSORSETSTREAMSTEREOFORMAT_NULLPARAM :: 3145859;
    VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDSTREAM :: 3145860;
    VIDEOPROCESSORSETSTREAMSTEREOFORMAT_UNSUPPORTED :: 3145861;
    VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FLIPUNSUPPORTED :: 3145862;
    VIDEOPROCESSORSETSTREAMSTEREOFORMAT_MONOOFFSETUNSUPPORTED :: 3145863;
    VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FORMATUNSUPPORTED :: 3145864;
    VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDFORMAT :: 3145865;
    VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_NULLPARAM :: 3145866;
    VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM :: 3145867;
    VIDEOPROCESSORSETSTREAMFILTER_NULLPARAM :: 3145868;
    VIDEOPROCESSORSETSTREAMFILTER_INVALIDSTREAM :: 3145869;
    VIDEOPROCESSORSETSTREAMFILTER_INVALIDFILTER :: 3145870;
    VIDEOPROCESSORSETSTREAMFILTER_UNSUPPORTED :: 3145871;
    VIDEOPROCESSORSETSTREAMFILTER_INVALIDLEVEL :: 3145872;
    VIDEOPROCESSORSETSTREAMEXTENSION_NULLPARAM :: 3145873;
    VIDEOPROCESSORSETSTREAMEXTENSION_INVALIDSTREAM :: 3145874;
    VIDEOPROCESSORGETSTREAMFRAMEFORMAT_NULLPARAM :: 3145875;
    VIDEOPROCESSORGETSTREAMCOLORSPACE_NULLPARAM :: 3145876;
    VIDEOPROCESSORGETSTREAMOUTPUTRATE_NULLPARAM :: 3145877;
    VIDEOPROCESSORGETSTREAMSOURCERECT_NULLPARAM :: 3145878;
    VIDEOPROCESSORGETSTREAMDESTRECT_NULLPARAM :: 3145879;
    VIDEOPROCESSORGETSTREAMALPHA_NULLPARAM :: 3145880;
    VIDEOPROCESSORGETSTREAMPALETTE_NULLPARAM :: 3145881;
    VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_NULLPARAM :: 3145882;
    VIDEOPROCESSORGETSTREAMLUMAKEY_NULLPARAM :: 3145883;
    VIDEOPROCESSORGETSTREAMSTEREOFORMAT_NULLPARAM :: 3145884;
    VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_NULLPARAM :: 3145885;
    VIDEOPROCESSORGETSTREAMFILTER_NULLPARAM :: 3145886;
    VIDEOPROCESSORGETSTREAMEXTENSION_NULLPARAM :: 3145887;
    VIDEOPROCESSORGETSTREAMEXTENSION_INVALIDSTREAM :: 3145888;
    VIDEOPROCESSORBLT_NULLPARAM :: 3145889;
    VIDEOPROCESSORBLT_INVALIDSTREAMCOUNT :: 3145890;
    VIDEOPROCESSORBLT_TARGETRECT :: 3145891;
    VIDEOPROCESSORBLT_INVALIDOUTPUT :: 3145892;
    VIDEOPROCESSORBLT_INVALIDPASTFRAMES :: 3145893;
    VIDEOPROCESSORBLT_INVALIDFUTUREFRAMES :: 3145894;
    VIDEOPROCESSORBLT_INVALIDSOURCERECT :: 3145895;
    VIDEOPROCESSORBLT_INVALIDDESTRECT :: 3145896;
    VIDEOPROCESSORBLT_INVALIDINPUTRESOURCE :: 3145897;
    VIDEOPROCESSORBLT_INVALIDARRAYSIZE :: 3145898;
    VIDEOPROCESSORBLT_INVALIDARRAY :: 3145899;
    VIDEOPROCESSORBLT_RIGHTEXPECTED :: 3145900;
    VIDEOPROCESSORBLT_RIGHTNOTEXPECTED :: 3145901;
    VIDEOPROCESSORBLT_STEREONOTENABLED :: 3145902;
    VIDEOPROCESSORBLT_INVALIDRIGHTRESOURCE :: 3145903;
    VIDEOPROCESSORBLT_NOSTEREOSTREAMS :: 3145904;
    VIDEOPROCESSORBLT_INPUTHAZARD :: 3145905;
    VIDEOPROCESSORBLT_OUTPUTHAZARD :: 3145906;
    CREATEVIDEODECODEROUTPUTVIEW_OUTOFMEMORY_RETURN :: 3145907;
    CREATEVIDEODECODEROUTPUTVIEW_NULLPARAM :: 3145908;
    CREATEVIDEODECODEROUTPUTVIEW_INVALIDTYPE :: 3145909;
    CREATEVIDEODECODEROUTPUTVIEW_INVALIDBIND :: 3145910;
    CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEDFORMAT :: 3145911;
    CREATEVIDEODECODEROUTPUTVIEW_INVALIDMIP :: 3145912;
    CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEMIP :: 3145913;
    CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAYSIZE :: 3145914;
    CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAY :: 3145915;
    CREATEVIDEODECODEROUTPUTVIEW_INVALIDDIMENSION :: 3145916;
    CREATEVIDEOPROCESSORINPUTVIEW_OUTOFMEMORY_RETURN :: 3145917;
    CREATEVIDEOPROCESSORINPUTVIEW_NULLPARAM :: 3145918;
    CREATEVIDEOPROCESSORINPUTVIEW_INVALIDTYPE :: 3145919;
    CREATEVIDEOPROCESSORINPUTVIEW_INVALIDBIND :: 3145920;
    CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMISC :: 3145921;
    CREATEVIDEOPROCESSORINPUTVIEW_INVALIDUSAGE :: 3145922;
    CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFORMAT :: 3145923;
    CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFOURCC :: 3145924;
    CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMIP :: 3145925;
    CREATEVIDEOPROCESSORINPUTVIEW_UNSUPPORTEDMIP :: 3145926;
    CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAYSIZE :: 3145927;
    CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAY :: 3145928;
    CREATEVIDEOPROCESSORINPUTVIEW_INVALIDDIMENSION :: 3145929;
    CREATEVIDEOPROCESSOROUTPUTVIEW_OUTOFMEMORY_RETURN :: 3145930;
    CREATEVIDEOPROCESSOROUTPUTVIEW_NULLPARAM :: 3145931;
    CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDTYPE :: 3145932;
    CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDBIND :: 3145933;
    CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDFORMAT :: 3145934;
    CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMIP :: 3145935;
    CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDMIP :: 3145936;
    CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDARRAY :: 3145937;
    CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDARRAY :: 3145938;
    CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDDIMENSION :: 3145939;
    DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT :: 3145940;
    CREATEBLENDSTATE_INVALIDLOGICOPS :: 3145941;
    CREATESHADERRESOURCEVIEW_INVALIDDARRAYWITHDECODER :: 3145942;
    CREATEUNORDEREDACCESSVIEW_INVALIDDARRAYWITHDECODER :: 3145943;
    CREATERENDERTARGETVIEW_INVALIDDARRAYWITHDECODER :: 3145944;
    DEVICE_LOCKEDOUT_INTERFACE :: 3145945;
    REF_WARNING_ATOMIC_INCONSISTENT :: 3145946;
    REF_WARNING_READING_UNINITIALIZED_RESOURCE :: 3145947;
    REF_WARNING_RAW_HAZARD :: 3145948;
    REF_WARNING_WAR_HAZARD :: 3145949;
    REF_WARNING_WAW_HAZARD :: 3145950;
    CREATECRYPTOSESSION_NULLPARAM :: 3145951;
    CREATECRYPTOSESSION_OUTOFMEMORY_RETURN :: 3145952;
    GETCRYPTOTYPE_NULLPARAM :: 3145953;
    GETDECODERPROFILE_NULLPARAM :: 3145954;
    GETCRYPTOSESSIONCERTIFICATESIZE_NULLPARAM :: 3145955;
    GETCRYPTOSESSIONCERTIFICATE_NULLPARAM :: 3145956;
    GETCRYPTOSESSIONCERTIFICATE_WRONGSIZE :: 3145957;
    GETCRYPTOSESSIONHANDLE_WRONGSIZE :: 3145958;
    NEGOTIATECRPYTOSESSIONKEYEXCHANGE_NULLPARAM :: 3145959;
    ENCRYPTIONBLT_UNSUPPORTED :: 3145960;
    ENCRYPTIONBLT_NULLPARAM :: 3145961;
    ENCRYPTIONBLT_SRC_WRONGDEVICE :: 3145962;
    ENCRYPTIONBLT_DST_WRONGDEVICE :: 3145963;
    ENCRYPTIONBLT_FORMAT_MISMATCH :: 3145964;
    ENCRYPTIONBLT_SIZE_MISMATCH :: 3145965;
    ENCRYPTIONBLT_SRC_MULTISAMPLED :: 3145966;
    ENCRYPTIONBLT_DST_NOT_STAGING :: 3145967;
    ENCRYPTIONBLT_SRC_MAPPED :: 3145968;
    ENCRYPTIONBLT_DST_MAPPED :: 3145969;
    ENCRYPTIONBLT_SRC_OFFERED :: 3145970;
    ENCRYPTIONBLT_DST_OFFERED :: 3145971;
    ENCRYPTIONBLT_SRC_CONTENT_UNDEFINED :: 3145972;
    DECRYPTIONBLT_UNSUPPORTED :: 3145973;
    DECRYPTIONBLT_NULLPARAM :: 3145974;
    DECRYPTIONBLT_SRC_WRONGDEVICE :: 3145975;
    DECRYPTIONBLT_DST_WRONGDEVICE :: 3145976;
    DECRYPTIONBLT_FORMAT_MISMATCH :: 3145977;
    DECRYPTIONBLT_SIZE_MISMATCH :: 3145978;
    DECRYPTIONBLT_DST_MULTISAMPLED :: 3145979;
    DECRYPTIONBLT_SRC_NOT_STAGING :: 3145980;
    DECRYPTIONBLT_DST_NOT_RENDER_TARGET :: 3145981;
    DECRYPTIONBLT_SRC_MAPPED :: 3145982;
    DECRYPTIONBLT_DST_MAPPED :: 3145983;
    DECRYPTIONBLT_SRC_OFFERED :: 3145984;
    DECRYPTIONBLT_DST_OFFERED :: 3145985;
    DECRYPTIONBLT_SRC_CONTENT_UNDEFINED :: 3145986;
    STARTSESSIONKEYREFRESH_NULLPARAM :: 3145987;
    STARTSESSIONKEYREFRESH_INVALIDSIZE :: 3145988;
    FINISHSESSIONKEYREFRESH_NULLPARAM :: 3145989;
    GETENCRYPTIONBLTKEY_NULLPARAM :: 3145990;
    GETENCRYPTIONBLTKEY_INVALIDSIZE :: 3145991;
    GETCONTENTPROTECTIONCAPS_NULLPARAM :: 3145992;
    CHECKCRYPTOKEYEXCHANGE_NULLPARAM :: 3145993;
    CHECKCRYPTOKEYEXCHANGE_INVALIDINDEX :: 3145994;
    CREATEAUTHENTICATEDCHANNEL_NULLPARAM :: 3145995;
    CREATEAUTHENTICATEDCHANNEL_UNSUPPORTED :: 3145996;
    CREATEAUTHENTICATEDCHANNEL_INVALIDTYPE :: 3145997;
    CREATEAUTHENTICATEDCHANNEL_OUTOFMEMORY_RETURN :: 3145998;
    GETAUTHENTICATEDCHANNELCERTIFICATESIZE_INVALIDCHANNEL :: 3145999;
    GETAUTHENTICATEDCHANNELCERTIFICATESIZE_NULLPARAM :: 3146000;
    GETAUTHENTICATEDCHANNELCERTIFICATE_INVALIDCHANNEL :: 3146001;
    GETAUTHENTICATEDCHANNELCERTIFICATE_NULLPARAM :: 3146002;
    GETAUTHENTICATEDCHANNELCERTIFICATE_WRONGSIZE :: 3146003;
    NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDCHANNEL :: 3146004;
    NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_NULLPARAM :: 3146005;
    QUERYAUTHENTICATEDCHANNEL_NULLPARAM :: 3146006;
    QUERYAUTHENTICATEDCHANNEL_WRONGCHANNEL :: 3146007;
    QUERYAUTHENTICATEDCHANNEL_UNSUPPORTEDQUERY :: 3146008;
    QUERYAUTHENTICATEDCHANNEL_WRONGSIZE :: 3146009;
    QUERYAUTHENTICATEDCHANNEL_INVALIDPROCESSINDEX :: 3146010;
    CONFIGUREAUTHENTICATEDCHANNEL_NULLPARAM :: 3146011;
    CONFIGUREAUTHENTICATEDCHANNEL_WRONGCHANNEL :: 3146012;
    CONFIGUREAUTHENTICATEDCHANNEL_UNSUPPORTEDCONFIGURE :: 3146013;
    CONFIGUREAUTHENTICATEDCHANNEL_WRONGSIZE :: 3146014;
    CONFIGUREAUTHENTICATEDCHANNEL_INVALIDPROCESSIDTYPE :: 3146015;
    VSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT :: 3146016;
    DSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT :: 3146017;
    HSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT :: 3146018;
    GSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT :: 3146019;
    PSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT :: 3146020;
    CSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT :: 3146021;
    NEGOTIATECRPYTOSESSIONKEYEXCHANGE_INVALIDSIZE :: 3146022;
    NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDSIZE :: 3146023;
    OFFERRESOURCES_INVALIDPRIORITY :: 3146024;
    GETCRYPTOSESSIONHANDLE_OUTOFMEMORY :: 3146025;
    ACQUIREHANDLEFORCAPTURE_NULLPARAM :: 3146026;
    ACQUIREHANDLEFORCAPTURE_INVALIDTYPE :: 3146027;
    ACQUIREHANDLEFORCAPTURE_INVALIDBIND :: 3146028;
    ACQUIREHANDLEFORCAPTURE_INVALIDARRAY :: 3146029;
    VIDEOPROCESSORSETSTREAMROTATION_NULLPARAM :: 3146030;
    VIDEOPROCESSORSETSTREAMROTATION_INVALIDSTREAM :: 3146031;
    VIDEOPROCESSORSETSTREAMROTATION_INVALID :: 3146032;
    VIDEOPROCESSORSETSTREAMROTATION_UNSUPPORTED :: 3146033;
    VIDEOPROCESSORGETSTREAMROTATION_NULLPARAM :: 3146034;
    DEVICE_CLEARVIEW_INVALIDVIEW :: 3146035;
    DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 3146036;
    DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED :: 3146037;
    DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 3146038;
    DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED :: 3146039;
    DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 3146040;
    DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED :: 3146041;
    DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 3146042;
    DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED :: 3146043;
    DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED :: 3146044;
    DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED :: 3146045;
    DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 3146046;
    DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED :: 3146047;
    DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 3146048;
    DEVICE_CREATECOMPUTESHADER_SHADEREXTENSIONSNOTSUPPORTED :: 3146049;
    DEVICE_SHADER_LINKAGE_MINPRECISION :: 3146050;
    VIDEOPROCESSORSETSTREAMALPHA_UNSUPPORTED :: 3146051;
    VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_UNSUPPORTED :: 3146052;
    DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED :: 3146053;
    DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED :: 3146054;
    DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED :: 3146055;
    DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED :: 3146056;
    DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED :: 3146057;
    DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED :: 3146058;
    DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED :: 3146059;
    DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET :: 3146060;
    DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_TOOMANYVIEWS :: 3146061;
    DEVICE_CLEARVIEW_NOTSUPPORTED :: 3146062;
    SWAPDEVICECONTEXTSTATE_NOTSUPPORTED :: 3146063;
    UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1 :: 3146064;
    GETDC_INACCESSIBLE :: 3146065;
    DEVICE_CLEARVIEW_INVALIDRECT :: 3146066;
    DEVICE_DRAW_SAMPLE_MASK_IGNORED_ON_FL9 :: 3146067;
    DEVICE_OPEN_SHARED_RESOURCE1_NOT_SUPPORTED :: 3146068;
    DEVICE_OPEN_SHARED_RESOURCE_BY_NAME_NOT_SUPPORTED :: 3146069;
    ENQUEUESETEVENT_NOT_SUPPORTED :: 3146070;
    OFFERRELEASE_NOT_SUPPORTED :: 3146071;
    OFFERRESOURCES_INACCESSIBLE :: 3146072;
    CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMSAA :: 3146073;
    CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMSAA :: 3146074;
    DEVICE_CLEARVIEW_INVALIDSOURCERECT :: 3146075;
    DEVICE_CLEARVIEW_EMPTYRECT :: 3146076;
    UPDATESUBRESOURCE_EMPTYDESTBOX :: 3146077;
    COPYSUBRESOURCEREGION_EMPTYSOURCEBOX :: 3146078;
    DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS :: 3146079;
    DEVICE_DRAW_DEPTHSTENCILVIEW_NOT_SET :: 3146080;
    DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET :: 3146081;
    DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET_DUE_TO_FLIP_PRESENT :: 3146082;
    DEVICE_UNORDEREDACCESSVIEW_NOT_SET_DUE_TO_FLIP_PRESENT :: 3146083;
    GETDATAFORNEWHARDWAREKEY_NULLPARAM :: 3146084;
    CHECKCRYPTOSESSIONSTATUS_NULLPARAM :: 3146085;
    GETCRYPTOSESSIONPRIVATEDATASIZE_NULLPARAM :: 3146086;
    GETVIDEODECODERCAPS_NULLPARAM :: 3146087;
    GETVIDEODECODERCAPS_ZEROWIDTHHEIGHT :: 3146088;
    CHECKVIDEODECODERDOWNSAMPLING_NULLPARAM :: 3146089;
    CHECKVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE :: 3146090;
    CHECKVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT :: 3146091;
    VIDEODECODERENABLEDOWNSAMPLING_NULLPARAM :: 3146092;
    VIDEODECODERENABLEDOWNSAMPLING_UNSUPPORTED :: 3146093;
    VIDEODECODERUPDATEDOWNSAMPLING_NULLPARAM :: 3146094;
    VIDEODECODERUPDATEDOWNSAMPLING_UNSUPPORTED :: 3146095;
    CHECKVIDEOPROCESSORFORMATCONVERSION_NULLPARAM :: 3146096;
    VIDEOPROCESSORSETOUTPUTCOLORSPACE1_NULLPARAM :: 3146097;
    VIDEOPROCESSORGETOUTPUTCOLORSPACE1_NULLPARAM :: 3146098;
    VIDEOPROCESSORSETSTREAMCOLORSPACE1_NULLPARAM :: 3146099;
    VIDEOPROCESSORSETSTREAMCOLORSPACE1_INVALIDSTREAM :: 3146100;
    VIDEOPROCESSORSETSTREAMMIRROR_NULLPARAM :: 3146101;
    VIDEOPROCESSORSETSTREAMMIRROR_INVALIDSTREAM :: 3146102;
    VIDEOPROCESSORSETSTREAMMIRROR_UNSUPPORTED :: 3146103;
    VIDEOPROCESSORGETSTREAMCOLORSPACE1_NULLPARAM :: 3146104;
    VIDEOPROCESSORGETSTREAMMIRROR_NULLPARAM :: 3146105;
    RECOMMENDVIDEODECODERDOWNSAMPLING_NULLPARAM :: 3146106;
    RECOMMENDVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE :: 3146107;
    RECOMMENDVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT :: 3146108;
    VIDEOPROCESSORSETOUTPUTSHADERUSAGE_NULLPARAM :: 3146109;
    VIDEOPROCESSORGETOUTPUTSHADERUSAGE_NULLPARAM :: 3146110;
    VIDEOPROCESSORGETBEHAVIORHINTS_NULLPARAM :: 3146111;
    VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSTREAMCOUNT :: 3146112;
    VIDEOPROCESSORGETBEHAVIORHINTS_TARGETRECT :: 3146113;
    VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSOURCERECT :: 3146114;
    VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDDESTRECT :: 3146115;
    GETCRYPTOSESSIONPRIVATEDATASIZE_INVALID_KEY_EXCHANGE_TYPE :: 3146116;
    D3D11_1_MESSAGES_END :: 3146117;
    D3D11_2_MESSAGES_START :: 3146118;
    CREATEBUFFER_INVALIDUSAGE :: 3146119;
    CREATETEXTURE1D_INVALIDUSAGE :: 3146120;
    CREATETEXTURE2D_INVALIDUSAGE :: 3146121;
    CREATEINPUTLAYOUT_LEVEL9_STEPRATE_NOT_1 :: 3146122;
    CREATEINPUTLAYOUT_LEVEL9_INSTANCING_NOT_SUPPORTED :: 3146123;
    UPDATETILEMAPPINGS_INVALID_PARAMETER :: 3146124;
    COPYTILEMAPPINGS_INVALID_PARAMETER :: 3146125;
    COPYTILES_INVALID_PARAMETER :: 3146126;
    UPDATETILES_INVALID_PARAMETER :: 3146127;
    RESIZETILEPOOL_INVALID_PARAMETER :: 3146128;
    TILEDRESOURCEBARRIER_INVALID_PARAMETER :: 3146129;
    NULL_TILE_MAPPING_ACCESS_WARNING :: 3146130;
    NULL_TILE_MAPPING_ACCESS_ERROR :: 3146131;
    DIRTY_TILE_MAPPING_ACCESS :: 3146132;
    DUPLICATE_TILE_MAPPINGS_IN_COVERED_AREA :: 3146133;
    TILE_MAPPINGS_IN_COVERED_AREA_DUPLICATED_OUTSIDE :: 3146134;
    TILE_MAPPINGS_SHARED_BETWEEN_INCOMPATIBLE_RESOURCES :: 3146135;
    TILE_MAPPINGS_SHARED_BETWEEN_INPUT_AND_OUTPUT :: 3146136;
    CHECKMULTISAMPLEQUALITYLEVELS_INVALIDFLAGS :: 3146137;
    GETRESOURCETILING_NONTILED_RESOURCE :: 3146138;
    RESIZETILEPOOL_SHRINK_WITH_MAPPINGS_STILL_DEFINED_PAST_END :: 3146139;
    NEED_TO_CALL_TILEDRESOURCEBARRIER :: 3146140;
    CREATEDEVICE_INVALIDARGS :: 3146141;
    CREATEDEVICE_WARNING :: 3146142;
    CLEARUNORDEREDACCESSVIEWUINT_HAZARD :: 3146143;
    CLEARUNORDEREDACCESSVIEWFLOAT_HAZARD :: 3146144;
    TILED_RESOURCE_TIER_1_BUFFER_TEXTURE_MISMATCH :: 3146145;
    CREATE_CRYPTOSESSION :: 3146146;
    CREATE_AUTHENTICATEDCHANNEL :: 3146147;
    LIVE_CRYPTOSESSION :: 3146148;
    LIVE_AUTHENTICATEDCHANNEL :: 3146149;
    DESTROY_CRYPTOSESSION :: 3146150;
    DESTROY_AUTHENTICATEDCHANNEL :: 3146151;
    D3D11_2_MESSAGES_END :: 3146152;
    D3D11_3_MESSAGES_START :: 3146153;
    CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE :: 3146154;
    DEVICE_DRAW_INVALID_SYSTEMVALUE :: 3146155;
    CREATEQUERYORPREDICATE_INVALIDCONTEXTTYPE :: 3146156;
    CREATEQUERYORPREDICATE_DECODENOTSUPPORTED :: 3146157;
    CREATEQUERYORPREDICATE_ENCODENOTSUPPORTED :: 3146158;
    CREATESHADERRESOURCEVIEW_INVALIDPLANEINDEX :: 3146159;
    CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANEINDEX :: 3146160;
    CREATESHADERRESOURCEVIEW_AMBIGUOUSVIDEOPLANEINDEX :: 3146161;
    CREATERENDERTARGETVIEW_INVALIDPLANEINDEX :: 3146162;
    CREATERENDERTARGETVIEW_INVALIDVIDEOPLANEINDEX :: 3146163;
    CREATERENDERTARGETVIEW_AMBIGUOUSVIDEOPLANEINDEX :: 3146164;
    CREATEUNORDEREDACCESSVIEW_INVALIDPLANEINDEX :: 3146165;
    CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANEINDEX :: 3146166;
    CREATEUNORDEREDACCESSVIEW_AMBIGUOUSVIDEOPLANEINDEX :: 3146167;
    JPEGDECODE_INVALIDSCANDATAOFFSET :: 3146168;
    JPEGDECODE_NOTSUPPORTED :: 3146169;
    JPEGDECODE_DIMENSIONSTOOLARGE :: 3146170;
    JPEGDECODE_INVALIDCOMPONENTS :: 3146171;
    JPEGDECODE_DESTINATIONNOT2D :: 3146172;
    JPEGDECODE_TILEDRESOURCESUNSUPPORTED :: 3146173;
    JPEGDECODE_GUARDRECTSUNSUPPORTED :: 3146174;
    JPEGDECODE_FORMATUNSUPPORTED :: 3146175;
    JPEGDECODE_INVALIDSUBRESOURCE :: 3146176;
    JPEGDECODE_INVALIDMIPLEVEL :: 3146177;
    JPEGDECODE_EMPTYDESTBOX :: 3146178;
    JPEGDECODE_DESTBOXNOT2D :: 3146179;
    JPEGDECODE_DESTBOXNOTSUB :: 3146180;
    JPEGDECODE_DESTBOXESINTERSECT :: 3146181;
    JPEGDECODE_XSUBSAMPLEMISMATCH :: 3146182;
    JPEGDECODE_YSUBSAMPLEMISMATCH :: 3146183;
    JPEGDECODE_XSUBSAMPLEODD :: 3146184;
    JPEGDECODE_YSUBSAMPLEODD :: 3146185;
    JPEGDECODE_OUTPUTDIMENSIONSTOOLARGE :: 3146186;
    JPEGDECODE_NONPOW2SCALEUNSUPPORTED :: 3146187;
    JPEGDECODE_FRACTIONALDOWNSCALETOLARGE :: 3146188;
    JPEGDECODE_CHROMASIZEMISMATCH :: 3146189;
    JPEGDECODE_LUMACHROMASIZEMISMATCH :: 3146190;
    JPEGDECODE_INVALIDNUMDESTINATIONS :: 3146191;
    JPEGDECODE_SUBBOXUNSUPPORTED :: 3146192;
    JPEGDECODE_1DESTUNSUPPORTEDFORMAT :: 3146193;
    JPEGDECODE_3DESTUNSUPPORTEDFORMAT :: 3146194;
    JPEGDECODE_SCALEUNSUPPORTED :: 3146195;
    JPEGDECODE_INVALIDSOURCESIZE :: 3146196;
    JPEGDECODE_INVALIDCOPYFLAGS :: 3146197;
    JPEGDECODE_HAZARD :: 3146198;
    JPEGDECODE_UNSUPPORTEDSRCBUFFERUSAGE :: 3146199;
    JPEGDECODE_UNSUPPORTEDSRCBUFFERMISCFLAGS :: 3146200;
    JPEGDECODE_UNSUPPORTEDDSTTEXTUREUSAGE :: 3146201;
    JPEGDECODE_BACKBUFFERNOTSUPPORTED :: 3146202;
    JPEGDECODE_UNSUPPRTEDCOPYFLAGS :: 3146203;
    JPEGENCODE_NOTSUPPORTED :: 3146204;
    JPEGENCODE_INVALIDSCANDATAOFFSET :: 3146205;
    JPEGENCODE_INVALIDCOMPONENTS :: 3146206;
    JPEGENCODE_SOURCENOT2D :: 3146207;
    JPEGENCODE_TILEDRESOURCESUNSUPPORTED :: 3146208;
    JPEGENCODE_GUARDRECTSUNSUPPORTED :: 3146209;
    JPEGENCODE_XSUBSAMPLEMISMATCH :: 3146210;
    JPEGENCODE_YSUBSAMPLEMISMATCH :: 3146211;
    JPEGENCODE_FORMATUNSUPPORTED :: 3146212;
    JPEGENCODE_INVALIDSUBRESOURCE :: 3146213;
    JPEGENCODE_INVALIDMIPLEVEL :: 3146214;
    JPEGENCODE_DIMENSIONSTOOLARGE :: 3146215;
    JPEGENCODE_HAZARD :: 3146216;
    JPEGENCODE_UNSUPPORTEDDSTBUFFERUSAGE :: 3146217;
    JPEGENCODE_UNSUPPORTEDDSTBUFFERMISCFLAGS :: 3146218;
    JPEGENCODE_UNSUPPORTEDSRCTEXTUREUSAGE :: 3146219;
    JPEGENCODE_BACKBUFFERNOTSUPPORTED :: 3146220;
    CREATEQUERYORPREDICATE_UNSUPPORTEDCONTEXTTTYPEFORQUERY :: 3146221;
    FLUSH1_INVALIDCONTEXTTYPE :: 3146222;
    DEVICE_SETHARDWAREPROTECTION_INVALIDCONTEXT :: 3146223;
    VIDEOPROCESSORSETOUTPUTHDRMETADATA_NULLPARAM :: 3146224;
    VIDEOPROCESSORSETOUTPUTHDRMETADATA_INVALIDSIZE :: 3146225;
    VIDEOPROCESSORGETOUTPUTHDRMETADATA_NULLPARAM :: 3146226;
    VIDEOPROCESSORGETOUTPUTHDRMETADATA_INVALIDSIZE :: 3146227;
    VIDEOPROCESSORSETSTREAMHDRMETADATA_NULLPARAM :: 3146228;
    VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSTREAM :: 3146229;
    VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSIZE :: 3146230;
    VIDEOPROCESSORGETSTREAMHDRMETADATA_NULLPARAM :: 3146231;
    VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSTREAM :: 3146232;
    VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSIZE :: 3146233;
    VIDEOPROCESSORGETSTREAMFRAMEFORMAT_INVALIDSTREAM :: 3146234;
    VIDEOPROCESSORGETSTREAMCOLORSPACE_INVALIDSTREAM :: 3146235;
    VIDEOPROCESSORGETSTREAMOUTPUTRATE_INVALIDSTREAM :: 3146236;
    VIDEOPROCESSORGETSTREAMSOURCERECT_INVALIDSTREAM :: 3146237;
    VIDEOPROCESSORGETSTREAMDESTRECT_INVALIDSTREAM :: 3146238;
    VIDEOPROCESSORGETSTREAMALPHA_INVALIDSTREAM :: 3146239;
    VIDEOPROCESSORGETSTREAMPALETTE_INVALIDSTREAM :: 3146240;
    VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_INVALIDSTREAM :: 3146241;
    VIDEOPROCESSORGETSTREAMLUMAKEY_INVALIDSTREAM :: 3146242;
    VIDEOPROCESSORGETSTREAMSTEREOFORMAT_INVALIDSTREAM :: 3146243;
    VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM :: 3146244;
    VIDEOPROCESSORGETSTREAMFILTER_INVALIDSTREAM :: 3146245;
    VIDEOPROCESSORGETSTREAMROTATION_INVALIDSTREAM :: 3146246;
    VIDEOPROCESSORGETSTREAMCOLORSPACE1_INVALIDSTREAM :: 3146247;
    VIDEOPROCESSORGETSTREAMMIRROR_INVALIDSTREAM :: 3146248;
    CREATE_FENCE :: 3146249;
    LIVE_FENCE :: 3146250;
    DESTROY_FENCE :: 3146251;
    CREATE_SYNCHRONIZEDCHANNEL :: 3146252;
    LIVE_SYNCHRONIZEDCHANNEL :: 3146253;
    DESTROY_SYNCHRONIZEDCHANNEL :: 3146254;
    CREATEFENCE_INVALIDFLAGS :: 3146255;
    D3D11_3_MESSAGES_END :: 3146256;
    D3D11_5_MESSAGES_START :: 3146257;
    NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_INVALIDKEYEXCHANGETYPE :: 3146258;
    NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_NOT_SUPPORTED :: 3146259;
    DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT_COUNT :: 3146260;
    DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT :: 3146261;
    DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_SIZE :: 3146262;
    DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_USAGE :: 3146263;
    DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_MISC_FLAGS :: 3146264;
    DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_OFFSET :: 3146265;
    CREATE_TRACKEDWORKLOAD :: 3146266;
    LIVE_TRACKEDWORKLOAD :: 3146267;
    DESTROY_TRACKEDWORKLOAD :: 3146268;
    CREATE_TRACKED_WORKLOAD_NULLPARAM :: 3146269;
    CREATE_TRACKED_WORKLOAD_INVALID_MAX_INSTANCES :: 3146270;
    CREATE_TRACKED_WORKLOAD_INVALID_DEADLINE_TYPE :: 3146271;
    CREATE_TRACKED_WORKLOAD_INVALID_ENGINE_TYPE :: 3146272;
    MULTIPLE_TRACKED_WORKLOADS :: 3146273;
    MULTIPLE_TRACKED_WORKLOAD_PAIRS :: 3146274;
    INCOMPLETE_TRACKED_WORKLOAD_PAIR :: 3146275;
    OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR :: 3146276;
    CANNOT_ADD_TRACKED_WORKLOAD :: 3146277;
    TRACKED_WORKLOAD_NOT_SUPPORTED :: 3146278;
    TRACKED_WORKLOAD_ENGINE_TYPE_NOT_FOUND :: 3146279;
    NO_TRACKED_WORKLOAD_SLOT_AVAILABLE :: 3146280;
    END_TRACKED_WORKLOAD_INVALID_ARG :: 3146281;
    TRACKED_WORKLOAD_DISJOINT_FAILURE :: 3146282;
    D3D11_5_MESSAGES_END :: 3146283;
}

D3D11_MESSAGE_ID_UNKNOWN :: 0;
D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD :: 1;
D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD :: 2;
D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD :: 3;
D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD :: 4;
D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD :: 5;
D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD :: 6;
D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD :: 7;
D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD :: 8;
D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD :: 9;
D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD :: 10;
D3D11_MESSAGE_ID_STRING_FROM_APPLICATION :: 11;
D3D11_MESSAGE_ID_CORRUPTED_THIS :: 12;
D3D11_MESSAGE_ID_CORRUPTED_PARAMETER1 :: 13;
D3D11_MESSAGE_ID_CORRUPTED_PARAMETER2 :: 14;
D3D11_MESSAGE_ID_CORRUPTED_PARAMETER3 :: 15;
D3D11_MESSAGE_ID_CORRUPTED_PARAMETER4 :: 16;
D3D11_MESSAGE_ID_CORRUPTED_PARAMETER5 :: 17;
D3D11_MESSAGE_ID_CORRUPTED_PARAMETER6 :: 18;
D3D11_MESSAGE_ID_CORRUPTED_PARAMETER7 :: 19;
D3D11_MESSAGE_ID_CORRUPTED_PARAMETER8 :: 20;
D3D11_MESSAGE_ID_CORRUPTED_PARAMETER9 :: 21;
D3D11_MESSAGE_ID_CORRUPTED_PARAMETER10 :: 22;
D3D11_MESSAGE_ID_CORRUPTED_PARAMETER11 :: 23;
D3D11_MESSAGE_ID_CORRUPTED_PARAMETER12 :: 24;
D3D11_MESSAGE_ID_CORRUPTED_PARAMETER13 :: 25;
D3D11_MESSAGE_ID_CORRUPTED_PARAMETER14 :: 26;
D3D11_MESSAGE_ID_CORRUPTED_PARAMETER15 :: 27;
D3D11_MESSAGE_ID_CORRUPTED_MULTITHREADING :: 28;
D3D11_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY :: 29;
D3D11_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT :: 30;
D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT :: 31;
D3D11_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT :: 32;
D3D11_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT :: 33;
D3D11_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT :: 34;
D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT :: 35;
D3D11_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT :: 36;
D3D11_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT :: 37;
D3D11_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT :: 38;
D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT :: 39;
D3D11_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT :: 40;
D3D11_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT :: 41;
D3D11_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT :: 42;
D3D11_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT :: 43;
D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT :: 44;
D3D11_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT :: 45;
D3D11_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT :: 46;
D3D11_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT :: 47;
D3D11_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT :: 48;
D3D11_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT :: 49;
D3D11_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT :: 50;
D3D11_MESSAGE_ID_GETPRIVATEDATA_MOREDATA :: 51;
D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA :: 52;
D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN :: 53;
D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS :: 54;
D3D11_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS :: 55;
D3D11_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY :: 56;
D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT :: 57;
D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES :: 58;
D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE :: 59;
D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS :: 60;
D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS :: 61;
D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS :: 62;
D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS :: 63;
D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS :: 64;
D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA :: 65;
D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS :: 66;
D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS :: 67;
D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS :: 68;
D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN :: 69;
D3D11_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN :: 70;
D3D11_MESSAGE_ID_CREATEBUFFER_NULLDESC :: 71;
D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS :: 72;
D3D11_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION :: 73;
D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT :: 74;
D3D11_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT :: 75;
D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES :: 76;
D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE :: 77;
D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS :: 78;
D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS :: 79;
D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS :: 80;
D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS :: 81;
D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS :: 82;
D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA :: 83;
D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS :: 84;
D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS :: 85;
D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS :: 86;
D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN :: 87;
D3D11_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN :: 88;
D3D11_MESSAGE_ID_CREATETEXTURE1D_NULLDESC :: 89;
D3D11_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION :: 90;
D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT :: 91;
D3D11_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT :: 92;
D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES :: 93;
D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE :: 94;
D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS :: 95;
D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS :: 96;
D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS :: 97;
D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS :: 98;
D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS :: 99;
D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA :: 100;
D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS :: 101;
D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS :: 102;
D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS :: 103;
D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN :: 104;
D3D11_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN :: 105;
D3D11_MESSAGE_ID_CREATETEXTURE2D_NULLDESC :: 106;
D3D11_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION :: 107;
D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT :: 108;
D3D11_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT :: 109;
D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES :: 110;
D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE :: 111;
D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS :: 112;
D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS :: 113;
D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS :: 114;
D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS :: 115;
D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS :: 116;
D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA :: 117;
D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS :: 118;
D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS :: 119;
D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS :: 120;
D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN :: 121;
D3D11_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN :: 122;
D3D11_MESSAGE_ID_CREATETEXTURE3D_NULLDESC :: 123;
D3D11_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION :: 124;
D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT :: 125;
D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC :: 126;
D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT :: 127;
D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS :: 128;
D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE :: 129;
D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS :: 130;
D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN :: 131;
D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN :: 132;
D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT :: 133;
D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT :: 134;
D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC :: 135;
D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT :: 136;
D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS :: 137;
D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE :: 138;
D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS :: 139;
D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN :: 140;
D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN :: 141;
D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT :: 142;
D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC :: 143;
D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT :: 144;
D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS :: 145;
D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE :: 146;
D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS :: 147;
D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN :: 148;
D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN :: 149;
D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY :: 150;
D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS :: 151;
D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT :: 152;
D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT :: 153;
D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT :: 154;
D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS :: 155;
D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH :: 156;
D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE :: 157;
D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE :: 158;
D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT :: 159;
D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC :: 160;
D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE :: 161;
D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC :: 162;
D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT :: 163;
D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC :: 164;
D3D11_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY :: 165;
D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE :: 166;
D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE :: 167;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY :: 168;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE :: 169;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE :: 170;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY :: 171;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE :: 172;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE :: 173;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES :: 174;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED :: 175;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL :: 176;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL :: 177;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED :: 178;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT :: 179;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT :: 180;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT :: 181;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT :: 182;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION :: 183;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT :: 184;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE :: 185;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC :: 186;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH :: 187;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS :: 188;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX :: 189;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE :: 190;
D3D11_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY :: 191;
D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE :: 192;
D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE :: 193;
D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE :: 194;
D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE :: 195;
D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP :: 196;
D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS :: 197;
D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS :: 198;
D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC :: 199;
D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK :: 200;
D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC :: 201;
D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP :: 202;
D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP :: 203;
D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP :: 204;
D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC :: 205;
D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP :: 206;
D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP :: 207;
D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP :: 208;
D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC :: 209;
D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS :: 210;
D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC :: 211;
D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND :: 212;
D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND :: 213;
D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP :: 214;
D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA :: 215;
D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA :: 216;
D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA :: 217;
D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK :: 218;
D3D11_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS :: 219;
D3D11_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC :: 220;
D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER :: 221;
D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU :: 222;
D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV :: 223;
D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW :: 224;
D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS :: 225;
D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY :: 226;
D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC :: 227;
D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD :: 228;
D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD :: 229;
D3D11_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS :: 230;
D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC :: 231;
D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY :: 232;
D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS :: 233;
D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG :: 234;
D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC :: 235;
D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED :: 236;
D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED :: 237;
D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER :: 238;
D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE :: 239;
D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY :: 240;
D3D11_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER :: 241;
D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID :: 242;
D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE :: 243;
D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED :: 244;
D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY :: 245;
D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER :: 246;
D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY :: 247;
D3D11_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY :: 248;
D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY :: 249;
D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER :: 250;
D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY :: 251;
D3D11_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY :: 252;
D3D11_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER :: 253;
D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED :: 254;
D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY :: 255;
D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER :: 256;
D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY :: 257;
D3D11_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY :: 258;
D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT :: 259;
D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR :: 260;
D3D11_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH :: 261;
D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH :: 262;
D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID :: 263;
D3D11_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY :: 264;
D3D11_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY :: 265;
D3D11_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY :: 266;
D3D11_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY :: 267;
D3D11_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY :: 268;
D3D11_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY :: 269;
D3D11_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY :: 270;
D3D11_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY :: 271;
D3D11_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY :: 272;
D3D11_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY :: 273;
D3D11_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY :: 274;
D3D11_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY :: 275;
D3D11_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY :: 276;
D3D11_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID :: 277;
D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE :: 278;
D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE :: 279;
D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX :: 280;
D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE :: 281;
D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE :: 282;
D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE :: 283;
D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE :: 284;
D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE :: 285;
D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE :: 286;
D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE :: 287;
D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX :: 288;
D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE :: 289;
D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID :: 290;
D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID :: 291;
D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID :: 292;
D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID :: 293;
D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID :: 294;
D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE :: 295;
D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS :: 296;
D3D11_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED :: 297;
D3D11_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN :: 298;
D3D11_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED :: 299;
D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE :: 300;
D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE :: 301;
D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS :: 302;
D3D11_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED :: 303;
D3D11_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN :: 304;
D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE :: 305;
D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED :: 306;
D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE :: 307;
D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE :: 308;
D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS :: 309;
D3D11_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED :: 310;
D3D11_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN :: 311;
D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE :: 312;
D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED :: 313;
D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE :: 314;
D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE :: 315;
D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS :: 316;
D3D11_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED :: 317;
D3D11_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN :: 318;
D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE :: 319;
D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED :: 320;
D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED :: 321;
D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED :: 322;
D3D11_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS :: 323;
D3D11_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN :: 324;
D3D11_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN :: 325;
D3D11_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE :: 326;
D3D11_MESSAGE_ID_REF_THREADING_MODE :: 327;
D3D11_MESSAGE_ID_REF_UMDRIVER_EXCEPTION :: 328;
D3D11_MESSAGE_ID_REF_KMDRIVER_EXCEPTION :: 329;
D3D11_MESSAGE_ID_REF_HARDWARE_EXCEPTION :: 330;
D3D11_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE :: 331;
D3D11_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER :: 332;
D3D11_MESSAGE_ID_REF_OUT_OF_MEMORY :: 333;
D3D11_MESSAGE_ID_REF_INFO :: 334;
D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW :: 335;
D3D11_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW :: 336;
D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW :: 337;
D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW :: 338;
D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW :: 339;
D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW :: 340;
D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET :: 341;
D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND :: 342;
D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX :: 343;
D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE :: 344;
D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK :: 345;
D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE :: 346;
D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS :: 347;
D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET :: 348;
D3D11_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET :: 349;
D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET :: 350;
D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL :: 351;
D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET :: 352;
D3D11_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET :: 353;
D3D11_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH :: 354;
D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL :: 355;
D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL :: 356;
D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET :: 357;
D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID :: 358;
D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL :: 359;
D3D11_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH :: 360;
D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH :: 361;
D3D11_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT :: 362;
D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET :: 363;
D3D11_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED :: 364;
D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY :: 365;
D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED :: 366;
D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED :: 367;
D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED :: 368;
D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED :: 369;
D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED :: 370;
D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED :: 371;
D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED :: 372;
D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED :: 373;
D3D11_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE :: 374;
D3D11_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER :: 375;
D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING :: 376;
D3D11_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 :: 377;
D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT :: 378;
D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT :: 379;
D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT :: 380;
D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN :: 381;
D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN :: 382;
D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN :: 383;
D3D11_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET :: 384;
D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC :: 385;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC :: 386;
D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH :: 387;
D3D11_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW :: 388;
D3D11_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS :: 389;
D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH :: 390;
D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH :: 391;
D3D11_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY :: 392;
D3D11_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY :: 393;
D3D11_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN :: 394;
D3D11_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN :: 395;
D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER :: 396;
D3D11_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED :: 397;
D3D11_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER :: 398;
D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN :: 399;
D3D11_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN :: 400;
D3D11_MESSAGE_ID_CREATECOUNTER_NULLDESC :: 401;
D3D11_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER :: 402;
D3D11_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER :: 403;
D3D11_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE :: 404;
D3D11_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED :: 405;
D3D11_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION :: 406;
D3D11_MESSAGE_ID_QUERY_BEGIN_DUPLICATE :: 407;
D3D11_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS :: 408;
D3D11_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION :: 409;
D3D11_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS :: 410;
D3D11_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN :: 411;
D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE :: 412;
D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS :: 413;
D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL :: 414;
D3D11_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH :: 415;
D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED :: 416;
D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN :: 417;
D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE :: 418;
D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE :: 419;
D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT :: 420;
D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH :: 421;
D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY :: 422;
D3D11_MESSAGE_ID_LIVE_BUFFER :: 423;
D3D11_MESSAGE_ID_LIVE_TEXTURE1D :: 424;
D3D11_MESSAGE_ID_LIVE_TEXTURE2D :: 425;
D3D11_MESSAGE_ID_LIVE_TEXTURE3D :: 426;
D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW :: 427;
D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW :: 428;
D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW :: 429;
D3D11_MESSAGE_ID_LIVE_VERTEXSHADER :: 430;
D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER :: 431;
D3D11_MESSAGE_ID_LIVE_PIXELSHADER :: 432;
D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT :: 433;
D3D11_MESSAGE_ID_LIVE_SAMPLER :: 434;
D3D11_MESSAGE_ID_LIVE_BLENDSTATE :: 435;
D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE :: 436;
D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE :: 437;
D3D11_MESSAGE_ID_LIVE_QUERY :: 438;
D3D11_MESSAGE_ID_LIVE_PREDICATE :: 439;
D3D11_MESSAGE_ID_LIVE_COUNTER :: 440;
D3D11_MESSAGE_ID_LIVE_DEVICE :: 441;
D3D11_MESSAGE_ID_LIVE_SWAPCHAIN :: 442;
D3D11_MESSAGE_ID_D3D10_MESSAGES_END :: 443;
D3D11_MESSAGE_ID_D3D10L9_MESSAGES_START :: 1048576;
D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED :: 1048577;
D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED :: 1048578;
D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT :: 1048579;
D3D11_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY :: 1048580;
D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE :: 1048581;
D3D11_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED :: 1048582;
D3D11_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS :: 1048583;
D3D11_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS :: 1048584;
D3D11_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS :: 1048585;
D3D11_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND :: 1048586;
D3D11_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D :: 1048587;
D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE :: 1048588;
D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE :: 1048589;
D3D11_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS :: 1048590;
D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS :: 1048591;
D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX :: 1048592;
D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS :: 1048593;
D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED :: 1048594;
D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS :: 1048595;
D3D11_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY :: 1048596;
D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK :: 1048597;
D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK :: 1048598;
D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT :: 1048599;
D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE :: 1048600;
D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE :: 1048601;
D3D11_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE :: 1048602;
D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD :: 1048603;
D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL :: 1048604;
D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX :: 1048605;
D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO :: 1048606;
D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES :: 1048607;
D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET :: 1048608;
D3D11_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER :: 1048609;
D3D11_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE :: 1048610;
D3D11_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE :: 1048611;
D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE :: 1048612;
D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS :: 1048613;
D3D11_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT :: 1048614;
D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS :: 1048615;
D3D11_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES :: 1048616;
D3D11_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED :: 1048617;
D3D11_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED :: 1048618;
D3D11_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED :: 1048619;
D3D11_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED :: 1048620;
D3D11_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED :: 1048621;
D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND :: 1048622;
D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND :: 1048623;
D3D11_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED :: 1048624;
D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE :: 1048625;
D3D11_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED :: 1048626;
D3D11_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 :: 1048627;
D3D11_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED :: 1048628;
D3D11_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO :: 1048629;
D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION :: 1048630;
D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED :: 1048631;
D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR :: 1048632;
D3D11_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA :: 1048633;
D3D11_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP :: 1048634;
D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED :: 1048635;
D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT :: 1048636;
D3D11_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES :: 1048637;
D3D11_MESSAGE_ID_D3D10L9_MESSAGES_END :: 1048638;
D3D11_MESSAGE_ID_D3D11_MESSAGES_START :: 2097152;
D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS :: 2097153;
D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE :: 2097154;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE :: 2097155;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS :: 2097156;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER :: 2097157;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS :: 2097158;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE :: 2097159;
D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE :: 2097160;
D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS :: 2097161;
D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_SINGLETHREADED :: 2097162;
D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALIDARG_RETURN :: 2097163;
D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN :: 2097164;
D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN :: 2097165;
D3D11_MESSAGE_ID_FINISHDISPLAYLIST_ONIMMEDIATECONTEXT :: 2097166;
D3D11_MESSAGE_ID_FINISHDISPLAYLIST_OUTOFMEMORY_RETURN :: 2097167;
D3D11_MESSAGE_ID_FINISHDISPLAYLIST_INVALID_CALL_RETURN :: 2097168;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM :: 2097169;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES :: 2097170;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES :: 2097171;
D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES :: 2097172;
D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_HAZARD :: 2097173;
D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_HAZARD :: 2097174;
D3D11_MESSAGE_ID_HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT :: 2097175;
D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT :: 2097176;
D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL :: 2097177;
D3D11_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY :: 2097178;
D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE :: 2097179;
D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE :: 2097180;
D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE :: 2097181;
D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY :: 2097182;
D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFER :: 2097183;
D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY :: 2097184;
D3D11_MESSAGE_ID_DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY :: 2097185;
D3D11_MESSAGE_ID_DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY :: 2097186;
D3D11_MESSAGE_ID_DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY :: 2097187;
D3D11_MESSAGE_ID_DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY :: 2097188;
D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_HAZARD :: 2097189;
D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_HAZARD :: 2097190;
D3D11_MESSAGE_ID_DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT :: 2097191;
D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT :: 2097192;
D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL :: 2097193;
D3D11_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY :: 2097194;
D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE :: 2097195;
D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE :: 2097196;
D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE :: 2097197;
D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY :: 2097198;
D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFER :: 2097199;
D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY :: 2097200;
D3D11_MESSAGE_ID_DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY :: 2097201;
D3D11_MESSAGE_ID_DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY :: 2097202;
D3D11_MESSAGE_ID_DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY :: 2097203;
D3D11_MESSAGE_ID_DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY :: 2097204;
D3D11_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH :: 2097205;
D3D11_MESSAGE_ID_DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT :: 2097206;
D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER :: 2097207;
D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED :: 2097208;
D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW :: 2097209;
D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE :: 2097210;
D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE :: 2097211;
D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS :: 2097212;
D3D11_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED :: 2097213;
D3D11_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN :: 2097214;
D3D11_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN :: 2097215;
D3D11_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD :: 2097216;
D3D11_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE :: 2097217;
D3D11_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED :: 2097218;
D3D11_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS :: 2097219;
D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED :: 2097220;
D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH :: 2097221;
D3D11_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH :: 2097222;
D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH :: 2097223;
D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH :: 2097224;
D3D11_MESSAGE_ID_CREATE_CONTEXT :: 2097225;
D3D11_MESSAGE_ID_LIVE_CONTEXT :: 2097226;
D3D11_MESSAGE_ID_DESTROY_CONTEXT :: 2097227;
D3D11_MESSAGE_ID_CREATE_BUFFER :: 2097228;
D3D11_MESSAGE_ID_LIVE_BUFFER_WIN7 :: 2097229;
D3D11_MESSAGE_ID_DESTROY_BUFFER :: 2097230;
D3D11_MESSAGE_ID_CREATE_TEXTURE1D :: 2097231;
D3D11_MESSAGE_ID_LIVE_TEXTURE1D_WIN7 :: 2097232;
D3D11_MESSAGE_ID_DESTROY_TEXTURE1D :: 2097233;
D3D11_MESSAGE_ID_CREATE_TEXTURE2D :: 2097234;
D3D11_MESSAGE_ID_LIVE_TEXTURE2D_WIN7 :: 2097235;
D3D11_MESSAGE_ID_DESTROY_TEXTURE2D :: 2097236;
D3D11_MESSAGE_ID_CREATE_TEXTURE3D :: 2097237;
D3D11_MESSAGE_ID_LIVE_TEXTURE3D_WIN7 :: 2097238;
D3D11_MESSAGE_ID_DESTROY_TEXTURE3D :: 2097239;
D3D11_MESSAGE_ID_CREATE_SHADERRESOURCEVIEW :: 2097240;
D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW_WIN7 :: 2097241;
D3D11_MESSAGE_ID_DESTROY_SHADERRESOURCEVIEW :: 2097242;
D3D11_MESSAGE_ID_CREATE_RENDERTARGETVIEW :: 2097243;
D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW_WIN7 :: 2097244;
D3D11_MESSAGE_ID_DESTROY_RENDERTARGETVIEW :: 2097245;
D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILVIEW :: 2097246;
D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW_WIN7 :: 2097247;
D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILVIEW :: 2097248;
D3D11_MESSAGE_ID_CREATE_VERTEXSHADER :: 2097249;
D3D11_MESSAGE_ID_LIVE_VERTEXSHADER_WIN7 :: 2097250;
D3D11_MESSAGE_ID_DESTROY_VERTEXSHADER :: 2097251;
D3D11_MESSAGE_ID_CREATE_HULLSHADER :: 2097252;
D3D11_MESSAGE_ID_LIVE_HULLSHADER :: 2097253;
D3D11_MESSAGE_ID_DESTROY_HULLSHADER :: 2097254;
D3D11_MESSAGE_ID_CREATE_DOMAINSHADER :: 2097255;
D3D11_MESSAGE_ID_LIVE_DOMAINSHADER :: 2097256;
D3D11_MESSAGE_ID_DESTROY_DOMAINSHADER :: 2097257;
D3D11_MESSAGE_ID_CREATE_GEOMETRYSHADER :: 2097258;
D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER_WIN7 :: 2097259;
D3D11_MESSAGE_ID_DESTROY_GEOMETRYSHADER :: 2097260;
D3D11_MESSAGE_ID_CREATE_PIXELSHADER :: 2097261;
D3D11_MESSAGE_ID_LIVE_PIXELSHADER_WIN7 :: 2097262;
D3D11_MESSAGE_ID_DESTROY_PIXELSHADER :: 2097263;
D3D11_MESSAGE_ID_CREATE_INPUTLAYOUT :: 2097264;
D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT_WIN7 :: 2097265;
D3D11_MESSAGE_ID_DESTROY_INPUTLAYOUT :: 2097266;
D3D11_MESSAGE_ID_CREATE_SAMPLER :: 2097267;
D3D11_MESSAGE_ID_LIVE_SAMPLER_WIN7 :: 2097268;
D3D11_MESSAGE_ID_DESTROY_SAMPLER :: 2097269;
D3D11_MESSAGE_ID_CREATE_BLENDSTATE :: 2097270;
D3D11_MESSAGE_ID_LIVE_BLENDSTATE_WIN7 :: 2097271;
D3D11_MESSAGE_ID_DESTROY_BLENDSTATE :: 2097272;
D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILSTATE :: 2097273;
D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE_WIN7 :: 2097274;
D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILSTATE :: 2097275;
D3D11_MESSAGE_ID_CREATE_RASTERIZERSTATE :: 2097276;
D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE_WIN7 :: 2097277;
D3D11_MESSAGE_ID_DESTROY_RASTERIZERSTATE :: 2097278;
D3D11_MESSAGE_ID_CREATE_QUERY :: 2097279;
D3D11_MESSAGE_ID_LIVE_QUERY_WIN7 :: 2097280;
D3D11_MESSAGE_ID_DESTROY_QUERY :: 2097281;
D3D11_MESSAGE_ID_CREATE_PREDICATE :: 2097282;
D3D11_MESSAGE_ID_LIVE_PREDICATE_WIN7 :: 2097283;
D3D11_MESSAGE_ID_DESTROY_PREDICATE :: 2097284;
D3D11_MESSAGE_ID_CREATE_COUNTER :: 2097285;
D3D11_MESSAGE_ID_DESTROY_COUNTER :: 2097286;
D3D11_MESSAGE_ID_CREATE_COMMANDLIST :: 2097287;
D3D11_MESSAGE_ID_LIVE_COMMANDLIST :: 2097288;
D3D11_MESSAGE_ID_DESTROY_COMMANDLIST :: 2097289;
D3D11_MESSAGE_ID_CREATE_CLASSINSTANCE :: 2097290;
D3D11_MESSAGE_ID_LIVE_CLASSINSTANCE :: 2097291;
D3D11_MESSAGE_ID_DESTROY_CLASSINSTANCE :: 2097292;
D3D11_MESSAGE_ID_CREATE_CLASSLINKAGE :: 2097293;
D3D11_MESSAGE_ID_LIVE_CLASSLINKAGE :: 2097294;
D3D11_MESSAGE_ID_DESTROY_CLASSLINKAGE :: 2097295;
D3D11_MESSAGE_ID_LIVE_DEVICE_WIN7 :: 2097296;
D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY_WIN7 :: 2097297;
D3D11_MESSAGE_ID_CREATE_COMPUTESHADER :: 2097298;
D3D11_MESSAGE_ID_LIVE_COMPUTESHADER :: 2097299;
D3D11_MESSAGE_ID_DESTROY_COMPUTESHADER :: 2097300;
D3D11_MESSAGE_ID_CREATE_UNORDEREDACCESSVIEW :: 2097301;
D3D11_MESSAGE_ID_LIVE_UNORDEREDACCESSVIEW :: 2097302;
D3D11_MESSAGE_ID_DESTROY_UNORDEREDACCESSVIEW :: 2097303;
D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACES_FEATURELEVEL :: 2097304;
D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH :: 2097305;
D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE :: 2097306;
D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_INDEX :: 2097307;
D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_TYPE :: 2097308;
D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_DATA :: 2097309;
D3D11_MESSAGE_ID_DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA :: 2097310;
D3D11_MESSAGE_ID_DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS :: 2097311;
D3D11_MESSAGE_ID_DEVICE_CREATESHADER_CLASSLINKAGE_FULL :: 2097312;
D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE :: 2097313;
D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE :: 2097314;
D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN :: 2097315;
D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_HAZARD :: 2097316;
D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_HAZARD :: 2097317;
D3D11_MESSAGE_ID_CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT :: 2097318;
D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT :: 2097319;
D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL :: 2097320;
D3D11_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY :: 2097321;
D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE :: 2097322;
D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERTYPE :: 2097323;
D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE :: 2097324;
D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY :: 2097325;
D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER :: 2097326;
D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY :: 2097327;
D3D11_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY :: 2097328;
D3D11_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY :: 2097329;
D3D11_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY :: 2097330;
D3D11_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY :: 2097331;
D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 2097332;
D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 2097333;
D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 2097334;
D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 2097335;
D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED :: 2097336;
D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 2097337;
D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 2097338;
D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE :: 2097339;
D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS :: 2097340;
D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE :: 2097341;
D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC :: 2097342;
D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT :: 2097343;
D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS :: 2097344;
D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT :: 2097345;
D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD :: 2097346;
D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS :: 2097347;
D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP :: 2097348;
D3D11_MESSAGE_ID_CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT :: 2097349;
D3D11_MESSAGE_ID_PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT :: 2097350;
D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN :: 2097351;
D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN :: 2097352;
D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS :: 2097353;
D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD :: 2097354;
D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH :: 2097355;
D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY :: 2097356;
D3D11_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY :: 2097357;
D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS :: 2097358;
D3D11_MESSAGE_ID_CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS :: 2097359;
D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER :: 2097360;
D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED :: 2097361;
D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW :: 2097362;
D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT :: 2097363;
D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE :: 2097364;
D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD :: 2097365;
D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT :: 2097366;
D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE :: 2097367;
D3D11_MESSAGE_ID_OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT :: 2097368;
D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY :: 2097369;
D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY :: 2097370;
D3D11_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED :: 2097371;
D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH :: 2097372;
D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET :: 2097373;
D3D11_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP :: 2097374;
D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH :: 2097375;
D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED :: 2097376;
D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED :: 2097377;
D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH :: 2097378;
D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH :: 2097379;
D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED :: 2097380;
D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED :: 2097381;
D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED :: 2097382;
D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED :: 2097383;
D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED :: 2097384;
D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED :: 2097385;
D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED :: 2097386;
D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED :: 2097387;
D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED :: 2097388;
D3D11_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED :: 2097389;
D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW :: 2097390;
D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO :: 2097391;
D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH :: 2097392;
D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH :: 2097393;
D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED :: 2097394;
D3D11_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED :: 2097395;
D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED :: 2097396;
D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET :: 2097397;
D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET :: 2097398;
D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE :: 2097399;
D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE :: 2097400;
D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED :: 2097401;
D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW :: 2097402;
D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET :: 2097403;
D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS :: 2097404;
D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT :: 2097405;
D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED :: 2097406;
D3D11_MESSAGE_ID_REF_WARNING :: 2097407;
D3D11_MESSAGE_ID_DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV :: 2097408;
D3D11_MESSAGE_ID_SHADER_ABORT :: 2097409;
D3D11_MESSAGE_ID_SHADER_MESSAGE :: 2097410;
D3D11_MESSAGE_ID_SHADER_ERROR :: 2097411;
D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDRESOURCE :: 2097412;
D3D11_MESSAGE_ID_HSSETSAMPLERS_UNBINDDELETINGOBJECT :: 2097413;
D3D11_MESSAGE_ID_DSSETSAMPLERS_UNBINDDELETINGOBJECT :: 2097414;
D3D11_MESSAGE_ID_CSSETSAMPLERS_UNBINDDELETINGOBJECT :: 2097415;
D3D11_MESSAGE_ID_HSSETSHADER_UNBINDDELETINGOBJECT :: 2097416;
D3D11_MESSAGE_ID_DSSETSHADER_UNBINDDELETINGOBJECT :: 2097417;
D3D11_MESSAGE_ID_CSSETSHADER_UNBINDDELETINGOBJECT :: 2097418;
D3D11_MESSAGE_ID_ENQUEUESETEVENT_INVALIDARG_RETURN :: 2097419;
D3D11_MESSAGE_ID_ENQUEUESETEVENT_OUTOFMEMORY_RETURN :: 2097420;
D3D11_MESSAGE_ID_ENQUEUESETEVENT_ACCESSDENIED_RETURN :: 2097421;
D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NUMUAVS_INVALIDRANGE :: 2097422;
D3D11_MESSAGE_ID_USE_OF_ZERO_REFCOUNT_OBJECT :: 2097423;
D3D11_MESSAGE_ID_D3D11_MESSAGES_END :: 2097424;
D3D11_MESSAGE_ID_D3D11_1_MESSAGES_START :: 3145728;
D3D11_MESSAGE_ID_CREATE_VIDEODECODER :: 3145729;
D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSORENUM :: 3145730;
D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSOR :: 3145731;
D3D11_MESSAGE_ID_CREATE_DECODEROUTPUTVIEW :: 3145732;
D3D11_MESSAGE_ID_CREATE_PROCESSORINPUTVIEW :: 3145733;
D3D11_MESSAGE_ID_CREATE_PROCESSOROUTPUTVIEW :: 3145734;
D3D11_MESSAGE_ID_CREATE_DEVICECONTEXTSTATE :: 3145735;
D3D11_MESSAGE_ID_LIVE_VIDEODECODER :: 3145736;
D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSORENUM :: 3145737;
D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSOR :: 3145738;
D3D11_MESSAGE_ID_LIVE_DECODEROUTPUTVIEW :: 3145739;
D3D11_MESSAGE_ID_LIVE_PROCESSORINPUTVIEW :: 3145740;
D3D11_MESSAGE_ID_LIVE_PROCESSOROUTPUTVIEW :: 3145741;
D3D11_MESSAGE_ID_LIVE_DEVICECONTEXTSTATE :: 3145742;
D3D11_MESSAGE_ID_DESTROY_VIDEODECODER :: 3145743;
D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSORENUM :: 3145744;
D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSOR :: 3145745;
D3D11_MESSAGE_ID_DESTROY_DECODEROUTPUTVIEW :: 3145746;
D3D11_MESSAGE_ID_DESTROY_PROCESSORINPUTVIEW :: 3145747;
D3D11_MESSAGE_ID_DESTROY_PROCESSOROUTPUTVIEW :: 3145748;
D3D11_MESSAGE_ID_DESTROY_DEVICECONTEXTSTATE :: 3145749;
D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFLAGS :: 3145750;
D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFEATURELEVEL :: 3145751;
D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_FEATURELEVELS_NOT_SUPPORTED :: 3145752;
D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDREFIID :: 3145753;
D3D11_MESSAGE_ID_DEVICE_DISCARDVIEW_INVALIDVIEW :: 3145754;
D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION1_INVALIDCOPYFLAGS :: 3145755;
D3D11_MESSAGE_ID_UPDATESUBRESOURCE1_INVALIDCOPYFLAGS :: 3145756;
D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT :: 3145757;
D3D11_MESSAGE_ID_CREATEVIDEODECODER_OUTOFMEMORY_RETURN :: 3145758;
D3D11_MESSAGE_ID_CREATEVIDEODECODER_NULLPARAM :: 3145759;
D3D11_MESSAGE_ID_CREATEVIDEODECODER_INVALIDFORMAT :: 3145760;
D3D11_MESSAGE_ID_CREATEVIDEODECODER_ZEROWIDTHHEIGHT :: 3145761;
D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERSIZE :: 3145762;
D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERUSAGE :: 3145763;
D3D11_MESSAGE_ID_GETVIDEODECODERPROFILECOUNT_OUTOFMEMORY :: 3145764;
D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_NULLPARAM :: 3145765;
D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_INVALIDINDEX :: 3145766;
D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_OUTOFMEMORY_RETURN :: 3145767;
D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_NULLPARAM :: 3145768;
D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_OUTOFMEMORY_RETURN :: 3145769;
D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_NULLPARAM :: 3145770;
D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_OUTOFMEMORY_RETURN :: 3145771;
D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_NULLPARAM :: 3145772;
D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_INVALIDINDEX :: 3145773;
D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_OUTOFMEMORY_RETURN :: 3145774;
D3D11_MESSAGE_ID_GETDECODERCREATIONPARAMS_NULLPARAM :: 3145775;
D3D11_MESSAGE_ID_GETDECODERDRIVERHANDLE_NULLPARAM :: 3145776;
D3D11_MESSAGE_ID_GETDECODERBUFFER_NULLPARAM :: 3145777;
D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDBUFFER :: 3145778;
D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDTYPE :: 3145779;
D3D11_MESSAGE_ID_GETDECODERBUFFER_LOCKED :: 3145780;
D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NULLPARAM :: 3145781;
D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_INVALIDTYPE :: 3145782;
D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NOTLOCKED :: 3145783;
D3D11_MESSAGE_ID_DECODERBEGINFRAME_NULLPARAM :: 3145784;
D3D11_MESSAGE_ID_DECODERBEGINFRAME_HAZARD :: 3145785;
D3D11_MESSAGE_ID_DECODERENDFRAME_NULLPARAM :: 3145786;
D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_NULLPARAM :: 3145787;
D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_INVALIDTYPE :: 3145788;
D3D11_MESSAGE_ID_DECODEREXTENSION_NULLPARAM :: 3145789;
D3D11_MESSAGE_ID_DECODEREXTENSION_INVALIDRESOURCE :: 3145790;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_OUTOFMEMORY_RETURN :: 3145791;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_NULLPARAM :: 3145792;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDFRAMEFORMAT :: 3145793;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDUSAGE :: 3145794;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDINPUTFRAMERATE :: 3145795;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDOUTPUTFRAMERATE :: 3145796;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDWIDTHHEIGHT :: 3145797;
D3D11_MESSAGE_ID_GETVIDEOPROCESSORCONTENTDESC_NULLPARAM :: 3145798;
D3D11_MESSAGE_ID_CHECKVIDEOPROCESSORFORMAT_NULLPARAM :: 3145799;
D3D11_MESSAGE_ID_GETVIDEOPROCESSORCAPS_NULLPARAM :: 3145800;
D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_NULLPARAM :: 3145801;
D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_INVALIDINDEX :: 3145802;
D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_NULLPARAM :: 3145803;
D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_INVALIDINDEX :: 3145804;
D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_NULLPARAM :: 3145805;
D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_UNSUPPORTED :: 3145806;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_OUTOFMEMORY_RETURN :: 3145807;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_NULLPARAM :: 3145808;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTTARGETRECT_NULLPARAM :: 3145809;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_NULLPARAM :: 3145810;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_INVALIDALPHA :: 3145811;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE_NULLPARAM :: 3145812;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_NULLPARAM :: 3145813;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_UNSUPPORTED :: 3145814;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDSTREAM :: 3145815;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDFILLMODE :: 3145816;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_NULLPARAM :: 3145817;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_NULLPARAM :: 3145818;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_UNSUPPORTED :: 3145819;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTEXTENSION_NULLPARAM :: 3145820;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTTARGETRECT_NULLPARAM :: 3145821;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTBACKGROUNDCOLOR_NULLPARAM :: 3145822;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE_NULLPARAM :: 3145823;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTALPHAFILLMODE_NULLPARAM :: 3145824;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCONSTRICTION_NULLPARAM :: 3145825;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_UNSUPPORTED :: 3145826;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_INVALIDSIZE :: 3145827;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSTEREOMODE_NULLPARAM :: 3145828;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTEXTENSION_NULLPARAM :: 3145829;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_NULLPARAM :: 3145830;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDFORMAT :: 3145831;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDSTREAM :: 3145832;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_NULLPARAM :: 3145833;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_INVALIDSTREAM :: 3145834;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_NULLPARAM :: 3145835;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDRATE :: 3145836;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDFLAG :: 3145837;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDSTREAM :: 3145838;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_NULLPARAM :: 3145839;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDSTREAM :: 3145840;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDRECT :: 3145841;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_NULLPARAM :: 3145842;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDSTREAM :: 3145843;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDRECT :: 3145844;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_NULLPARAM :: 3145845;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDSTREAM :: 3145846;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDALPHA :: 3145847;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_NULLPARAM :: 3145848;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDSTREAM :: 3145849;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDCOUNT :: 3145850;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDALPHA :: 3145851;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_NULLPARAM :: 3145852;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDSTREAM :: 3145853;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDRATIO :: 3145854;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_NULLPARAM :: 3145855;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDSTREAM :: 3145856;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDRANGE :: 3145857;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_UNSUPPORTED :: 3145858;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_NULLPARAM :: 3145859;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDSTREAM :: 3145860;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_UNSUPPORTED :: 3145861;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FLIPUNSUPPORTED :: 3145862;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_MONOOFFSETUNSUPPORTED :: 3145863;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FORMATUNSUPPORTED :: 3145864;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDFORMAT :: 3145865;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_NULLPARAM :: 3145866;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM :: 3145867;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_NULLPARAM :: 3145868;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDSTREAM :: 3145869;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDFILTER :: 3145870;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_UNSUPPORTED :: 3145871;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDLEVEL :: 3145872;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_NULLPARAM :: 3145873;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_INVALIDSTREAM :: 3145874;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_NULLPARAM :: 3145875;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_NULLPARAM :: 3145876;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_NULLPARAM :: 3145877;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_NULLPARAM :: 3145878;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_NULLPARAM :: 3145879;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_NULLPARAM :: 3145880;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_NULLPARAM :: 3145881;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_NULLPARAM :: 3145882;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_NULLPARAM :: 3145883;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_NULLPARAM :: 3145884;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_NULLPARAM :: 3145885;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_NULLPARAM :: 3145886;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_NULLPARAM :: 3145887;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_INVALIDSTREAM :: 3145888;
D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NULLPARAM :: 3145889;
D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSTREAMCOUNT :: 3145890;
D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_TARGETRECT :: 3145891;
D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDOUTPUT :: 3145892;
D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDPASTFRAMES :: 3145893;
D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDFUTUREFRAMES :: 3145894;
D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSOURCERECT :: 3145895;
D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDDESTRECT :: 3145896;
D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDINPUTRESOURCE :: 3145897;
D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAYSIZE :: 3145898;
D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAY :: 3145899;
D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTEXPECTED :: 3145900;
D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTNOTEXPECTED :: 3145901;
D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_STEREONOTENABLED :: 3145902;
D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDRIGHTRESOURCE :: 3145903;
D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NOSTEREOSTREAMS :: 3145904;
D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INPUTHAZARD :: 3145905;
D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_OUTPUTHAZARD :: 3145906;
D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_OUTOFMEMORY_RETURN :: 3145907;
D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_NULLPARAM :: 3145908;
D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDTYPE :: 3145909;
D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDBIND :: 3145910;
D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEDFORMAT :: 3145911;
D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDMIP :: 3145912;
D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEMIP :: 3145913;
D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAYSIZE :: 3145914;
D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAY :: 3145915;
D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDDIMENSION :: 3145916;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_OUTOFMEMORY_RETURN :: 3145917;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_NULLPARAM :: 3145918;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDTYPE :: 3145919;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDBIND :: 3145920;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMISC :: 3145921;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDUSAGE :: 3145922;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFORMAT :: 3145923;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFOURCC :: 3145924;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMIP :: 3145925;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_UNSUPPORTEDMIP :: 3145926;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAYSIZE :: 3145927;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAY :: 3145928;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDDIMENSION :: 3145929;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_OUTOFMEMORY_RETURN :: 3145930;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_NULLPARAM :: 3145931;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDTYPE :: 3145932;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDBIND :: 3145933;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDFORMAT :: 3145934;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMIP :: 3145935;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDMIP :: 3145936;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDARRAY :: 3145937;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDARRAY :: 3145938;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDDIMENSION :: 3145939;
D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT :: 3145940;
D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS :: 3145941;
D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDARRAYWITHDECODER :: 3145942;
D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDARRAYWITHDECODER :: 3145943;
D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDARRAYWITHDECODER :: 3145944;
D3D11_MESSAGE_ID_DEVICE_LOCKEDOUT_INTERFACE :: 3145945;
D3D11_MESSAGE_ID_REF_WARNING_ATOMIC_INCONSISTENT :: 3145946;
D3D11_MESSAGE_ID_REF_WARNING_READING_UNINITIALIZED_RESOURCE :: 3145947;
D3D11_MESSAGE_ID_REF_WARNING_RAW_HAZARD :: 3145948;
D3D11_MESSAGE_ID_REF_WARNING_WAR_HAZARD :: 3145949;
D3D11_MESSAGE_ID_REF_WARNING_WAW_HAZARD :: 3145950;
D3D11_MESSAGE_ID_CREATECRYPTOSESSION_NULLPARAM :: 3145951;
D3D11_MESSAGE_ID_CREATECRYPTOSESSION_OUTOFMEMORY_RETURN :: 3145952;
D3D11_MESSAGE_ID_GETCRYPTOTYPE_NULLPARAM :: 3145953;
D3D11_MESSAGE_ID_GETDECODERPROFILE_NULLPARAM :: 3145954;
D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATESIZE_NULLPARAM :: 3145955;
D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_NULLPARAM :: 3145956;
D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_WRONGSIZE :: 3145957;
D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_WRONGSIZE :: 3145958;
D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_NULLPARAM :: 3145959;
D3D11_MESSAGE_ID_ENCRYPTIONBLT_UNSUPPORTED :: 3145960;
D3D11_MESSAGE_ID_ENCRYPTIONBLT_NULLPARAM :: 3145961;
D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_WRONGDEVICE :: 3145962;
D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_WRONGDEVICE :: 3145963;
D3D11_MESSAGE_ID_ENCRYPTIONBLT_FORMAT_MISMATCH :: 3145964;
D3D11_MESSAGE_ID_ENCRYPTIONBLT_SIZE_MISMATCH :: 3145965;
D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MULTISAMPLED :: 3145966;
D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_NOT_STAGING :: 3145967;
D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MAPPED :: 3145968;
D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_MAPPED :: 3145969;
D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_OFFERED :: 3145970;
D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_OFFERED :: 3145971;
D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_CONTENT_UNDEFINED :: 3145972;
D3D11_MESSAGE_ID_DECRYPTIONBLT_UNSUPPORTED :: 3145973;
D3D11_MESSAGE_ID_DECRYPTIONBLT_NULLPARAM :: 3145974;
D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_WRONGDEVICE :: 3145975;
D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_WRONGDEVICE :: 3145976;
D3D11_MESSAGE_ID_DECRYPTIONBLT_FORMAT_MISMATCH :: 3145977;
D3D11_MESSAGE_ID_DECRYPTIONBLT_SIZE_MISMATCH :: 3145978;
D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MULTISAMPLED :: 3145979;
D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_NOT_STAGING :: 3145980;
D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_NOT_RENDER_TARGET :: 3145981;
D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_MAPPED :: 3145982;
D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MAPPED :: 3145983;
D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_OFFERED :: 3145984;
D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_OFFERED :: 3145985;
D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_CONTENT_UNDEFINED :: 3145986;
D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_NULLPARAM :: 3145987;
D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_INVALIDSIZE :: 3145988;
D3D11_MESSAGE_ID_FINISHSESSIONKEYREFRESH_NULLPARAM :: 3145989;
D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_NULLPARAM :: 3145990;
D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_INVALIDSIZE :: 3145991;
D3D11_MESSAGE_ID_GETCONTENTPROTECTIONCAPS_NULLPARAM :: 3145992;
D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_NULLPARAM :: 3145993;
D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_INVALIDINDEX :: 3145994;
D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_NULLPARAM :: 3145995;
D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_UNSUPPORTED :: 3145996;
D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_INVALIDTYPE :: 3145997;
D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_OUTOFMEMORY_RETURN :: 3145998;
D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_INVALIDCHANNEL :: 3145999;
D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_NULLPARAM :: 3146000;
D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_INVALIDCHANNEL :: 3146001;
D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_NULLPARAM :: 3146002;
D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_WRONGSIZE :: 3146003;
D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDCHANNEL :: 3146004;
D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_NULLPARAM :: 3146005;
D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_NULLPARAM :: 3146006;
D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGCHANNEL :: 3146007;
D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_UNSUPPORTEDQUERY :: 3146008;
D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGSIZE :: 3146009;
D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_INVALIDPROCESSINDEX :: 3146010;
D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_NULLPARAM :: 3146011;
D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGCHANNEL :: 3146012;
D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_UNSUPPORTEDCONFIGURE :: 3146013;
D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGSIZE :: 3146014;
D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_INVALIDPROCESSIDTYPE :: 3146015;
D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT :: 3146016;
D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT :: 3146017;
D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT :: 3146018;
D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT :: 3146019;
D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT :: 3146020;
D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT :: 3146021;
D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_INVALIDSIZE :: 3146022;
D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDSIZE :: 3146023;
D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDPRIORITY :: 3146024;
D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_OUTOFMEMORY :: 3146025;
D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_NULLPARAM :: 3146026;
D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDTYPE :: 3146027;
D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDBIND :: 3146028;
D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDARRAY :: 3146029;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_NULLPARAM :: 3146030;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALIDSTREAM :: 3146031;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALID :: 3146032;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_UNSUPPORTED :: 3146033;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_NULLPARAM :: 3146034;
D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDVIEW :: 3146035;
D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 3146036;
D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED :: 3146037;
D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 3146038;
D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED :: 3146039;
D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 3146040;
D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED :: 3146041;
D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 3146042;
D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED :: 3146043;
D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED :: 3146044;
D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED :: 3146045;
D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 3146046;
D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED :: 3146047;
D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 3146048;
D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_SHADEREXTENSIONSNOTSUPPORTED :: 3146049;
D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_MINPRECISION :: 3146050;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_UNSUPPORTED :: 3146051;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_UNSUPPORTED :: 3146052;
D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED :: 3146053;
D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED :: 3146054;
D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED :: 3146055;
D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED :: 3146056;
D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED :: 3146057;
D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED :: 3146058;
D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED :: 3146059;
D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET :: 3146060;
D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_TOOMANYVIEWS :: 3146061;
D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_NOTSUPPORTED :: 3146062;
D3D11_MESSAGE_ID_SWAPDEVICECONTEXTSTATE_NOTSUPPORTED :: 3146063;
D3D11_MESSAGE_ID_UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1 :: 3146064;
D3D11_MESSAGE_ID_GETDC_INACCESSIBLE :: 3146065;
D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDRECT :: 3146066;
D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLE_MASK_IGNORED_ON_FL9 :: 3146067;
D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1_NOT_SUPPORTED :: 3146068;
D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BY_NAME_NOT_SUPPORTED :: 3146069;
D3D11_MESSAGE_ID_ENQUEUESETEVENT_NOT_SUPPORTED :: 3146070;
D3D11_MESSAGE_ID_OFFERRELEASE_NOT_SUPPORTED :: 3146071;
D3D11_MESSAGE_ID_OFFERRESOURCES_INACCESSIBLE :: 3146072;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMSAA :: 3146073;
D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMSAA :: 3146074;
D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT :: 3146075;
D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT :: 3146076;
D3D11_MESSAGE_ID_UPDATESUBRESOURCE_EMPTYDESTBOX :: 3146077;
D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_EMPTYSOURCEBOX :: 3146078;
D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS :: 3146079;
D3D11_MESSAGE_ID_DEVICE_DRAW_DEPTHSTENCILVIEW_NOT_SET :: 3146080;
D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET :: 3146081;
D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET_DUE_TO_FLIP_PRESENT :: 3146082;
D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET_DUE_TO_FLIP_PRESENT :: 3146083;
D3D11_MESSAGE_ID_GETDATAFORNEWHARDWAREKEY_NULLPARAM :: 3146084;
D3D11_MESSAGE_ID_CHECKCRYPTOSESSIONSTATUS_NULLPARAM :: 3146085;
D3D11_MESSAGE_ID_GETCRYPTOSESSIONPRIVATEDATASIZE_NULLPARAM :: 3146086;
D3D11_MESSAGE_ID_GETVIDEODECODERCAPS_NULLPARAM :: 3146087;
D3D11_MESSAGE_ID_GETVIDEODECODERCAPS_ZEROWIDTHHEIGHT :: 3146088;
D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_NULLPARAM :: 3146089;
D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE :: 3146090;
D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT :: 3146091;
D3D11_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_NULLPARAM :: 3146092;
D3D11_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_UNSUPPORTED :: 3146093;
D3D11_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_NULLPARAM :: 3146094;
D3D11_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_UNSUPPORTED :: 3146095;
D3D11_MESSAGE_ID_CHECKVIDEOPROCESSORFORMATCONVERSION_NULLPARAM :: 3146096;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE1_NULLPARAM :: 3146097;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE1_NULLPARAM :: 3146098;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_NULLPARAM :: 3146099;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_INVALIDSTREAM :: 3146100;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_NULLPARAM :: 3146101;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_INVALIDSTREAM :: 3146102;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_UNSUPPORTED :: 3146103;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1_NULLPARAM :: 3146104;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_NULLPARAM :: 3146105;
D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_NULLPARAM :: 3146106;
D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE :: 3146107;
D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT :: 3146108;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSHADERUSAGE_NULLPARAM :: 3146109;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSHADERUSAGE_NULLPARAM :: 3146110;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_NULLPARAM :: 3146111;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSTREAMCOUNT :: 3146112;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_TARGETRECT :: 3146113;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSOURCERECT :: 3146114;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDDESTRECT :: 3146115;
D3D11_MESSAGE_ID_GETCRYPTOSESSIONPRIVATEDATASIZE_INVALID_KEY_EXCHANGE_TYPE :: 3146116;
D3D11_MESSAGE_ID_D3D11_1_MESSAGES_END :: 3146117;
D3D11_MESSAGE_ID_D3D11_2_MESSAGES_START :: 3146118;
D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDUSAGE :: 3146119;
D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDUSAGE :: 3146120;
D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDUSAGE :: 3146121;
D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_STEPRATE_NOT_1 :: 3146122;
D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_INSTANCING_NOT_SUPPORTED :: 3146123;
D3D11_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER :: 3146124;
D3D11_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER :: 3146125;
D3D11_MESSAGE_ID_COPYTILES_INVALID_PARAMETER :: 3146126;
D3D11_MESSAGE_ID_UPDATETILES_INVALID_PARAMETER :: 3146127;
D3D11_MESSAGE_ID_RESIZETILEPOOL_INVALID_PARAMETER :: 3146128;
D3D11_MESSAGE_ID_TILEDRESOURCEBARRIER_INVALID_PARAMETER :: 3146129;
D3D11_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_WARNING :: 3146130;
D3D11_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_ERROR :: 3146131;
D3D11_MESSAGE_ID_DIRTY_TILE_MAPPING_ACCESS :: 3146132;
D3D11_MESSAGE_ID_DUPLICATE_TILE_MAPPINGS_IN_COVERED_AREA :: 3146133;
D3D11_MESSAGE_ID_TILE_MAPPINGS_IN_COVERED_AREA_DUPLICATED_OUTSIDE :: 3146134;
D3D11_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INCOMPATIBLE_RESOURCES :: 3146135;
D3D11_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INPUT_AND_OUTPUT :: 3146136;
D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_INVALIDFLAGS :: 3146137;
D3D11_MESSAGE_ID_GETRESOURCETILING_NONTILED_RESOURCE :: 3146138;
D3D11_MESSAGE_ID_RESIZETILEPOOL_SHRINK_WITH_MAPPINGS_STILL_DEFINED_PAST_END :: 3146139;
D3D11_MESSAGE_ID_NEED_TO_CALL_TILEDRESOURCEBARRIER :: 3146140;
D3D11_MESSAGE_ID_CREATEDEVICE_INVALIDARGS :: 3146141;
D3D11_MESSAGE_ID_CREATEDEVICE_WARNING :: 3146142;
D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWUINT_HAZARD :: 3146143;
D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_HAZARD :: 3146144;
D3D11_MESSAGE_ID_TILED_RESOURCE_TIER_1_BUFFER_TEXTURE_MISMATCH :: 3146145;
D3D11_MESSAGE_ID_CREATE_CRYPTOSESSION :: 3146146;
D3D11_MESSAGE_ID_CREATE_AUTHENTICATEDCHANNEL :: 3146147;
D3D11_MESSAGE_ID_LIVE_CRYPTOSESSION :: 3146148;
D3D11_MESSAGE_ID_LIVE_AUTHENTICATEDCHANNEL :: 3146149;
D3D11_MESSAGE_ID_DESTROY_CRYPTOSESSION :: 3146150;
D3D11_MESSAGE_ID_DESTROY_AUTHENTICATEDCHANNEL :: 3146151;
D3D11_MESSAGE_ID_D3D11_2_MESSAGES_END :: 3146152;
D3D11_MESSAGE_ID_D3D11_3_MESSAGES_START :: 3146153;
D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE :: 3146154;
D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_SYSTEMVALUE :: 3146155;
D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDCONTEXTTYPE :: 3146156;
D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_DECODENOTSUPPORTED :: 3146157;
D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_ENCODENOTSUPPORTED :: 3146158;
D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANEINDEX :: 3146159;
D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANEINDEX :: 3146160;
D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_AMBIGUOUSVIDEOPLANEINDEX :: 3146161;
D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANEINDEX :: 3146162;
D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANEINDEX :: 3146163;
D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_AMBIGUOUSVIDEOPLANEINDEX :: 3146164;
D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANEINDEX :: 3146165;
D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANEINDEX :: 3146166;
D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_AMBIGUOUSVIDEOPLANEINDEX :: 3146167;
D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSCANDATAOFFSET :: 3146168;
D3D11_MESSAGE_ID_JPEGDECODE_NOTSUPPORTED :: 3146169;
D3D11_MESSAGE_ID_JPEGDECODE_DIMENSIONSTOOLARGE :: 3146170;
D3D11_MESSAGE_ID_JPEGDECODE_INVALIDCOMPONENTS :: 3146171;
D3D11_MESSAGE_ID_JPEGDECODE_DESTINATIONNOT2D :: 3146172;
D3D11_MESSAGE_ID_JPEGDECODE_TILEDRESOURCESUNSUPPORTED :: 3146173;
D3D11_MESSAGE_ID_JPEGDECODE_GUARDRECTSUNSUPPORTED :: 3146174;
D3D11_MESSAGE_ID_JPEGDECODE_FORMATUNSUPPORTED :: 3146175;
D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSUBRESOURCE :: 3146176;
D3D11_MESSAGE_ID_JPEGDECODE_INVALIDMIPLEVEL :: 3146177;
D3D11_MESSAGE_ID_JPEGDECODE_EMPTYDESTBOX :: 3146178;
D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXNOT2D :: 3146179;
D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXNOTSUB :: 3146180;
D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXESINTERSECT :: 3146181;
D3D11_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEMISMATCH :: 3146182;
D3D11_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEMISMATCH :: 3146183;
D3D11_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEODD :: 3146184;
D3D11_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEODD :: 3146185;
D3D11_MESSAGE_ID_JPEGDECODE_OUTPUTDIMENSIONSTOOLARGE :: 3146186;
D3D11_MESSAGE_ID_JPEGDECODE_NONPOW2SCALEUNSUPPORTED :: 3146187;
D3D11_MESSAGE_ID_JPEGDECODE_FRACTIONALDOWNSCALETOLARGE :: 3146188;
D3D11_MESSAGE_ID_JPEGDECODE_CHROMASIZEMISMATCH :: 3146189;
D3D11_MESSAGE_ID_JPEGDECODE_LUMACHROMASIZEMISMATCH :: 3146190;
D3D11_MESSAGE_ID_JPEGDECODE_INVALIDNUMDESTINATIONS :: 3146191;
D3D11_MESSAGE_ID_JPEGDECODE_SUBBOXUNSUPPORTED :: 3146192;
D3D11_MESSAGE_ID_JPEGDECODE_1DESTUNSUPPORTEDFORMAT :: 3146193;
D3D11_MESSAGE_ID_JPEGDECODE_3DESTUNSUPPORTEDFORMAT :: 3146194;
D3D11_MESSAGE_ID_JPEGDECODE_SCALEUNSUPPORTED :: 3146195;
D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSOURCESIZE :: 3146196;
D3D11_MESSAGE_ID_JPEGDECODE_INVALIDCOPYFLAGS :: 3146197;
D3D11_MESSAGE_ID_JPEGDECODE_HAZARD :: 3146198;
D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERUSAGE :: 3146199;
D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERMISCFLAGS :: 3146200;
D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDDSTTEXTUREUSAGE :: 3146201;
D3D11_MESSAGE_ID_JPEGDECODE_BACKBUFFERNOTSUPPORTED :: 3146202;
D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPRTEDCOPYFLAGS :: 3146203;
D3D11_MESSAGE_ID_JPEGENCODE_NOTSUPPORTED :: 3146204;
D3D11_MESSAGE_ID_JPEGENCODE_INVALIDSCANDATAOFFSET :: 3146205;
D3D11_MESSAGE_ID_JPEGENCODE_INVALIDCOMPONENTS :: 3146206;
D3D11_MESSAGE_ID_JPEGENCODE_SOURCENOT2D :: 3146207;
D3D11_MESSAGE_ID_JPEGENCODE_TILEDRESOURCESUNSUPPORTED :: 3146208;
D3D11_MESSAGE_ID_JPEGENCODE_GUARDRECTSUNSUPPORTED :: 3146209;
D3D11_MESSAGE_ID_JPEGENCODE_XSUBSAMPLEMISMATCH :: 3146210;
D3D11_MESSAGE_ID_JPEGENCODE_YSUBSAMPLEMISMATCH :: 3146211;
D3D11_MESSAGE_ID_JPEGENCODE_FORMATUNSUPPORTED :: 3146212;
D3D11_MESSAGE_ID_JPEGENCODE_INVALIDSUBRESOURCE :: 3146213;
D3D11_MESSAGE_ID_JPEGENCODE_INVALIDMIPLEVEL :: 3146214;
D3D11_MESSAGE_ID_JPEGENCODE_DIMENSIONSTOOLARGE :: 3146215;
D3D11_MESSAGE_ID_JPEGENCODE_HAZARD :: 3146216;
D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERUSAGE :: 3146217;
D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERMISCFLAGS :: 3146218;
D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDSRCTEXTUREUSAGE :: 3146219;
D3D11_MESSAGE_ID_JPEGENCODE_BACKBUFFERNOTSUPPORTED :: 3146220;
D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNSUPPORTEDCONTEXTTTYPEFORQUERY :: 3146221;
D3D11_MESSAGE_ID_FLUSH1_INVALIDCONTEXTTYPE :: 3146222;
D3D11_MESSAGE_ID_DEVICE_SETHARDWAREPROTECTION_INVALIDCONTEXT :: 3146223;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTHDRMETADATA_NULLPARAM :: 3146224;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTHDRMETADATA_INVALIDSIZE :: 3146225;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTHDRMETADATA_NULLPARAM :: 3146226;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTHDRMETADATA_INVALIDSIZE :: 3146227;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_NULLPARAM :: 3146228;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSTREAM :: 3146229;
D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSIZE :: 3146230;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_NULLPARAM :: 3146231;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSTREAM :: 3146232;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSIZE :: 3146233;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_INVALIDSTREAM :: 3146234;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_INVALIDSTREAM :: 3146235;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_INVALIDSTREAM :: 3146236;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_INVALIDSTREAM :: 3146237;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_INVALIDSTREAM :: 3146238;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_INVALIDSTREAM :: 3146239;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_INVALIDSTREAM :: 3146240;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_INVALIDSTREAM :: 3146241;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_INVALIDSTREAM :: 3146242;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_INVALIDSTREAM :: 3146243;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM :: 3146244;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_INVALIDSTREAM :: 3146245;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_INVALIDSTREAM :: 3146246;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1_INVALIDSTREAM :: 3146247;
D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_INVALIDSTREAM :: 3146248;
D3D11_MESSAGE_ID_CREATE_FENCE :: 3146249;
D3D11_MESSAGE_ID_LIVE_FENCE :: 3146250;
D3D11_MESSAGE_ID_DESTROY_FENCE :: 3146251;
D3D11_MESSAGE_ID_CREATE_SYNCHRONIZEDCHANNEL :: 3146252;
D3D11_MESSAGE_ID_LIVE_SYNCHRONIZEDCHANNEL :: 3146253;
D3D11_MESSAGE_ID_DESTROY_SYNCHRONIZEDCHANNEL :: 3146254;
D3D11_MESSAGE_ID_CREATEFENCE_INVALIDFLAGS :: 3146255;
D3D11_MESSAGE_ID_D3D11_3_MESSAGES_END :: 3146256;
D3D11_MESSAGE_ID_D3D11_5_MESSAGES_START :: 3146257;
D3D11_MESSAGE_ID_NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_INVALIDKEYEXCHANGETYPE :: 3146258;
D3D11_MESSAGE_ID_NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_NOT_SUPPORTED :: 3146259;
D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT_COUNT :: 3146260;
D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT :: 3146261;
D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_SIZE :: 3146262;
D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_USAGE :: 3146263;
D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_MISC_FLAGS :: 3146264;
D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_OFFSET :: 3146265;
D3D11_MESSAGE_ID_CREATE_TRACKEDWORKLOAD :: 3146266;
D3D11_MESSAGE_ID_LIVE_TRACKEDWORKLOAD :: 3146267;
D3D11_MESSAGE_ID_DESTROY_TRACKEDWORKLOAD :: 3146268;
D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_NULLPARAM :: 3146269;
D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_MAX_INSTANCES :: 3146270;
D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_DEADLINE_TYPE :: 3146271;
D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_ENGINE_TYPE :: 3146272;
D3D11_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOADS :: 3146273;
D3D11_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOAD_PAIRS :: 3146274;
D3D11_MESSAGE_ID_INCOMPLETE_TRACKED_WORKLOAD_PAIR :: 3146275;
D3D11_MESSAGE_ID_OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR :: 3146276;
D3D11_MESSAGE_ID_CANNOT_ADD_TRACKED_WORKLOAD :: 3146277;
D3D11_MESSAGE_ID_TRACKED_WORKLOAD_NOT_SUPPORTED :: 3146278;
D3D11_MESSAGE_ID_TRACKED_WORKLOAD_ENGINE_TYPE_NOT_FOUND :: 3146279;
D3D11_MESSAGE_ID_NO_TRACKED_WORKLOAD_SLOT_AVAILABLE :: 3146280;
D3D11_MESSAGE_ID_END_TRACKED_WORKLOAD_INVALID_ARG :: 3146281;
D3D11_MESSAGE_ID_TRACKED_WORKLOAD_DISJOINT_FAILURE :: 3146282;
D3D11_MESSAGE_ID_D3D11_5_MESSAGES_END :: 3146283;

D3D11_MESSAGE_SEVERITY :: enum s32
{
    CORRUPTION :: 0;
    ERROR :: 1;
    WARNING :: 2;
    INFO :: 3;
    MESSAGE :: 4;
}

D3D11_MESSAGE_SEVERITY_CORRUPTION :: 0;
D3D11_MESSAGE_SEVERITY_ERROR :: 1;
D3D11_MESSAGE_SEVERITY_WARNING :: 2;
D3D11_MESSAGE_SEVERITY_INFO :: 3;
D3D11_MESSAGE_SEVERITY_MESSAGE :: 4;

D3D11_OMAC :: struct
{
    Omac : [16]u8;
}

D3D11_PACKED_MIP_DESC :: struct
{
    NumStandardMips : u8;
    NumPackedMips : u8;
    NumTilesForPackedMips : u32;
    StartTileIndexInOverallResource : u32;
}

D3D11_PARAMETER_DESC :: struct
{
    Name : PSTR; // Const
    SemanticName : PSTR; // Const
    _Type : D3D_SHADER_VARIABLE_TYPE;
    Class : D3D_SHADER_VARIABLE_CLASS;
    Rows : u32;
    Columns : u32;
    InterpolationMode : D3D_INTERPOLATION_MODE;
    Flags : D3D_PARAMETER_FLAGS;
    FirstInRegister : u32;
    FirstInComponent : u32;
    FirstOutRegister : u32;
    FirstOutComponent : u32;
}

D3D11_PIXEL_SHADER_TRACE_DESC :: struct
{
    Invocation : u64;
    X : s32;
    Y : s32;
    SampleMask : u64;
}

D3D11_QUERY :: enum s32
{
    EVENT :: 0;
    OCCLUSION :: 1;
    TIMESTAMP :: 2;
    TIMESTAMP_DISJOINT :: 3;
    PIPELINE_STATISTICS :: 4;
    OCCLUSION_PREDICATE :: 5;
    SO_STATISTICS :: 6;
    SO_OVERFLOW_PREDICATE :: 7;
    SO_STATISTICS_STREAM0 :: 8;
    SO_OVERFLOW_PREDICATE_STREAM0 :: 9;
    SO_STATISTICS_STREAM1 :: 10;
    SO_OVERFLOW_PREDICATE_STREAM1 :: 11;
    SO_STATISTICS_STREAM2 :: 12;
    SO_OVERFLOW_PREDICATE_STREAM2 :: 13;
    SO_STATISTICS_STREAM3 :: 14;
    SO_OVERFLOW_PREDICATE_STREAM3 :: 15;
}

D3D11_QUERY_EVENT :: 0;
D3D11_QUERY_OCCLUSION :: 1;
D3D11_QUERY_TIMESTAMP :: 2;
D3D11_QUERY_TIMESTAMP_DISJOINT :: 3;
D3D11_QUERY_PIPELINE_STATISTICS :: 4;
D3D11_QUERY_OCCLUSION_PREDICATE :: 5;
D3D11_QUERY_SO_STATISTICS :: 6;
D3D11_QUERY_SO_OVERFLOW_PREDICATE :: 7;
D3D11_QUERY_SO_STATISTICS_STREAM0 :: 8;
D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 :: 9;
D3D11_QUERY_SO_STATISTICS_STREAM1 :: 10;
D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 :: 11;
D3D11_QUERY_SO_STATISTICS_STREAM2 :: 12;
D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 :: 13;
D3D11_QUERY_SO_STATISTICS_STREAM3 :: 14;
D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3 :: 15;

D3D11_QUERY_DATA_PIPELINE_STATISTICS :: struct
{
    IAVertices : u64;
    IAPrimitives : u64;
    VSInvocations : u64;
    GSInvocations : u64;
    GSPrimitives : u64;
    CInvocations : u64;
    CPrimitives : u64;
    PSInvocations : u64;
    HSInvocations : u64;
    DSInvocations : u64;
    CSInvocations : u64;
}

D3D11_QUERY_DATA_SO_STATISTICS :: struct
{
    NumPrimitivesWritten : u64;
    PrimitivesStorageNeeded : u64;
}

D3D11_QUERY_DATA_TIMESTAMP_DISJOINT :: struct
{
    Frequency : u64;
    Disjoint : BOOL;
}

D3D11_QUERY_DESC :: struct
{
    Query : D3D11_QUERY;
    MiscFlags : u32;
}

D3D11_QUERY_DESC1 :: struct
{
    Query : D3D11_QUERY;
    MiscFlags : u32;
    ContextType : D3D11_CONTEXT_TYPE;
}

D3D11_QUERY_MISC_FLAG :: enum s32
{
    D3D11_QUERY_MISC_PREDICATEHINT :: 1;
}

D3D11_QUERY_MISC_PREDICATEHINT :: 1;

D3D11_RAISE_FLAG :: enum s32
{
    DRIVER_INTERNAL_ERROR :: 1;
}

D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR :: 1;

D3D11_RASTERIZER_DESC :: struct
{
    FillMode : D3D11_FILL_MODE;
    CullMode : D3D11_CULL_MODE;
    FrontCounterClockwise : BOOL;
    DepthBias : s32;
    DepthBiasClamp : float;
    SlopeScaledDepthBias : float;
    DepthClipEnable : BOOL;
    ScissorEnable : BOOL;
    MultisampleEnable : BOOL;
    AntialiasedLineEnable : BOOL;
}

D3D11_RASTERIZER_DESC1 :: struct
{
    FillMode : D3D11_FILL_MODE;
    CullMode : D3D11_CULL_MODE;
    FrontCounterClockwise : BOOL;
    DepthBias : s32;
    DepthBiasClamp : float;
    SlopeScaledDepthBias : float;
    DepthClipEnable : BOOL;
    ScissorEnable : BOOL;
    MultisampleEnable : BOOL;
    AntialiasedLineEnable : BOOL;
    ForcedSampleCount : u32;
}

D3D11_RASTERIZER_DESC2 :: struct
{
    FillMode : D3D11_FILL_MODE;
    CullMode : D3D11_CULL_MODE;
    FrontCounterClockwise : BOOL;
    DepthBias : s32;
    DepthBiasClamp : float;
    SlopeScaledDepthBias : float;
    DepthClipEnable : BOOL;
    ScissorEnable : BOOL;
    MultisampleEnable : BOOL;
    AntialiasedLineEnable : BOOL;
    ForcedSampleCount : u32;
    ConservativeRaster : D3D11_CONSERVATIVE_RASTERIZATION_MODE;
}

D3D11_RENDER_TARGET_BLEND_DESC :: struct
{
    BlendEnable : BOOL;
    SrcBlend : D3D11_BLEND;
    DestBlend : D3D11_BLEND;
    BlendOp : D3D11_BLEND_OP;
    SrcBlendAlpha : D3D11_BLEND;
    DestBlendAlpha : D3D11_BLEND;
    BlendOpAlpha : D3D11_BLEND_OP;
    RenderTargetWriteMask : u8;
}

D3D11_RENDER_TARGET_BLEND_DESC1 :: struct
{
    BlendEnable : BOOL;
    LogicOpEnable : BOOL;
    SrcBlend : D3D11_BLEND;
    DestBlend : D3D11_BLEND;
    BlendOp : D3D11_BLEND_OP;
    SrcBlendAlpha : D3D11_BLEND;
    DestBlendAlpha : D3D11_BLEND;
    BlendOpAlpha : D3D11_BLEND_OP;
    LogicOp : D3D11_LOGIC_OP;
    RenderTargetWriteMask : u8;
}

D3D11_RENDER_TARGET_VIEW_DESC :: struct
{
    Format : DXGI_FORMAT;
    ViewDimension : D3D11_RTV_DIMENSION;
    union
    {
        Buffer : D3D11_BUFFER_RTV;
        Texture1D : D3D11_TEX1D_RTV;
        Texture1DArray : D3D11_TEX1D_ARRAY_RTV;
        Texture2D : D3D11_TEX2D_RTV;
        Texture2DArray : D3D11_TEX2D_ARRAY_RTV;
        Texture2DMS : D3D11_TEX2DMS_RTV;
        Texture2DMSArray : D3D11_TEX2DMS_ARRAY_RTV;
        Texture3D : D3D11_TEX3D_RTV;
    }; // Anonymous
}

D3D11_RENDER_TARGET_VIEW_DESC1 :: struct
{
    Format : DXGI_FORMAT;
    ViewDimension : D3D11_RTV_DIMENSION;
    union
    {
        Buffer : D3D11_BUFFER_RTV;
        Texture1D : D3D11_TEX1D_RTV;
        Texture1DArray : D3D11_TEX1D_ARRAY_RTV;
        Texture2D : D3D11_TEX2D_RTV1;
        Texture2DArray : D3D11_TEX2D_ARRAY_RTV1;
        Texture2DMS : D3D11_TEX2DMS_RTV;
        Texture2DMSArray : D3D11_TEX2DMS_ARRAY_RTV;
        Texture3D : D3D11_TEX3D_RTV;
    }; // Anonymous
}

D3D11_RESOURCE_DIMENSION :: enum s32
{
    UNKNOWN :: 0;
    BUFFER :: 1;
    TEXTURE1D :: 2;
    TEXTURE2D :: 3;
    TEXTURE3D :: 4;
}

D3D11_RESOURCE_DIMENSION_UNKNOWN :: 0;
D3D11_RESOURCE_DIMENSION_BUFFER :: 1;
D3D11_RESOURCE_DIMENSION_TEXTURE1D :: 2;
D3D11_RESOURCE_DIMENSION_TEXTURE2D :: 3;
D3D11_RESOURCE_DIMENSION_TEXTURE3D :: 4;

D3D11_RESOURCE_MISC_FLAG :: enum_flags u32
{
    D3D11_RESOURCE_MISC_GENERATE_MIPS :: 1;
    D3D11_RESOURCE_MISC_SHARED :: 2;
    D3D11_RESOURCE_MISC_TEXTURECUBE :: 4;
    D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS :: 16;
    D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS :: 32;
    D3D11_RESOURCE_MISC_BUFFER_STRUCTURED :: 64;
    D3D11_RESOURCE_MISC_RESOURCE_CLAMP :: 128;
    D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX :: 256;
    D3D11_RESOURCE_MISC_GDI_COMPATIBLE :: 512;
    D3D11_RESOURCE_MISC_SHARED_NTHANDLE :: 2048;
    D3D11_RESOURCE_MISC_RESTRICTED_CONTENT :: 4096;
    D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE :: 8192;
    D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER :: 16384;
    D3D11_RESOURCE_MISC_GUARDED :: 32768;
    D3D11_RESOURCE_MISC_TILE_POOL :: 131072;
    D3D11_RESOURCE_MISC_TILED :: 262144;
    D3D11_RESOURCE_MISC_HW_PROTECTED :: 524288;
    D3D11_RESOURCE_MISC_SHARED_DISPLAYABLE :: 1048576;
    D3D11_RESOURCE_MISC_SHARED_EXCLUSIVE_WRITER :: 2097152;
}

D3D11_RESOURCE_MISC_GENERATE_MIPS :: 1;
D3D11_RESOURCE_MISC_SHARED :: 2;
D3D11_RESOURCE_MISC_TEXTURECUBE :: 4;
D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS :: 16;
D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS :: 32;
D3D11_RESOURCE_MISC_BUFFER_STRUCTURED :: 64;
D3D11_RESOURCE_MISC_RESOURCE_CLAMP :: 128;
D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX :: 256;
D3D11_RESOURCE_MISC_GDI_COMPATIBLE :: 512;
D3D11_RESOURCE_MISC_SHARED_NTHANDLE :: 2048;
D3D11_RESOURCE_MISC_RESTRICTED_CONTENT :: 4096;
D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE :: 8192;
D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER :: 16384;
D3D11_RESOURCE_MISC_GUARDED :: 32768;
D3D11_RESOURCE_MISC_TILE_POOL :: 131072;
D3D11_RESOURCE_MISC_TILED :: 262144;
D3D11_RESOURCE_MISC_HW_PROTECTED :: 524288;
D3D11_RESOURCE_MISC_SHARED_DISPLAYABLE :: 1048576;
D3D11_RESOURCE_MISC_SHARED_EXCLUSIVE_WRITER :: 2097152;

D3D11_RLDO_FLAGS :: enum s32
{
    SUMMARY :: 1;
    DETAIL :: 2;
    IGNORE_INTERNAL :: 4;
}

D3D11_RLDO_SUMMARY :: 1;
D3D11_RLDO_DETAIL :: 2;
D3D11_RLDO_IGNORE_INTERNAL :: 4;

D3D11_RTV_DIMENSION :: enum s32
{
    UNKNOWN :: 0;
    BUFFER :: 1;
    TEXTURE1D :: 2;
    TEXTURE1DARRAY :: 3;
    TEXTURE2D :: 4;
    TEXTURE2DARRAY :: 5;
    TEXTURE2DMS :: 6;
    TEXTURE2DMSARRAY :: 7;
    TEXTURE3D :: 8;
}

D3D11_RTV_DIMENSION_UNKNOWN :: 0;
D3D11_RTV_DIMENSION_BUFFER :: 1;
D3D11_RTV_DIMENSION_TEXTURE1D :: 2;
D3D11_RTV_DIMENSION_TEXTURE1DARRAY :: 3;
D3D11_RTV_DIMENSION_TEXTURE2D :: 4;
D3D11_RTV_DIMENSION_TEXTURE2DARRAY :: 5;
D3D11_RTV_DIMENSION_TEXTURE2DMS :: 6;
D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY :: 7;
D3D11_RTV_DIMENSION_TEXTURE3D :: 8;

D3D11_SAMPLER_DESC :: struct
{
    Filter : D3D11_FILTER;
    AddressU : D3D11_TEXTURE_ADDRESS_MODE;
    AddressV : D3D11_TEXTURE_ADDRESS_MODE;
    AddressW : D3D11_TEXTURE_ADDRESS_MODE;
    MipLODBias : float;
    MaxAnisotropy : u32;
    ComparisonFunc : D3D11_COMPARISON_FUNC;
    BorderColor : [4]float;
    MinLOD : float;
    MaxLOD : float;
}

D3D11_SHADER_BUFFER_DESC :: struct
{
    Name : PSTR; // Const
    _Type : D3D_CBUFFER_TYPE;
    Variables : u32;
    Size : u32;
    uFlags : u32;
}

D3D11_SHADER_CACHE_SUPPORT_FLAGS :: enum s32
{
    NONE :: 0;
    AUTOMATIC_INPROC_CACHE :: 1;
    AUTOMATIC_DISK_CACHE :: 2;
}

D3D11_SHADER_CACHE_SUPPORT_NONE :: 0;
D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE :: 1;
D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE :: 2;

D3D11_SHADER_DESC :: struct
{
    Version : u32;
    Creator : PSTR; // Const
    Flags : u32;
    ConstantBuffers : u32;
    BoundResources : u32;
    InputParameters : u32;
    OutputParameters : u32;
    InstructionCount : u32;
    TempRegisterCount : u32;
    TempArrayCount : u32;
    DefCount : u32;
    DclCount : u32;
    TextureNormalInstructions : u32;
    TextureLoadInstructions : u32;
    TextureCompInstructions : u32;
    TextureBiasInstructions : u32;
    TextureGradientInstructions : u32;
    FloatInstructionCount : u32;
    IntInstructionCount : u32;
    UintInstructionCount : u32;
    StaticFlowControlCount : u32;
    DynamicFlowControlCount : u32;
    MacroInstructionCount : u32;
    ArrayInstructionCount : u32;
    CutInstructionCount : u32;
    EmitInstructionCount : u32;
    GSOutputTopology : D3D_PRIMITIVE_TOPOLOGY;
    GSMaxOutputVertexCount : u32;
    InputPrimitive : D3D_PRIMITIVE;
    PatchConstantParameters : u32;
    cGSInstanceCount : u32;
    cControlPoints : u32;
    HSOutputPrimitive : D3D_TESSELLATOR_OUTPUT_PRIMITIVE;
    HSPartitioning : D3D_TESSELLATOR_PARTITIONING;
    TessellatorDomain : D3D_TESSELLATOR_DOMAIN;
    cBarrierInstructions : u32;
    cInterlockedInstructions : u32;
    cTextureStoreInstructions : u32;
}

D3D11_SHADER_INPUT_BIND_DESC :: struct
{
    Name : PSTR; // Const
    _Type : D3D_SHADER_INPUT_TYPE;
    BindPoint : u32;
    BindCount : u32;
    uFlags : u32;
    ReturnType : D3D_RESOURCE_RETURN_TYPE;
    Dimension : D3D_SRV_DIMENSION;
    NumSamples : u32;
}

D3D11_SHADER_MIN_PRECISION_SUPPORT :: enum s32
{
    D3D11_SHADER_MIN_PRECISION_10_BIT :: 1;
    D3D11_SHADER_MIN_PRECISION_16_BIT :: 2;
}

D3D11_SHADER_MIN_PRECISION_10_BIT :: 1;
D3D11_SHADER_MIN_PRECISION_16_BIT :: 2;

D3D11_SHADER_RESOURCE_VIEW_DESC :: struct
{
    Format : DXGI_FORMAT;
    ViewDimension : D3D_SRV_DIMENSION;
    union
    {
        Buffer : D3D11_BUFFER_SRV;
        Texture1D : D3D11_TEX1D_SRV;
        Texture1DArray : D3D11_TEX1D_ARRAY_SRV;
        Texture2D : D3D11_TEX2D_SRV;
        Texture2DArray : D3D11_TEX2D_ARRAY_SRV;
        Texture2DMS : D3D11_TEX2DMS_SRV;
        Texture2DMSArray : D3D11_TEX2DMS_ARRAY_SRV;
        Texture3D : D3D11_TEX3D_SRV;
        TextureCube : D3D11_TEXCUBE_SRV;
        TextureCubeArray : D3D11_TEXCUBE_ARRAY_SRV;
        BufferEx : D3D11_BUFFEREX_SRV;
    }; // Anonymous
}

D3D11_SHADER_RESOURCE_VIEW_DESC1 :: struct
{
    Format : DXGI_FORMAT;
    ViewDimension : D3D_SRV_DIMENSION;
    union
    {
        Buffer : D3D11_BUFFER_SRV;
        Texture1D : D3D11_TEX1D_SRV;
        Texture1DArray : D3D11_TEX1D_ARRAY_SRV;
        Texture2D : D3D11_TEX2D_SRV1;
        Texture2DArray : D3D11_TEX2D_ARRAY_SRV1;
        Texture2DMS : D3D11_TEX2DMS_SRV;
        Texture2DMSArray : D3D11_TEX2DMS_ARRAY_SRV;
        Texture3D : D3D11_TEX3D_SRV;
        TextureCube : D3D11_TEXCUBE_SRV;
        TextureCubeArray : D3D11_TEXCUBE_ARRAY_SRV;
        BufferEx : D3D11_BUFFEREX_SRV;
    }; // Anonymous
}

D3D11_SHADER_TRACE_DESC :: struct
{
    _Type : D3D11_SHADER_TYPE;
    Flags : u32;
    union
    {
        VertexShaderTraceDesc : D3D11_VERTEX_SHADER_TRACE_DESC;
        HullShaderTraceDesc : D3D11_HULL_SHADER_TRACE_DESC;
        DomainShaderTraceDesc : D3D11_DOMAIN_SHADER_TRACE_DESC;
        GeometryShaderTraceDesc : D3D11_GEOMETRY_SHADER_TRACE_DESC;
        PixelShaderTraceDesc : D3D11_PIXEL_SHADER_TRACE_DESC;
        ComputeShaderTraceDesc : D3D11_COMPUTE_SHADER_TRACE_DESC;
    }; // Anonymous
}

D3D11_SHADER_TRACKING_OPTIONS :: enum s32
{
    IGNORE :: 0;
    TRACK_UNINITIALIZED :: 1;
    TRACK_RAW :: 2;
    TRACK_WAR :: 4;
    TRACK_WAW :: 8;
    ALLOW_SAME :: 16;
    TRACK_ATOMIC_CONSISTENCY :: 32;
    TRACK_RAW_ACROSS_THREADGROUPS :: 64;
    TRACK_WAR_ACROSS_THREADGROUPS :: 128;
    TRACK_WAW_ACROSS_THREADGROUPS :: 256;
    TRACK_ATOMIC_CONSISTENCY_ACROSS_THREADGROUPS :: 512;
    UAV_SPECIFIC_FLAGS :: 960;
    ALL_HAZARDS :: 1006;
    ALL_HAZARDS_ALLOWING_SAME :: 1022;
    ALL_OPTIONS :: 1023;
}

D3D11_SHADER_TRACKING_OPTION_IGNORE :: 0;
D3D11_SHADER_TRACKING_OPTION_TRACK_UNINITIALIZED :: 1;
D3D11_SHADER_TRACKING_OPTION_TRACK_RAW :: 2;
D3D11_SHADER_TRACKING_OPTION_TRACK_WAR :: 4;
D3D11_SHADER_TRACKING_OPTION_TRACK_WAW :: 8;
D3D11_SHADER_TRACKING_OPTION_ALLOW_SAME :: 16;
D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY :: 32;
D3D11_SHADER_TRACKING_OPTION_TRACK_RAW_ACROSS_THREADGROUPS :: 64;
D3D11_SHADER_TRACKING_OPTION_TRACK_WAR_ACROSS_THREADGROUPS :: 128;
D3D11_SHADER_TRACKING_OPTION_TRACK_WAW_ACROSS_THREADGROUPS :: 256;
D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY_ACROSS_THREADGROUPS :: 512;
D3D11_SHADER_TRACKING_OPTION_UAV_SPECIFIC_FLAGS :: 960;
D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS :: 1006;
D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS_ALLOWING_SAME :: 1022;
D3D11_SHADER_TRACKING_OPTION_ALL_OPTIONS :: 1023;

D3D11_SHADER_TRACKING_RESOURCE_TYPE :: enum s32
{
    NONE :: 0;
    UAV_DEVICEMEMORY :: 1;
    NON_UAV_DEVICEMEMORY :: 2;
    ALL_DEVICEMEMORY :: 3;
    GROUPSHARED_MEMORY :: 4;
    ALL_SHARED_MEMORY :: 5;
    GROUPSHARED_NON_UAV :: 6;
    ALL :: 7;
}

D3D11_SHADER_TRACKING_RESOURCE_TYPE_NONE :: 0;
D3D11_SHADER_TRACKING_RESOURCE_TYPE_UAV_DEVICEMEMORY :: 1;
D3D11_SHADER_TRACKING_RESOURCE_TYPE_NON_UAV_DEVICEMEMORY :: 2;
D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL_DEVICEMEMORY :: 3;
D3D11_SHADER_TRACKING_RESOURCE_TYPE_GROUPSHARED_MEMORY :: 4;
D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL_SHARED_MEMORY :: 5;
D3D11_SHADER_TRACKING_RESOURCE_TYPE_GROUPSHARED_NON_UAV :: 6;
D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL :: 7;

D3D11_SHADER_TYPE :: enum s32
{
    D3D11_VERTEX_SHADER :: 1;
    D3D11_HULL_SHADER :: 2;
    D3D11_DOMAIN_SHADER :: 3;
    D3D11_GEOMETRY_SHADER :: 4;
    D3D11_PIXEL_SHADER :: 5;
    D3D11_COMPUTE_SHADER :: 6;
}

D3D11_VERTEX_SHADER :: 1;
D3D11_HULL_SHADER :: 2;
D3D11_DOMAIN_SHADER :: 3;
D3D11_GEOMETRY_SHADER :: 4;
D3D11_PIXEL_SHADER :: 5;
D3D11_COMPUTE_SHADER :: 6;

D3D11_SHADER_TYPE_DESC :: struct
{
    Class : D3D_SHADER_VARIABLE_CLASS;
    _Type : D3D_SHADER_VARIABLE_TYPE;
    Rows : u32;
    Columns : u32;
    Elements : u32;
    Members : u32;
    Offset : u32;
    Name : PSTR; // Const
}

D3D11_SHADER_VARIABLE_DESC :: struct
{
    Name : PSTR; // Const
    StartOffset : u32;
    Size : u32;
    uFlags : u32;
    DefaultValue : *void;
    StartTexture : u32;
    TextureSize : u32;
    StartSampler : u32;
    SamplerSize : u32;
}

D3D11_SHADER_VERSION_TYPE :: enum s32
{
    D3D11_SHVER_PIXEL_SHADER :: 0;
    D3D11_SHVER_VERTEX_SHADER :: 1;
    D3D11_SHVER_GEOMETRY_SHADER :: 2;
    D3D11_SHVER_HULL_SHADER :: 3;
    D3D11_SHVER_DOMAIN_SHADER :: 4;
    D3D11_SHVER_COMPUTE_SHADER :: 5;
    D3D11_SHVER_RESERVED0 :: 65520;
}

D3D11_SHVER_PIXEL_SHADER :: 0;
D3D11_SHVER_VERTEX_SHADER :: 1;
D3D11_SHVER_GEOMETRY_SHADER :: 2;
D3D11_SHVER_HULL_SHADER :: 3;
D3D11_SHVER_DOMAIN_SHADER :: 4;
D3D11_SHVER_COMPUTE_SHADER :: 5;
D3D11_SHVER_RESERVED0 :: 65520;

D3D11_SHARED_RESOURCE_TIER :: enum s32
{
    _0 :: 0;
    _1 :: 1;
    _2 :: 2;
    _3 :: 3;
}

D3D11_SHARED_RESOURCE_TIER_0 :: 0;
D3D11_SHARED_RESOURCE_TIER_1 :: 1;
D3D11_SHARED_RESOURCE_TIER_2 :: 2;
D3D11_SHARED_RESOURCE_TIER_3 :: 3;

D3D11_SIGNATURE_PARAMETER_DESC :: struct
{
    SemanticName : PSTR; // Const
    SemanticIndex : u32;
    Register : u32;
    SystemValueType : D3D_NAME;
    ComponentType : D3D_REGISTER_COMPONENT_TYPE;
    Mask : u8;
    ReadWriteMask : u8;
    Stream : u32;
    MinPrecision : D3D_MIN_PRECISION;
}

D3D11_SO_DECLARATION_ENTRY :: struct
{
    Stream : u32;
    SemanticName : PSTR; // Const
    SemanticIndex : u32;
    StartComponent : u8;
    ComponentCount : u8;
    OutputSlot : u8;
}

D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS :: enum s32
{
    D3D11_STANDARD_MULTISAMPLE_PATTERN :: -1;
    D3D11_CENTER_MULTISAMPLE_PATTERN :: -2;
}

D3D11_STANDARD_MULTISAMPLE_PATTERN :: -1;
D3D11_CENTER_MULTISAMPLE_PATTERN :: -2;

D3D11_STENCIL_OP :: enum s32
{
    KEEP :: 1;
    ZERO :: 2;
    REPLACE :: 3;
    INCR_SAT :: 4;
    DECR_SAT :: 5;
    INVERT :: 6;
    INCR :: 7;
    DECR :: 8;
}

D3D11_STENCIL_OP_KEEP :: 1;
D3D11_STENCIL_OP_ZERO :: 2;
D3D11_STENCIL_OP_REPLACE :: 3;
D3D11_STENCIL_OP_INCR_SAT :: 4;
D3D11_STENCIL_OP_DECR_SAT :: 5;
D3D11_STENCIL_OP_INVERT :: 6;
D3D11_STENCIL_OP_INCR :: 7;
D3D11_STENCIL_OP_DECR :: 8;

D3D11_SUBRESOURCE_DATA :: struct
{
    pSysMem : *void; // Const
    SysMemPitch : u32;
    SysMemSlicePitch : u32;
}

D3D11_SUBRESOURCE_TILING :: struct
{
    WidthInTiles : u32;
    HeightInTiles : u16;
    DepthInTiles : u16;
    StartTileIndexInOverallResource : u32;
}

D3D11_TEX1D_ARRAY_DSV :: struct
{
    MipSlice : u32;
    FirstArraySlice : u32;
    ArraySize : u32;
}

D3D11_TEX1D_ARRAY_RTV :: struct
{
    MipSlice : u32;
    FirstArraySlice : u32;
    ArraySize : u32;
}

D3D11_TEX1D_ARRAY_SRV :: struct
{
    MostDetailedMip : u32;
    MipLevels : u32;
    FirstArraySlice : u32;
    ArraySize : u32;
}

D3D11_TEX1D_ARRAY_UAV :: struct
{
    MipSlice : u32;
    FirstArraySlice : u32;
    ArraySize : u32;
}

D3D11_TEX1D_DSV :: struct
{
    MipSlice : u32;
}

D3D11_TEX1D_RTV :: struct
{
    MipSlice : u32;
}

D3D11_TEX1D_SRV :: struct
{
    MostDetailedMip : u32;
    MipLevels : u32;
}

D3D11_TEX1D_UAV :: struct
{
    MipSlice : u32;
}

D3D11_TEX2DMS_ARRAY_DSV :: struct
{
    FirstArraySlice : u32;
    ArraySize : u32;
}

D3D11_TEX2DMS_ARRAY_RTV :: struct
{
    FirstArraySlice : u32;
    ArraySize : u32;
}

D3D11_TEX2DMS_ARRAY_SRV :: struct
{
    FirstArraySlice : u32;
    ArraySize : u32;
}

D3D11_TEX2DMS_DSV :: struct
{
    UnusedField_NothingToDefine : u32;
}

D3D11_TEX2DMS_RTV :: struct
{
    UnusedField_NothingToDefine : u32;
}

D3D11_TEX2DMS_SRV :: struct
{
    UnusedField_NothingToDefine : u32;
}

D3D11_TEX2D_ARRAY_DSV :: struct
{
    MipSlice : u32;
    FirstArraySlice : u32;
    ArraySize : u32;
}

D3D11_TEX2D_ARRAY_RTV :: struct
{
    MipSlice : u32;
    FirstArraySlice : u32;
    ArraySize : u32;
}

D3D11_TEX2D_ARRAY_RTV1 :: struct
{
    MipSlice : u32;
    FirstArraySlice : u32;
    ArraySize : u32;
    PlaneSlice : u32;
}

D3D11_TEX2D_ARRAY_SRV :: struct
{
    MostDetailedMip : u32;
    MipLevels : u32;
    FirstArraySlice : u32;
    ArraySize : u32;
}

D3D11_TEX2D_ARRAY_SRV1 :: struct
{
    MostDetailedMip : u32;
    MipLevels : u32;
    FirstArraySlice : u32;
    ArraySize : u32;
    PlaneSlice : u32;
}

D3D11_TEX2D_ARRAY_UAV :: struct
{
    MipSlice : u32;
    FirstArraySlice : u32;
    ArraySize : u32;
}

D3D11_TEX2D_ARRAY_UAV1 :: struct
{
    MipSlice : u32;
    FirstArraySlice : u32;
    ArraySize : u32;
    PlaneSlice : u32;
}

D3D11_TEX2D_ARRAY_VPOV :: struct
{
    MipSlice : u32;
    FirstArraySlice : u32;
    ArraySize : u32;
}

D3D11_TEX2D_DSV :: struct
{
    MipSlice : u32;
}

D3D11_TEX2D_RTV :: struct
{
    MipSlice : u32;
}

D3D11_TEX2D_RTV1 :: struct
{
    MipSlice : u32;
    PlaneSlice : u32;
}

D3D11_TEX2D_SRV :: struct
{
    MostDetailedMip : u32;
    MipLevels : u32;
}

D3D11_TEX2D_SRV1 :: struct
{
    MostDetailedMip : u32;
    MipLevels : u32;
    PlaneSlice : u32;
}

D3D11_TEX2D_UAV :: struct
{
    MipSlice : u32;
}

D3D11_TEX2D_UAV1 :: struct
{
    MipSlice : u32;
    PlaneSlice : u32;
}

D3D11_TEX2D_VDOV :: struct
{
    ArraySlice : u32;
}

D3D11_TEX2D_VPIV :: struct
{
    MipSlice : u32;
    ArraySlice : u32;
}

D3D11_TEX2D_VPOV :: struct
{
    MipSlice : u32;
}

D3D11_TEX3D_RTV :: struct
{
    MipSlice : u32;
    FirstWSlice : u32;
    WSize : u32;
}

D3D11_TEX3D_SRV :: struct
{
    MostDetailedMip : u32;
    MipLevels : u32;
}

D3D11_TEX3D_UAV :: struct
{
    MipSlice : u32;
    FirstWSlice : u32;
    WSize : u32;
}

D3D11_TEXCUBE_ARRAY_SRV :: struct
{
    MostDetailedMip : u32;
    MipLevels : u32;
    First2DArrayFace : u32;
    NumCubes : u32;
}

D3D11_TEXCUBE_SRV :: struct
{
    MostDetailedMip : u32;
    MipLevels : u32;
}

D3D11_TEXTURE1D_DESC :: struct
{
    Width : u32;
    MipLevels : u32;
    ArraySize : u32;
    Format : DXGI_FORMAT;
    Usage : D3D11_USAGE;
    BindFlags : u32;
    CPUAccessFlags : u32;
    MiscFlags : u32;
}

D3D11_TEXTURE2D_DESC :: struct
{
    Width : u32;
    Height : u32;
    MipLevels : u32;
    ArraySize : u32;
    Format : DXGI_FORMAT;
    SampleDesc : DXGI_SAMPLE_DESC;
    Usage : D3D11_USAGE;
    BindFlags : D3D11_BIND_FLAG;
    CPUAccessFlags : D3D11_CPU_ACCESS_FLAG;
    MiscFlags : D3D11_RESOURCE_MISC_FLAG;
}

D3D11_TEXTURE2D_DESC1 :: struct
{
    Width : u32;
    Height : u32;
    MipLevels : u32;
    ArraySize : u32;
    Format : DXGI_FORMAT;
    SampleDesc : DXGI_SAMPLE_DESC;
    Usage : D3D11_USAGE;
    BindFlags : u32;
    CPUAccessFlags : u32;
    MiscFlags : u32;
    TextureLayout : D3D11_TEXTURE_LAYOUT;
}

D3D11_TEXTURE3D_DESC :: struct
{
    Width : u32;
    Height : u32;
    Depth : u32;
    MipLevels : u32;
    Format : DXGI_FORMAT;
    Usage : D3D11_USAGE;
    BindFlags : u32;
    CPUAccessFlags : u32;
    MiscFlags : u32;
}

D3D11_TEXTURE3D_DESC1 :: struct
{
    Width : u32;
    Height : u32;
    Depth : u32;
    MipLevels : u32;
    Format : DXGI_FORMAT;
    Usage : D3D11_USAGE;
    BindFlags : u32;
    CPUAccessFlags : u32;
    MiscFlags : u32;
    TextureLayout : D3D11_TEXTURE_LAYOUT;
}

D3D11_TEXTURECUBE_FACE :: enum s32
{
    POSITIVE_X :: 0;
    NEGATIVE_X :: 1;
    POSITIVE_Y :: 2;
    NEGATIVE_Y :: 3;
    POSITIVE_Z :: 4;
    NEGATIVE_Z :: 5;
}

D3D11_TEXTURECUBE_FACE_POSITIVE_X :: 0;
D3D11_TEXTURECUBE_FACE_NEGATIVE_X :: 1;
D3D11_TEXTURECUBE_FACE_POSITIVE_Y :: 2;
D3D11_TEXTURECUBE_FACE_NEGATIVE_Y :: 3;
D3D11_TEXTURECUBE_FACE_POSITIVE_Z :: 4;
D3D11_TEXTURECUBE_FACE_NEGATIVE_Z :: 5;

D3D11_TEXTURE_ADDRESS_MODE :: enum s32
{
    D3D11_TEXTURE_ADDRESS_WRAP :: 1;
    D3D11_TEXTURE_ADDRESS_MIRROR :: 2;
    D3D11_TEXTURE_ADDRESS_CLAMP :: 3;
    D3D11_TEXTURE_ADDRESS_BORDER :: 4;
    D3D11_TEXTURE_ADDRESS_MIRROR_ONCE :: 5;
}

D3D11_TEXTURE_ADDRESS_WRAP :: 1;
D3D11_TEXTURE_ADDRESS_MIRROR :: 2;
D3D11_TEXTURE_ADDRESS_CLAMP :: 3;
D3D11_TEXTURE_ADDRESS_BORDER :: 4;
D3D11_TEXTURE_ADDRESS_MIRROR_ONCE :: 5;

D3D11_TEXTURE_LAYOUT :: enum s32
{
    UNDEFINED :: 0;
    ROW_MAJOR :: 1;
    _64K_STANDARD_SWIZZLE :: 2;
}

D3D11_TEXTURE_LAYOUT_UNDEFINED :: 0;
D3D11_TEXTURE_LAYOUT_ROW_MAJOR :: 1;
D3D11_TEXTURE_LAYOUT_64K_STANDARD_SWIZZLE :: 2;

D3D11_TILED_RESOURCES_TIER :: enum s32
{
    D3D11_TILED_RESOURCES_NOT_SUPPORTED :: 0;
    _1 :: 1;
    _2 :: 2;
    _3 :: 3;
}

D3D11_TILED_RESOURCES_NOT_SUPPORTED :: 0;
D3D11_TILED_RESOURCES_TIER_1 :: 1;
D3D11_TILED_RESOURCES_TIER_2 :: 2;
D3D11_TILED_RESOURCES_TIER_3 :: 3;

D3D11_TILED_RESOURCE_COORDINATE :: struct
{
    X : u32;
    Y : u32;
    Z : u32;
    Subresource : u32;
}

D3D11_TILE_COPY_FLAG :: enum s32
{
    D3D11_TILE_COPY_NO_OVERWRITE :: 1;
    D3D11_TILE_COPY_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE :: 2;
    D3D11_TILE_COPY_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER :: 4;
}

D3D11_TILE_COPY_NO_OVERWRITE :: 1;
D3D11_TILE_COPY_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE :: 2;
D3D11_TILE_COPY_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER :: 4;

D3D11_TILE_MAPPING_FLAG :: enum s32
{
    D3D11_TILE_MAPPING_NO_OVERWRITE :: 1;
}

D3D11_TILE_MAPPING_NO_OVERWRITE :: 1;

D3D11_TILE_RANGE_FLAG :: enum s32
{
    D3D11_TILE_RANGE_NULL :: 1;
    D3D11_TILE_RANGE_SKIP :: 2;
    D3D11_TILE_RANGE_REUSE_SINGLE_TILE :: 4;
}

D3D11_TILE_RANGE_NULL :: 1;
D3D11_TILE_RANGE_SKIP :: 2;
D3D11_TILE_RANGE_REUSE_SINGLE_TILE :: 4;

D3D11_TILE_REGION_SIZE :: struct
{
    NumTiles : u32;
    bUseBox : BOOL;
    Width : u32;
    Height : u16;
    Depth : u16;
}

D3D11_TILE_SHAPE :: struct
{
    WidthInTexels : u32;
    HeightInTexels : u32;
    DepthInTexels : u32;
}

D3D11_TRACE_GS_INPUT_PRIMITIVE :: enum s32
{
    UNDEFINED :: 0;
    POINT :: 1;
    LINE :: 2;
    TRIANGLE :: 3;
    LINE_ADJ :: 6;
    TRIANGLE_ADJ :: 7;
}

D3D11_TRACE_GS_INPUT_PRIMITIVE_UNDEFINED :: 0;
D3D11_TRACE_GS_INPUT_PRIMITIVE_POINT :: 1;
D3D11_TRACE_GS_INPUT_PRIMITIVE_LINE :: 2;
D3D11_TRACE_GS_INPUT_PRIMITIVE_TRIANGLE :: 3;
D3D11_TRACE_GS_INPUT_PRIMITIVE_LINE_ADJ :: 6;
D3D11_TRACE_GS_INPUT_PRIMITIVE_TRIANGLE_ADJ :: 7;

D3D11_TRACE_REGISTER :: struct
{
    RegType : D3D11_TRACE_REGISTER_TYPE;
    union
    {
        Index1D : u16;
        Index2D : [2]u16;
    }; // Anonymous
    OperandIndex : u8;
    Flags : u8;
}

D3D11_TRACE_REGISTER_TYPE :: enum s32
{
    D3D11_TRACE_OUTPUT_NULL_REGISTER :: 0;
    D3D11_TRACE_INPUT_REGISTER :: 1;
    D3D11_TRACE_INPUT_PRIMITIVE_ID_REGISTER :: 2;
    D3D11_TRACE_IMMEDIATE_CONSTANT_BUFFER :: 3;
    D3D11_TRACE_TEMP_REGISTER :: 4;
    D3D11_TRACE_INDEXABLE_TEMP_REGISTER :: 5;
    D3D11_TRACE_OUTPUT_REGISTER :: 6;
    D3D11_TRACE_OUTPUT_DEPTH_REGISTER :: 7;
    D3D11_TRACE_CONSTANT_BUFFER :: 8;
    D3D11_TRACE_IMMEDIATE32 :: 9;
    D3D11_TRACE_SAMPLER :: 10;
    D3D11_TRACE_RESOURCE :: 11;
    D3D11_TRACE_RASTERIZER :: 12;
    D3D11_TRACE_OUTPUT_COVERAGE_MASK :: 13;
    D3D11_TRACE_STREAM :: 14;
    D3D11_TRACE_THIS_POINTER :: 15;
    D3D11_TRACE_OUTPUT_CONTROL_POINT_ID_REGISTER :: 16;
    D3D11_TRACE_INPUT_FORK_INSTANCE_ID_REGISTER :: 17;
    D3D11_TRACE_INPUT_JOIN_INSTANCE_ID_REGISTER :: 18;
    D3D11_TRACE_INPUT_CONTROL_POINT_REGISTER :: 19;
    D3D11_TRACE_OUTPUT_CONTROL_POINT_REGISTER :: 20;
    D3D11_TRACE_INPUT_PATCH_CONSTANT_REGISTER :: 21;
    D3D11_TRACE_INPUT_DOMAIN_POINT_REGISTER :: 22;
    D3D11_TRACE_UNORDERED_ACCESS_VIEW :: 23;
    D3D11_TRACE_THREAD_GROUP_SHARED_MEMORY :: 24;
    D3D11_TRACE_INPUT_THREAD_ID_REGISTER :: 25;
    D3D11_TRACE_INPUT_THREAD_GROUP_ID_REGISTER :: 26;
    D3D11_TRACE_INPUT_THREAD_ID_IN_GROUP_REGISTER :: 27;
    D3D11_TRACE_INPUT_COVERAGE_MASK_REGISTER :: 28;
    D3D11_TRACE_INPUT_THREAD_ID_IN_GROUP_FLATTENED_REGISTER :: 29;
    D3D11_TRACE_INPUT_GS_INSTANCE_ID_REGISTER :: 30;
    D3D11_TRACE_OUTPUT_DEPTH_GREATER_EQUAL_REGISTER :: 31;
    D3D11_TRACE_OUTPUT_DEPTH_LESS_EQUAL_REGISTER :: 32;
    D3D11_TRACE_IMMEDIATE64 :: 33;
    D3D11_TRACE_INPUT_CYCLE_COUNTER_REGISTER :: 34;
    D3D11_TRACE_INTERFACE_POINTER :: 35;
}

D3D11_TRACE_OUTPUT_NULL_REGISTER :: 0;
D3D11_TRACE_INPUT_REGISTER :: 1;
D3D11_TRACE_INPUT_PRIMITIVE_ID_REGISTER :: 2;
D3D11_TRACE_IMMEDIATE_CONSTANT_BUFFER :: 3;
D3D11_TRACE_TEMP_REGISTER :: 4;
D3D11_TRACE_INDEXABLE_TEMP_REGISTER :: 5;
D3D11_TRACE_OUTPUT_REGISTER :: 6;
D3D11_TRACE_OUTPUT_DEPTH_REGISTER :: 7;
D3D11_TRACE_CONSTANT_BUFFER :: 8;
D3D11_TRACE_IMMEDIATE32 :: 9;
D3D11_TRACE_SAMPLER :: 10;
D3D11_TRACE_RESOURCE :: 11;
D3D11_TRACE_RASTERIZER :: 12;
D3D11_TRACE_OUTPUT_COVERAGE_MASK :: 13;
D3D11_TRACE_STREAM :: 14;
D3D11_TRACE_THIS_POINTER :: 15;
D3D11_TRACE_OUTPUT_CONTROL_POINT_ID_REGISTER :: 16;
D3D11_TRACE_INPUT_FORK_INSTANCE_ID_REGISTER :: 17;
D3D11_TRACE_INPUT_JOIN_INSTANCE_ID_REGISTER :: 18;
D3D11_TRACE_INPUT_CONTROL_POINT_REGISTER :: 19;
D3D11_TRACE_OUTPUT_CONTROL_POINT_REGISTER :: 20;
D3D11_TRACE_INPUT_PATCH_CONSTANT_REGISTER :: 21;
D3D11_TRACE_INPUT_DOMAIN_POINT_REGISTER :: 22;
D3D11_TRACE_UNORDERED_ACCESS_VIEW :: 23;
D3D11_TRACE_THREAD_GROUP_SHARED_MEMORY :: 24;
D3D11_TRACE_INPUT_THREAD_ID_REGISTER :: 25;
D3D11_TRACE_INPUT_THREAD_GROUP_ID_REGISTER :: 26;
D3D11_TRACE_INPUT_THREAD_ID_IN_GROUP_REGISTER :: 27;
D3D11_TRACE_INPUT_COVERAGE_MASK_REGISTER :: 28;
D3D11_TRACE_INPUT_THREAD_ID_IN_GROUP_FLATTENED_REGISTER :: 29;
D3D11_TRACE_INPUT_GS_INSTANCE_ID_REGISTER :: 30;
D3D11_TRACE_OUTPUT_DEPTH_GREATER_EQUAL_REGISTER :: 31;
D3D11_TRACE_OUTPUT_DEPTH_LESS_EQUAL_REGISTER :: 32;
D3D11_TRACE_IMMEDIATE64 :: 33;
D3D11_TRACE_INPUT_CYCLE_COUNTER_REGISTER :: 34;
D3D11_TRACE_INTERFACE_POINTER :: 35;

D3D11_TRACE_STATS :: struct
{
    TraceDesc : D3D11_SHADER_TRACE_DESC;
    NumInvocationsInStamp : u8;
    TargetStampIndex : u8;
    NumTraceSteps : u32;
    InputMask : [32]u8;
    OutputMask : [32]u8;
    NumTemps : u16;
    MaxIndexableTempIndex : u16;
    IndexableTempSize : [4096]u16;
    ImmediateConstantBufferSize : u16;
    PixelPosition : [8]u32;
    PixelCoverageMask : [4]u64;
    PixelDiscardedMask : [4]u64;
    PixelCoverageMaskAfterShader : [4]u64;
    PixelCoverageMaskAfterA2CSampleMask : [4]u64;
    PixelCoverageMaskAfterA2CSampleMaskDepth : [4]u64;
    PixelCoverageMaskAfterA2CSampleMaskDepthStencil : [4]u64;
    PSOutputsDepth : BOOL;
    PSOutputsMask : BOOL;
    GSInputPrimitive : D3D11_TRACE_GS_INPUT_PRIMITIVE;
    GSInputsPrimitiveID : BOOL;
    HSOutputPatchConstantMask : [32]u8;
    DSInputPatchConstantMask : [32]u8;
}

D3D11_TRACE_STEP :: struct
{
    ID : u32;
    InstructionActive : BOOL;
    NumRegistersWritten : u8;
    NumRegistersRead : u8;
    MiscOperations : u16;
    OpcodeType : u32;
    CurrentGlobalCycle : u64;
}

D3D11_TRACE_VALUE :: struct
{
    Bits : [4]u32;
    ValidMask : u8;
}

D3D11_UAV_DIMENSION :: enum s32
{
    UNKNOWN :: 0;
    BUFFER :: 1;
    TEXTURE1D :: 2;
    TEXTURE1DARRAY :: 3;
    TEXTURE2D :: 4;
    TEXTURE2DARRAY :: 5;
    TEXTURE3D :: 8;
}

D3D11_UAV_DIMENSION_UNKNOWN :: 0;
D3D11_UAV_DIMENSION_BUFFER :: 1;
D3D11_UAV_DIMENSION_TEXTURE1D :: 2;
D3D11_UAV_DIMENSION_TEXTURE1DARRAY :: 3;
D3D11_UAV_DIMENSION_TEXTURE2D :: 4;
D3D11_UAV_DIMENSION_TEXTURE2DARRAY :: 5;
D3D11_UAV_DIMENSION_TEXTURE3D :: 8;

D3D11_UNORDERED_ACCESS_VIEW_DESC :: struct
{
    Format : DXGI_FORMAT;
    ViewDimension : D3D11_UAV_DIMENSION;
    union
    {
        Buffer : D3D11_BUFFER_UAV;
        Texture1D : D3D11_TEX1D_UAV;
        Texture1DArray : D3D11_TEX1D_ARRAY_UAV;
        Texture2D : D3D11_TEX2D_UAV;
        Texture2DArray : D3D11_TEX2D_ARRAY_UAV;
        Texture3D : D3D11_TEX3D_UAV;
    }; // Anonymous
}

D3D11_UNORDERED_ACCESS_VIEW_DESC1 :: struct
{
    Format : DXGI_FORMAT;
    ViewDimension : D3D11_UAV_DIMENSION;
    union
    {
        Buffer : D3D11_BUFFER_UAV;
        Texture1D : D3D11_TEX1D_UAV;
        Texture1DArray : D3D11_TEX1D_ARRAY_UAV;
        Texture2D : D3D11_TEX2D_UAV1;
        Texture2DArray : D3D11_TEX2D_ARRAY_UAV1;
        Texture3D : D3D11_TEX3D_UAV;
    }; // Anonymous
}

D3D11_USAGE :: enum s32
{
    DEFAULT :: 0;
    IMMUTABLE :: 1;
    DYNAMIC :: 2;
    STAGING :: 3;
}

D3D11_USAGE_DEFAULT :: 0;
D3D11_USAGE_IMMUTABLE :: 1;
D3D11_USAGE_DYNAMIC :: 2;
D3D11_USAGE_STAGING :: 3;

D3D11_VDOV_DIMENSION :: enum s32
{
    UNKNOWN :: 0;
    TEXTURE2D :: 1;
}

D3D11_VDOV_DIMENSION_UNKNOWN :: 0;
D3D11_VDOV_DIMENSION_TEXTURE2D :: 1;

D3D11_VERTEX_SHADER_TRACE_DESC :: struct
{
    Invocation : u64;
}

D3D11_VIDEO_COLOR :: struct
{
    union
    {
        YCbCr : D3D11_VIDEO_COLOR_YCbCrA;
        RGBA : D3D11_VIDEO_COLOR_RGBA;
    }; // Anonymous
}

D3D11_VIDEO_COLOR_RGBA :: struct
{
    R : float;
    G : float;
    B : float;
    A : float;
}

D3D11_VIDEO_COLOR_YCbCrA :: struct
{
    Y : float;
    Cb : float;
    Cr : float;
    A : float;
}

D3D11_VIDEO_CONTENT_PROTECTION_CAPS :: struct
{
    Caps : u32;
    KeyExchangeTypeCount : u32;
    BlockAlignmentSize : u32;
    ProtectedMemorySize : u64;
}

D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION :: struct
{
    pCryptoSession : *ID3D11CryptoSession;
    BlobSize : u32;
    pBlob : *void;
    pKeyInfoId : *GUID;
    PrivateDataSize : u32;
    pPrivateData : *void;
}

D3D11_VIDEO_DECODER_BUFFER_DESC :: struct
{
    BufferType : D3D11_VIDEO_DECODER_BUFFER_TYPE;
    BufferIndex : u32;
    DataOffset : u32;
    DataSize : u32;
    FirstMBaddress : u32;
    NumMBsInBuffer : u32;
    Width : u32;
    Height : u32;
    Stride : u32;
    ReservedBits : u32;
    pIV : *void;
    IVSize : u32;
    PartialEncryption : BOOL;
    EncryptedBlockInfo : D3D11_ENCRYPTED_BLOCK_INFO;
}

D3D11_VIDEO_DECODER_BUFFER_DESC1 :: struct
{
    BufferType : D3D11_VIDEO_DECODER_BUFFER_TYPE;
    DataOffset : u32;
    DataSize : u32;
    pIV : *void;
    IVSize : u32;
    pSubSampleMappingBlock : *D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK;
    SubSampleMappingCount : u32;
}

D3D11_VIDEO_DECODER_BUFFER_DESC2 :: struct
{
    BufferType : D3D11_VIDEO_DECODER_BUFFER_TYPE;
    DataOffset : u32;
    DataSize : u32;
    pIV : *void;
    IVSize : u32;
    pSubSampleMappingBlock : *D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK;
    SubSampleMappingCount : u32;
    cBlocksStripeEncrypted : u32;
    cBlocksStripeClear : u32;
}

D3D11_VIDEO_DECODER_BUFFER_TYPE :: enum s32
{
    D3D11_VIDEO_DECODER_BUFFER_PICTURE_PARAMETERS :: 0;
    D3D11_VIDEO_DECODER_BUFFER_MACROBLOCK_CONTROL :: 1;
    D3D11_VIDEO_DECODER_BUFFER_RESIDUAL_DIFFERENCE :: 2;
    D3D11_VIDEO_DECODER_BUFFER_DEBLOCKING_CONTROL :: 3;
    D3D11_VIDEO_DECODER_BUFFER_INVERSE_QUANTIZATION_MATRIX :: 4;
    D3D11_VIDEO_DECODER_BUFFER_SLICE_CONTROL :: 5;
    D3D11_VIDEO_DECODER_BUFFER_BITSTREAM :: 6;
    D3D11_VIDEO_DECODER_BUFFER_MOTION_VECTOR :: 7;
    D3D11_VIDEO_DECODER_BUFFER_FILM_GRAIN :: 8;
}

D3D11_VIDEO_DECODER_BUFFER_PICTURE_PARAMETERS :: 0;
D3D11_VIDEO_DECODER_BUFFER_MACROBLOCK_CONTROL :: 1;
D3D11_VIDEO_DECODER_BUFFER_RESIDUAL_DIFFERENCE :: 2;
D3D11_VIDEO_DECODER_BUFFER_DEBLOCKING_CONTROL :: 3;
D3D11_VIDEO_DECODER_BUFFER_INVERSE_QUANTIZATION_MATRIX :: 4;
D3D11_VIDEO_DECODER_BUFFER_SLICE_CONTROL :: 5;
D3D11_VIDEO_DECODER_BUFFER_BITSTREAM :: 6;
D3D11_VIDEO_DECODER_BUFFER_MOTION_VECTOR :: 7;
D3D11_VIDEO_DECODER_BUFFER_FILM_GRAIN :: 8;

D3D11_VIDEO_DECODER_CAPS :: enum s32
{
    DOWNSAMPLE :: 1;
    NON_REAL_TIME :: 2;
    DOWNSAMPLE_DYNAMIC :: 4;
    DOWNSAMPLE_REQUIRED :: 8;
    UNSUPPORTED :: 16;
}

D3D11_VIDEO_DECODER_CAPS_DOWNSAMPLE :: 1;
D3D11_VIDEO_DECODER_CAPS_NON_REAL_TIME :: 2;
D3D11_VIDEO_DECODER_CAPS_DOWNSAMPLE_DYNAMIC :: 4;
D3D11_VIDEO_DECODER_CAPS_DOWNSAMPLE_REQUIRED :: 8;
D3D11_VIDEO_DECODER_CAPS_UNSUPPORTED :: 16;

D3D11_VIDEO_DECODER_CONFIG :: struct
{
    guidConfigBitstreamEncryption : GUID;
    guidConfigMBcontrolEncryption : GUID;
    guidConfigResidDiffEncryption : GUID;
    ConfigBitstreamRaw : u32;
    ConfigMBcontrolRasterOrder : u32;
    ConfigResidDiffHost : u32;
    ConfigSpatialResid8 : u32;
    ConfigResid8Subtraction : u32;
    ConfigSpatialHost8or9Clipping : u32;
    ConfigSpatialResidInterleaved : u32;
    ConfigIntraResidUnsigned : u32;
    ConfigResidDiffAccelerator : u32;
    ConfigHostInverseScan : u32;
    ConfigSpecificIDCT : u32;
    Config4GroupedCoefs : u32;
    ConfigMinRenderTargetBuffCount : u16;
    ConfigDecoderSpecific : u16;
}

D3D11_VIDEO_DECODER_DESC :: struct
{
    Guid : GUID;
    SampleWidth : u32;
    SampleHeight : u32;
    OutputFormat : DXGI_FORMAT;
}

D3D11_VIDEO_DECODER_EXTENSION :: struct
{
    Function : u32;
    pPrivateInputData : *void;
    PrivateInputDataSize : u32;
    pPrivateOutputData : *void;
    PrivateOutputDataSize : u32;
    ResourceCount : u32;
    ppResourceList : **ID3D11Resource;
}

D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT :: enum s32
{
    Y :: 0;
    U :: 1;
    V :: 2;
    R :: 0;
    G :: 1;
    B :: 2;
    A :: 3;
}

D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_Y :: 0;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_U :: 1;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_V :: 2;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_R :: 0;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_G :: 1;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_B :: 2;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_A :: 3;

D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS :: enum_flags u32
{
    NONE :: 0;
    Y :: 1;
    U :: 2;
    V :: 4;
    R :: 1;
    G :: 2;
    B :: 4;
    A :: 8;
}

D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_NONE :: 0;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_Y :: 1;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_U :: 2;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_V :: 4;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_R :: 1;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_G :: 2;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_B :: 4;
D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_A :: 8;

D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC :: struct
{
    DecodeProfile : GUID;
    ViewDimension : D3D11_VDOV_DIMENSION;
    union
    {
        Texture2D : D3D11_TEX2D_VDOV;
    }; // Anonymous
}

D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK :: struct
{
    ClearSize : u32;
    EncryptedSize : u32;
}

D3D11_VIDEO_FRAME_FORMAT :: enum s32
{
    PROGRESSIVE :: 0;
    INTERLACED_TOP_FIELD_FIRST :: 1;
    INTERLACED_BOTTOM_FIELD_FIRST :: 2;
}

D3D11_VIDEO_FRAME_FORMAT_PROGRESSIVE :: 0;
D3D11_VIDEO_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST :: 1;
D3D11_VIDEO_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST :: 2;

D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE :: enum s32
{
    OPAQUE :: 0;
    BACKGROUND :: 1;
    DESTINATION :: 2;
    SOURCE_STREAM :: 3;
}

D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_OPAQUE :: 0;
D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_BACKGROUND :: 1;
D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_DESTINATION :: 2;
D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_SOURCE_STREAM :: 3;

D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS :: enum s32
{
    DENOISE :: 1;
    DERINGING :: 2;
    EDGE_ENHANCEMENT :: 4;
    COLOR_CORRECTION :: 8;
    FLESH_TONE_MAPPING :: 16;
    IMAGE_STABILIZATION :: 32;
    SUPER_RESOLUTION :: 64;
    ANAMORPHIC_SCALING :: 128;
}

D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DENOISE :: 1;
D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DERINGING :: 2;
D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_EDGE_ENHANCEMENT :: 4;
D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_COLOR_CORRECTION :: 8;
D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_FLESH_TONE_MAPPING :: 16;
D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_IMAGE_STABILIZATION :: 32;
D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_SUPER_RESOLUTION :: 64;
D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_ANAMORPHIC_SCALING :: 128;

D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINTS :: enum s32
{
    MULTIPLANE_OVERLAY_ROTATION :: 1;
    MULTIPLANE_OVERLAY_RESIZE :: 2;
    MULTIPLANE_OVERLAY_COLOR_SPACE_CONVERSION :: 4;
    TRIPLE_BUFFER_OUTPUT :: 8;
}

D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_MULTIPLANE_OVERLAY_ROTATION :: 1;
D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_MULTIPLANE_OVERLAY_RESIZE :: 2;
D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_MULTIPLANE_OVERLAY_COLOR_SPACE_CONVERSION :: 4;
D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_TRIPLE_BUFFER_OUTPUT :: 8;

D3D11_VIDEO_PROCESSOR_CAPS :: struct
{
    DeviceCaps : u32;
    FeatureCaps : u32;
    FilterCaps : u32;
    InputFormatCaps : u32;
    AutoStreamCaps : u32;
    StereoCaps : u32;
    RateConversionCapsCount : u32;
    MaxInputStreams : u32;
    MaxStreamStates : u32;
}

D3D11_VIDEO_PROCESSOR_COLOR_SPACE :: struct
{
    _bitfield : u32;
}

D3D11_VIDEO_PROCESSOR_CONTENT_DESC :: struct
{
    InputFrameFormat : D3D11_VIDEO_FRAME_FORMAT;
    InputFrameRate : DXGI_RATIONAL;
    InputWidth : u32;
    InputHeight : u32;
    OutputFrameRate : DXGI_RATIONAL;
    OutputWidth : u32;
    OutputHeight : u32;
    Usage : D3D11_VIDEO_USAGE;
}

D3D11_VIDEO_PROCESSOR_CUSTOM_RATE :: struct
{
    CustomRate : DXGI_RATIONAL;
    OutputFrames : u32;
    InputInterlaced : BOOL;
    InputFramesOrFields : u32;
}

D3D11_VIDEO_PROCESSOR_DEVICE_CAPS :: enum s32
{
    LINEAR_SPACE :: 1;
    xvYCC :: 2;
    RGB_RANGE_CONVERSION :: 4;
    YCbCr_MATRIX_CONVERSION :: 8;
    NOMINAL_RANGE :: 16;
}

D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_LINEAR_SPACE :: 1;
D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_xvYCC :: 2;
D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_RGB_RANGE_CONVERSION :: 4;
D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION :: 8;
D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_NOMINAL_RANGE :: 16;

D3D11_VIDEO_PROCESSOR_FEATURE_CAPS :: enum s32
{
    ALPHA_FILL :: 1;
    CONSTRICTION :: 2;
    LUMA_KEY :: 4;
    ALPHA_PALETTE :: 8;
    LEGACY :: 16;
    STEREO :: 32;
    ROTATION :: 64;
    ALPHA_STREAM :: 128;
    PIXEL_ASPECT_RATIO :: 256;
    MIRROR :: 512;
    SHADER_USAGE :: 1024;
    METADATA_HDR10 :: 2048;
}

D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_FILL :: 1;
D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_CONSTRICTION :: 2;
D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LUMA_KEY :: 4;
D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_PALETTE :: 8;
D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LEGACY :: 16;
D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_STEREO :: 32;
D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ROTATION :: 64;
D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_STREAM :: 128;
D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_PIXEL_ASPECT_RATIO :: 256;
D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_MIRROR :: 512;
D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_SHADER_USAGE :: 1024;
D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_METADATA_HDR10 :: 2048;

D3D11_VIDEO_PROCESSOR_FILTER :: enum s32
{
    BRIGHTNESS :: 0;
    CONTRAST :: 1;
    HUE :: 2;
    SATURATION :: 3;
    NOISE_REDUCTION :: 4;
    EDGE_ENHANCEMENT :: 5;
    ANAMORPHIC_SCALING :: 6;
    STEREO_ADJUSTMENT :: 7;
}

D3D11_VIDEO_PROCESSOR_FILTER_BRIGHTNESS :: 0;
D3D11_VIDEO_PROCESSOR_FILTER_CONTRAST :: 1;
D3D11_VIDEO_PROCESSOR_FILTER_HUE :: 2;
D3D11_VIDEO_PROCESSOR_FILTER_SATURATION :: 3;
D3D11_VIDEO_PROCESSOR_FILTER_NOISE_REDUCTION :: 4;
D3D11_VIDEO_PROCESSOR_FILTER_EDGE_ENHANCEMENT :: 5;
D3D11_VIDEO_PROCESSOR_FILTER_ANAMORPHIC_SCALING :: 6;
D3D11_VIDEO_PROCESSOR_FILTER_STEREO_ADJUSTMENT :: 7;

D3D11_VIDEO_PROCESSOR_FILTER_CAPS :: enum s32
{
    BRIGHTNESS :: 1;
    CONTRAST :: 2;
    HUE :: 4;
    SATURATION :: 8;
    NOISE_REDUCTION :: 16;
    EDGE_ENHANCEMENT :: 32;
    ANAMORPHIC_SCALING :: 64;
    STEREO_ADJUSTMENT :: 128;
}

D3D11_VIDEO_PROCESSOR_FILTER_CAPS_BRIGHTNESS :: 1;
D3D11_VIDEO_PROCESSOR_FILTER_CAPS_CONTRAST :: 2;
D3D11_VIDEO_PROCESSOR_FILTER_CAPS_HUE :: 4;
D3D11_VIDEO_PROCESSOR_FILTER_CAPS_SATURATION :: 8;
D3D11_VIDEO_PROCESSOR_FILTER_CAPS_NOISE_REDUCTION :: 16;
D3D11_VIDEO_PROCESSOR_FILTER_CAPS_EDGE_ENHANCEMENT :: 32;
D3D11_VIDEO_PROCESSOR_FILTER_CAPS_ANAMORPHIC_SCALING :: 64;
D3D11_VIDEO_PROCESSOR_FILTER_CAPS_STEREO_ADJUSTMENT :: 128;

D3D11_VIDEO_PROCESSOR_FILTER_RANGE :: struct
{
    Minimum : s32;
    Maximum : s32;
    Default : s32;
    Multiplier : float;
}

D3D11_VIDEO_PROCESSOR_FORMAT_CAPS :: enum s32
{
    RGB_INTERLACED :: 1;
    RGB_PROCAMP :: 2;
    RGB_LUMA_KEY :: 4;
    PALETTE_INTERLACED :: 8;
}

D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_INTERLACED :: 1;
D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_PROCAMP :: 2;
D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_LUMA_KEY :: 4;
D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_PALETTE_INTERLACED :: 8;

D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT :: enum s32
{
    INPUT :: 1;
    OUTPUT :: 2;
}

D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_INPUT :: 1;
D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_OUTPUT :: 2;

D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC :: struct
{
    FourCC : u32;
    ViewDimension : D3D11_VPIV_DIMENSION;
    union
    {
        Texture2D : D3D11_TEX2D_VPIV;
    }; // Anonymous
}

D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS :: enum s32
{
    _32 :: 1;
    _22 :: 2;
    _2224 :: 4;
    _2332 :: 8;
    _32322 :: 16;
    _55 :: 32;
    _64 :: 64;
    _87 :: 128;
    _222222222223 :: 256;
    OTHER :: -2147483648;
}

D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32 :: 1;
D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_22 :: 2;
D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2224 :: 4;
D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2332 :: 8;
D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32322 :: 16;
D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_55 :: 32;
D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_64 :: 64;
D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_87 :: 128;
D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_222222222223 :: 256;
D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_OTHER :: -2147483648;

D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE :: enum s32
{
    UNDEFINED :: 0;
    _16_235 :: 1;
    _0_255 :: 2;
}

D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_UNDEFINED :: 0;
D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_16_235 :: 1;
D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_0_255 :: 2;

D3D11_VIDEO_PROCESSOR_OUTPUT_RATE :: enum s32
{
    NORMAL :: 0;
    HALF :: 1;
    CUSTOM :: 2;
}

D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_NORMAL :: 0;
D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_HALF :: 1;
D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_CUSTOM :: 2;

D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC :: struct
{
    ViewDimension : D3D11_VPOV_DIMENSION;
    union
    {
        Texture2D : D3D11_TEX2D_VPOV;
        Texture2DArray : D3D11_TEX2D_ARRAY_VPOV;
    }; // Anonymous
}

D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS :: enum s32
{
    DEINTERLACE_BLEND :: 1;
    DEINTERLACE_BOB :: 2;
    DEINTERLACE_ADAPTIVE :: 4;
    DEINTERLACE_MOTION_COMPENSATION :: 8;
    INVERSE_TELECINE :: 16;
    FRAME_RATE_CONVERSION :: 32;
}

D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BLEND :: 1;
D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BOB :: 2;
D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE :: 4;
D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION :: 8;
D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_INVERSE_TELECINE :: 16;
D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_FRAME_RATE_CONVERSION :: 32;

D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS :: struct
{
    PastFrames : u32;
    FutureFrames : u32;
    ProcessorCaps : u32;
    ITelecineCaps : u32;
    CustomRateCount : u32;
}

D3D11_VIDEO_PROCESSOR_ROTATION :: enum s32
{
    IDENTITY :: 0;
    _90 :: 1;
    _180 :: 2;
    _270 :: 3;
}

D3D11_VIDEO_PROCESSOR_ROTATION_IDENTITY :: 0;
D3D11_VIDEO_PROCESSOR_ROTATION_90 :: 1;
D3D11_VIDEO_PROCESSOR_ROTATION_180 :: 2;
D3D11_VIDEO_PROCESSOR_ROTATION_270 :: 3;

D3D11_VIDEO_PROCESSOR_STEREO_CAPS :: enum s32
{
    MONO_OFFSET :: 1;
    ROW_INTERLEAVED :: 2;
    COLUMN_INTERLEAVED :: 4;
    CHECKERBOARD :: 8;
    FLIP_MODE :: 16;
}

D3D11_VIDEO_PROCESSOR_STEREO_CAPS_MONO_OFFSET :: 1;
D3D11_VIDEO_PROCESSOR_STEREO_CAPS_ROW_INTERLEAVED :: 2;
D3D11_VIDEO_PROCESSOR_STEREO_CAPS_COLUMN_INTERLEAVED :: 4;
D3D11_VIDEO_PROCESSOR_STEREO_CAPS_CHECKERBOARD :: 8;
D3D11_VIDEO_PROCESSOR_STEREO_CAPS_FLIP_MODE :: 16;

D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE :: enum s32
{
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_NONE :: 0;
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME0 :: 1;
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME1 :: 2;
}

D3D11_VIDEO_PROCESSOR_STEREO_FLIP_NONE :: 0;
D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME0 :: 1;
D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME1 :: 2;

D3D11_VIDEO_PROCESSOR_STEREO_FORMAT :: enum s32
{
    MONO :: 0;
    HORIZONTAL :: 1;
    VERTICAL :: 2;
    SEPARATE :: 3;
    MONO_OFFSET :: 4;
    ROW_INTERLEAVED :: 5;
    COLUMN_INTERLEAVED :: 6;
    CHECKERBOARD :: 7;
}

D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO :: 0;
D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_HORIZONTAL :: 1;
D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_VERTICAL :: 2;
D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_SEPARATE :: 3;
D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO_OFFSET :: 4;
D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_ROW_INTERLEAVED :: 5;
D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_COLUMN_INTERLEAVED :: 6;
D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_CHECKERBOARD :: 7;

D3D11_VIDEO_PROCESSOR_STREAM :: struct
{
    Enable : BOOL;
    OutputIndex : u32;
    InputFrameOrField : u32;
    PastFrames : u32;
    FutureFrames : u32;
    ppPastSurfaces : **ID3D11VideoProcessorInputView;
    pInputSurface : *ID3D11VideoProcessorInputView;
    ppFutureSurfaces : **ID3D11VideoProcessorInputView;
    ppPastSurfacesRight : **ID3D11VideoProcessorInputView;
    pInputSurfaceRight : *ID3D11VideoProcessorInputView;
    ppFutureSurfacesRight : **ID3D11VideoProcessorInputView;
}

D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT :: struct
{
    Enable : BOOL;
    Width : u32;
    Height : u32;
    Format : DXGI_FORMAT;
}

D3D11_VIDEO_SAMPLE_DESC :: struct
{
    Width : u32;
    Height : u32;
    Format : DXGI_FORMAT;
    ColorSpace : DXGI_COLOR_SPACE_TYPE;
}

D3D11_VIDEO_USAGE :: enum s32
{
    PLAYBACK_NORMAL :: 0;
    OPTIMAL_SPEED :: 1;
    OPTIMAL_QUALITY :: 2;
}

D3D11_VIDEO_USAGE_PLAYBACK_NORMAL :: 0;
D3D11_VIDEO_USAGE_OPTIMAL_SPEED :: 1;
D3D11_VIDEO_USAGE_OPTIMAL_QUALITY :: 2;

D3D11_VIEWPORT :: struct
{
    TopLeftX : float;
    TopLeftY : float;
    Width : float;
    Height : float;
    MinDepth : float;
    MaxDepth : float;
}

D3D11_VPIV_DIMENSION :: enum s32
{
    UNKNOWN :: 0;
    TEXTURE2D :: 1;
}

D3D11_VPIV_DIMENSION_UNKNOWN :: 0;
D3D11_VPIV_DIMENSION_TEXTURE2D :: 1;

D3D11_VPOV_DIMENSION :: enum s32
{
    UNKNOWN :: 0;
    TEXTURE2D :: 1;
    TEXTURE2DARRAY :: 2;
}

D3D11_VPOV_DIMENSION_UNKNOWN :: 0;
D3D11_VPOV_DIMENSION_TEXTURE2D :: 1;
D3D11_VPOV_DIMENSION_TEXTURE2DARRAY :: 2;

D3DX11_FFT_BUFFER_INFO :: struct
{
    NumTempBufferSizes : u32;
    TempBufferFloatSizes : [4]u32;
    NumPrecomputeBufferSizes : u32;
    PrecomputeBufferFloatSizes : [4]u32;
}

D3DX11_FFT_CREATE_FLAG :: enum s32
{
    NO_PRECOMPUTE_BUFFERS :: 1;
}

D3DX11_FFT_CREATE_FLAG_NO_PRECOMPUTE_BUFFERS :: 1;

D3DX11_FFT_DATA_TYPE :: enum s32
{
    REAL :: 0;
    COMPLEX :: 1;
}

D3DX11_FFT_DATA_TYPE_REAL :: 0;
D3DX11_FFT_DATA_TYPE_COMPLEX :: 1;

D3DX11_FFT_DESC :: struct
{
    NumDimensions : u32;
    ElementLengths : [32]u32;
    DimensionMask : u32;
    _Type : D3DX11_FFT_DATA_TYPE;
}

D3DX11_FFT_DIM_MASK :: enum s32
{
    _1D :: 1;
    _2D :: 3;
    _3D :: 7;
}

D3DX11_FFT_DIM_MASK_1D :: 1;
D3DX11_FFT_DIM_MASK_2D :: 3;
D3DX11_FFT_DIM_MASK_3D :: 7;

D3DX11_SCAN_DATA_TYPE :: enum s32
{
    FLOAT :: 1;
    INT :: 2;
    UINT :: 3;
}

D3DX11_SCAN_DATA_TYPE_FLOAT :: 1;
D3DX11_SCAN_DATA_TYPE_INT :: 2;
D3DX11_SCAN_DATA_TYPE_UINT :: 3;

D3DX11_SCAN_DIRECTION :: enum s32
{
    FORWARD :: 1;
    BACKWARD :: 2;
}

D3DX11_SCAN_DIRECTION_FORWARD :: 1;
D3DX11_SCAN_DIRECTION_BACKWARD :: 2;

D3DX11_SCAN_OPCODE :: enum s32
{
    ADD :: 1;
    MIN :: 2;
    MAX :: 3;
    MUL :: 4;
    AND :: 5;
    OR :: 6;
    XOR :: 7;
}

D3DX11_SCAN_OPCODE_ADD :: 1;
D3DX11_SCAN_OPCODE_MIN :: 2;
D3DX11_SCAN_OPCODE_MAX :: 3;
D3DX11_SCAN_OPCODE_MUL :: 4;
D3DX11_SCAN_OPCODE_AND :: 5;
D3DX11_SCAN_OPCODE_OR :: 6;
D3DX11_SCAN_OPCODE_XOR :: 7;

ID3D11Asynchronous_UUID :: "4b35d0cd-1e15-4258-9c98-1b1333f6dd3b";
ID3D11Asynchronous :: struct
{
    UUID :: GUID.{0x4b35d0cd,0x1e15,0x4258,.[0x9c,0x98,0x1b,0x13,0x33,0xf6,0xdd,0x3b]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11AsynchronousVTable;

    GetDataSize :: inline (this : *ID3D11Asynchronous) -> u32 #no_context
    {
        return this.vtable.GetDataSize (this);
    }
}

ID3D11AuthenticatedChannel_UUID :: "3015a308-dcbd-47aa-a747-192486d14d4a";
ID3D11AuthenticatedChannel :: struct
{
    UUID :: GUID.{0x3015a308,0xdcbd,0x47aa,.[0xa7,0x47,0x19,0x24,0x86,0xd1,0x4d,0x4a]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11AuthenticatedChannelVTable;

    GetCertificateSize :: inline (this : *ID3D11AuthenticatedChannel, pCertificateSize : *u32) -> HRESULT #no_context
    {
        return this.vtable.GetCertificateSize (this, pCertificateSize);
    }

    GetCertificate :: inline (this : *ID3D11AuthenticatedChannel, CertificateSize : u32, pCertificate : *u8) -> HRESULT #no_context
    {
        return this.vtable.GetCertificate (this, CertificateSize, pCertificate);
    }

    GetChannelHandle :: inline (this : *ID3D11AuthenticatedChannel, pChannelHandle : *HANDLE) #no_context
    {
        this.vtable.GetChannelHandle (this, pChannelHandle);
    }
}

ID3D11BlendState_UUID :: "75b68faa-347d-4159-8f45-a0640f01cd9a";
ID3D11BlendState :: struct
{
    UUID :: GUID.{0x75b68faa,0x347d,0x4159,.[0x8f,0x45,0xa0,0x64,0xf,0x1,0xcd,0x9a]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11BlendStateVTable;

    GetDesc :: inline (this : *ID3D11BlendState, pDesc : *D3D11_BLEND_DESC) #no_context
    {
        this.vtable.GetDesc (this, pDesc);
    }
}

ID3D11BlendState1_UUID :: "cc86fabe-da55-401d-85e7-e3c9de2877e9";
ID3D11BlendState1 :: struct
{
    UUID :: GUID.{0xcc86fabe,0xda55,0x401d,.[0x85,0xe7,0xe3,0xc9,0xde,0x28,0x77,0xe9]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11BlendState;

    #place base;
    vtable : *ID3D11BlendState1VTable;

    GetDesc1 :: inline (this : *ID3D11BlendState1, pDesc : *D3D11_BLEND_DESC1) #no_context
    {
        this.vtable.GetDesc1 (this, pDesc);
    }
}

ID3D11Buffer_UUID :: "48570b85-d1ee-4fcd-a250-eb350722b037";
ID3D11Buffer :: struct
{
    UUID :: GUID.{0x48570b85,0xd1ee,0x4fcd,.[0xa2,0x50,0xeb,0x35,0x7,0x22,0xb0,0x37]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11Resource;

    #place base;
    vtable : *ID3D11BufferVTable;

    GetDesc :: inline (this : *ID3D11Buffer, pDesc : *D3D11_BUFFER_DESC) #no_context
    {
        this.vtable.GetDesc (this, pDesc);
    }
}

ID3D11ClassInstance_UUID :: "a6cd7faa-b0b7-4a2f-9436-8662a65797cb";
ID3D11ClassInstance :: struct
{
    UUID :: GUID.{0xa6cd7faa,0xb0b7,0x4a2f,.[0x94,0x36,0x86,0x62,0xa6,0x57,0x97,0xcb]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11ClassInstanceVTable;

    GetClassLinkage :: inline (this : *ID3D11ClassInstance, ppLinkage : **ID3D11ClassLinkage) #no_context
    {
        this.vtable.GetClassLinkage (this, ppLinkage);
    }

    GetDesc :: inline (this : *ID3D11ClassInstance, pDesc : *D3D11_CLASS_INSTANCE_DESC) #no_context
    {
        this.vtable.GetDesc (this, pDesc);
    }

    GetInstanceName :: inline (this : *ID3D11ClassInstance, pInstanceName : *u8, pBufferLength : *u64) #no_context
    {
        this.vtable.GetInstanceName (this, pInstanceName, pBufferLength);
    }

    GetTypeName :: inline (this : *ID3D11ClassInstance, pTypeName : *u8, pBufferLength : *u64) #no_context
    {
        this.vtable.GetTypeName (this, pTypeName, pBufferLength);
    }
}

ID3D11ClassLinkage_UUID :: "ddf57cba-9543-46e4-a12b-f207a0fe7fed";
ID3D11ClassLinkage :: struct
{
    UUID :: GUID.{0xddf57cba,0x9543,0x46e4,.[0xa1,0x2b,0xf2,0x7,0xa0,0xfe,0x7f,0xed]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11ClassLinkageVTable;

    GetClassInstance :: inline (this : *ID3D11ClassLinkage, pClassInstanceName : PSTR, InstanceIndex : u32, ppInstance : **ID3D11ClassInstance) -> HRESULT #no_context
    {
        return this.vtable.GetClassInstance (this, pClassInstanceName, InstanceIndex, ppInstance);
    }

    CreateClassInstance :: inline (this : *ID3D11ClassLinkage, 
        pClassTypeName : PSTR,
        ConstantBufferOffset : u32,
        ConstantVectorOffset : u32,
        TextureOffset : u32,
        SamplerOffset : u32,
        ppInstance : **ID3D11ClassInstance
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateClassInstance (this, pClassTypeName, ConstantBufferOffset, ConstantVectorOffset, TextureOffset, SamplerOffset, ppInstance);
    }
}

ID3D11CommandList_UUID :: "a24bc4d1-769e-43f7-8013-98ff566c18e2";
ID3D11CommandList :: struct
{
    UUID :: GUID.{0xa24bc4d1,0x769e,0x43f7,.[0x80,0x13,0x98,0xff,0x56,0x6c,0x18,0xe2]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11CommandListVTable;

    GetContextFlags :: inline (this : *ID3D11CommandList) -> u32 #no_context
    {
        return this.vtable.GetContextFlags (this);
    }
}

ID3D11ComputeShader_UUID :: "4f5b196e-c2bd-495e-bd01-1fded38e4969";
ID3D11ComputeShader :: struct
{
    UUID :: GUID.{0x4f5b196e,0xc2bd,0x495e,.[0xbd,0x1,0x1f,0xde,0xd3,0x8e,0x49,0x69]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11ComputeShaderVTable;
}

ID3D11Counter_UUID :: "6e8c49fb-a371-4770-b440-29086022b741";
ID3D11Counter :: struct
{
    UUID :: GUID.{0x6e8c49fb,0xa371,0x4770,.[0xb4,0x40,0x29,0x8,0x60,0x22,0xb7,0x41]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11Asynchronous;

    #place base;
    vtable : *ID3D11CounterVTable;

    GetDesc :: inline (this : *ID3D11Counter, pDesc : *D3D11_COUNTER_DESC) #no_context
    {
        this.vtable.GetDesc (this, pDesc);
    }
}

ID3D11CryptoSession_UUID :: "9b32f9ad-bdcc-40a6-a39d-d5c865845720";
ID3D11CryptoSession :: struct
{
    UUID :: GUID.{0x9b32f9ad,0xbdcc,0x40a6,.[0xa3,0x9d,0xd5,0xc8,0x65,0x84,0x57,0x20]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11CryptoSessionVTable;

    GetCryptoType :: inline (this : *ID3D11CryptoSession, pCryptoType : *GUID) #no_context
    {
        this.vtable.GetCryptoType (this, pCryptoType);
    }

    GetDecoderProfile :: inline (this : *ID3D11CryptoSession, pDecoderProfile : *GUID) #no_context
    {
        this.vtable.GetDecoderProfile (this, pDecoderProfile);
    }

    GetCertificateSize :: inline (this : *ID3D11CryptoSession, pCertificateSize : *u32) -> HRESULT #no_context
    {
        return this.vtable.GetCertificateSize (this, pCertificateSize);
    }

    GetCertificate :: inline (this : *ID3D11CryptoSession, CertificateSize : u32, pCertificate : *u8) -> HRESULT #no_context
    {
        return this.vtable.GetCertificate (this, CertificateSize, pCertificate);
    }

    GetCryptoSessionHandle :: inline (this : *ID3D11CryptoSession, pCryptoSessionHandle : *HANDLE) #no_context
    {
        this.vtable.GetCryptoSessionHandle (this, pCryptoSessionHandle);
    }
}

ID3D11Debug_UUID :: "79cf2233-7536-4948-9d36-1e4692dc5760";
ID3D11Debug :: struct
{
    UUID :: GUID.{0x79cf2233,0x7536,0x4948,.[0x9d,0x36,0x1e,0x46,0x92,0xdc,0x57,0x60]};

    #as using, except(.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D11DebugVTable;

    SetFeatureMask :: inline (this : *ID3D11Debug, Mask : u32) -> HRESULT #no_context
    {
        return this.vtable.SetFeatureMask (this, Mask);
    }

    GetFeatureMask :: inline (this : *ID3D11Debug) -> u32 #no_context
    {
        return this.vtable.GetFeatureMask (this);
    }

    SetPresentPerRenderOpDelay :: inline (this : *ID3D11Debug, Milliseconds : u32) -> HRESULT #no_context
    {
        return this.vtable.SetPresentPerRenderOpDelay (this, Milliseconds);
    }

    GetPresentPerRenderOpDelay :: inline (this : *ID3D11Debug) -> u32 #no_context
    {
        return this.vtable.GetPresentPerRenderOpDelay (this);
    }

    SetSwapChain :: inline (this : *ID3D11Debug, pSwapChain : *IDXGISwapChain) -> HRESULT #no_context
    {
        return this.vtable.SetSwapChain (this, pSwapChain);
    }

    GetSwapChain :: inline (this : *ID3D11Debug, ppSwapChain : **IDXGISwapChain) -> HRESULT #no_context
    {
        return this.vtable.GetSwapChain (this, ppSwapChain);
    }

    ValidateContext :: inline (this : *ID3D11Debug, pContext : *ID3D11DeviceContext) -> HRESULT #no_context
    {
        return this.vtable.ValidateContext (this, pContext);
    }

    ReportLiveDeviceObjects :: inline (this : *ID3D11Debug, Flags : D3D11_RLDO_FLAGS) -> HRESULT #no_context
    {
        return this.vtable.ReportLiveDeviceObjects (this, Flags);
    }

    ValidateContextForDispatch :: inline (this : *ID3D11Debug, pContext : *ID3D11DeviceContext) -> HRESULT #no_context
    {
        return this.vtable.ValidateContextForDispatch (this, pContext);
    }
}

ID3D11DepthStencilState_UUID :: "03823efb-8d8f-4e1c-9aa2-f64bb2cbfdf1";
ID3D11DepthStencilState :: struct
{
    UUID :: GUID.{0x3823efb,0x8d8f,0x4e1c,.[0x9a,0xa2,0xf6,0x4b,0xb2,0xcb,0xfd,0xf1]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11DepthStencilStateVTable;

    GetDesc :: inline (this : *ID3D11DepthStencilState, pDesc : *D3D11_DEPTH_STENCIL_DESC) #no_context
    {
        this.vtable.GetDesc (this, pDesc);
    }
}

ID3D11DepthStencilView_UUID :: "9fdac92a-1876-48c3-afad-25b94f84a9b6";
ID3D11DepthStencilView :: struct
{
    UUID :: GUID.{0x9fdac92a,0x1876,0x48c3,.[0xaf,0xad,0x25,0xb9,0x4f,0x84,0xa9,0xb6]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11View;

    #place base;
    vtable : *ID3D11DepthStencilViewVTable;

    GetDesc :: inline (this : *ID3D11DepthStencilView, pDesc : *D3D11_DEPTH_STENCIL_VIEW_DESC) #no_context
    {
        this.vtable.GetDesc (this, pDesc);
    }
}

ID3D11Device_UUID :: "db6f6ddb-ac77-4e88-8253-819df9bbf140";
ID3D11Device :: struct
{
    UUID :: GUID.{0xdb6f6ddb,0xac77,0x4e88,.[0x82,0x53,0x81,0x9d,0xf9,0xbb,0xf1,0x40]};

    #as using, except(.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D11DeviceVTable;

    CreateBuffer :: inline (this : *ID3D11Device, pDesc : *D3D11_BUFFER_DESC, pInitialData : *D3D11_SUBRESOURCE_DATA, ppBuffer : **ID3D11Buffer) -> HRESULT #no_context
    {
        return this.vtable.CreateBuffer (this, pDesc, pInitialData, ppBuffer);
    }

    CreateTexture1D :: inline (this : *ID3D11Device, pDesc : *D3D11_TEXTURE1D_DESC, pInitialData : *D3D11_SUBRESOURCE_DATA, ppTexture1D : **ID3D11Texture1D) -> HRESULT #no_context
    {
        return this.vtable.CreateTexture1D (this, pDesc, pInitialData, ppTexture1D);
    }

    CreateTexture2D :: inline (this : *ID3D11Device, pDesc : *D3D11_TEXTURE2D_DESC, pInitialData : *D3D11_SUBRESOURCE_DATA, ppTexture2D : **ID3D11Texture2D) -> HRESULT #no_context
    {
        return this.vtable.CreateTexture2D (this, pDesc, pInitialData, ppTexture2D);
    }

    CreateTexture3D :: inline (this : *ID3D11Device, pDesc : *D3D11_TEXTURE3D_DESC, pInitialData : *D3D11_SUBRESOURCE_DATA, ppTexture3D : **ID3D11Texture3D) -> HRESULT #no_context
    {
        return this.vtable.CreateTexture3D (this, pDesc, pInitialData, ppTexture3D);
    }

    CreateShaderResourceView :: inline (this : *ID3D11Device, pResource : *ID3D11Resource, pDesc : *D3D11_SHADER_RESOURCE_VIEW_DESC, ppSRView : **ID3D11ShaderResourceView) -> HRESULT #no_context
    {
        return this.vtable.CreateShaderResourceView (this, pResource, pDesc, ppSRView);
    }

    CreateUnorderedAccessView :: inline (this : *ID3D11Device, pResource : *ID3D11Resource, pDesc : *D3D11_UNORDERED_ACCESS_VIEW_DESC, ppUAView : **ID3D11UnorderedAccessView) -> HRESULT #no_context
    {
        return this.vtable.CreateUnorderedAccessView (this, pResource, pDesc, ppUAView);
    }

    CreateRenderTargetView :: inline (this : *ID3D11Device, pResource : *ID3D11Resource, pDesc : *D3D11_RENDER_TARGET_VIEW_DESC, ppRTView : **ID3D11RenderTargetView) -> HRESULT #no_context
    {
        return this.vtable.CreateRenderTargetView (this, pResource, pDesc, ppRTView);
    }

    CreateDepthStencilView :: inline (this : *ID3D11Device, pResource : *ID3D11Resource, pDesc : *D3D11_DEPTH_STENCIL_VIEW_DESC, ppDepthStencilView : **ID3D11DepthStencilView) -> HRESULT #no_context
    {
        return this.vtable.CreateDepthStencilView (this, pResource, pDesc, ppDepthStencilView);
    }

    CreateInputLayout :: inline (this : *ID3D11Device, 
        pInputElementDescs : *D3D11_INPUT_ELEMENT_DESC,
        NumElements : u32,
        pShaderBytecodeWithInputSignature : *void,
        BytecodeLength : u64,
        ppInputLayout : **ID3D11InputLayout
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateInputLayout (this, pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayout);
    }

    CreateVertexShader :: inline (this : *ID3D11Device, 
        pShaderBytecode : *void,
        BytecodeLength : u64,
        pClassLinkage : *ID3D11ClassLinkage,
        ppVertexShader : **ID3D11VertexShader
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateVertexShader (this, pShaderBytecode, BytecodeLength, pClassLinkage, ppVertexShader);
    }

    CreateGeometryShader :: inline (this : *ID3D11Device, 
        pShaderBytecode : *void,
        BytecodeLength : u64,
        pClassLinkage : *ID3D11ClassLinkage,
        ppGeometryShader : **ID3D11GeometryShader
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateGeometryShader (this, pShaderBytecode, BytecodeLength, pClassLinkage, ppGeometryShader);
    }

    CreateGeometryShaderWithStreamOutput :: inline (this : *ID3D11Device, 
        pShaderBytecode : *void,
        BytecodeLength : u64,
        pSODeclaration : *D3D11_SO_DECLARATION_ENTRY,
        NumEntries : u32,
        pBufferStrides : *u32,
        NumStrides : u32,
        RasterizedStream : u32,
        pClassLinkage : *ID3D11ClassLinkage,
        ppGeometryShader : **ID3D11GeometryShader
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateGeometryShaderWithStreamOutput (this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
    }

    CreatePixelShader :: inline (this : *ID3D11Device, 
        pShaderBytecode : *void,
        BytecodeLength : u64,
        pClassLinkage : *ID3D11ClassLinkage,
        ppPixelShader : **ID3D11PixelShader
    ) -> HRESULT #no_context
    {
        return this.vtable.CreatePixelShader (this, pShaderBytecode, BytecodeLength, pClassLinkage, ppPixelShader);
    }

    CreateHullShader :: inline (this : *ID3D11Device, 
        pShaderBytecode : *void,
        BytecodeLength : u64,
        pClassLinkage : *ID3D11ClassLinkage,
        ppHullShader : **ID3D11HullShader
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateHullShader (this, pShaderBytecode, BytecodeLength, pClassLinkage, ppHullShader);
    }

    CreateDomainShader :: inline (this : *ID3D11Device, 
        pShaderBytecode : *void,
        BytecodeLength : u64,
        pClassLinkage : *ID3D11ClassLinkage,
        ppDomainShader : **ID3D11DomainShader
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateDomainShader (this, pShaderBytecode, BytecodeLength, pClassLinkage, ppDomainShader);
    }

    CreateComputeShader :: inline (this : *ID3D11Device, 
        pShaderBytecode : *void,
        BytecodeLength : u64,
        pClassLinkage : *ID3D11ClassLinkage,
        ppComputeShader : **ID3D11ComputeShader
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateComputeShader (this, pShaderBytecode, BytecodeLength, pClassLinkage, ppComputeShader);
    }

    CreateClassLinkage :: inline (this : *ID3D11Device, ppLinkage : **ID3D11ClassLinkage) -> HRESULT #no_context
    {
        return this.vtable.CreateClassLinkage (this, ppLinkage);
    }

    CreateBlendState :: inline (this : *ID3D11Device, pBlendStateDesc : *D3D11_BLEND_DESC, ppBlendState : **ID3D11BlendState) -> HRESULT #no_context
    {
        return this.vtable.CreateBlendState (this, pBlendStateDesc, ppBlendState);
    }

    CreateDepthStencilState :: inline (this : *ID3D11Device, pDepthStencilDesc : *D3D11_DEPTH_STENCIL_DESC, ppDepthStencilState : **ID3D11DepthStencilState) -> HRESULT #no_context
    {
        return this.vtable.CreateDepthStencilState (this, pDepthStencilDesc, ppDepthStencilState);
    }

    CreateRasterizerState :: inline (this : *ID3D11Device, pRasterizerDesc : *D3D11_RASTERIZER_DESC, ppRasterizerState : **ID3D11RasterizerState) -> HRESULT #no_context
    {
        return this.vtable.CreateRasterizerState (this, pRasterizerDesc, ppRasterizerState);
    }

    CreateSamplerState :: inline (this : *ID3D11Device, pSamplerDesc : *D3D11_SAMPLER_DESC, ppSamplerState : **ID3D11SamplerState) -> HRESULT #no_context
    {
        return this.vtable.CreateSamplerState (this, pSamplerDesc, ppSamplerState);
    }

    CreateQuery :: inline (this : *ID3D11Device, pQueryDesc : *D3D11_QUERY_DESC, ppQuery : **ID3D11Query) -> HRESULT #no_context
    {
        return this.vtable.CreateQuery (this, pQueryDesc, ppQuery);
    }

    CreatePredicate :: inline (this : *ID3D11Device, pPredicateDesc : *D3D11_QUERY_DESC, ppPredicate : **ID3D11Predicate) -> HRESULT #no_context
    {
        return this.vtable.CreatePredicate (this, pPredicateDesc, ppPredicate);
    }

    CreateCounter :: inline (this : *ID3D11Device, pCounterDesc : *D3D11_COUNTER_DESC, ppCounter : **ID3D11Counter) -> HRESULT #no_context
    {
        return this.vtable.CreateCounter (this, pCounterDesc, ppCounter);
    }

    CreateDeferredContext :: inline (this : *ID3D11Device, ContextFlags : u32, ppDeferredContext : **ID3D11DeviceContext) -> HRESULT #no_context
    {
        return this.vtable.CreateDeferredContext (this, ContextFlags, ppDeferredContext);
    }

    OpenSharedResource :: inline (this : *ID3D11Device, hResource : HANDLE, ReturnedInterface : *GUID, ppResource : **void) -> HRESULT #no_context
    {
        return this.vtable.OpenSharedResource (this, hResource, ReturnedInterface, ppResource);
    }

    CheckFormatSupport :: inline (this : *ID3D11Device, Format : DXGI_FORMAT, pFormatSupport : *u32) -> HRESULT #no_context
    {
        return this.vtable.CheckFormatSupport (this, Format, pFormatSupport);
    }

    CheckMultisampleQualityLevels :: inline (this : *ID3D11Device, Format : DXGI_FORMAT, SampleCount : u32, pNumQualityLevels : *u32) -> HRESULT #no_context
    {
        return this.vtable.CheckMultisampleQualityLevels (this, Format, SampleCount, pNumQualityLevels);
    }

    CheckCounterInfo :: inline (this : *ID3D11Device, pCounterInfo : *D3D11_COUNTER_INFO) #no_context
    {
        this.vtable.CheckCounterInfo (this, pCounterInfo);
    }

    CheckCounter :: inline (this : *ID3D11Device, 
        pDesc : *D3D11_COUNTER_DESC,
        pType : *D3D11_COUNTER_TYPE,
        pActiveCounters : *u32,
        szName : *u8,
        pNameLength : *u32,
        szUnits : *u8,
        pUnitsLength : *u32,
        szDescription : *u8,
        pDescriptionLength : *u32
    ) -> HRESULT #no_context
    {
        return this.vtable.CheckCounter (this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    CheckFeatureSupport :: inline (this : *ID3D11Device, Feature : D3D11_FEATURE, pFeatureSupportData : *void, FeatureSupportDataSize : u32) -> HRESULT #no_context
    {
        return this.vtable.CheckFeatureSupport (this, Feature, pFeatureSupportData, FeatureSupportDataSize);
    }

    GetPrivateData :: inline (this : *ID3D11Device, guid : *GUID, pDataSize : *u32, pData : *void) -> HRESULT #no_context
    {
        return this.vtable.GetPrivateData (this, guid, pDataSize, pData);
    }

    SetPrivateData :: inline (this : *ID3D11Device, guid : *GUID, DataSize : u32, pData : *void) -> HRESULT #no_context
    {
        return this.vtable.SetPrivateData (this, guid, DataSize, pData);
    }

    SetPrivateDataInterface :: inline (this : *ID3D11Device, guid : *GUID, pData : *IUnknown) -> HRESULT #no_context
    {
        return this.vtable.SetPrivateDataInterface (this, guid, pData);
    }

    GetFeatureLevel :: inline (this : *ID3D11Device) -> D3D_FEATURE_LEVEL #no_context
    {
        return this.vtable.GetFeatureLevel (this);
    }

    GetCreationFlags :: inline (this : *ID3D11Device) -> u32 #no_context
    {
        return this.vtable.GetCreationFlags (this);
    }

    GetDeviceRemovedReason :: inline (this : *ID3D11Device) -> HRESULT #no_context
    {
        return this.vtable.GetDeviceRemovedReason (this);
    }

    GetImmediateContext :: inline (this : *ID3D11Device, ppImmediateContext : **ID3D11DeviceContext) #no_context
    {
        this.vtable.GetImmediateContext (this, ppImmediateContext);
    }

    SetExceptionMode :: inline (this : *ID3D11Device, RaiseFlags : u32) -> HRESULT #no_context
    {
        return this.vtable.SetExceptionMode (this, RaiseFlags);
    }

    GetExceptionMode :: inline (this : *ID3D11Device) -> u32 #no_context
    {
        return this.vtable.GetExceptionMode (this);
    }
}

ID3D11Device1_UUID :: "a04bfb29-08ef-43d6-a49c-a9bdbdcbe686";
ID3D11Device1 :: struct
{
    UUID :: GUID.{0xa04bfb29,0x8ef,0x43d6,.[0xa4,0x9c,0xa9,0xbd,0xbd,0xcb,0xe6,0x86]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11Device;

    #place base;
    vtable : *ID3D11Device1VTable;

    GetImmediateContext1 :: inline (this : *ID3D11Device1, ppImmediateContext : **ID3D11DeviceContext1) #no_context
    {
        this.vtable.GetImmediateContext1 (this, ppImmediateContext);
    }

    CreateDeferredContext1 :: inline (this : *ID3D11Device1, ContextFlags : u32, ppDeferredContext : **ID3D11DeviceContext1) -> HRESULT #no_context
    {
        return this.vtable.CreateDeferredContext1 (this, ContextFlags, ppDeferredContext);
    }

    CreateBlendState1 :: inline (this : *ID3D11Device1, pBlendStateDesc : *D3D11_BLEND_DESC1, ppBlendState : **ID3D11BlendState1) -> HRESULT #no_context
    {
        return this.vtable.CreateBlendState1 (this, pBlendStateDesc, ppBlendState);
    }

    CreateRasterizerState1 :: inline (this : *ID3D11Device1, pRasterizerDesc : *D3D11_RASTERIZER_DESC1, ppRasterizerState : **ID3D11RasterizerState1) -> HRESULT #no_context
    {
        return this.vtable.CreateRasterizerState1 (this, pRasterizerDesc, ppRasterizerState);
    }

    CreateDeviceContextState :: inline (this : *ID3D11Device1, 
        Flags : u32,
        pFeatureLevels : *D3D_FEATURE_LEVEL,
        FeatureLevels : u32,
        SDKVersion : u32,
        EmulatedInterface : *GUID,
        pChosenFeatureLevel : *D3D_FEATURE_LEVEL,
        ppContextState : **ID3DDeviceContextState
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateDeviceContextState (this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, ppContextState);
    }

    OpenSharedResource1 :: inline (this : *ID3D11Device1, hResource : HANDLE, returnedInterface : *GUID, ppResource : **void) -> HRESULT #no_context
    {
        return this.vtable.OpenSharedResource1 (this, hResource, returnedInterface, ppResource);
    }

    OpenSharedResourceByName :: inline (this : *ID3D11Device1, 
        lpName : PWSTR,
        dwDesiredAccess : u32,
        returnedInterface : *GUID,
        ppResource : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.OpenSharedResourceByName (this, lpName, dwDesiredAccess, returnedInterface, ppResource);
    }
}

ID3D11Device2_UUID :: "9d06dffa-d1e5-4d07-83a8-1bb123f2f841";
ID3D11Device2 :: struct
{
    UUID :: GUID.{0x9d06dffa,0xd1e5,0x4d07,.[0x83,0xa8,0x1b,0xb1,0x23,0xf2,0xf8,0x41]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11Device1;

    #place base;
    vtable : *ID3D11Device2VTable;

    GetImmediateContext2 :: inline (this : *ID3D11Device2, ppImmediateContext : **ID3D11DeviceContext2) #no_context
    {
        this.vtable.GetImmediateContext2 (this, ppImmediateContext);
    }

    CreateDeferredContext2 :: inline (this : *ID3D11Device2, ContextFlags : u32, ppDeferredContext : **ID3D11DeviceContext2) -> HRESULT #no_context
    {
        return this.vtable.CreateDeferredContext2 (this, ContextFlags, ppDeferredContext);
    }

    GetResourceTiling :: inline (this : *ID3D11Device2, 
        pTiledResource : *ID3D11Resource,
        pNumTilesForEntireResource : *u32,
        pPackedMipDesc : *D3D11_PACKED_MIP_DESC,
        pStandardTileShapeForNonPackedMips : *D3D11_TILE_SHAPE,
        pNumSubresourceTilings : *u32,
        FirstSubresourceTilingToGet : u32,
        pSubresourceTilingsForNonPackedMips : *D3D11_SUBRESOURCE_TILING
    ) #no_context
    {
        this.vtable.GetResourceTiling (this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
    }

    CheckMultisampleQualityLevels1 :: inline (this : *ID3D11Device2, 
        Format : DXGI_FORMAT,
        SampleCount : u32,
        Flags : u32,
        pNumQualityLevels : *u32
    ) -> HRESULT #no_context
    {
        return this.vtable.CheckMultisampleQualityLevels1 (this, Format, SampleCount, Flags, pNumQualityLevels);
    }
}

ID3D11Device3_UUID :: "a05c8c37-d2c6-4732-b3a0-9ce0b0dc9ae6";
ID3D11Device3 :: struct
{
    UUID :: GUID.{0xa05c8c37,0xd2c6,0x4732,.[0xb3,0xa0,0x9c,0xe0,0xb0,0xdc,0x9a,0xe6]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11Device2;

    #place base;
    vtable : *ID3D11Device3VTable;

    CreateTexture2D1 :: inline (this : *ID3D11Device3, pDesc1 : *D3D11_TEXTURE2D_DESC1, pInitialData : *D3D11_SUBRESOURCE_DATA, ppTexture2D : **ID3D11Texture2D1) -> HRESULT #no_context
    {
        return this.vtable.CreateTexture2D1 (this, pDesc1, pInitialData, ppTexture2D);
    }

    CreateTexture3D1 :: inline (this : *ID3D11Device3, pDesc1 : *D3D11_TEXTURE3D_DESC1, pInitialData : *D3D11_SUBRESOURCE_DATA, ppTexture3D : **ID3D11Texture3D1) -> HRESULT #no_context
    {
        return this.vtable.CreateTexture3D1 (this, pDesc1, pInitialData, ppTexture3D);
    }

    CreateRasterizerState2 :: inline (this : *ID3D11Device3, pRasterizerDesc : *D3D11_RASTERIZER_DESC2, ppRasterizerState : **ID3D11RasterizerState2) -> HRESULT #no_context
    {
        return this.vtable.CreateRasterizerState2 (this, pRasterizerDesc, ppRasterizerState);
    }

    CreateShaderResourceView1 :: inline (this : *ID3D11Device3, pResource : *ID3D11Resource, pDesc1 : *D3D11_SHADER_RESOURCE_VIEW_DESC1, ppSRView1 : **ID3D11ShaderResourceView1) -> HRESULT #no_context
    {
        return this.vtable.CreateShaderResourceView1 (this, pResource, pDesc1, ppSRView1);
    }

    CreateUnorderedAccessView1 :: inline (this : *ID3D11Device3, pResource : *ID3D11Resource, pDesc1 : *D3D11_UNORDERED_ACCESS_VIEW_DESC1, ppUAView1 : **ID3D11UnorderedAccessView1) -> HRESULT #no_context
    {
        return this.vtable.CreateUnorderedAccessView1 (this, pResource, pDesc1, ppUAView1);
    }

    CreateRenderTargetView1 :: inline (this : *ID3D11Device3, pResource : *ID3D11Resource, pDesc1 : *D3D11_RENDER_TARGET_VIEW_DESC1, ppRTView1 : **ID3D11RenderTargetView1) -> HRESULT #no_context
    {
        return this.vtable.CreateRenderTargetView1 (this, pResource, pDesc1, ppRTView1);
    }

    CreateQuery1 :: inline (this : *ID3D11Device3, pQueryDesc1 : *D3D11_QUERY_DESC1, ppQuery1 : **ID3D11Query1) -> HRESULT #no_context
    {
        return this.vtable.CreateQuery1 (this, pQueryDesc1, ppQuery1);
    }

    GetImmediateContext3 :: inline (this : *ID3D11Device3, ppImmediateContext : **ID3D11DeviceContext3) #no_context
    {
        this.vtable.GetImmediateContext3 (this, ppImmediateContext);
    }

    CreateDeferredContext3 :: inline (this : *ID3D11Device3, ContextFlags : u32, ppDeferredContext : **ID3D11DeviceContext3) -> HRESULT #no_context
    {
        return this.vtable.CreateDeferredContext3 (this, ContextFlags, ppDeferredContext);
    }

    WriteToSubresource :: inline (this : *ID3D11Device3, 
        pDstResource : *ID3D11Resource,
        DstSubresource : u32,
        pDstBox : *D3D11_BOX,
        pSrcData : *void,
        SrcRowPitch : u32,
        SrcDepthPitch : u32
    ) #no_context
    {
        this.vtable.WriteToSubresource (this, pDstResource, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
    }

    ReadFromSubresource :: inline (this : *ID3D11Device3, 
        pDstData : *void,
        DstRowPitch : u32,
        DstDepthPitch : u32,
        pSrcResource : *ID3D11Resource,
        SrcSubresource : u32,
        pSrcBox : *D3D11_BOX
    ) #no_context
    {
        this.vtable.ReadFromSubresource (this, pDstData, DstRowPitch, DstDepthPitch, pSrcResource, SrcSubresource, pSrcBox);
    }
}

ID3D11Device4_UUID :: "8992ab71-02e6-4b8d-ba48-b056dcda42c4";
ID3D11Device4 :: struct
{
    UUID :: GUID.{0x8992ab71,0x2e6,0x4b8d,.[0xba,0x48,0xb0,0x56,0xdc,0xda,0x42,0xc4]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11Device3;

    #place base;
    vtable : *ID3D11Device4VTable;

    RegisterDeviceRemovedEvent :: inline (this : *ID3D11Device4, hEvent : HANDLE, pdwCookie : *u32) -> HRESULT #no_context
    {
        return this.vtable.RegisterDeviceRemovedEvent (this, hEvent, pdwCookie);
    }

    UnregisterDeviceRemoved :: inline (this : *ID3D11Device4, dwCookie : u32) #no_context
    {
        this.vtable.UnregisterDeviceRemoved (this, dwCookie);
    }
}

ID3D11Device5_UUID :: "8ffde202-a0e7-45df-9e01-e837801b5ea0";
ID3D11Device5 :: struct
{
    UUID :: GUID.{0x8ffde202,0xa0e7,0x45df,.[0x9e,0x1,0xe8,0x37,0x80,0x1b,0x5e,0xa0]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11Device4;

    #place base;
    vtable : *ID3D11Device5VTable;

    OpenSharedFence :: inline (this : *ID3D11Device5, hFence : HANDLE, ReturnedInterface : *GUID, ppFence : **void) -> HRESULT #no_context
    {
        return this.vtable.OpenSharedFence (this, hFence, ReturnedInterface, ppFence);
    }

    CreateFence :: inline (this : *ID3D11Device5, 
        InitialValue : u64,
        Flags : D3D11_FENCE_FLAG,
        ReturnedInterface : *GUID,
        ppFence : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateFence (this, InitialValue, Flags, ReturnedInterface, ppFence);
    }
}

ID3D11DeviceChild_UUID :: "1841e5c8-16b0-489b-bcc8-44cfb0d5deae";
ID3D11DeviceChild :: struct
{
    UUID :: GUID.{0x1841e5c8,0x16b0,0x489b,.[0xbc,0xc8,0x44,0xcf,0xb0,0xd5,0xde,0xae]};

    #as using, except(.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D11DeviceChildVTable;

    GetDevice :: inline (this : *ID3D11DeviceChild, ppDevice : **ID3D11Device) #no_context
    {
        this.vtable.GetDevice (this, ppDevice);
    }

    GetPrivateData :: inline (this : *ID3D11DeviceChild, guid : *GUID, pDataSize : *u32, pData : *void) -> HRESULT #no_context
    {
        return this.vtable.GetPrivateData (this, guid, pDataSize, pData);
    }

    SetPrivateData :: inline (this : *ID3D11DeviceChild, guid : *GUID, DataSize : u32, pData : *void) -> HRESULT #no_context
    {
        return this.vtable.SetPrivateData (this, guid, DataSize, pData);
    }

    SetPrivateDataInterface :: inline (this : *ID3D11DeviceChild, guid : *GUID, pData : *IUnknown) -> HRESULT #no_context
    {
        return this.vtable.SetPrivateDataInterface (this, guid, pData);
    }
}

ID3D11DeviceContext_UUID :: "c0bfa96c-e089-44fb-8eaf-26f8796190da";
ID3D11DeviceContext :: struct
{
    UUID :: GUID.{0xc0bfa96c,0xe089,0x44fb,.[0x8e,0xaf,0x26,0xf8,0x79,0x61,0x90,0xda]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11DeviceContextVTable;

    VSSetConstantBuffers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #no_context
    {
        this.vtable.VSSetConstantBuffers (this, StartSlot, NumBuffers, ppConstantBuffers);
    }

    PSSetShaderResources :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #no_context
    {
        this.vtable.PSSetShaderResources (this, StartSlot, NumViews, ppShaderResourceViews);
    }

    PSSetShader :: inline (this : *ID3D11DeviceContext, pPixelShader : *ID3D11PixelShader, ppClassInstances : **ID3D11ClassInstance, NumClassInstances : u32) #no_context
    {
        this.vtable.PSSetShader (this, pPixelShader, ppClassInstances, NumClassInstances);
    }

    PSSetSamplers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #no_context
    {
        this.vtable.PSSetSamplers (this, StartSlot, NumSamplers, ppSamplers);
    }

    VSSetShader :: inline (this : *ID3D11DeviceContext, pVertexShader : *ID3D11VertexShader, ppClassInstances : **ID3D11ClassInstance, NumClassInstances : u32) #no_context
    {
        this.vtable.VSSetShader (this, pVertexShader, ppClassInstances, NumClassInstances);
    }

    DrawIndexed :: inline (this : *ID3D11DeviceContext, IndexCount : u32, StartIndexLocation : u32, BaseVertexLocation : s32) #no_context
    {
        this.vtable.DrawIndexed (this, IndexCount, StartIndexLocation, BaseVertexLocation);
    }

    Draw :: inline (this : *ID3D11DeviceContext, VertexCount : u32, StartVertexLocation : u32) #no_context
    {
        this.vtable.Draw (this, VertexCount, StartVertexLocation);
    }

    Map :: inline (this : *ID3D11DeviceContext, 
        pResource : *ID3D11Resource,
        Subresource : u32,
        MapType : D3D11_MAP,
        MapFlags : u32,
        pMappedResource : *D3D11_MAPPED_SUBRESOURCE
    ) -> HRESULT #no_context
    {
        return this.vtable.Map (this, pResource, Subresource, MapType, MapFlags, pMappedResource);
    }

    Unmap :: inline (this : *ID3D11DeviceContext, pResource : *ID3D11Resource, Subresource : u32) #no_context
    {
        this.vtable.Unmap (this, pResource, Subresource);
    }

    PSSetConstantBuffers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #no_context
    {
        this.vtable.PSSetConstantBuffers (this, StartSlot, NumBuffers, ppConstantBuffers);
    }

    IASetInputLayout :: inline (this : *ID3D11DeviceContext, pInputLayout : *ID3D11InputLayout) #no_context
    {
        this.vtable.IASetInputLayout (this, pInputLayout);
    }

    IASetVertexBuffers :: inline (this : *ID3D11DeviceContext, 
        StartSlot : u32,
        NumBuffers : u32,
        ppVertexBuffers : **ID3D11Buffer,
        pStrides : *u32,
        pOffsets : *u32
    ) #no_context
    {
        this.vtable.IASetVertexBuffers (this, StartSlot, NumBuffers, ppVertexBuffers, pStrides, pOffsets);
    }

    IASetIndexBuffer :: inline (this : *ID3D11DeviceContext, pIndexBuffer : *ID3D11Buffer, Format : DXGI_FORMAT, Offset : u32) #no_context
    {
        this.vtable.IASetIndexBuffer (this, pIndexBuffer, Format, Offset);
    }

    DrawIndexedInstanced :: inline (this : *ID3D11DeviceContext, 
        IndexCountPerInstance : u32,
        InstanceCount : u32,
        StartIndexLocation : u32,
        BaseVertexLocation : s32,
        StartInstanceLocation : u32
    ) #no_context
    {
        this.vtable.DrawIndexedInstanced (this, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
    }

    DrawInstanced :: inline (this : *ID3D11DeviceContext, 
        VertexCountPerInstance : u32,
        InstanceCount : u32,
        StartVertexLocation : u32,
        StartInstanceLocation : u32
    ) #no_context
    {
        this.vtable.DrawInstanced (this, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
    }

    GSSetConstantBuffers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #no_context
    {
        this.vtable.GSSetConstantBuffers (this, StartSlot, NumBuffers, ppConstantBuffers);
    }

    GSSetShader :: inline (this : *ID3D11DeviceContext, pShader : *ID3D11GeometryShader, ppClassInstances : **ID3D11ClassInstance, NumClassInstances : u32) #no_context
    {
        this.vtable.GSSetShader (this, pShader, ppClassInstances, NumClassInstances);
    }

    IASetPrimitiveTopology :: inline (this : *ID3D11DeviceContext, Topology : D3D_PRIMITIVE_TOPOLOGY) #no_context
    {
        this.vtable.IASetPrimitiveTopology (this, Topology);
    }

    VSSetShaderResources :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #no_context
    {
        this.vtable.VSSetShaderResources (this, StartSlot, NumViews, ppShaderResourceViews);
    }

    VSSetSamplers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #no_context
    {
        this.vtable.VSSetSamplers (this, StartSlot, NumSamplers, ppSamplers);
    }

    Begin :: inline (this : *ID3D11DeviceContext, pAsync : *ID3D11Asynchronous) #no_context
    {
        this.vtable.Begin (this, pAsync);
    }

    End :: inline (this : *ID3D11DeviceContext, pAsync : *ID3D11Asynchronous) #no_context
    {
        this.vtable.End (this, pAsync);
    }

    GetData :: inline (this : *ID3D11DeviceContext, 
        pAsync : *ID3D11Asynchronous,
        pData : *void,
        DataSize : u32,
        GetDataFlags : u32
    ) -> HRESULT #no_context
    {
        return this.vtable.GetData (this, pAsync, pData, DataSize, GetDataFlags);
    }

    SetPredication :: inline (this : *ID3D11DeviceContext, pPredicate : *ID3D11Predicate, PredicateValue : BOOL) #no_context
    {
        this.vtable.SetPredication (this, pPredicate, PredicateValue);
    }

    GSSetShaderResources :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #no_context
    {
        this.vtable.GSSetShaderResources (this, StartSlot, NumViews, ppShaderResourceViews);
    }

    GSSetSamplers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #no_context
    {
        this.vtable.GSSetSamplers (this, StartSlot, NumSamplers, ppSamplers);
    }

    OMSetRenderTargets :: inline (this : *ID3D11DeviceContext, NumViews : u32, ppRenderTargetViews : **ID3D11RenderTargetView, pDepthStencilView : *ID3D11DepthStencilView) #no_context
    {
        this.vtable.OMSetRenderTargets (this, NumViews, ppRenderTargetViews, pDepthStencilView);
    }

    OMSetRenderTargetsAndUnorderedAccessViews :: inline (this : *ID3D11DeviceContext, 
        NumRTVs : u32,
        ppRenderTargetViews : **ID3D11RenderTargetView,
        pDepthStencilView : *ID3D11DepthStencilView,
        UAVStartSlot : u32,
        NumUAVs : u32,
        ppUnorderedAccessViews : **ID3D11UnorderedAccessView,
        pUAVInitialCounts : *u32
    ) #no_context
    {
        this.vtable.OMSetRenderTargetsAndUnorderedAccessViews (this, NumRTVs, ppRenderTargetViews, pDepthStencilView, UAVStartSlot, NumUAVs, ppUnorderedAccessViews, pUAVInitialCounts);
    }

    OMSetBlendState :: inline (this : *ID3D11DeviceContext, pBlendState : *ID3D11BlendState, BlendFactor : *float, SampleMask : u32) #no_context
    {
        this.vtable.OMSetBlendState (this, pBlendState, BlendFactor, SampleMask);
    }

    OMSetDepthStencilState :: inline (this : *ID3D11DeviceContext, pDepthStencilState : *ID3D11DepthStencilState, StencilRef : u32) #no_context
    {
        this.vtable.OMSetDepthStencilState (this, pDepthStencilState, StencilRef);
    }

    SOSetTargets :: inline (this : *ID3D11DeviceContext, NumBuffers : u32, ppSOTargets : **ID3D11Buffer, pOffsets : *u32) #no_context
    {
        this.vtable.SOSetTargets (this, NumBuffers, ppSOTargets, pOffsets);
    }

    DrawAuto :: inline (this : *ID3D11DeviceContext) #no_context
    {
        this.vtable.DrawAuto (this);
    }

    DrawIndexedInstancedIndirect :: inline (this : *ID3D11DeviceContext, pBufferForArgs : *ID3D11Buffer, AlignedByteOffsetForArgs : u32) #no_context
    {
        this.vtable.DrawIndexedInstancedIndirect (this, pBufferForArgs, AlignedByteOffsetForArgs);
    }

    DrawInstancedIndirect :: inline (this : *ID3D11DeviceContext, pBufferForArgs : *ID3D11Buffer, AlignedByteOffsetForArgs : u32) #no_context
    {
        this.vtable.DrawInstancedIndirect (this, pBufferForArgs, AlignedByteOffsetForArgs);
    }

    Dispatch :: inline (this : *ID3D11DeviceContext, ThreadGroupCountX : u32, ThreadGroupCountY : u32, ThreadGroupCountZ : u32) #no_context
    {
        this.vtable.Dispatch (this, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
    }

    DispatchIndirect :: inline (this : *ID3D11DeviceContext, pBufferForArgs : *ID3D11Buffer, AlignedByteOffsetForArgs : u32) #no_context
    {
        this.vtable.DispatchIndirect (this, pBufferForArgs, AlignedByteOffsetForArgs);
    }

    RSSetState :: inline (this : *ID3D11DeviceContext, pRasterizerState : *ID3D11RasterizerState) #no_context
    {
        this.vtable.RSSetState (this, pRasterizerState);
    }

    RSSetViewports :: inline (this : *ID3D11DeviceContext, NumViewports : u32, pViewports : *D3D11_VIEWPORT) #no_context
    {
        this.vtable.RSSetViewports (this, NumViewports, pViewports);
    }

    RSSetScissorRects :: inline (this : *ID3D11DeviceContext, NumRects : u32, pRects : *RECT) #no_context
    {
        this.vtable.RSSetScissorRects (this, NumRects, pRects);
    }

    CopySubresourceRegion :: inline (this : *ID3D11DeviceContext, 
        pDstResource : *ID3D11Resource,
        DstSubresource : u32,
        DstX : u32,
        DstY : u32,
        DstZ : u32,
        pSrcResource : *ID3D11Resource,
        SrcSubresource : u32,
        pSrcBox : *D3D11_BOX
    ) #no_context
    {
        this.vtable.CopySubresourceRegion (this, pDstResource, DstSubresource, DstX, DstY, DstZ, pSrcResource, SrcSubresource, pSrcBox);
    }

    CopyResource :: inline (this : *ID3D11DeviceContext, pDstResource : *ID3D11Resource, pSrcResource : *ID3D11Resource) #no_context
    {
        this.vtable.CopyResource (this, pDstResource, pSrcResource);
    }

    UpdateSubresource :: inline (this : *ID3D11DeviceContext, 
        pDstResource : *ID3D11Resource,
        DstSubresource : u32,
        pDstBox : *D3D11_BOX,
        pSrcData : *void,
        SrcRowPitch : u32,
        SrcDepthPitch : u32
    ) #no_context
    {
        this.vtable.UpdateSubresource (this, pDstResource, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
    }

    CopyStructureCount :: inline (this : *ID3D11DeviceContext, pDstBuffer : *ID3D11Buffer, DstAlignedByteOffset : u32, pSrcView : *ID3D11UnorderedAccessView) #no_context
    {
        this.vtable.CopyStructureCount (this, pDstBuffer, DstAlignedByteOffset, pSrcView);
    }

    ClearRenderTargetView :: inline (this : *ID3D11DeviceContext, pRenderTargetView : *ID3D11RenderTargetView, ColorRGBA : *float) #no_context
    {
        this.vtable.ClearRenderTargetView (this, pRenderTargetView, ColorRGBA);
    }

    ClearUnorderedAccessViewUint :: inline (this : *ID3D11DeviceContext, pUnorderedAccessView : *ID3D11UnorderedAccessView, Values : *u32) #no_context
    {
        this.vtable.ClearUnorderedAccessViewUint (this, pUnorderedAccessView, Values);
    }

    ClearUnorderedAccessViewFloat :: inline (this : *ID3D11DeviceContext, pUnorderedAccessView : *ID3D11UnorderedAccessView, Values : *float) #no_context
    {
        this.vtable.ClearUnorderedAccessViewFloat (this, pUnorderedAccessView, Values);
    }

    ClearDepthStencilView :: inline (this : *ID3D11DeviceContext, 
        pDepthStencilView : *ID3D11DepthStencilView,
        ClearFlags : u32,
        Depth : float,
        Stencil : u8
    ) #no_context
    {
        this.vtable.ClearDepthStencilView (this, pDepthStencilView, ClearFlags, Depth, Stencil);
    }

    GenerateMips :: inline (this : *ID3D11DeviceContext, pShaderResourceView : *ID3D11ShaderResourceView) #no_context
    {
        this.vtable.GenerateMips (this, pShaderResourceView);
    }

    SetResourceMinLOD :: inline (this : *ID3D11DeviceContext, pResource : *ID3D11Resource, MinLOD : float) #no_context
    {
        this.vtable.SetResourceMinLOD (this, pResource, MinLOD);
    }

    GetResourceMinLOD :: inline (this : *ID3D11DeviceContext, pResource : *ID3D11Resource) -> float #no_context
    {
        return this.vtable.GetResourceMinLOD (this, pResource);
    }

    ResolveSubresource :: inline (this : *ID3D11DeviceContext, 
        pDstResource : *ID3D11Resource,
        DstSubresource : u32,
        pSrcResource : *ID3D11Resource,
        SrcSubresource : u32,
        Format : DXGI_FORMAT
    ) #no_context
    {
        this.vtable.ResolveSubresource (this, pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
    }

    ExecuteCommandList :: inline (this : *ID3D11DeviceContext, pCommandList : *ID3D11CommandList, RestoreContextState : BOOL) #no_context
    {
        this.vtable.ExecuteCommandList (this, pCommandList, RestoreContextState);
    }

    HSSetShaderResources :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #no_context
    {
        this.vtable.HSSetShaderResources (this, StartSlot, NumViews, ppShaderResourceViews);
    }

    HSSetShader :: inline (this : *ID3D11DeviceContext, pHullShader : *ID3D11HullShader, ppClassInstances : **ID3D11ClassInstance, NumClassInstances : u32) #no_context
    {
        this.vtable.HSSetShader (this, pHullShader, ppClassInstances, NumClassInstances);
    }

    HSSetSamplers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #no_context
    {
        this.vtable.HSSetSamplers (this, StartSlot, NumSamplers, ppSamplers);
    }

    HSSetConstantBuffers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #no_context
    {
        this.vtable.HSSetConstantBuffers (this, StartSlot, NumBuffers, ppConstantBuffers);
    }

    DSSetShaderResources :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #no_context
    {
        this.vtable.DSSetShaderResources (this, StartSlot, NumViews, ppShaderResourceViews);
    }

    DSSetShader :: inline (this : *ID3D11DeviceContext, pDomainShader : *ID3D11DomainShader, ppClassInstances : **ID3D11ClassInstance, NumClassInstances : u32) #no_context
    {
        this.vtable.DSSetShader (this, pDomainShader, ppClassInstances, NumClassInstances);
    }

    DSSetSamplers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #no_context
    {
        this.vtable.DSSetSamplers (this, StartSlot, NumSamplers, ppSamplers);
    }

    DSSetConstantBuffers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #no_context
    {
        this.vtable.DSSetConstantBuffers (this, StartSlot, NumBuffers, ppConstantBuffers);
    }

    CSSetShaderResources :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #no_context
    {
        this.vtable.CSSetShaderResources (this, StartSlot, NumViews, ppShaderResourceViews);
    }

    CSSetUnorderedAccessViews :: inline (this : *ID3D11DeviceContext, 
        StartSlot : u32,
        NumUAVs : u32,
        ppUnorderedAccessViews : **ID3D11UnorderedAccessView,
        pUAVInitialCounts : *u32
    ) #no_context
    {
        this.vtable.CSSetUnorderedAccessViews (this, StartSlot, NumUAVs, ppUnorderedAccessViews, pUAVInitialCounts);
    }

    CSSetShader :: inline (this : *ID3D11DeviceContext, pComputeShader : *ID3D11ComputeShader, ppClassInstances : **ID3D11ClassInstance, NumClassInstances : u32) #no_context
    {
        this.vtable.CSSetShader (this, pComputeShader, ppClassInstances, NumClassInstances);
    }

    CSSetSamplers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #no_context
    {
        this.vtable.CSSetSamplers (this, StartSlot, NumSamplers, ppSamplers);
    }

    CSSetConstantBuffers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #no_context
    {
        this.vtable.CSSetConstantBuffers (this, StartSlot, NumBuffers, ppConstantBuffers);
    }

    VSGetConstantBuffers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #no_context
    {
        this.vtable.VSGetConstantBuffers (this, StartSlot, NumBuffers, ppConstantBuffers);
    }

    PSGetShaderResources :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #no_context
    {
        this.vtable.PSGetShaderResources (this, StartSlot, NumViews, ppShaderResourceViews);
    }

    PSGetShader :: inline (this : *ID3D11DeviceContext, ppPixelShader : **ID3D11PixelShader, ppClassInstances : **ID3D11ClassInstance, pNumClassInstances : *u32) #no_context
    {
        this.vtable.PSGetShader (this, ppPixelShader, ppClassInstances, pNumClassInstances);
    }

    PSGetSamplers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #no_context
    {
        this.vtable.PSGetSamplers (this, StartSlot, NumSamplers, ppSamplers);
    }

    VSGetShader :: inline (this : *ID3D11DeviceContext, ppVertexShader : **ID3D11VertexShader, ppClassInstances : **ID3D11ClassInstance, pNumClassInstances : *u32) #no_context
    {
        this.vtable.VSGetShader (this, ppVertexShader, ppClassInstances, pNumClassInstances);
    }

    PSGetConstantBuffers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #no_context
    {
        this.vtable.PSGetConstantBuffers (this, StartSlot, NumBuffers, ppConstantBuffers);
    }

    IAGetInputLayout :: inline (this : *ID3D11DeviceContext, ppInputLayout : **ID3D11InputLayout) #no_context
    {
        this.vtable.IAGetInputLayout (this, ppInputLayout);
    }

    IAGetVertexBuffers :: inline (this : *ID3D11DeviceContext, 
        StartSlot : u32,
        NumBuffers : u32,
        ppVertexBuffers : **ID3D11Buffer,
        pStrides : *u32,
        pOffsets : *u32
    ) #no_context
    {
        this.vtable.IAGetVertexBuffers (this, StartSlot, NumBuffers, ppVertexBuffers, pStrides, pOffsets);
    }

    IAGetIndexBuffer :: inline (this : *ID3D11DeviceContext, pIndexBuffer : **ID3D11Buffer, Format : *DXGI_FORMAT, Offset : *u32) #no_context
    {
        this.vtable.IAGetIndexBuffer (this, pIndexBuffer, Format, Offset);
    }

    GSGetConstantBuffers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #no_context
    {
        this.vtable.GSGetConstantBuffers (this, StartSlot, NumBuffers, ppConstantBuffers);
    }

    GSGetShader :: inline (this : *ID3D11DeviceContext, ppGeometryShader : **ID3D11GeometryShader, ppClassInstances : **ID3D11ClassInstance, pNumClassInstances : *u32) #no_context
    {
        this.vtable.GSGetShader (this, ppGeometryShader, ppClassInstances, pNumClassInstances);
    }

    IAGetPrimitiveTopology :: inline (this : *ID3D11DeviceContext, pTopology : *D3D_PRIMITIVE_TOPOLOGY) #no_context
    {
        this.vtable.IAGetPrimitiveTopology (this, pTopology);
    }

    VSGetShaderResources :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #no_context
    {
        this.vtable.VSGetShaderResources (this, StartSlot, NumViews, ppShaderResourceViews);
    }

    VSGetSamplers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #no_context
    {
        this.vtable.VSGetSamplers (this, StartSlot, NumSamplers, ppSamplers);
    }

    GetPredication :: inline (this : *ID3D11DeviceContext, ppPredicate : **ID3D11Predicate, pPredicateValue : *BOOL) #no_context
    {
        this.vtable.GetPredication (this, ppPredicate, pPredicateValue);
    }

    GSGetShaderResources :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #no_context
    {
        this.vtable.GSGetShaderResources (this, StartSlot, NumViews, ppShaderResourceViews);
    }

    GSGetSamplers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #no_context
    {
        this.vtable.GSGetSamplers (this, StartSlot, NumSamplers, ppSamplers);
    }

    OMGetRenderTargets :: inline (this : *ID3D11DeviceContext, NumViews : u32, ppRenderTargetViews : **ID3D11RenderTargetView, ppDepthStencilView : **ID3D11DepthStencilView) #no_context
    {
        this.vtable.OMGetRenderTargets (this, NumViews, ppRenderTargetViews, ppDepthStencilView);
    }

    OMGetRenderTargetsAndUnorderedAccessViews :: inline (this : *ID3D11DeviceContext, 
        NumRTVs : u32,
        ppRenderTargetViews : **ID3D11RenderTargetView,
        ppDepthStencilView : **ID3D11DepthStencilView,
        UAVStartSlot : u32,
        NumUAVs : u32,
        ppUnorderedAccessViews : **ID3D11UnorderedAccessView
    ) #no_context
    {
        this.vtable.OMGetRenderTargetsAndUnorderedAccessViews (this, NumRTVs, ppRenderTargetViews, ppDepthStencilView, UAVStartSlot, NumUAVs, ppUnorderedAccessViews);
    }

    OMGetBlendState :: inline (this : *ID3D11DeviceContext, ppBlendState : **ID3D11BlendState, BlendFactor : *float, pSampleMask : *u32) #no_context
    {
        this.vtable.OMGetBlendState (this, ppBlendState, BlendFactor, pSampleMask);
    }

    OMGetDepthStencilState :: inline (this : *ID3D11DeviceContext, ppDepthStencilState : **ID3D11DepthStencilState, pStencilRef : *u32) #no_context
    {
        this.vtable.OMGetDepthStencilState (this, ppDepthStencilState, pStencilRef);
    }

    SOGetTargets :: inline (this : *ID3D11DeviceContext, NumBuffers : u32, ppSOTargets : **ID3D11Buffer) #no_context
    {
        this.vtable.SOGetTargets (this, NumBuffers, ppSOTargets);
    }

    RSGetState :: inline (this : *ID3D11DeviceContext, ppRasterizerState : **ID3D11RasterizerState) #no_context
    {
        this.vtable.RSGetState (this, ppRasterizerState);
    }

    RSGetViewports :: inline (this : *ID3D11DeviceContext, pNumViewports : *u32, pViewports : *D3D11_VIEWPORT) #no_context
    {
        this.vtable.RSGetViewports (this, pNumViewports, pViewports);
    }

    RSGetScissorRects :: inline (this : *ID3D11DeviceContext, pNumRects : *u32, pRects : *RECT) #no_context
    {
        this.vtable.RSGetScissorRects (this, pNumRects, pRects);
    }

    HSGetShaderResources :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #no_context
    {
        this.vtable.HSGetShaderResources (this, StartSlot, NumViews, ppShaderResourceViews);
    }

    HSGetShader :: inline (this : *ID3D11DeviceContext, ppHullShader : **ID3D11HullShader, ppClassInstances : **ID3D11ClassInstance, pNumClassInstances : *u32) #no_context
    {
        this.vtable.HSGetShader (this, ppHullShader, ppClassInstances, pNumClassInstances);
    }

    HSGetSamplers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #no_context
    {
        this.vtable.HSGetSamplers (this, StartSlot, NumSamplers, ppSamplers);
    }

    HSGetConstantBuffers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #no_context
    {
        this.vtable.HSGetConstantBuffers (this, StartSlot, NumBuffers, ppConstantBuffers);
    }

    DSGetShaderResources :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #no_context
    {
        this.vtable.DSGetShaderResources (this, StartSlot, NumViews, ppShaderResourceViews);
    }

    DSGetShader :: inline (this : *ID3D11DeviceContext, ppDomainShader : **ID3D11DomainShader, ppClassInstances : **ID3D11ClassInstance, pNumClassInstances : *u32) #no_context
    {
        this.vtable.DSGetShader (this, ppDomainShader, ppClassInstances, pNumClassInstances);
    }

    DSGetSamplers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #no_context
    {
        this.vtable.DSGetSamplers (this, StartSlot, NumSamplers, ppSamplers);
    }

    DSGetConstantBuffers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #no_context
    {
        this.vtable.DSGetConstantBuffers (this, StartSlot, NumBuffers, ppConstantBuffers);
    }

    CSGetShaderResources :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #no_context
    {
        this.vtable.CSGetShaderResources (this, StartSlot, NumViews, ppShaderResourceViews);
    }

    CSGetUnorderedAccessViews :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumUAVs : u32, ppUnorderedAccessViews : **ID3D11UnorderedAccessView) #no_context
    {
        this.vtable.CSGetUnorderedAccessViews (this, StartSlot, NumUAVs, ppUnorderedAccessViews);
    }

    CSGetShader :: inline (this : *ID3D11DeviceContext, ppComputeShader : **ID3D11ComputeShader, ppClassInstances : **ID3D11ClassInstance, pNumClassInstances : *u32) #no_context
    {
        this.vtable.CSGetShader (this, ppComputeShader, ppClassInstances, pNumClassInstances);
    }

    CSGetSamplers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #no_context
    {
        this.vtable.CSGetSamplers (this, StartSlot, NumSamplers, ppSamplers);
    }

    CSGetConstantBuffers :: inline (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #no_context
    {
        this.vtable.CSGetConstantBuffers (this, StartSlot, NumBuffers, ppConstantBuffers);
    }

    ClearState :: inline (this : *ID3D11DeviceContext) #no_context
    {
        this.vtable.ClearState (this);
    }

    Flush :: inline (this : *ID3D11DeviceContext) #no_context
    {
        this.vtable.Flush (this);
    }

    GetType :: inline (this : *ID3D11DeviceContext) -> D3D11_DEVICE_CONTEXT_TYPE #no_context
    {
        return this.vtable.GetType (this);
    }

    GetContextFlags :: inline (this : *ID3D11DeviceContext) -> u32 #no_context
    {
        return this.vtable.GetContextFlags (this);
    }

    FinishCommandList :: inline (this : *ID3D11DeviceContext, RestoreDeferredContextState : BOOL, ppCommandList : **ID3D11CommandList) -> HRESULT #no_context
    {
        return this.vtable.FinishCommandList (this, RestoreDeferredContextState, ppCommandList);
    }
}

ID3D11DeviceContext1_UUID :: "bb2c6faa-b5fb-4082-8e6b-388b8cfa90e1";
ID3D11DeviceContext1 :: struct
{
    UUID :: GUID.{0xbb2c6faa,0xb5fb,0x4082,.[0x8e,0x6b,0x38,0x8b,0x8c,0xfa,0x90,0xe1]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceContext;

    #place base;
    vtable : *ID3D11DeviceContext1VTable;

    CopySubresourceRegion1 :: inline (this : *ID3D11DeviceContext1, 
        pDstResource : *ID3D11Resource,
        DstSubresource : u32,
        DstX : u32,
        DstY : u32,
        DstZ : u32,
        pSrcResource : *ID3D11Resource,
        SrcSubresource : u32,
        pSrcBox : *D3D11_BOX,
        CopyFlags : u32
    ) #no_context
    {
        this.vtable.CopySubresourceRegion1 (this, pDstResource, DstSubresource, DstX, DstY, DstZ, pSrcResource, SrcSubresource, pSrcBox, CopyFlags);
    }

    UpdateSubresource1 :: inline (this : *ID3D11DeviceContext1, 
        pDstResource : *ID3D11Resource,
        DstSubresource : u32,
        pDstBox : *D3D11_BOX,
        pSrcData : *void,
        SrcRowPitch : u32,
        SrcDepthPitch : u32,
        CopyFlags : u32
    ) #no_context
    {
        this.vtable.UpdateSubresource1 (this, pDstResource, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch, CopyFlags);
    }

    DiscardResource :: inline (this : *ID3D11DeviceContext1, pResource : *ID3D11Resource) #no_context
    {
        this.vtable.DiscardResource (this, pResource);
    }

    DiscardView :: inline (this : *ID3D11DeviceContext1, pResourceView : *ID3D11View) #no_context
    {
        this.vtable.DiscardView (this, pResourceView);
    }

    VSSetConstantBuffers1 :: inline (this : *ID3D11DeviceContext1, 
        StartSlot : u32,
        NumBuffers : u32,
        ppConstantBuffers : **ID3D11Buffer,
        pFirstConstant : *u32,
        pNumConstants : *u32
    ) #no_context
    {
        this.vtable.VSSetConstantBuffers1 (this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
    }

    HSSetConstantBuffers1 :: inline (this : *ID3D11DeviceContext1, 
        StartSlot : u32,
        NumBuffers : u32,
        ppConstantBuffers : **ID3D11Buffer,
        pFirstConstant : *u32,
        pNumConstants : *u32
    ) #no_context
    {
        this.vtable.HSSetConstantBuffers1 (this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
    }

    DSSetConstantBuffers1 :: inline (this : *ID3D11DeviceContext1, 
        StartSlot : u32,
        NumBuffers : u32,
        ppConstantBuffers : **ID3D11Buffer,
        pFirstConstant : *u32,
        pNumConstants : *u32
    ) #no_context
    {
        this.vtable.DSSetConstantBuffers1 (this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
    }

    GSSetConstantBuffers1 :: inline (this : *ID3D11DeviceContext1, 
        StartSlot : u32,
        NumBuffers : u32,
        ppConstantBuffers : **ID3D11Buffer,
        pFirstConstant : *u32,
        pNumConstants : *u32
    ) #no_context
    {
        this.vtable.GSSetConstantBuffers1 (this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
    }

    PSSetConstantBuffers1 :: inline (this : *ID3D11DeviceContext1, 
        StartSlot : u32,
        NumBuffers : u32,
        ppConstantBuffers : **ID3D11Buffer,
        pFirstConstant : *u32,
        pNumConstants : *u32
    ) #no_context
    {
        this.vtable.PSSetConstantBuffers1 (this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
    }

    CSSetConstantBuffers1 :: inline (this : *ID3D11DeviceContext1, 
        StartSlot : u32,
        NumBuffers : u32,
        ppConstantBuffers : **ID3D11Buffer,
        pFirstConstant : *u32,
        pNumConstants : *u32
    ) #no_context
    {
        this.vtable.CSSetConstantBuffers1 (this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
    }

    VSGetConstantBuffers1 :: inline (this : *ID3D11DeviceContext1, 
        StartSlot : u32,
        NumBuffers : u32,
        ppConstantBuffers : **ID3D11Buffer,
        pFirstConstant : *u32,
        pNumConstants : *u32
    ) #no_context
    {
        this.vtable.VSGetConstantBuffers1 (this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
    }

    HSGetConstantBuffers1 :: inline (this : *ID3D11DeviceContext1, 
        StartSlot : u32,
        NumBuffers : u32,
        ppConstantBuffers : **ID3D11Buffer,
        pFirstConstant : *u32,
        pNumConstants : *u32
    ) #no_context
    {
        this.vtable.HSGetConstantBuffers1 (this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
    }

    DSGetConstantBuffers1 :: inline (this : *ID3D11DeviceContext1, 
        StartSlot : u32,
        NumBuffers : u32,
        ppConstantBuffers : **ID3D11Buffer,
        pFirstConstant : *u32,
        pNumConstants : *u32
    ) #no_context
    {
        this.vtable.DSGetConstantBuffers1 (this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
    }

    GSGetConstantBuffers1 :: inline (this : *ID3D11DeviceContext1, 
        StartSlot : u32,
        NumBuffers : u32,
        ppConstantBuffers : **ID3D11Buffer,
        pFirstConstant : *u32,
        pNumConstants : *u32
    ) #no_context
    {
        this.vtable.GSGetConstantBuffers1 (this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
    }

    PSGetConstantBuffers1 :: inline (this : *ID3D11DeviceContext1, 
        StartSlot : u32,
        NumBuffers : u32,
        ppConstantBuffers : **ID3D11Buffer,
        pFirstConstant : *u32,
        pNumConstants : *u32
    ) #no_context
    {
        this.vtable.PSGetConstantBuffers1 (this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
    }

    CSGetConstantBuffers1 :: inline (this : *ID3D11DeviceContext1, 
        StartSlot : u32,
        NumBuffers : u32,
        ppConstantBuffers : **ID3D11Buffer,
        pFirstConstant : *u32,
        pNumConstants : *u32
    ) #no_context
    {
        this.vtable.CSGetConstantBuffers1 (this, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
    }

    SwapDeviceContextState :: inline (this : *ID3D11DeviceContext1, pState : *ID3DDeviceContextState, ppPreviousState : **ID3DDeviceContextState) #no_context
    {
        this.vtable.SwapDeviceContextState (this, pState, ppPreviousState);
    }

    ClearView :: inline (this : *ID3D11DeviceContext1, 
        pView : *ID3D11View,
        Color : *float,
        pRect : *RECT,
        NumRects : u32
    ) #no_context
    {
        this.vtable.ClearView (this, pView, Color, pRect, NumRects);
    }

    DiscardView1 :: inline (this : *ID3D11DeviceContext1, pResourceView : *ID3D11View, pRects : *RECT, NumRects : u32) #no_context
    {
        this.vtable.DiscardView1 (this, pResourceView, pRects, NumRects);
    }
}

ID3D11DeviceContext2_UUID :: "420d5b32-b90c-4da4-bef0-359f6a24a83a";
ID3D11DeviceContext2 :: struct
{
    UUID :: GUID.{0x420d5b32,0xb90c,0x4da4,.[0xbe,0xf0,0x35,0x9f,0x6a,0x24,0xa8,0x3a]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceContext1;

    #place base;
    vtable : *ID3D11DeviceContext2VTable;

    UpdateTileMappings :: inline (this : *ID3D11DeviceContext2, 
        pTiledResource : *ID3D11Resource,
        NumTiledResourceRegions : u32,
        pTiledResourceRegionStartCoordinates : *D3D11_TILED_RESOURCE_COORDINATE,
        pTiledResourceRegionSizes : *D3D11_TILE_REGION_SIZE,
        pTilePool : *ID3D11Buffer,
        NumRanges : u32,
        pRangeFlags : *u32,
        pTilePoolStartOffsets : *u32,
        pRangeTileCounts : *u32,
        Flags : u32
    ) -> HRESULT #no_context
    {
        return this.vtable.UpdateTileMappings (this, pTiledResource, NumTiledResourceRegions, pTiledResourceRegionStartCoordinates, pTiledResourceRegionSizes, pTilePool, NumRanges, pRangeFlags, pTilePoolStartOffsets, pRangeTileCounts, Flags);
    }

    CopyTileMappings :: inline (this : *ID3D11DeviceContext2, 
        pDestTiledResource : *ID3D11Resource,
        pDestRegionStartCoordinate : *D3D11_TILED_RESOURCE_COORDINATE,
        pSourceTiledResource : *ID3D11Resource,
        pSourceRegionStartCoordinate : *D3D11_TILED_RESOURCE_COORDINATE,
        pTileRegionSize : *D3D11_TILE_REGION_SIZE,
        Flags : u32
    ) -> HRESULT #no_context
    {
        return this.vtable.CopyTileMappings (this, pDestTiledResource, pDestRegionStartCoordinate, pSourceTiledResource, pSourceRegionStartCoordinate, pTileRegionSize, Flags);
    }

    CopyTiles :: inline (this : *ID3D11DeviceContext2, 
        pTiledResource : *ID3D11Resource,
        pTileRegionStartCoordinate : *D3D11_TILED_RESOURCE_COORDINATE,
        pTileRegionSize : *D3D11_TILE_REGION_SIZE,
        pBuffer : *ID3D11Buffer,
        BufferStartOffsetInBytes : u64,
        Flags : u32
    ) #no_context
    {
        this.vtable.CopyTiles (this, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, BufferStartOffsetInBytes, Flags);
    }

    UpdateTiles :: inline (this : *ID3D11DeviceContext2, 
        pDestTiledResource : *ID3D11Resource,
        pDestTileRegionStartCoordinate : *D3D11_TILED_RESOURCE_COORDINATE,
        pDestTileRegionSize : *D3D11_TILE_REGION_SIZE,
        pSourceTileData : *void,
        Flags : u32
    ) #no_context
    {
        this.vtable.UpdateTiles (this, pDestTiledResource, pDestTileRegionStartCoordinate, pDestTileRegionSize, pSourceTileData, Flags);
    }

    ResizeTilePool :: inline (this : *ID3D11DeviceContext2, pTilePool : *ID3D11Buffer, NewSizeInBytes : u64) -> HRESULT #no_context
    {
        return this.vtable.ResizeTilePool (this, pTilePool, NewSizeInBytes);
    }

    TiledResourceBarrier :: inline (this : *ID3D11DeviceContext2, pTiledResourceOrViewAccessBeforeBarrier : *ID3D11DeviceChild, pTiledResourceOrViewAccessAfterBarrier : *ID3D11DeviceChild) #no_context
    {
        this.vtable.TiledResourceBarrier (this, pTiledResourceOrViewAccessBeforeBarrier, pTiledResourceOrViewAccessAfterBarrier);
    }

    IsAnnotationEnabled :: inline (this : *ID3D11DeviceContext2) -> BOOL #no_context
    {
        return this.vtable.IsAnnotationEnabled (this);
    }

    SetMarkerInt :: inline (this : *ID3D11DeviceContext2, pLabel : PWSTR, Data : s32) #no_context
    {
        this.vtable.SetMarkerInt (this, pLabel, Data);
    }

    BeginEventInt :: inline (this : *ID3D11DeviceContext2, pLabel : PWSTR, Data : s32) #no_context
    {
        this.vtable.BeginEventInt (this, pLabel, Data);
    }

    EndEvent :: inline (this : *ID3D11DeviceContext2) #no_context
    {
        this.vtable.EndEvent (this);
    }
}

ID3D11DeviceContext3_UUID :: "b4e3c01d-e79e-4637-91b2-510e9f4c9b8f";
ID3D11DeviceContext3 :: struct
{
    UUID :: GUID.{0xb4e3c01d,0xe79e,0x4637,.[0x91,0xb2,0x51,0xe,0x9f,0x4c,0x9b,0x8f]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceContext2;

    #place base;
    vtable : *ID3D11DeviceContext3VTable;

    Flush1 :: inline (this : *ID3D11DeviceContext3, ContextType : D3D11_CONTEXT_TYPE, hEvent : HANDLE) #no_context
    {
        this.vtable.Flush1 (this, ContextType, hEvent);
    }

    SetHardwareProtectionState :: inline (this : *ID3D11DeviceContext3, HwProtectionEnable : BOOL) #no_context
    {
        this.vtable.SetHardwareProtectionState (this, HwProtectionEnable);
    }

    GetHardwareProtectionState :: inline (this : *ID3D11DeviceContext3, pHwProtectionEnable : *BOOL) #no_context
    {
        this.vtable.GetHardwareProtectionState (this, pHwProtectionEnable);
    }
}

ID3D11DeviceContext4_UUID :: "917600da-f58c-4c33-98d8-3e15b390fa24";
ID3D11DeviceContext4 :: struct
{
    UUID :: GUID.{0x917600da,0xf58c,0x4c33,.[0x98,0xd8,0x3e,0x15,0xb3,0x90,0xfa,0x24]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceContext3;

    #place base;
    vtable : *ID3D11DeviceContext4VTable;

    Signal :: inline (this : *ID3D11DeviceContext4, pFence : *ID3D11Fence, Value : u64) -> HRESULT #no_context
    {
        return this.vtable.Signal (this, pFence, Value);
    }

    Wait :: inline (this : *ID3D11DeviceContext4, pFence : *ID3D11Fence, Value : u64) -> HRESULT #no_context
    {
        return this.vtable.Wait (this, pFence, Value);
    }
}

ID3D11DomainShader_UUID :: "f582c508-0f36-490c-9977-31eece268cfa";
ID3D11DomainShader :: struct
{
    UUID :: GUID.{0xf582c508,0xf36,0x490c,.[0x99,0x77,0x31,0xee,0xce,0x26,0x8c,0xfa]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11DomainShaderVTable;
}

ID3D11Fence_UUID :: "affde9d1-1df7-4bb7-8a34-0f46251dab80";
ID3D11Fence :: struct
{
    UUID :: GUID.{0xaffde9d1,0x1df7,0x4bb7,.[0x8a,0x34,0xf,0x46,0x25,0x1d,0xab,0x80]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11FenceVTable;

    CreateSharedHandle :: inline (this : *ID3D11Fence, 
        pAttributes : *SECURITY_ATTRIBUTES,
        dwAccess : u32,
        lpName : PWSTR,
        pHandle : *HANDLE
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateSharedHandle (this, pAttributes, dwAccess, lpName, pHandle);
    }

    GetCompletedValue :: inline (this : *ID3D11Fence) -> u64 #no_context
    {
        return this.vtable.GetCompletedValue (this);
    }

    SetEventOnCompletion :: inline (this : *ID3D11Fence, Value : u64, hEvent : HANDLE) -> HRESULT #no_context
    {
        return this.vtable.SetEventOnCompletion (this, Value, hEvent);
    }
}

ID3D11FunctionLinkingGraph_UUID :: "54133220-1ce8-43d3-8236-9855c5ceecff";
ID3D11FunctionLinkingGraph :: struct
{
    UUID :: GUID.{0x54133220,0x1ce8,0x43d3,.[0x82,0x36,0x98,0x55,0xc5,0xce,0xec,0xff]};

    #as using, except(.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D11FunctionLinkingGraphVTable;

    CreateModuleInstance :: inline (this : *ID3D11FunctionLinkingGraph, ppModuleInstance : **ID3D11ModuleInstance, ppErrorBuffer : **ID3DBlob) -> HRESULT #no_context
    {
        return this.vtable.CreateModuleInstance (this, ppModuleInstance, ppErrorBuffer);
    }

    SetInputSignature :: inline (this : *ID3D11FunctionLinkingGraph, pInputParameters : *D3D11_PARAMETER_DESC, cInputParameters : u32, ppInputNode : **ID3D11LinkingNode) -> HRESULT #no_context
    {
        return this.vtable.SetInputSignature (this, pInputParameters, cInputParameters, ppInputNode);
    }

    SetOutputSignature :: inline (this : *ID3D11FunctionLinkingGraph, pOutputParameters : *D3D11_PARAMETER_DESC, cOutputParameters : u32, ppOutputNode : **ID3D11LinkingNode) -> HRESULT #no_context
    {
        return this.vtable.SetOutputSignature (this, pOutputParameters, cOutputParameters, ppOutputNode);
    }

    CallFunction :: inline (this : *ID3D11FunctionLinkingGraph, 
        pModuleInstanceNamespace : PSTR,
        pModuleWithFunctionPrototype : *ID3D11Module,
        pFunctionName : PSTR,
        ppCallNode : **ID3D11LinkingNode
    ) -> HRESULT #no_context
    {
        return this.vtable.CallFunction (this, pModuleInstanceNamespace, pModuleWithFunctionPrototype, pFunctionName, ppCallNode);
    }

    PassValue :: inline (this : *ID3D11FunctionLinkingGraph, 
        pSrcNode : *ID3D11LinkingNode,
        SrcParameterIndex : s32,
        pDstNode : *ID3D11LinkingNode,
        DstParameterIndex : s32
    ) -> HRESULT #no_context
    {
        return this.vtable.PassValue (this, pSrcNode, SrcParameterIndex, pDstNode, DstParameterIndex);
    }

    PassValueWithSwizzle :: inline (this : *ID3D11FunctionLinkingGraph, 
        pSrcNode : *ID3D11LinkingNode,
        SrcParameterIndex : s32,
        pSrcSwizzle : PSTR,
        pDstNode : *ID3D11LinkingNode,
        DstParameterIndex : s32,
        pDstSwizzle : PSTR
    ) -> HRESULT #no_context
    {
        return this.vtable.PassValueWithSwizzle (this, pSrcNode, SrcParameterIndex, pSrcSwizzle, pDstNode, DstParameterIndex, pDstSwizzle);
    }

    GetLastError :: inline (this : *ID3D11FunctionLinkingGraph, ppErrorBuffer : **ID3DBlob) -> HRESULT #no_context
    {
        return this.vtable.GetLastError (this, ppErrorBuffer);
    }

    GenerateHlsl :: inline (this : *ID3D11FunctionLinkingGraph, uFlags : u32, ppBuffer : **ID3DBlob) -> HRESULT #no_context
    {
        return this.vtable.GenerateHlsl (this, uFlags, ppBuffer);
    }
}

ID3D11FunctionParameterReflection_UUID :: "42757488-334f-47fe-982e-1a65d08cc462";
ID3D11FunctionParameterReflection :: struct
{
    UUID :: GUID.{0x42757488,0x334f,0x47fe,.[0x98,0x2e,0x1a,0x65,0xd0,0x8c,0xc4,0x62]};

    vtable : *ID3D11FunctionParameterReflectionVTable;

    GetDesc :: inline (this : *ID3D11FunctionParameterReflection, pDesc : *D3D11_PARAMETER_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetDesc (this, pDesc);
    }
}

ID3D11FunctionReflection_UUID :: "207bcecb-d683-4a06-a8a3-9b149b9f73a4";
ID3D11FunctionReflection :: struct
{
    UUID :: GUID.{0x207bcecb,0xd683,0x4a06,.[0xa8,0xa3,0x9b,0x14,0x9b,0x9f,0x73,0xa4]};

    vtable : *ID3D11FunctionReflectionVTable;

    GetDesc :: inline (this : *ID3D11FunctionReflection, pDesc : *D3D11_FUNCTION_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetDesc (this, pDesc);
    }

    GetConstantBufferByIndex :: inline (this : *ID3D11FunctionReflection, BufferIndex : u32) -> *ID3D11ShaderReflectionConstantBuffer #no_context
    {
        return this.vtable.GetConstantBufferByIndex (this, BufferIndex);
    }

    GetConstantBufferByName :: inline (this : *ID3D11FunctionReflection, Name : PSTR) -> *ID3D11ShaderReflectionConstantBuffer #no_context
    {
        return this.vtable.GetConstantBufferByName (this, Name);
    }

    GetResourceBindingDesc :: inline (this : *ID3D11FunctionReflection, ResourceIndex : u32, pDesc : *D3D11_SHADER_INPUT_BIND_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetResourceBindingDesc (this, ResourceIndex, pDesc);
    }

    GetVariableByName :: inline (this : *ID3D11FunctionReflection, Name : PSTR) -> *ID3D11ShaderReflectionVariable #no_context
    {
        return this.vtable.GetVariableByName (this, Name);
    }

    GetResourceBindingDescByName :: inline (this : *ID3D11FunctionReflection, Name : PSTR, pDesc : *D3D11_SHADER_INPUT_BIND_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetResourceBindingDescByName (this, Name, pDesc);
    }

    GetFunctionParameter :: inline (this : *ID3D11FunctionReflection, ParameterIndex : s32) -> *ID3D11FunctionParameterReflection #no_context
    {
        return this.vtable.GetFunctionParameter (this, ParameterIndex);
    }
}

ID3D11GeometryShader_UUID :: "38325b96-effb-4022-ba02-2e795b70275c";
ID3D11GeometryShader :: struct
{
    UUID :: GUID.{0x38325b96,0xeffb,0x4022,.[0xba,0x2,0x2e,0x79,0x5b,0x70,0x27,0x5c]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11GeometryShaderVTable;
}

ID3D11HullShader_UUID :: "8e5c6061-628a-4c8e-8264-bbe45cb3d5dd";
ID3D11HullShader :: struct
{
    UUID :: GUID.{0x8e5c6061,0x628a,0x4c8e,.[0x82,0x64,0xbb,0xe4,0x5c,0xb3,0xd5,0xdd]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11HullShaderVTable;
}

ID3D11InfoQueue_UUID :: "6543dbb6-1b48-42f5-ab82-e97ec74326f6";
ID3D11InfoQueue :: struct
{
    UUID :: GUID.{0x6543dbb6,0x1b48,0x42f5,.[0xab,0x82,0xe9,0x7e,0xc7,0x43,0x26,0xf6]};

    #as using, except(.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D11InfoQueueVTable;

    SetMessageCountLimit :: inline (this : *ID3D11InfoQueue, MessageCountLimit : u64) -> HRESULT #no_context
    {
        return this.vtable.SetMessageCountLimit (this, MessageCountLimit);
    }

    ClearStoredMessages :: inline (this : *ID3D11InfoQueue) #no_context
    {
        this.vtable.ClearStoredMessages (this);
    }

    GetMessage :: inline (this : *ID3D11InfoQueue, MessageIndex : u64, pMessage : *D3D11_MESSAGE, pMessageByteLength : *u64) -> HRESULT #no_context
    {
        return this.vtable.GetMessage (this, MessageIndex, pMessage, pMessageByteLength);
    }

    GetNumMessagesAllowedByStorageFilter :: inline (this : *ID3D11InfoQueue) -> u64 #no_context
    {
        return this.vtable.GetNumMessagesAllowedByStorageFilter (this);
    }

    GetNumMessagesDeniedByStorageFilter :: inline (this : *ID3D11InfoQueue) -> u64 #no_context
    {
        return this.vtable.GetNumMessagesDeniedByStorageFilter (this);
    }

    GetNumStoredMessages :: inline (this : *ID3D11InfoQueue) -> u64 #no_context
    {
        return this.vtable.GetNumStoredMessages (this);
    }

    GetNumStoredMessagesAllowedByRetrievalFilter :: inline (this : *ID3D11InfoQueue) -> u64 #no_context
    {
        return this.vtable.GetNumStoredMessagesAllowedByRetrievalFilter (this);
    }

    GetNumMessagesDiscardedByMessageCountLimit :: inline (this : *ID3D11InfoQueue) -> u64 #no_context
    {
        return this.vtable.GetNumMessagesDiscardedByMessageCountLimit (this);
    }

    GetMessageCountLimit :: inline (this : *ID3D11InfoQueue) -> u64 #no_context
    {
        return this.vtable.GetMessageCountLimit (this);
    }

    AddStorageFilterEntries :: inline (this : *ID3D11InfoQueue, pFilter : *D3D11_INFO_QUEUE_FILTER) -> HRESULT #no_context
    {
        return this.vtable.AddStorageFilterEntries (this, pFilter);
    }

    GetStorageFilter :: inline (this : *ID3D11InfoQueue, pFilter : *D3D11_INFO_QUEUE_FILTER, pFilterByteLength : *u64) -> HRESULT #no_context
    {
        return this.vtable.GetStorageFilter (this, pFilter, pFilterByteLength);
    }

    ClearStorageFilter :: inline (this : *ID3D11InfoQueue) #no_context
    {
        this.vtable.ClearStorageFilter (this);
    }

    PushEmptyStorageFilter :: inline (this : *ID3D11InfoQueue) -> HRESULT #no_context
    {
        return this.vtable.PushEmptyStorageFilter (this);
    }

    PushCopyOfStorageFilter :: inline (this : *ID3D11InfoQueue) -> HRESULT #no_context
    {
        return this.vtable.PushCopyOfStorageFilter (this);
    }

    PushStorageFilter :: inline (this : *ID3D11InfoQueue, pFilter : *D3D11_INFO_QUEUE_FILTER) -> HRESULT #no_context
    {
        return this.vtable.PushStorageFilter (this, pFilter);
    }

    PopStorageFilter :: inline (this : *ID3D11InfoQueue) #no_context
    {
        this.vtable.PopStorageFilter (this);
    }

    GetStorageFilterStackSize :: inline (this : *ID3D11InfoQueue) -> u32 #no_context
    {
        return this.vtable.GetStorageFilterStackSize (this);
    }

    AddRetrievalFilterEntries :: inline (this : *ID3D11InfoQueue, pFilter : *D3D11_INFO_QUEUE_FILTER) -> HRESULT #no_context
    {
        return this.vtable.AddRetrievalFilterEntries (this, pFilter);
    }

    GetRetrievalFilter :: inline (this : *ID3D11InfoQueue, pFilter : *D3D11_INFO_QUEUE_FILTER, pFilterByteLength : *u64) -> HRESULT #no_context
    {
        return this.vtable.GetRetrievalFilter (this, pFilter, pFilterByteLength);
    }

    ClearRetrievalFilter :: inline (this : *ID3D11InfoQueue) #no_context
    {
        this.vtable.ClearRetrievalFilter (this);
    }

    PushEmptyRetrievalFilter :: inline (this : *ID3D11InfoQueue) -> HRESULT #no_context
    {
        return this.vtable.PushEmptyRetrievalFilter (this);
    }

    PushCopyOfRetrievalFilter :: inline (this : *ID3D11InfoQueue) -> HRESULT #no_context
    {
        return this.vtable.PushCopyOfRetrievalFilter (this);
    }

    PushRetrievalFilter :: inline (this : *ID3D11InfoQueue, pFilter : *D3D11_INFO_QUEUE_FILTER) -> HRESULT #no_context
    {
        return this.vtable.PushRetrievalFilter (this, pFilter);
    }

    PopRetrievalFilter :: inline (this : *ID3D11InfoQueue) #no_context
    {
        this.vtable.PopRetrievalFilter (this);
    }

    GetRetrievalFilterStackSize :: inline (this : *ID3D11InfoQueue) -> u32 #no_context
    {
        return this.vtable.GetRetrievalFilterStackSize (this);
    }

    AddMessage :: inline (this : *ID3D11InfoQueue, 
        Category : D3D11_MESSAGE_CATEGORY,
        Severity : D3D11_MESSAGE_SEVERITY,
        ID : D3D11_MESSAGE_ID,
        pDescription : PSTR
    ) -> HRESULT #no_context
    {
        return this.vtable.AddMessage (this, Category, Severity, ID, pDescription);
    }

    AddApplicationMessage :: inline (this : *ID3D11InfoQueue, Severity : D3D11_MESSAGE_SEVERITY, pDescription : PSTR) -> HRESULT #no_context
    {
        return this.vtable.AddApplicationMessage (this, Severity, pDescription);
    }

    SetBreakOnCategory :: inline (this : *ID3D11InfoQueue, Category : D3D11_MESSAGE_CATEGORY, bEnable : BOOL) -> HRESULT #no_context
    {
        return this.vtable.SetBreakOnCategory (this, Category, bEnable);
    }

    SetBreakOnSeverity :: inline (this : *ID3D11InfoQueue, Severity : D3D11_MESSAGE_SEVERITY, bEnable : BOOL) -> HRESULT #no_context
    {
        return this.vtable.SetBreakOnSeverity (this, Severity, bEnable);
    }

    SetBreakOnID :: inline (this : *ID3D11InfoQueue, ID : D3D11_MESSAGE_ID, bEnable : BOOL) -> HRESULT #no_context
    {
        return this.vtable.SetBreakOnID (this, ID, bEnable);
    }

    GetBreakOnCategory :: inline (this : *ID3D11InfoQueue, Category : D3D11_MESSAGE_CATEGORY) -> BOOL #no_context
    {
        return this.vtable.GetBreakOnCategory (this, Category);
    }

    GetBreakOnSeverity :: inline (this : *ID3D11InfoQueue, Severity : D3D11_MESSAGE_SEVERITY) -> BOOL #no_context
    {
        return this.vtable.GetBreakOnSeverity (this, Severity);
    }

    GetBreakOnID :: inline (this : *ID3D11InfoQueue, ID : D3D11_MESSAGE_ID) -> BOOL #no_context
    {
        return this.vtable.GetBreakOnID (this, ID);
    }

    SetMuteDebugOutput :: inline (this : *ID3D11InfoQueue, bMute : BOOL) #no_context
    {
        this.vtable.SetMuteDebugOutput (this, bMute);
    }

    GetMuteDebugOutput :: inline (this : *ID3D11InfoQueue) -> BOOL #no_context
    {
        return this.vtable.GetMuteDebugOutput (this);
    }
}

ID3D11InputLayout_UUID :: "e4819ddc-4cf0-4025-bd26-5de82a3e07b7";
ID3D11InputLayout :: struct
{
    UUID :: GUID.{0xe4819ddc,0x4cf0,0x4025,.[0xbd,0x26,0x5d,0xe8,0x2a,0x3e,0x7,0xb7]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11InputLayoutVTable;
}

ID3D11LibraryReflection_UUID :: "54384f1b-5b3e-4bb7-ae01-60ba3097cbb6";
ID3D11LibraryReflection :: struct
{
    UUID :: GUID.{0x54384f1b,0x5b3e,0x4bb7,.[0xae,0x1,0x60,0xba,0x30,0x97,0xcb,0xb6]};

    #as using, except(.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D11LibraryReflectionVTable;

    GetDesc :: inline (this : *ID3D11LibraryReflection, pDesc : *D3D11_LIBRARY_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetDesc (this, pDesc);
    }

    GetFunctionByIndex :: inline (this : *ID3D11LibraryReflection, FunctionIndex : s32) -> *ID3D11FunctionReflection #no_context
    {
        return this.vtable.GetFunctionByIndex (this, FunctionIndex);
    }
}

ID3D11Linker_UUID :: "59a6cd0e-e10d-4c1f-88c0-63aba1daf30e";
ID3D11Linker :: struct
{
    UUID :: GUID.{0x59a6cd0e,0xe10d,0x4c1f,.[0x88,0xc0,0x63,0xab,0xa1,0xda,0xf3,0xe]};

    #as using, except(.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D11LinkerVTable;

    Link :: inline (this : *ID3D11Linker, 
        pEntry : *ID3D11ModuleInstance,
        pEntryName : PSTR,
        pTargetName : PSTR,
        uFlags : u32,
        ppShaderBlob : **ID3DBlob,
        ppErrorBuffer : **ID3DBlob
    ) -> HRESULT #no_context
    {
        return this.vtable.Link (this, pEntry, pEntryName, pTargetName, uFlags, ppShaderBlob, ppErrorBuffer);
    }

    UseLibrary :: inline (this : *ID3D11Linker, pLibraryMI : *ID3D11ModuleInstance) -> HRESULT #no_context
    {
        return this.vtable.UseLibrary (this, pLibraryMI);
    }

    AddClipPlaneFromCBuffer :: inline (this : *ID3D11Linker, uCBufferSlot : u32, uCBufferEntry : u32) -> HRESULT #no_context
    {
        return this.vtable.AddClipPlaneFromCBuffer (this, uCBufferSlot, uCBufferEntry);
    }
}

ID3D11LinkingNode_UUID :: "d80dd70c-8d2f-4751-94a1-03c79b3556db";
ID3D11LinkingNode :: struct
{
    UUID :: GUID.{0xd80dd70c,0x8d2f,0x4751,.[0x94,0xa1,0x3,0xc7,0x9b,0x35,0x56,0xdb]};

    #as using, except(.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D11LinkingNodeVTable;
}

ID3D11Module_UUID :: "cac701ee-80fc-4122-8242-10b39c8cec34";
ID3D11Module :: struct
{
    UUID :: GUID.{0xcac701ee,0x80fc,0x4122,.[0x82,0x42,0x10,0xb3,0x9c,0x8c,0xec,0x34]};

    #as using, except(.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D11ModuleVTable;

    CreateInstance :: inline (this : *ID3D11Module, pNamespace : PSTR, ppModuleInstance : **ID3D11ModuleInstance) -> HRESULT #no_context
    {
        return this.vtable.CreateInstance (this, pNamespace, ppModuleInstance);
    }
}

ID3D11ModuleInstance_UUID :: "469e07f7-045a-48d5-aa12-68a478cdf75d";
ID3D11ModuleInstance :: struct
{
    UUID :: GUID.{0x469e07f7,0x45a,0x48d5,.[0xaa,0x12,0x68,0xa4,0x78,0xcd,0xf7,0x5d]};

    #as using, except(.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D11ModuleInstanceVTable;

    BindConstantBuffer :: inline (this : *ID3D11ModuleInstance, uSrcSlot : u32, uDstSlot : u32, cbDstOffset : u32) -> HRESULT #no_context
    {
        return this.vtable.BindConstantBuffer (this, uSrcSlot, uDstSlot, cbDstOffset);
    }

    BindConstantBufferByName :: inline (this : *ID3D11ModuleInstance, pName : PSTR, uDstSlot : u32, cbDstOffset : u32) -> HRESULT #no_context
    {
        return this.vtable.BindConstantBufferByName (this, pName, uDstSlot, cbDstOffset);
    }

    BindResource :: inline (this : *ID3D11ModuleInstance, uSrcSlot : u32, uDstSlot : u32, uCount : u32) -> HRESULT #no_context
    {
        return this.vtable.BindResource (this, uSrcSlot, uDstSlot, uCount);
    }

    BindResourceByName :: inline (this : *ID3D11ModuleInstance, pName : PSTR, uDstSlot : u32, uCount : u32) -> HRESULT #no_context
    {
        return this.vtable.BindResourceByName (this, pName, uDstSlot, uCount);
    }

    BindSampler :: inline (this : *ID3D11ModuleInstance, uSrcSlot : u32, uDstSlot : u32, uCount : u32) -> HRESULT #no_context
    {
        return this.vtable.BindSampler (this, uSrcSlot, uDstSlot, uCount);
    }

    BindSamplerByName :: inline (this : *ID3D11ModuleInstance, pName : PSTR, uDstSlot : u32, uCount : u32) -> HRESULT #no_context
    {
        return this.vtable.BindSamplerByName (this, pName, uDstSlot, uCount);
    }

    BindUnorderedAccessView :: inline (this : *ID3D11ModuleInstance, uSrcSlot : u32, uDstSlot : u32, uCount : u32) -> HRESULT #no_context
    {
        return this.vtable.BindUnorderedAccessView (this, uSrcSlot, uDstSlot, uCount);
    }

    BindUnorderedAccessViewByName :: inline (this : *ID3D11ModuleInstance, pName : PSTR, uDstSlot : u32, uCount : u32) -> HRESULT #no_context
    {
        return this.vtable.BindUnorderedAccessViewByName (this, pName, uDstSlot, uCount);
    }

    BindResourceAsUnorderedAccessView :: inline (this : *ID3D11ModuleInstance, uSrcSrvSlot : u32, uDstUavSlot : u32, uCount : u32) -> HRESULT #no_context
    {
        return this.vtable.BindResourceAsUnorderedAccessView (this, uSrcSrvSlot, uDstUavSlot, uCount);
    }

    BindResourceAsUnorderedAccessViewByName :: inline (this : *ID3D11ModuleInstance, pSrvName : PSTR, uDstUavSlot : u32, uCount : u32) -> HRESULT #no_context
    {
        return this.vtable.BindResourceAsUnorderedAccessViewByName (this, pSrvName, uDstUavSlot, uCount);
    }
}

ID3D11Multithread_UUID :: "9b7e4e00-342c-4106-a19f-4f2704f689f0";
ID3D11Multithread :: struct
{
    UUID :: GUID.{0x9b7e4e00,0x342c,0x4106,.[0xa1,0x9f,0x4f,0x27,0x4,0xf6,0x89,0xf0]};

    #as using, except(.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D11MultithreadVTable;

    Enter :: inline (this : *ID3D11Multithread) #no_context
    {
        this.vtable.Enter (this);
    }

    Leave :: inline (this : *ID3D11Multithread) #no_context
    {
        this.vtable.Leave (this);
    }

    SetMultithreadProtected :: inline (this : *ID3D11Multithread, bMTProtect : BOOL) -> BOOL #no_context
    {
        return this.vtable.SetMultithreadProtected (this, bMTProtect);
    }

    GetMultithreadProtected :: inline (this : *ID3D11Multithread) -> BOOL #no_context
    {
        return this.vtable.GetMultithreadProtected (this);
    }
}

ID3D11PixelShader_UUID :: "ea82e40d-51dc-4f33-93d4-db7c9125ae8c";
ID3D11PixelShader :: struct
{
    UUID :: GUID.{0xea82e40d,0x51dc,0x4f33,.[0x93,0xd4,0xdb,0x7c,0x91,0x25,0xae,0x8c]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11PixelShaderVTable;
}

ID3D11Predicate_UUID :: "9eb576dd-9f77-4d86-81aa-8bab5fe490e2";
ID3D11Predicate :: struct
{
    UUID :: GUID.{0x9eb576dd,0x9f77,0x4d86,.[0x81,0xaa,0x8b,0xab,0x5f,0xe4,0x90,0xe2]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11Query;

    #place base;
    vtable : *ID3D11PredicateVTable;
}

ID3D11Query_UUID :: "d6c00747-87b7-425e-b84d-44d108560afd";
ID3D11Query :: struct
{
    UUID :: GUID.{0xd6c00747,0x87b7,0x425e,.[0xb8,0x4d,0x44,0xd1,0x8,0x56,0xa,0xfd]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11Asynchronous;

    #place base;
    vtable : *ID3D11QueryVTable;

    GetDesc :: inline (this : *ID3D11Query, pDesc : *D3D11_QUERY_DESC) #no_context
    {
        this.vtable.GetDesc (this, pDesc);
    }
}

ID3D11Query1_UUID :: "631b4766-36dc-461d-8db6-c47e13e60916";
ID3D11Query1 :: struct
{
    UUID :: GUID.{0x631b4766,0x36dc,0x461d,.[0x8d,0xb6,0xc4,0x7e,0x13,0xe6,0x9,0x16]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11Query;

    #place base;
    vtable : *ID3D11Query1VTable;

    GetDesc1 :: inline (this : *ID3D11Query1, pDesc1 : *D3D11_QUERY_DESC1) #no_context
    {
        this.vtable.GetDesc1 (this, pDesc1);
    }
}

ID3D11RasterizerState_UUID :: "9bb4ab81-ab1a-4d8f-b506-fc04200b6ee7";
ID3D11RasterizerState :: struct
{
    UUID :: GUID.{0x9bb4ab81,0xab1a,0x4d8f,.[0xb5,0x6,0xfc,0x4,0x20,0xb,0x6e,0xe7]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11RasterizerStateVTable;

    GetDesc :: inline (this : *ID3D11RasterizerState, pDesc : *D3D11_RASTERIZER_DESC) #no_context
    {
        this.vtable.GetDesc (this, pDesc);
    }
}

ID3D11RasterizerState1_UUID :: "1217d7a6-5039-418c-b042-9cbe256afd6e";
ID3D11RasterizerState1 :: struct
{
    UUID :: GUID.{0x1217d7a6,0x5039,0x418c,.[0xb0,0x42,0x9c,0xbe,0x25,0x6a,0xfd,0x6e]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11RasterizerState;

    #place base;
    vtable : *ID3D11RasterizerState1VTable;

    GetDesc1 :: inline (this : *ID3D11RasterizerState1, pDesc : *D3D11_RASTERIZER_DESC1) #no_context
    {
        this.vtable.GetDesc1 (this, pDesc);
    }
}

ID3D11RasterizerState2_UUID :: "6fbd02fb-209f-46c4-b059-2ed15586a6ac";
ID3D11RasterizerState2 :: struct
{
    UUID :: GUID.{0x6fbd02fb,0x209f,0x46c4,.[0xb0,0x59,0x2e,0xd1,0x55,0x86,0xa6,0xac]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11RasterizerState1;

    #place base;
    vtable : *ID3D11RasterizerState2VTable;

    GetDesc2 :: inline (this : *ID3D11RasterizerState2, pDesc : *D3D11_RASTERIZER_DESC2) #no_context
    {
        this.vtable.GetDesc2 (this, pDesc);
    }
}

ID3D11RefDefaultTrackingOptions_UUID :: "03916615-c644-418c-9bf4-75db5be63ca0";
ID3D11RefDefaultTrackingOptions :: struct
{
    UUID :: GUID.{0x3916615,0xc644,0x418c,.[0x9b,0xf4,0x75,0xdb,0x5b,0xe6,0x3c,0xa0]};

    #as using, except(.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D11RefDefaultTrackingOptionsVTable;

    SetTrackingOptions :: inline (this : *ID3D11RefDefaultTrackingOptions, ResourceTypeFlags : u32, Options : u32) -> HRESULT #no_context
    {
        return this.vtable.SetTrackingOptions (this, ResourceTypeFlags, Options);
    }
}

ID3D11RefTrackingOptions_UUID :: "193dacdf-0db2-4c05-a55c-ef06cac56fd9";
ID3D11RefTrackingOptions :: struct
{
    UUID :: GUID.{0x193dacdf,0xdb2,0x4c05,.[0xa5,0x5c,0xef,0x6,0xca,0xc5,0x6f,0xd9]};

    #as using, except(.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D11RefTrackingOptionsVTable;

    SetTrackingOptions :: inline (this : *ID3D11RefTrackingOptions, uOptions : u32) -> HRESULT #no_context
    {
        return this.vtable.SetTrackingOptions (this, uOptions);
    }
}

ID3D11RenderTargetView_UUID :: "dfdba067-0b8d-4865-875b-d7b4516cc164";
ID3D11RenderTargetView :: struct
{
    UUID :: GUID.{0xdfdba067,0xb8d,0x4865,.[0x87,0x5b,0xd7,0xb4,0x51,0x6c,0xc1,0x64]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11View;

    #place base;
    vtable : *ID3D11RenderTargetViewVTable;

    GetDesc :: inline (this : *ID3D11RenderTargetView, pDesc : *D3D11_RENDER_TARGET_VIEW_DESC) #no_context
    {
        this.vtable.GetDesc (this, pDesc);
    }
}

ID3D11RenderTargetView1_UUID :: "ffbe2e23-f011-418a-ac56-5ceed7c5b94b";
ID3D11RenderTargetView1 :: struct
{
    UUID :: GUID.{0xffbe2e23,0xf011,0x418a,.[0xac,0x56,0x5c,0xee,0xd7,0xc5,0xb9,0x4b]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11RenderTargetView;

    #place base;
    vtable : *ID3D11RenderTargetView1VTable;

    GetDesc1 :: inline (this : *ID3D11RenderTargetView1, pDesc1 : *D3D11_RENDER_TARGET_VIEW_DESC1) #no_context
    {
        this.vtable.GetDesc1 (this, pDesc1);
    }
}

ID3D11Resource_UUID :: "dc8e63f3-d12b-4952-b47b-5e45026a862d";
ID3D11Resource :: struct
{
    UUID :: GUID.{0xdc8e63f3,0xd12b,0x4952,.[0xb4,0x7b,0x5e,0x45,0x2,0x6a,0x86,0x2d]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11ResourceVTable;

    GetType :: inline (this : *ID3D11Resource, pResourceDimension : *D3D11_RESOURCE_DIMENSION) #no_context
    {
        this.vtable.GetType (this, pResourceDimension);
    }

    SetEvictionPriority :: inline (this : *ID3D11Resource, EvictionPriority : u32) #no_context
    {
        this.vtable.SetEvictionPriority (this, EvictionPriority);
    }

    GetEvictionPriority :: inline (this : *ID3D11Resource) -> u32 #no_context
    {
        return this.vtable.GetEvictionPriority (this);
    }
}

ID3D11SamplerState_UUID :: "da6fea51-564c-4487-9810-f0d0f9b4e3a5";
ID3D11SamplerState :: struct
{
    UUID :: GUID.{0xda6fea51,0x564c,0x4487,.[0x98,0x10,0xf0,0xd0,0xf9,0xb4,0xe3,0xa5]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11SamplerStateVTable;

    GetDesc :: inline (this : *ID3D11SamplerState, pDesc : *D3D11_SAMPLER_DESC) #no_context
    {
        this.vtable.GetDesc (this, pDesc);
    }
}

ID3D11ShaderReflection_UUID :: "8d536ca1-0cca-4956-a837-786963755584";
ID3D11ShaderReflection :: struct
{
    UUID :: GUID.{0x8d536ca1,0xcca,0x4956,.[0xa8,0x37,0x78,0x69,0x63,0x75,0x55,0x84]};

    #as using, except(.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D11ShaderReflectionVTable;

    GetDesc :: inline (this : *ID3D11ShaderReflection, pDesc : *D3D11_SHADER_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetDesc (this, pDesc);
    }

    GetConstantBufferByIndex :: inline (this : *ID3D11ShaderReflection, Index : u32) -> *ID3D11ShaderReflectionConstantBuffer #no_context
    {
        return this.vtable.GetConstantBufferByIndex (this, Index);
    }

    GetConstantBufferByName :: inline (this : *ID3D11ShaderReflection, Name : PSTR) -> *ID3D11ShaderReflectionConstantBuffer #no_context
    {
        return this.vtable.GetConstantBufferByName (this, Name);
    }

    GetResourceBindingDesc :: inline (this : *ID3D11ShaderReflection, ResourceIndex : u32, pDesc : *D3D11_SHADER_INPUT_BIND_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetResourceBindingDesc (this, ResourceIndex, pDesc);
    }

    GetInputParameterDesc :: inline (this : *ID3D11ShaderReflection, ParameterIndex : u32, pDesc : *D3D11_SIGNATURE_PARAMETER_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetInputParameterDesc (this, ParameterIndex, pDesc);
    }

    GetOutputParameterDesc :: inline (this : *ID3D11ShaderReflection, ParameterIndex : u32, pDesc : *D3D11_SIGNATURE_PARAMETER_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetOutputParameterDesc (this, ParameterIndex, pDesc);
    }

    GetPatchConstantParameterDesc :: inline (this : *ID3D11ShaderReflection, ParameterIndex : u32, pDesc : *D3D11_SIGNATURE_PARAMETER_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetPatchConstantParameterDesc (this, ParameterIndex, pDesc);
    }

    GetVariableByName :: inline (this : *ID3D11ShaderReflection, Name : PSTR) -> *ID3D11ShaderReflectionVariable #no_context
    {
        return this.vtable.GetVariableByName (this, Name);
    }

    GetResourceBindingDescByName :: inline (this : *ID3D11ShaderReflection, Name : PSTR, pDesc : *D3D11_SHADER_INPUT_BIND_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetResourceBindingDescByName (this, Name, pDesc);
    }

    GetMovInstructionCount :: inline (this : *ID3D11ShaderReflection) -> u32 #no_context
    {
        return this.vtable.GetMovInstructionCount (this);
    }

    GetMovcInstructionCount :: inline (this : *ID3D11ShaderReflection) -> u32 #no_context
    {
        return this.vtable.GetMovcInstructionCount (this);
    }

    GetConversionInstructionCount :: inline (this : *ID3D11ShaderReflection) -> u32 #no_context
    {
        return this.vtable.GetConversionInstructionCount (this);
    }

    GetBitwiseInstructionCount :: inline (this : *ID3D11ShaderReflection) -> u32 #no_context
    {
        return this.vtable.GetBitwiseInstructionCount (this);
    }

    GetGSInputPrimitive :: inline (this : *ID3D11ShaderReflection) -> D3D_PRIMITIVE #no_context
    {
        return this.vtable.GetGSInputPrimitive (this);
    }

    IsSampleFrequencyShader :: inline (this : *ID3D11ShaderReflection) -> BOOL #no_context
    {
        return this.vtable.IsSampleFrequencyShader (this);
    }

    GetNumInterfaceSlots :: inline (this : *ID3D11ShaderReflection) -> u32 #no_context
    {
        return this.vtable.GetNumInterfaceSlots (this);
    }

    GetMinFeatureLevel :: inline (this : *ID3D11ShaderReflection, pLevel : *D3D_FEATURE_LEVEL) -> HRESULT #no_context
    {
        return this.vtable.GetMinFeatureLevel (this, pLevel);
    }

    GetThreadGroupSize :: inline (this : *ID3D11ShaderReflection, pSizeX : *u32, pSizeY : *u32, pSizeZ : *u32) -> u32 #no_context
    {
        return this.vtable.GetThreadGroupSize (this, pSizeX, pSizeY, pSizeZ);
    }

    GetRequiresFlags :: inline (this : *ID3D11ShaderReflection) -> u64 #no_context
    {
        return this.vtable.GetRequiresFlags (this);
    }
}

ID3D11ShaderReflectionConstantBuffer_UUID :: "eb62d63d-93dd-4318-8ae8-c6f83ad371b8";
ID3D11ShaderReflectionConstantBuffer :: struct
{
    UUID :: GUID.{0xeb62d63d,0x93dd,0x4318,.[0x8a,0xe8,0xc6,0xf8,0x3a,0xd3,0x71,0xb8]};

    vtable : *ID3D11ShaderReflectionConstantBufferVTable;

    GetDesc :: inline (this : *ID3D11ShaderReflectionConstantBuffer, pDesc : *D3D11_SHADER_BUFFER_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetDesc (this, pDesc);
    }

    GetVariableByIndex :: inline (this : *ID3D11ShaderReflectionConstantBuffer, Index : u32) -> *ID3D11ShaderReflectionVariable #no_context
    {
        return this.vtable.GetVariableByIndex (this, Index);
    }

    GetVariableByName :: inline (this : *ID3D11ShaderReflectionConstantBuffer, Name : PSTR) -> *ID3D11ShaderReflectionVariable #no_context
    {
        return this.vtable.GetVariableByName (this, Name);
    }
}

ID3D11ShaderReflectionType_UUID :: "6e6ffa6a-9bae-4613-a51e-91652d508c21";
ID3D11ShaderReflectionType :: struct
{
    UUID :: GUID.{0x6e6ffa6a,0x9bae,0x4613,.[0xa5,0x1e,0x91,0x65,0x2d,0x50,0x8c,0x21]};

    vtable : *ID3D11ShaderReflectionTypeVTable;

    GetDesc :: inline (this : *ID3D11ShaderReflectionType, pDesc : *D3D11_SHADER_TYPE_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetDesc (this, pDesc);
    }

    GetMemberTypeByIndex :: inline (this : *ID3D11ShaderReflectionType, Index : u32) -> *ID3D11ShaderReflectionType #no_context
    {
        return this.vtable.GetMemberTypeByIndex (this, Index);
    }

    GetMemberTypeByName :: inline (this : *ID3D11ShaderReflectionType, Name : PSTR) -> *ID3D11ShaderReflectionType #no_context
    {
        return this.vtable.GetMemberTypeByName (this, Name);
    }

    GetMemberTypeName :: inline (this : *ID3D11ShaderReflectionType, Index : u32) -> PSTR #no_context
    {
        return this.vtable.GetMemberTypeName (this, Index);
    }

    IsEqual :: inline (this : *ID3D11ShaderReflectionType, pType : *ID3D11ShaderReflectionType) -> HRESULT #no_context
    {
        return this.vtable.IsEqual (this, pType);
    }

    GetSubType :: inline (this : *ID3D11ShaderReflectionType) -> *ID3D11ShaderReflectionType #no_context
    {
        return this.vtable.GetSubType (this);
    }

    GetBaseClass :: inline (this : *ID3D11ShaderReflectionType) -> *ID3D11ShaderReflectionType #no_context
    {
        return this.vtable.GetBaseClass (this);
    }

    GetNumInterfaces :: inline (this : *ID3D11ShaderReflectionType) -> u32 #no_context
    {
        return this.vtable.GetNumInterfaces (this);
    }

    GetInterfaceByIndex :: inline (this : *ID3D11ShaderReflectionType, uIndex : u32) -> *ID3D11ShaderReflectionType #no_context
    {
        return this.vtable.GetInterfaceByIndex (this, uIndex);
    }

    IsOfType :: inline (this : *ID3D11ShaderReflectionType, pType : *ID3D11ShaderReflectionType) -> HRESULT #no_context
    {
        return this.vtable.IsOfType (this, pType);
    }

    ImplementsInterface :: inline (this : *ID3D11ShaderReflectionType, pBase : *ID3D11ShaderReflectionType) -> HRESULT #no_context
    {
        return this.vtable.ImplementsInterface (this, pBase);
    }
}

ID3D11ShaderReflectionVariable_UUID :: "51f23923-f3e5-4bd1-91cb-606177d8db4c";
ID3D11ShaderReflectionVariable :: struct
{
    UUID :: GUID.{0x51f23923,0xf3e5,0x4bd1,.[0x91,0xcb,0x60,0x61,0x77,0xd8,0xdb,0x4c]};

    vtable : *ID3D11ShaderReflectionVariableVTable;

    GetDesc :: inline (this : *ID3D11ShaderReflectionVariable, pDesc : *D3D11_SHADER_VARIABLE_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetDesc (this, pDesc);
    }

    GetType :: inline (this : *ID3D11ShaderReflectionVariable) -> *ID3D11ShaderReflectionType #no_context
    {
        return this.vtable.GetType (this);
    }

    GetBuffer :: inline (this : *ID3D11ShaderReflectionVariable) -> *ID3D11ShaderReflectionConstantBuffer #no_context
    {
        return this.vtable.GetBuffer (this);
    }

    GetInterfaceSlot :: inline (this : *ID3D11ShaderReflectionVariable, uArrayIndex : u32) -> u32 #no_context
    {
        return this.vtable.GetInterfaceSlot (this, uArrayIndex);
    }
}

ID3D11ShaderResourceView_UUID :: "b0e06fe0-8192-4e1a-b1ca-36d7414710b2";
ID3D11ShaderResourceView :: struct
{
    UUID :: GUID.{0xb0e06fe0,0x8192,0x4e1a,.[0xb1,0xca,0x36,0xd7,0x41,0x47,0x10,0xb2]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11View;

    #place base;
    vtable : *ID3D11ShaderResourceViewVTable;

    GetDesc :: inline (this : *ID3D11ShaderResourceView, pDesc : *D3D11_SHADER_RESOURCE_VIEW_DESC) #no_context
    {
        this.vtable.GetDesc (this, pDesc);
    }
}

ID3D11ShaderResourceView1_UUID :: "91308b87-9040-411d-8c67-c39253ce3802";
ID3D11ShaderResourceView1 :: struct
{
    UUID :: GUID.{0x91308b87,0x9040,0x411d,.[0x8c,0x67,0xc3,0x92,0x53,0xce,0x38,0x2]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11ShaderResourceView;

    #place base;
    vtable : *ID3D11ShaderResourceView1VTable;

    GetDesc1 :: inline (this : *ID3D11ShaderResourceView1, pDesc1 : *D3D11_SHADER_RESOURCE_VIEW_DESC1) #no_context
    {
        this.vtable.GetDesc1 (this, pDesc1);
    }
}

ID3D11ShaderTrace_UUID :: "36b013e6-2811-4845-baa7-d623fe0df104";
ID3D11ShaderTrace :: struct
{
    UUID :: GUID.{0x36b013e6,0x2811,0x4845,.[0xba,0xa7,0xd6,0x23,0xfe,0xd,0xf1,0x4]};

    #as using, except(.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D11ShaderTraceVTable;

    TraceReady :: inline (this : *ID3D11ShaderTrace, pTestCount : *u64) -> HRESULT #no_context
    {
        return this.vtable.TraceReady (this, pTestCount);
    }

    ResetTrace :: inline (this : *ID3D11ShaderTrace) #no_context
    {
        this.vtable.ResetTrace (this);
    }

    GetTraceStats :: inline (this : *ID3D11ShaderTrace, pTraceStats : *D3D11_TRACE_STATS) -> HRESULT #no_context
    {
        return this.vtable.GetTraceStats (this, pTraceStats);
    }

    PSSelectStamp :: inline (this : *ID3D11ShaderTrace, stampIndex : u32) -> HRESULT #no_context
    {
        return this.vtable.PSSelectStamp (this, stampIndex);
    }

    GetInitialRegisterContents :: inline (this : *ID3D11ShaderTrace, pRegister : *D3D11_TRACE_REGISTER, pValue : *D3D11_TRACE_VALUE) -> HRESULT #no_context
    {
        return this.vtable.GetInitialRegisterContents (this, pRegister, pValue);
    }

    GetStep :: inline (this : *ID3D11ShaderTrace, stepIndex : u32, pTraceStep : *D3D11_TRACE_STEP) -> HRESULT #no_context
    {
        return this.vtable.GetStep (this, stepIndex, pTraceStep);
    }

    GetWrittenRegister :: inline (this : *ID3D11ShaderTrace, 
        stepIndex : u32,
        writtenRegisterIndex : u32,
        pRegister : *D3D11_TRACE_REGISTER,
        pValue : *D3D11_TRACE_VALUE
    ) -> HRESULT #no_context
    {
        return this.vtable.GetWrittenRegister (this, stepIndex, writtenRegisterIndex, pRegister, pValue);
    }

    GetReadRegister :: inline (this : *ID3D11ShaderTrace, 
        stepIndex : u32,
        readRegisterIndex : u32,
        pRegister : *D3D11_TRACE_REGISTER,
        pValue : *D3D11_TRACE_VALUE
    ) -> HRESULT #no_context
    {
        return this.vtable.GetReadRegister (this, stepIndex, readRegisterIndex, pRegister, pValue);
    }
}

ID3D11ShaderTraceFactory_UUID :: "1fbad429-66ab-41cc-9617-667ac10e4459";
ID3D11ShaderTraceFactory :: struct
{
    UUID :: GUID.{0x1fbad429,0x66ab,0x41cc,.[0x96,0x17,0x66,0x7a,0xc1,0xe,0x44,0x59]};

    #as using, except(.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D11ShaderTraceFactoryVTable;

    CreateShaderTrace :: inline (this : *ID3D11ShaderTraceFactory, pShader : *IUnknown, pTraceDesc : *D3D11_SHADER_TRACE_DESC, ppShaderTrace : **ID3D11ShaderTrace) -> HRESULT #no_context
    {
        return this.vtable.CreateShaderTrace (this, pShader, pTraceDesc, ppShaderTrace);
    }
}

ID3D11SwitchToRef_UUID :: "1ef337e3-58e7-4f83-a692-db221f5ed47e";
ID3D11SwitchToRef :: struct
{
    UUID :: GUID.{0x1ef337e3,0x58e7,0x4f83,.[0xa6,0x92,0xdb,0x22,0x1f,0x5e,0xd4,0x7e]};

    #as using, except(.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D11SwitchToRefVTable;

    SetUseRef :: inline (this : *ID3D11SwitchToRef, UseRef : BOOL) -> BOOL #no_context
    {
        return this.vtable.SetUseRef (this, UseRef);
    }

    GetUseRef :: inline (this : *ID3D11SwitchToRef) -> BOOL #no_context
    {
        return this.vtable.GetUseRef (this);
    }
}

ID3D11Texture1D_UUID :: "f8fb5c27-c6b3-4f75-a4c8-439af2ef564c";
ID3D11Texture1D :: struct
{
    UUID :: GUID.{0xf8fb5c27,0xc6b3,0x4f75,.[0xa4,0xc8,0x43,0x9a,0xf2,0xef,0x56,0x4c]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11Resource;

    #place base;
    vtable : *ID3D11Texture1DVTable;

    GetDesc :: inline (this : *ID3D11Texture1D, pDesc : *D3D11_TEXTURE1D_DESC) #no_context
    {
        this.vtable.GetDesc (this, pDesc);
    }
}

ID3D11Texture2D_UUID :: "6f15aaf2-d208-4e89-9ab4-489535d34f9c";
ID3D11Texture2D :: struct
{
    UUID :: GUID.{0x6f15aaf2,0xd208,0x4e89,.[0x9a,0xb4,0x48,0x95,0x35,0xd3,0x4f,0x9c]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11Resource;

    #place base;
    vtable : *ID3D11Texture2DVTable;

    GetDesc :: inline (this : *ID3D11Texture2D, pDesc : *D3D11_TEXTURE2D_DESC) #no_context
    {
        this.vtable.GetDesc (this, pDesc);
    }
}

ID3D11Texture2D1_UUID :: "51218251-1e33-4617-9ccb-4d3a4367e7bb";
ID3D11Texture2D1 :: struct
{
    UUID :: GUID.{0x51218251,0x1e33,0x4617,.[0x9c,0xcb,0x4d,0x3a,0x43,0x67,0xe7,0xbb]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11Texture2D;

    #place base;
    vtable : *ID3D11Texture2D1VTable;

    GetDesc1 :: inline (this : *ID3D11Texture2D1, pDesc : *D3D11_TEXTURE2D_DESC1) #no_context
    {
        this.vtable.GetDesc1 (this, pDesc);
    }
}

ID3D11Texture3D_UUID :: "037e866e-f56d-4357-a8af-9dabbe6e250e";
ID3D11Texture3D :: struct
{
    UUID :: GUID.{0x37e866e,0xf56d,0x4357,.[0xa8,0xaf,0x9d,0xab,0xbe,0x6e,0x25,0xe]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11Resource;

    #place base;
    vtable : *ID3D11Texture3DVTable;

    GetDesc :: inline (this : *ID3D11Texture3D, pDesc : *D3D11_TEXTURE3D_DESC) #no_context
    {
        this.vtable.GetDesc (this, pDesc);
    }
}

ID3D11Texture3D1_UUID :: "0c711683-2853-4846-9bb0-f3e60639e46a";
ID3D11Texture3D1 :: struct
{
    UUID :: GUID.{0xc711683,0x2853,0x4846,.[0x9b,0xb0,0xf3,0xe6,0x6,0x39,0xe4,0x6a]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11Texture3D;

    #place base;
    vtable : *ID3D11Texture3D1VTable;

    GetDesc1 :: inline (this : *ID3D11Texture3D1, pDesc : *D3D11_TEXTURE3D_DESC1) #no_context
    {
        this.vtable.GetDesc1 (this, pDesc);
    }
}

ID3D11TracingDevice_UUID :: "1911c771-1587-413e-a7e0-fb26c3de0268";
ID3D11TracingDevice :: struct
{
    UUID :: GUID.{0x1911c771,0x1587,0x413e,.[0xa7,0xe0,0xfb,0x26,0xc3,0xde,0x2,0x68]};

    #as using, except(.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D11TracingDeviceVTable;

    SetShaderTrackingOptionsByType :: inline (this : *ID3D11TracingDevice, ResourceTypeFlags : u32, Options : u32) -> HRESULT #no_context
    {
        return this.vtable.SetShaderTrackingOptionsByType (this, ResourceTypeFlags, Options);
    }

    SetShaderTrackingOptions :: inline (this : *ID3D11TracingDevice, pShader : *IUnknown, Options : u32) -> HRESULT #no_context
    {
        return this.vtable.SetShaderTrackingOptions (this, pShader, Options);
    }
}

ID3D11UnorderedAccessView_UUID :: "28acf509-7f5c-48f6-8611-f316010a6380";
ID3D11UnorderedAccessView :: struct
{
    UUID :: GUID.{0x28acf509,0x7f5c,0x48f6,.[0x86,0x11,0xf3,0x16,0x1,0xa,0x63,0x80]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11View;

    #place base;
    vtable : *ID3D11UnorderedAccessViewVTable;

    GetDesc :: inline (this : *ID3D11UnorderedAccessView, pDesc : *D3D11_UNORDERED_ACCESS_VIEW_DESC) #no_context
    {
        this.vtable.GetDesc (this, pDesc);
    }
}

ID3D11UnorderedAccessView1_UUID :: "7b3b6153-a886-4544-ab37-6537c8500403";
ID3D11UnorderedAccessView1 :: struct
{
    UUID :: GUID.{0x7b3b6153,0xa886,0x4544,.[0xab,0x37,0x65,0x37,0xc8,0x50,0x4,0x3]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11UnorderedAccessView;

    #place base;
    vtable : *ID3D11UnorderedAccessView1VTable;

    GetDesc1 :: inline (this : *ID3D11UnorderedAccessView1, pDesc1 : *D3D11_UNORDERED_ACCESS_VIEW_DESC1) #no_context
    {
        this.vtable.GetDesc1 (this, pDesc1);
    }
}

ID3D11VertexShader_UUID :: "3b301d64-d678-4289-8897-22f8928b72f3";
ID3D11VertexShader :: struct
{
    UUID :: GUID.{0x3b301d64,0xd678,0x4289,.[0x88,0x97,0x22,0xf8,0x92,0x8b,0x72,0xf3]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11VertexShaderVTable;
}

ID3D11VideoContext_UUID :: "61f21c45-3c0e-4a74-9cea-67100d9ad5e4";
ID3D11VideoContext :: struct
{
    UUID :: GUID.{0x61f21c45,0x3c0e,0x4a74,.[0x9c,0xea,0x67,0x10,0xd,0x9a,0xd5,0xe4]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11VideoContextVTable;

    GetDecoderBuffer :: inline (this : *ID3D11VideoContext, 
        pDecoder : *ID3D11VideoDecoder,
        _Type : D3D11_VIDEO_DECODER_BUFFER_TYPE,
        pBufferSize : *u32,
        ppBuffer : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.GetDecoderBuffer (this, pDecoder, _Type, pBufferSize, ppBuffer);
    }

    ReleaseDecoderBuffer :: inline (this : *ID3D11VideoContext, pDecoder : *ID3D11VideoDecoder, _Type : D3D11_VIDEO_DECODER_BUFFER_TYPE) -> HRESULT #no_context
    {
        return this.vtable.ReleaseDecoderBuffer (this, pDecoder, _Type);
    }

    DecoderBeginFrame :: inline (this : *ID3D11VideoContext, 
        pDecoder : *ID3D11VideoDecoder,
        pView : *ID3D11VideoDecoderOutputView,
        ContentKeySize : u32,
        pContentKey : *void
    ) -> HRESULT #no_context
    {
        return this.vtable.DecoderBeginFrame (this, pDecoder, pView, ContentKeySize, pContentKey);
    }

    DecoderEndFrame :: inline (this : *ID3D11VideoContext, pDecoder : *ID3D11VideoDecoder) -> HRESULT #no_context
    {
        return this.vtable.DecoderEndFrame (this, pDecoder);
    }

    SubmitDecoderBuffers :: inline (this : *ID3D11VideoContext, pDecoder : *ID3D11VideoDecoder, NumBuffers : u32, pBufferDesc : *D3D11_VIDEO_DECODER_BUFFER_DESC) -> HRESULT #no_context
    {
        return this.vtable.SubmitDecoderBuffers (this, pDecoder, NumBuffers, pBufferDesc);
    }

    DecoderExtension :: inline (this : *ID3D11VideoContext, pDecoder : *ID3D11VideoDecoder, pExtensionData : *D3D11_VIDEO_DECODER_EXTENSION) -> s32 #no_context
    {
        return this.vtable.DecoderExtension (this, pDecoder, pExtensionData);
    }

    VideoProcessorSetOutputTargetRect :: inline (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, Enable : BOOL, pRect : *RECT) #no_context
    {
        this.vtable.VideoProcessorSetOutputTargetRect (this, pVideoProcessor, Enable, pRect);
    }

    VideoProcessorSetOutputBackgroundColor :: inline (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, YCbCr : BOOL, pColor : *D3D11_VIDEO_COLOR) #no_context
    {
        this.vtable.VideoProcessorSetOutputBackgroundColor (this, pVideoProcessor, YCbCr, pColor);
    }

    VideoProcessorSetOutputColorSpace :: inline (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, pColorSpace : *D3D11_VIDEO_PROCESSOR_COLOR_SPACE) #no_context
    {
        this.vtable.VideoProcessorSetOutputColorSpace (this, pVideoProcessor, pColorSpace);
    }

    VideoProcessorSetOutputAlphaFillMode :: inline (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, AlphaFillMode : D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, StreamIndex : u32) #no_context
    {
        this.vtable.VideoProcessorSetOutputAlphaFillMode (this, pVideoProcessor, AlphaFillMode, StreamIndex);
    }

    VideoProcessorSetOutputConstriction :: inline (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, Enable : BOOL, Size : SIZE) #no_context
    {
        this.vtable.VideoProcessorSetOutputConstriction (this, pVideoProcessor, Enable, Size);
    }

    VideoProcessorSetOutputStereoMode :: inline (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, Enable : BOOL) #no_context
    {
        this.vtable.VideoProcessorSetOutputStereoMode (this, pVideoProcessor, Enable);
    }

    VideoProcessorSetOutputExtension :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        pExtensionGuid : *GUID,
        DataSize : u32,
        pData : *void
    ) -> s32 #no_context
    {
        return this.vtable.VideoProcessorSetOutputExtension (this, pVideoProcessor, pExtensionGuid, DataSize, pData);
    }

    VideoProcessorGetOutputTargetRect :: inline (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, Enabled : *BOOL, pRect : *RECT) #no_context
    {
        this.vtable.VideoProcessorGetOutputTargetRect (this, pVideoProcessor, Enabled, pRect);
    }

    VideoProcessorGetOutputBackgroundColor :: inline (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, pYCbCr : *BOOL, pColor : *D3D11_VIDEO_COLOR) #no_context
    {
        this.vtable.VideoProcessorGetOutputBackgroundColor (this, pVideoProcessor, pYCbCr, pColor);
    }

    VideoProcessorGetOutputColorSpace :: inline (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, pColorSpace : *D3D11_VIDEO_PROCESSOR_COLOR_SPACE) #no_context
    {
        this.vtable.VideoProcessorGetOutputColorSpace (this, pVideoProcessor, pColorSpace);
    }

    VideoProcessorGetOutputAlphaFillMode :: inline (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, pAlphaFillMode : *D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, pStreamIndex : *u32) #no_context
    {
        this.vtable.VideoProcessorGetOutputAlphaFillMode (this, pVideoProcessor, pAlphaFillMode, pStreamIndex);
    }

    VideoProcessorGetOutputConstriction :: inline (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, pEnabled : *BOOL, pSize : *SIZE) #no_context
    {
        this.vtable.VideoProcessorGetOutputConstriction (this, pVideoProcessor, pEnabled, pSize);
    }

    VideoProcessorGetOutputStereoMode :: inline (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, pEnabled : *BOOL) #no_context
    {
        this.vtable.VideoProcessorGetOutputStereoMode (this, pVideoProcessor, pEnabled);
    }

    VideoProcessorGetOutputExtension :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        pExtensionGuid : *GUID,
        DataSize : u32,
        pData : *void
    ) -> s32 #no_context
    {
        return this.vtable.VideoProcessorGetOutputExtension (this, pVideoProcessor, pExtensionGuid, DataSize, pData);
    }

    VideoProcessorSetStreamFrameFormat :: inline (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, FrameFormat : D3D11_VIDEO_FRAME_FORMAT) #no_context
    {
        this.vtable.VideoProcessorSetStreamFrameFormat (this, pVideoProcessor, StreamIndex, FrameFormat);
    }

    VideoProcessorSetStreamColorSpace :: inline (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, pColorSpace : *D3D11_VIDEO_PROCESSOR_COLOR_SPACE) #no_context
    {
        this.vtable.VideoProcessorSetStreamColorSpace (this, pVideoProcessor, StreamIndex, pColorSpace);
    }

    VideoProcessorSetStreamOutputRate :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        OutputRate : D3D11_VIDEO_PROCESSOR_OUTPUT_RATE,
        RepeatFrame : BOOL,
        pCustomRate : *DXGI_RATIONAL
    ) #no_context
    {
        this.vtable.VideoProcessorSetStreamOutputRate (this, pVideoProcessor, StreamIndex, OutputRate, RepeatFrame, pCustomRate);
    }

    VideoProcessorSetStreamSourceRect :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        Enable : BOOL,
        pRect : *RECT
    ) #no_context
    {
        this.vtable.VideoProcessorSetStreamSourceRect (this, pVideoProcessor, StreamIndex, Enable, pRect);
    }

    VideoProcessorSetStreamDestRect :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        Enable : BOOL,
        pRect : *RECT
    ) #no_context
    {
        this.vtable.VideoProcessorSetStreamDestRect (this, pVideoProcessor, StreamIndex, Enable, pRect);
    }

    VideoProcessorSetStreamAlpha :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        Enable : BOOL,
        Alpha : float
    ) #no_context
    {
        this.vtable.VideoProcessorSetStreamAlpha (this, pVideoProcessor, StreamIndex, Enable, Alpha);
    }

    VideoProcessorSetStreamPalette :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        Count : u32,
        pEntries : *u32
    ) #no_context
    {
        this.vtable.VideoProcessorSetStreamPalette (this, pVideoProcessor, StreamIndex, Count, pEntries);
    }

    VideoProcessorSetStreamPixelAspectRatio :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        Enable : BOOL,
        pSourceAspectRatio : *DXGI_RATIONAL,
        pDestinationAspectRatio : *DXGI_RATIONAL
    ) #no_context
    {
        this.vtable.VideoProcessorSetStreamPixelAspectRatio (this, pVideoProcessor, StreamIndex, Enable, pSourceAspectRatio, pDestinationAspectRatio);
    }

    VideoProcessorSetStreamLumaKey :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        Enable : BOOL,
        Lower : float,
        Upper : float
    ) #no_context
    {
        this.vtable.VideoProcessorSetStreamLumaKey (this, pVideoProcessor, StreamIndex, Enable, Lower, Upper);
    }

    VideoProcessorSetStreamStereoFormat :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        Enable : BOOL,
        Format : D3D11_VIDEO_PROCESSOR_STEREO_FORMAT,
        LeftViewFrame0 : BOOL,
        BaseViewFrame0 : BOOL,
        FlipMode : D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE,
        MonoOffset : s32
    ) #no_context
    {
        this.vtable.VideoProcessorSetStreamStereoFormat (this, pVideoProcessor, StreamIndex, Enable, Format, LeftViewFrame0, BaseViewFrame0, FlipMode, MonoOffset);
    }

    VideoProcessorSetStreamAutoProcessingMode :: inline (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, Enable : BOOL) #no_context
    {
        this.vtable.VideoProcessorSetStreamAutoProcessingMode (this, pVideoProcessor, StreamIndex, Enable);
    }

    VideoProcessorSetStreamFilter :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        Filter : D3D11_VIDEO_PROCESSOR_FILTER,
        Enable : BOOL,
        Level : s32
    ) #no_context
    {
        this.vtable.VideoProcessorSetStreamFilter (this, pVideoProcessor, StreamIndex, Filter, Enable, Level);
    }

    VideoProcessorSetStreamExtension :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        pExtensionGuid : *GUID,
        DataSize : u32,
        pData : *void
    ) -> s32 #no_context
    {
        return this.vtable.VideoProcessorSetStreamExtension (this, pVideoProcessor, StreamIndex, pExtensionGuid, DataSize, pData);
    }

    VideoProcessorGetStreamFrameFormat :: inline (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, pFrameFormat : *D3D11_VIDEO_FRAME_FORMAT) #no_context
    {
        this.vtable.VideoProcessorGetStreamFrameFormat (this, pVideoProcessor, StreamIndex, pFrameFormat);
    }

    VideoProcessorGetStreamColorSpace :: inline (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, pColorSpace : *D3D11_VIDEO_PROCESSOR_COLOR_SPACE) #no_context
    {
        this.vtable.VideoProcessorGetStreamColorSpace (this, pVideoProcessor, StreamIndex, pColorSpace);
    }

    VideoProcessorGetStreamOutputRate :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        pOutputRate : *D3D11_VIDEO_PROCESSOR_OUTPUT_RATE,
        pRepeatFrame : *BOOL,
        pCustomRate : *DXGI_RATIONAL
    ) #no_context
    {
        this.vtable.VideoProcessorGetStreamOutputRate (this, pVideoProcessor, StreamIndex, pOutputRate, pRepeatFrame, pCustomRate);
    }

    VideoProcessorGetStreamSourceRect :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        pEnabled : *BOOL,
        pRect : *RECT
    ) #no_context
    {
        this.vtable.VideoProcessorGetStreamSourceRect (this, pVideoProcessor, StreamIndex, pEnabled, pRect);
    }

    VideoProcessorGetStreamDestRect :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        pEnabled : *BOOL,
        pRect : *RECT
    ) #no_context
    {
        this.vtable.VideoProcessorGetStreamDestRect (this, pVideoProcessor, StreamIndex, pEnabled, pRect);
    }

    VideoProcessorGetStreamAlpha :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        pEnabled : *BOOL,
        pAlpha : *float
    ) #no_context
    {
        this.vtable.VideoProcessorGetStreamAlpha (this, pVideoProcessor, StreamIndex, pEnabled, pAlpha);
    }

    VideoProcessorGetStreamPalette :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        Count : u32,
        pEntries : *u32
    ) #no_context
    {
        this.vtable.VideoProcessorGetStreamPalette (this, pVideoProcessor, StreamIndex, Count, pEntries);
    }

    VideoProcessorGetStreamPixelAspectRatio :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        pEnabled : *BOOL,
        pSourceAspectRatio : *DXGI_RATIONAL,
        pDestinationAspectRatio : *DXGI_RATIONAL
    ) #no_context
    {
        this.vtable.VideoProcessorGetStreamPixelAspectRatio (this, pVideoProcessor, StreamIndex, pEnabled, pSourceAspectRatio, pDestinationAspectRatio);
    }

    VideoProcessorGetStreamLumaKey :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        pEnabled : *BOOL,
        pLower : *float,
        pUpper : *float
    ) #no_context
    {
        this.vtable.VideoProcessorGetStreamLumaKey (this, pVideoProcessor, StreamIndex, pEnabled, pLower, pUpper);
    }

    VideoProcessorGetStreamStereoFormat :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        pEnable : *BOOL,
        pFormat : *D3D11_VIDEO_PROCESSOR_STEREO_FORMAT,
        pLeftViewFrame0 : *BOOL,
        pBaseViewFrame0 : *BOOL,
        pFlipMode : *D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE,
        MonoOffset : *s32
    ) #no_context
    {
        this.vtable.VideoProcessorGetStreamStereoFormat (this, pVideoProcessor, StreamIndex, pEnable, pFormat, pLeftViewFrame0, pBaseViewFrame0, pFlipMode, MonoOffset);
    }

    VideoProcessorGetStreamAutoProcessingMode :: inline (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, pEnabled : *BOOL) #no_context
    {
        this.vtable.VideoProcessorGetStreamAutoProcessingMode (this, pVideoProcessor, StreamIndex, pEnabled);
    }

    VideoProcessorGetStreamFilter :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        Filter : D3D11_VIDEO_PROCESSOR_FILTER,
        pEnabled : *BOOL,
        pLevel : *s32
    ) #no_context
    {
        this.vtable.VideoProcessorGetStreamFilter (this, pVideoProcessor, StreamIndex, Filter, pEnabled, pLevel);
    }

    VideoProcessorGetStreamExtension :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        pExtensionGuid : *GUID,
        DataSize : u32,
        pData : *void
    ) -> s32 #no_context
    {
        return this.vtable.VideoProcessorGetStreamExtension (this, pVideoProcessor, StreamIndex, pExtensionGuid, DataSize, pData);
    }

    VideoProcessorBlt :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        pView : *ID3D11VideoProcessorOutputView,
        OutputFrame : u32,
        StreamCount : u32,
        pStreams : *D3D11_VIDEO_PROCESSOR_STREAM
    ) -> HRESULT #no_context
    {
        return this.vtable.VideoProcessorBlt (this, pVideoProcessor, pView, OutputFrame, StreamCount, pStreams);
    }

    NegotiateCryptoSessionKeyExchange :: inline (this : *ID3D11VideoContext, pCryptoSession : *ID3D11CryptoSession, DataSize : u32, pData : *void) -> HRESULT #no_context
    {
        return this.vtable.NegotiateCryptoSessionKeyExchange (this, pCryptoSession, DataSize, pData);
    }

    EncryptionBlt :: inline (this : *ID3D11VideoContext, 
        pCryptoSession : *ID3D11CryptoSession,
        pSrcSurface : *ID3D11Texture2D,
        pDstSurface : *ID3D11Texture2D,
        IVSize : u32,
        pIV : *void
    ) #no_context
    {
        this.vtable.EncryptionBlt (this, pCryptoSession, pSrcSurface, pDstSurface, IVSize, pIV);
    }

    DecryptionBlt :: inline (this : *ID3D11VideoContext, 
        pCryptoSession : *ID3D11CryptoSession,
        pSrcSurface : *ID3D11Texture2D,
        pDstSurface : *ID3D11Texture2D,
        pEncryptedBlockInfo : *D3D11_ENCRYPTED_BLOCK_INFO,
        ContentKeySize : u32,
        pContentKey : *void,
        IVSize : u32,
        pIV : *void
    ) #no_context
    {
        this.vtable.DecryptionBlt (this, pCryptoSession, pSrcSurface, pDstSurface, pEncryptedBlockInfo, ContentKeySize, pContentKey, IVSize, pIV);
    }

    StartSessionKeyRefresh :: inline (this : *ID3D11VideoContext, pCryptoSession : *ID3D11CryptoSession, RandomNumberSize : u32, pRandomNumber : *void) #no_context
    {
        this.vtable.StartSessionKeyRefresh (this, pCryptoSession, RandomNumberSize, pRandomNumber);
    }

    FinishSessionKeyRefresh :: inline (this : *ID3D11VideoContext, pCryptoSession : *ID3D11CryptoSession) #no_context
    {
        this.vtable.FinishSessionKeyRefresh (this, pCryptoSession);
    }

    GetEncryptionBltKey :: inline (this : *ID3D11VideoContext, pCryptoSession : *ID3D11CryptoSession, KeySize : u32, pReadbackKey : *void) -> HRESULT #no_context
    {
        return this.vtable.GetEncryptionBltKey (this, pCryptoSession, KeySize, pReadbackKey);
    }

    NegotiateAuthenticatedChannelKeyExchange :: inline (this : *ID3D11VideoContext, pChannel : *ID3D11AuthenticatedChannel, DataSize : u32, pData : *void) -> HRESULT #no_context
    {
        return this.vtable.NegotiateAuthenticatedChannelKeyExchange (this, pChannel, DataSize, pData);
    }

    QueryAuthenticatedChannel :: inline (this : *ID3D11VideoContext, 
        pChannel : *ID3D11AuthenticatedChannel,
        InputSize : u32,
        pInput : *void,
        OutputSize : u32,
        pOutput : *void
    ) -> HRESULT #no_context
    {
        return this.vtable.QueryAuthenticatedChannel (this, pChannel, InputSize, pInput, OutputSize, pOutput);
    }

    ConfigureAuthenticatedChannel :: inline (this : *ID3D11VideoContext, 
        pChannel : *ID3D11AuthenticatedChannel,
        InputSize : u32,
        pInput : *void,
        pOutput : *D3D11_AUTHENTICATED_CONFIGURE_OUTPUT
    ) -> HRESULT #no_context
    {
        return this.vtable.ConfigureAuthenticatedChannel (this, pChannel, InputSize, pInput, pOutput);
    }

    VideoProcessorSetStreamRotation :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        Enable : BOOL,
        Rotation : D3D11_VIDEO_PROCESSOR_ROTATION
    ) #no_context
    {
        this.vtable.VideoProcessorSetStreamRotation (this, pVideoProcessor, StreamIndex, Enable, Rotation);
    }

    VideoProcessorGetStreamRotation :: inline (this : *ID3D11VideoContext, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        pEnable : *BOOL,
        pRotation : *D3D11_VIDEO_PROCESSOR_ROTATION
    ) #no_context
    {
        this.vtable.VideoProcessorGetStreamRotation (this, pVideoProcessor, StreamIndex, pEnable, pRotation);
    }
}

ID3D11VideoContext1_UUID :: "a7f026da-a5f8-4487-a564-15e34357651e";
ID3D11VideoContext1 :: struct
{
    UUID :: GUID.{0xa7f026da,0xa5f8,0x4487,.[0xa5,0x64,0x15,0xe3,0x43,0x57,0x65,0x1e]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11VideoContext;

    #place base;
    vtable : *ID3D11VideoContext1VTable;

    SubmitDecoderBuffers1 :: inline (this : *ID3D11VideoContext1, pDecoder : *ID3D11VideoDecoder, NumBuffers : u32, pBufferDesc : *D3D11_VIDEO_DECODER_BUFFER_DESC1) -> HRESULT #no_context
    {
        return this.vtable.SubmitDecoderBuffers1 (this, pDecoder, NumBuffers, pBufferDesc);
    }

    GetDataForNewHardwareKey :: inline (this : *ID3D11VideoContext1, 
        pCryptoSession : *ID3D11CryptoSession,
        PrivateInputSize : u32,
        pPrivatInputData : *void,
        pPrivateOutputData : *u64
    ) -> HRESULT #no_context
    {
        return this.vtable.GetDataForNewHardwareKey (this, pCryptoSession, PrivateInputSize, pPrivatInputData, pPrivateOutputData);
    }

    CheckCryptoSessionStatus :: inline (this : *ID3D11VideoContext1, pCryptoSession : *ID3D11CryptoSession, pStatus : *D3D11_CRYPTO_SESSION_STATUS) -> HRESULT #no_context
    {
        return this.vtable.CheckCryptoSessionStatus (this, pCryptoSession, pStatus);
    }

    DecoderEnableDownsampling :: inline (this : *ID3D11VideoContext1, 
        pDecoder : *ID3D11VideoDecoder,
        InputColorSpace : DXGI_COLOR_SPACE_TYPE,
        pOutputDesc : *D3D11_VIDEO_SAMPLE_DESC,
        ReferenceFrameCount : u32
    ) -> HRESULT #no_context
    {
        return this.vtable.DecoderEnableDownsampling (this, pDecoder, InputColorSpace, pOutputDesc, ReferenceFrameCount);
    }

    DecoderUpdateDownsampling :: inline (this : *ID3D11VideoContext1, pDecoder : *ID3D11VideoDecoder, pOutputDesc : *D3D11_VIDEO_SAMPLE_DESC) -> HRESULT #no_context
    {
        return this.vtable.DecoderUpdateDownsampling (this, pDecoder, pOutputDesc);
    }

    VideoProcessorSetOutputColorSpace1 :: inline (this : *ID3D11VideoContext1, pVideoProcessor : *ID3D11VideoProcessor, ColorSpace : DXGI_COLOR_SPACE_TYPE) #no_context
    {
        this.vtable.VideoProcessorSetOutputColorSpace1 (this, pVideoProcessor, ColorSpace);
    }

    VideoProcessorSetOutputShaderUsage :: inline (this : *ID3D11VideoContext1, pVideoProcessor : *ID3D11VideoProcessor, ShaderUsage : BOOL) #no_context
    {
        this.vtable.VideoProcessorSetOutputShaderUsage (this, pVideoProcessor, ShaderUsage);
    }

    VideoProcessorGetOutputColorSpace1 :: inline (this : *ID3D11VideoContext1, pVideoProcessor : *ID3D11VideoProcessor, pColorSpace : *DXGI_COLOR_SPACE_TYPE) #no_context
    {
        this.vtable.VideoProcessorGetOutputColorSpace1 (this, pVideoProcessor, pColorSpace);
    }

    VideoProcessorGetOutputShaderUsage :: inline (this : *ID3D11VideoContext1, pVideoProcessor : *ID3D11VideoProcessor, pShaderUsage : *BOOL) #no_context
    {
        this.vtable.VideoProcessorGetOutputShaderUsage (this, pVideoProcessor, pShaderUsage);
    }

    VideoProcessorSetStreamColorSpace1 :: inline (this : *ID3D11VideoContext1, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, ColorSpace : DXGI_COLOR_SPACE_TYPE) #no_context
    {
        this.vtable.VideoProcessorSetStreamColorSpace1 (this, pVideoProcessor, StreamIndex, ColorSpace);
    }

    VideoProcessorSetStreamMirror :: inline (this : *ID3D11VideoContext1, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        Enable : BOOL,
        FlipHorizontal : BOOL,
        FlipVertical : BOOL
    ) #no_context
    {
        this.vtable.VideoProcessorSetStreamMirror (this, pVideoProcessor, StreamIndex, Enable, FlipHorizontal, FlipVertical);
    }

    VideoProcessorGetStreamColorSpace1 :: inline (this : *ID3D11VideoContext1, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, pColorSpace : *DXGI_COLOR_SPACE_TYPE) #no_context
    {
        this.vtable.VideoProcessorGetStreamColorSpace1 (this, pVideoProcessor, StreamIndex, pColorSpace);
    }

    VideoProcessorGetStreamMirror :: inline (this : *ID3D11VideoContext1, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        pEnable : *BOOL,
        pFlipHorizontal : *BOOL,
        pFlipVertical : *BOOL
    ) #no_context
    {
        this.vtable.VideoProcessorGetStreamMirror (this, pVideoProcessor, StreamIndex, pEnable, pFlipHorizontal, pFlipVertical);
    }

    VideoProcessorGetBehaviorHints :: inline (this : *ID3D11VideoContext1, 
        pVideoProcessor : *ID3D11VideoProcessor,
        OutputWidth : u32,
        OutputHeight : u32,
        OutputFormat : DXGI_FORMAT,
        StreamCount : u32,
        pStreams : *D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT,
        pBehaviorHints : *u32
    ) -> HRESULT #no_context
    {
        return this.vtable.VideoProcessorGetBehaviorHints (this, pVideoProcessor, OutputWidth, OutputHeight, OutputFormat, StreamCount, pStreams, pBehaviorHints);
    }
}

ID3D11VideoContext2_UUID :: "c4e7374c-6243-4d1b-ae87-52b4f740e261";
ID3D11VideoContext2 :: struct
{
    UUID :: GUID.{0xc4e7374c,0x6243,0x4d1b,.[0xae,0x87,0x52,0xb4,0xf7,0x40,0xe2,0x61]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11VideoContext1;

    #place base;
    vtable : *ID3D11VideoContext2VTable;

    VideoProcessorSetOutputHDRMetaData :: inline (this : *ID3D11VideoContext2, 
        pVideoProcessor : *ID3D11VideoProcessor,
        _Type : DXGI_HDR_METADATA_TYPE,
        Size : u32,
        pHDRMetaData : *void
    ) #no_context
    {
        this.vtable.VideoProcessorSetOutputHDRMetaData (this, pVideoProcessor, _Type, Size, pHDRMetaData);
    }

    VideoProcessorGetOutputHDRMetaData :: inline (this : *ID3D11VideoContext2, 
        pVideoProcessor : *ID3D11VideoProcessor,
        pType : *DXGI_HDR_METADATA_TYPE,
        Size : u32,
        pMetaData : *void
    ) #no_context
    {
        this.vtable.VideoProcessorGetOutputHDRMetaData (this, pVideoProcessor, pType, Size, pMetaData);
    }

    VideoProcessorSetStreamHDRMetaData :: inline (this : *ID3D11VideoContext2, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        _Type : DXGI_HDR_METADATA_TYPE,
        Size : u32,
        pHDRMetaData : *void
    ) #no_context
    {
        this.vtable.VideoProcessorSetStreamHDRMetaData (this, pVideoProcessor, StreamIndex, _Type, Size, pHDRMetaData);
    }

    VideoProcessorGetStreamHDRMetaData :: inline (this : *ID3D11VideoContext2, 
        pVideoProcessor : *ID3D11VideoProcessor,
        StreamIndex : u32,
        pType : *DXGI_HDR_METADATA_TYPE,
        Size : u32,
        pMetaData : *void
    ) #no_context
    {
        this.vtable.VideoProcessorGetStreamHDRMetaData (this, pVideoProcessor, StreamIndex, pType, Size, pMetaData);
    }
}

ID3D11VideoContext3_UUID :: "a9e2faa0-cb39-418f-a0b7-d8aad4de672e";
ID3D11VideoContext3 :: struct
{
    UUID :: GUID.{0xa9e2faa0,0xcb39,0x418f,.[0xa0,0xb7,0xd8,0xaa,0xd4,0xde,0x67,0x2e]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11VideoContext2;

    #place base;
    vtable : *ID3D11VideoContext3VTable;

    DecoderBeginFrame1 :: inline (this : *ID3D11VideoContext3, 
        pDecoder : *ID3D11VideoDecoder,
        pView : *ID3D11VideoDecoderOutputView,
        ContentKeySize : u32,
        pContentKey : *void,
        NumComponentHistograms : u32,
        pHistogramOffsets : *u32,
        ppHistogramBuffers : **ID3D11Buffer
    ) -> HRESULT #no_context
    {
        return this.vtable.DecoderBeginFrame1 (this, pDecoder, pView, ContentKeySize, pContentKey, NumComponentHistograms, pHistogramOffsets, ppHistogramBuffers);
    }

    SubmitDecoderBuffers2 :: inline (this : *ID3D11VideoContext3, pDecoder : *ID3D11VideoDecoder, NumBuffers : u32, pBufferDesc : *D3D11_VIDEO_DECODER_BUFFER_DESC2) -> HRESULT #no_context
    {
        return this.vtable.SubmitDecoderBuffers2 (this, pDecoder, NumBuffers, pBufferDesc);
    }
}

ID3D11VideoDecoder_UUID :: "3c9c5b51-995d-48d1-9b8d-fa5caeded65c";
ID3D11VideoDecoder :: struct
{
    UUID :: GUID.{0x3c9c5b51,0x995d,0x48d1,.[0x9b,0x8d,0xfa,0x5c,0xae,0xde,0xd6,0x5c]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11VideoDecoderVTable;

    GetCreationParameters :: inline (this : *ID3D11VideoDecoder, pVideoDesc : *D3D11_VIDEO_DECODER_DESC, pConfig : *D3D11_VIDEO_DECODER_CONFIG) -> HRESULT #no_context
    {
        return this.vtable.GetCreationParameters (this, pVideoDesc, pConfig);
    }

    GetDriverHandle :: inline (this : *ID3D11VideoDecoder, pDriverHandle : *HANDLE) -> HRESULT #no_context
    {
        return this.vtable.GetDriverHandle (this, pDriverHandle);
    }
}

ID3D11VideoDecoderOutputView_UUID :: "c2931aea-2a85-4f20-860f-fba1fd256e18";
ID3D11VideoDecoderOutputView :: struct
{
    UUID :: GUID.{0xc2931aea,0x2a85,0x4f20,.[0x86,0xf,0xfb,0xa1,0xfd,0x25,0x6e,0x18]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11View;

    #place base;
    vtable : *ID3D11VideoDecoderOutputViewVTable;

    GetDesc :: inline (this : *ID3D11VideoDecoderOutputView, pDesc : *D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC) #no_context
    {
        this.vtable.GetDesc (this, pDesc);
    }
}

ID3D11VideoDevice_UUID :: "10ec4d5b-975a-4689-b9e4-d0aac30fe333";
ID3D11VideoDevice :: struct
{
    UUID :: GUID.{0x10ec4d5b,0x975a,0x4689,.[0xb9,0xe4,0xd0,0xaa,0xc3,0xf,0xe3,0x33]};

    #as using, except(.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D11VideoDeviceVTable;

    CreateVideoDecoder :: inline (this : *ID3D11VideoDevice, pVideoDesc : *D3D11_VIDEO_DECODER_DESC, pConfig : *D3D11_VIDEO_DECODER_CONFIG, ppDecoder : **ID3D11VideoDecoder) -> HRESULT #no_context
    {
        return this.vtable.CreateVideoDecoder (this, pVideoDesc, pConfig, ppDecoder);
    }

    CreateVideoProcessor :: inline (this : *ID3D11VideoDevice, pEnum : *ID3D11VideoProcessorEnumerator, RateConversionIndex : u32, ppVideoProcessor : **ID3D11VideoProcessor) -> HRESULT #no_context
    {
        return this.vtable.CreateVideoProcessor (this, pEnum, RateConversionIndex, ppVideoProcessor);
    }

    CreateAuthenticatedChannel :: inline (this : *ID3D11VideoDevice, ChannelType : D3D11_AUTHENTICATED_CHANNEL_TYPE, ppAuthenticatedChannel : **ID3D11AuthenticatedChannel) -> HRESULT #no_context
    {
        return this.vtable.CreateAuthenticatedChannel (this, ChannelType, ppAuthenticatedChannel);
    }

    CreateCryptoSession :: inline (this : *ID3D11VideoDevice, 
        pCryptoType : *GUID,
        pDecoderProfile : *GUID,
        pKeyExchangeType : *GUID,
        ppCryptoSession : **ID3D11CryptoSession
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateCryptoSession (this, pCryptoType, pDecoderProfile, pKeyExchangeType, ppCryptoSession);
    }

    CreateVideoDecoderOutputView :: inline (this : *ID3D11VideoDevice, pResource : *ID3D11Resource, pDesc : *D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC, ppVDOVView : **ID3D11VideoDecoderOutputView) -> HRESULT #no_context
    {
        return this.vtable.CreateVideoDecoderOutputView (this, pResource, pDesc, ppVDOVView);
    }

    CreateVideoProcessorInputView :: inline (this : *ID3D11VideoDevice, 
        pResource : *ID3D11Resource,
        pEnum : *ID3D11VideoProcessorEnumerator,
        pDesc : *D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC,
        ppVPIView : **ID3D11VideoProcessorInputView
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateVideoProcessorInputView (this, pResource, pEnum, pDesc, ppVPIView);
    }

    CreateVideoProcessorOutputView :: inline (this : *ID3D11VideoDevice, 
        pResource : *ID3D11Resource,
        pEnum : *ID3D11VideoProcessorEnumerator,
        pDesc : *D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC,
        ppVPOView : **ID3D11VideoProcessorOutputView
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateVideoProcessorOutputView (this, pResource, pEnum, pDesc, ppVPOView);
    }

    CreateVideoProcessorEnumerator :: inline (this : *ID3D11VideoDevice, pDesc : *D3D11_VIDEO_PROCESSOR_CONTENT_DESC, ppEnum : **ID3D11VideoProcessorEnumerator) -> HRESULT #no_context
    {
        return this.vtable.CreateVideoProcessorEnumerator (this, pDesc, ppEnum);
    }

    GetVideoDecoderProfileCount :: inline (this : *ID3D11VideoDevice) -> u32 #no_context
    {
        return this.vtable.GetVideoDecoderProfileCount (this);
    }

    GetVideoDecoderProfile :: inline (this : *ID3D11VideoDevice, Index : u32, pDecoderProfile : *GUID) -> HRESULT #no_context
    {
        return this.vtable.GetVideoDecoderProfile (this, Index, pDecoderProfile);
    }

    CheckVideoDecoderFormat :: inline (this : *ID3D11VideoDevice, pDecoderProfile : *GUID, Format : DXGI_FORMAT, pSupported : *BOOL) -> HRESULT #no_context
    {
        return this.vtable.CheckVideoDecoderFormat (this, pDecoderProfile, Format, pSupported);
    }

    GetVideoDecoderConfigCount :: inline (this : *ID3D11VideoDevice, pDesc : *D3D11_VIDEO_DECODER_DESC, pCount : *u32) -> HRESULT #no_context
    {
        return this.vtable.GetVideoDecoderConfigCount (this, pDesc, pCount);
    }

    GetVideoDecoderConfig :: inline (this : *ID3D11VideoDevice, pDesc : *D3D11_VIDEO_DECODER_DESC, Index : u32, pConfig : *D3D11_VIDEO_DECODER_CONFIG) -> HRESULT #no_context
    {
        return this.vtable.GetVideoDecoderConfig (this, pDesc, Index, pConfig);
    }

    GetContentProtectionCaps :: inline (this : *ID3D11VideoDevice, pCryptoType : *GUID, pDecoderProfile : *GUID, pCaps : *D3D11_VIDEO_CONTENT_PROTECTION_CAPS) -> HRESULT #no_context
    {
        return this.vtable.GetContentProtectionCaps (this, pCryptoType, pDecoderProfile, pCaps);
    }

    CheckCryptoKeyExchange :: inline (this : *ID3D11VideoDevice, 
        pCryptoType : *GUID,
        pDecoderProfile : *GUID,
        Index : u32,
        pKeyExchangeType : *GUID
    ) -> HRESULT #no_context
    {
        return this.vtable.CheckCryptoKeyExchange (this, pCryptoType, pDecoderProfile, Index, pKeyExchangeType);
    }

    SetPrivateData :: inline (this : *ID3D11VideoDevice, guid : *GUID, DataSize : u32, pData : *void) -> HRESULT #no_context
    {
        return this.vtable.SetPrivateData (this, guid, DataSize, pData);
    }

    SetPrivateDataInterface :: inline (this : *ID3D11VideoDevice, guid : *GUID, pData : *IUnknown) -> HRESULT #no_context
    {
        return this.vtable.SetPrivateDataInterface (this, guid, pData);
    }
}

ID3D11VideoDevice1_UUID :: "29da1d51-1321-4454-804b-f5fc9f861f0f";
ID3D11VideoDevice1 :: struct
{
    UUID :: GUID.{0x29da1d51,0x1321,0x4454,.[0x80,0x4b,0xf5,0xfc,0x9f,0x86,0x1f,0xf]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11VideoDevice;

    #place base;
    vtable : *ID3D11VideoDevice1VTable;

    GetCryptoSessionPrivateDataSize :: inline (this : *ID3D11VideoDevice1, 
        pCryptoType : *GUID,
        pDecoderProfile : *GUID,
        pKeyExchangeType : *GUID,
        pPrivateInputSize : *u32,
        pPrivateOutputSize : *u32
    ) -> HRESULT #no_context
    {
        return this.vtable.GetCryptoSessionPrivateDataSize (this, pCryptoType, pDecoderProfile, pKeyExchangeType, pPrivateInputSize, pPrivateOutputSize);
    }

    GetVideoDecoderCaps :: inline (this : *ID3D11VideoDevice1, 
        pDecoderProfile : *GUID,
        SampleWidth : u32,
        SampleHeight : u32,
        pFrameRate : *DXGI_RATIONAL,
        BitRate : u32,
        pCryptoType : *GUID,
        pDecoderCaps : *u32
    ) -> HRESULT #no_context
    {
        return this.vtable.GetVideoDecoderCaps (this, pDecoderProfile, SampleWidth, SampleHeight, pFrameRate, BitRate, pCryptoType, pDecoderCaps);
    }

    CheckVideoDecoderDownsampling :: inline (this : *ID3D11VideoDevice1, 
        pInputDesc : *D3D11_VIDEO_DECODER_DESC,
        InputColorSpace : DXGI_COLOR_SPACE_TYPE,
        pInputConfig : *D3D11_VIDEO_DECODER_CONFIG,
        pFrameRate : *DXGI_RATIONAL,
        pOutputDesc : *D3D11_VIDEO_SAMPLE_DESC,
        pSupported : *BOOL,
        pRealTimeHint : *BOOL
    ) -> HRESULT #no_context
    {
        return this.vtable.CheckVideoDecoderDownsampling (this, pInputDesc, InputColorSpace, pInputConfig, pFrameRate, pOutputDesc, pSupported, pRealTimeHint);
    }

    RecommendVideoDecoderDownsampleParameters :: inline (this : *ID3D11VideoDevice1, 
        pInputDesc : *D3D11_VIDEO_DECODER_DESC,
        InputColorSpace : DXGI_COLOR_SPACE_TYPE,
        pInputConfig : *D3D11_VIDEO_DECODER_CONFIG,
        pFrameRate : *DXGI_RATIONAL,
        pRecommendedOutputDesc : *D3D11_VIDEO_SAMPLE_DESC
    ) -> HRESULT #no_context
    {
        return this.vtable.RecommendVideoDecoderDownsampleParameters (this, pInputDesc, InputColorSpace, pInputConfig, pFrameRate, pRecommendedOutputDesc);
    }
}

ID3D11VideoDevice2_UUID :: "59c0cb01-35f0-4a70-8f67-87905c906a53";
ID3D11VideoDevice2 :: struct
{
    UUID :: GUID.{0x59c0cb01,0x35f0,0x4a70,.[0x8f,0x67,0x87,0x90,0x5c,0x90,0x6a,0x53]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11VideoDevice1;

    #place base;
    vtable : *ID3D11VideoDevice2VTable;

    CheckFeatureSupport :: inline (this : *ID3D11VideoDevice2, Feature : D3D11_FEATURE_VIDEO, pFeatureSupportData : *void, FeatureSupportDataSize : u32) -> HRESULT #no_context
    {
        return this.vtable.CheckFeatureSupport (this, Feature, pFeatureSupportData, FeatureSupportDataSize);
    }

    NegotiateCryptoSessionKeyExchangeMT :: inline (this : *ID3D11VideoDevice2, 
        pCryptoSession : *ID3D11CryptoSession,
        flags : D3D11_CRYPTO_SESSION_KEY_EXCHANGE_FLAGS,
        DataSize : u32,
        pData : *void
    ) -> HRESULT #no_context
    {
        return this.vtable.NegotiateCryptoSessionKeyExchangeMT (this, pCryptoSession, flags, DataSize, pData);
    }
}

ID3D11VideoProcessor_UUID :: "1d7b0652-185f-41c6-85ce-0c5be3d4ae6c";
ID3D11VideoProcessor :: struct
{
    UUID :: GUID.{0x1d7b0652,0x185f,0x41c6,.[0x85,0xce,0xc,0x5b,0xe3,0xd4,0xae,0x6c]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11VideoProcessorVTable;

    GetContentDesc :: inline (this : *ID3D11VideoProcessor, pDesc : *D3D11_VIDEO_PROCESSOR_CONTENT_DESC) #no_context
    {
        this.vtable.GetContentDesc (this, pDesc);
    }

    GetRateConversionCaps :: inline (this : *ID3D11VideoProcessor, pCaps : *D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS) #no_context
    {
        this.vtable.GetRateConversionCaps (this, pCaps);
    }
}

ID3D11VideoProcessorEnumerator_UUID :: "31627037-53ab-4200-9061-05faa9ab45f9";
ID3D11VideoProcessorEnumerator :: struct
{
    UUID :: GUID.{0x31627037,0x53ab,0x4200,.[0x90,0x61,0x5,0xfa,0xa9,0xab,0x45,0xf9]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11VideoProcessorEnumeratorVTable;

    GetVideoProcessorContentDesc :: inline (this : *ID3D11VideoProcessorEnumerator, pContentDesc : *D3D11_VIDEO_PROCESSOR_CONTENT_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetVideoProcessorContentDesc (this, pContentDesc);
    }

    CheckVideoProcessorFormat :: inline (this : *ID3D11VideoProcessorEnumerator, Format : DXGI_FORMAT, pFlags : *u32) -> HRESULT #no_context
    {
        return this.vtable.CheckVideoProcessorFormat (this, Format, pFlags);
    }

    GetVideoProcessorCaps :: inline (this : *ID3D11VideoProcessorEnumerator, pCaps : *D3D11_VIDEO_PROCESSOR_CAPS) -> HRESULT #no_context
    {
        return this.vtable.GetVideoProcessorCaps (this, pCaps);
    }

    GetVideoProcessorRateConversionCaps :: inline (this : *ID3D11VideoProcessorEnumerator, TypeIndex : u32, pCaps : *D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS) -> HRESULT #no_context
    {
        return this.vtable.GetVideoProcessorRateConversionCaps (this, TypeIndex, pCaps);
    }

    GetVideoProcessorCustomRate :: inline (this : *ID3D11VideoProcessorEnumerator, TypeIndex : u32, CustomRateIndex : u32, pRate : *D3D11_VIDEO_PROCESSOR_CUSTOM_RATE) -> HRESULT #no_context
    {
        return this.vtable.GetVideoProcessorCustomRate (this, TypeIndex, CustomRateIndex, pRate);
    }

    GetVideoProcessorFilterRange :: inline (this : *ID3D11VideoProcessorEnumerator, Filter : D3D11_VIDEO_PROCESSOR_FILTER, pRange : *D3D11_VIDEO_PROCESSOR_FILTER_RANGE) -> HRESULT #no_context
    {
        return this.vtable.GetVideoProcessorFilterRange (this, Filter, pRange);
    }
}

ID3D11VideoProcessorEnumerator1_UUID :: "465217f2-5568-43cf-b5b9-f61d54531ca1";
ID3D11VideoProcessorEnumerator1 :: struct
{
    UUID :: GUID.{0x465217f2,0x5568,0x43cf,.[0xb5,0xb9,0xf6,0x1d,0x54,0x53,0x1c,0xa1]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11VideoProcessorEnumerator;

    #place base;
    vtable : *ID3D11VideoProcessorEnumerator1VTable;

    CheckVideoProcessorFormatConversion :: inline (this : *ID3D11VideoProcessorEnumerator1, 
        InputFormat : DXGI_FORMAT,
        InputColorSpace : DXGI_COLOR_SPACE_TYPE,
        OutputFormat : DXGI_FORMAT,
        OutputColorSpace : DXGI_COLOR_SPACE_TYPE,
        pSupported : *BOOL
    ) -> HRESULT #no_context
    {
        return this.vtable.CheckVideoProcessorFormatConversion (this, InputFormat, InputColorSpace, OutputFormat, OutputColorSpace, pSupported);
    }
}

ID3D11VideoProcessorInputView_UUID :: "11ec5a5f-51dc-4945-ab34-6e8c21300ea5";
ID3D11VideoProcessorInputView :: struct
{
    UUID :: GUID.{0x11ec5a5f,0x51dc,0x4945,.[0xab,0x34,0x6e,0x8c,0x21,0x30,0xe,0xa5]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11View;

    #place base;
    vtable : *ID3D11VideoProcessorInputViewVTable;

    GetDesc :: inline (this : *ID3D11VideoProcessorInputView, pDesc : *D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC) #no_context
    {
        this.vtable.GetDesc (this, pDesc);
    }
}

ID3D11VideoProcessorOutputView_UUID :: "a048285e-25a9-4527-bd93-d68b68c44254";
ID3D11VideoProcessorOutputView :: struct
{
    UUID :: GUID.{0xa048285e,0x25a9,0x4527,.[0xbd,0x93,0xd6,0x8b,0x68,0xc4,0x42,0x54]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11View;

    #place base;
    vtable : *ID3D11VideoProcessorOutputViewVTable;

    GetDesc :: inline (this : *ID3D11VideoProcessorOutputView, pDesc : *D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC) #no_context
    {
        this.vtable.GetDesc (this, pDesc);
    }
}

ID3D11View_UUID :: "839d1216-bb2e-412b-b7f4-a9dbebe08ed1";
ID3D11View :: struct
{
    UUID :: GUID.{0x839d1216,0xbb2e,0x412b,.[0xb7,0xf4,0xa9,0xdb,0xeb,0xe0,0x8e,0xd1]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3D11ViewVTable;

    GetResource :: inline (this : *ID3D11View, ppResource : **ID3D11Resource) #no_context
    {
        this.vtable.GetResource (this, ppResource);
    }
}

ID3DDeviceContextState_UUID :: "5c1e0d8a-7c23-48f9-8c59-a92958ceff11";
ID3DDeviceContextState :: struct
{
    UUID :: GUID.{0x5c1e0d8a,0x7c23,0x48f9,.[0x8c,0x59,0xa9,0x29,0x58,0xce,0xff,0x11]};

    #as using, except(.["vtable", "base", "UUID"]) base : ID3D11DeviceChild;

    #place base;
    vtable : *ID3DDeviceContextStateVTable;
}

ID3DX11FFT_UUID :: "b3f7a938-4c93-4310-a675-b30d6de50553";
ID3DX11FFT :: struct
{
    UUID :: GUID.{0xb3f7a938,0x4c93,0x4310,.[0xa6,0x75,0xb3,0xd,0x6d,0xe5,0x5,0x53]};

    #as using, except(.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3DX11FFTVTable;

    SetForwardScale :: inline (this : *ID3DX11FFT, ForwardScale : float) -> HRESULT #no_context
    {
        return this.vtable.SetForwardScale (this, ForwardScale);
    }

    GetForwardScale :: inline (this : *ID3DX11FFT) -> float #no_context
    {
        return this.vtable.GetForwardScale (this);
    }

    SetInverseScale :: inline (this : *ID3DX11FFT, InverseScale : float) -> HRESULT #no_context
    {
        return this.vtable.SetInverseScale (this, InverseScale);
    }

    GetInverseScale :: inline (this : *ID3DX11FFT) -> float #no_context
    {
        return this.vtable.GetInverseScale (this);
    }

    AttachBuffersAndPrecompute :: inline (this : *ID3DX11FFT, 
        NumTempBuffers : u32,
        ppTempBuffers : **ID3D11UnorderedAccessView,
        NumPrecomputeBuffers : u32,
        ppPrecomputeBufferSizes : **ID3D11UnorderedAccessView
    ) -> HRESULT #no_context
    {
        return this.vtable.AttachBuffersAndPrecompute (this, NumTempBuffers, ppTempBuffers, NumPrecomputeBuffers, ppPrecomputeBufferSizes);
    }

    ForwardTransform :: inline (this : *ID3DX11FFT, pInputBuffer : *ID3D11UnorderedAccessView, ppOutputBuffer : **ID3D11UnorderedAccessView) -> HRESULT #no_context
    {
        return this.vtable.ForwardTransform (this, pInputBuffer, ppOutputBuffer);
    }

    InverseTransform :: inline (this : *ID3DX11FFT, pInputBuffer : *ID3D11UnorderedAccessView, ppOutputBuffer : **ID3D11UnorderedAccessView) -> HRESULT #no_context
    {
        return this.vtable.InverseTransform (this, pInputBuffer, ppOutputBuffer);
    }
}

ID3DX11Scan_UUID :: "5089b68f-e71d-4d38-be8e-f363b95a9405";
ID3DX11Scan :: struct
{
    UUID :: GUID.{0x5089b68f,0xe71d,0x4d38,.[0xbe,0x8e,0xf3,0x63,0xb9,0x5a,0x94,0x5]};

    #as using, except(.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3DX11ScanVTable;

    SetScanDirection :: inline (this : *ID3DX11Scan, Direction : D3DX11_SCAN_DIRECTION) -> HRESULT #no_context
    {
        return this.vtable.SetScanDirection (this, Direction);
    }

    Scan :: inline (this : *ID3DX11Scan, 
        ElementType : D3DX11_SCAN_DATA_TYPE,
        OpCode : D3DX11_SCAN_OPCODE,
        ElementScanSize : u32,
        pSrc : *ID3D11UnorderedAccessView,
        pDst : *ID3D11UnorderedAccessView
    ) -> HRESULT #no_context
    {
        return this.vtable.Scan (this, ElementType, OpCode, ElementScanSize, pSrc, pDst);
    }

    Multiscan :: inline (this : *ID3DX11Scan, 
        ElementType : D3DX11_SCAN_DATA_TYPE,
        OpCode : D3DX11_SCAN_OPCODE,
        ElementScanSize : u32,
        ElementScanPitch : u32,
        ScanCount : u32,
        pSrc : *ID3D11UnorderedAccessView,
        pDst : *ID3D11UnorderedAccessView
    ) -> HRESULT #no_context
    {
        return this.vtable.Multiscan (this, ElementType, OpCode, ElementScanSize, ElementScanPitch, ScanCount, pSrc, pDst);
    }
}

ID3DX11SegmentedScan_UUID :: "a915128c-d954-4c79-bfe1-64db923194d6";
ID3DX11SegmentedScan :: struct
{
    UUID :: GUID.{0xa915128c,0xd954,0x4c79,.[0xbf,0xe1,0x64,0xdb,0x92,0x31,0x94,0xd6]};

    #as using, except(.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3DX11SegmentedScanVTable;

    SetScanDirection :: inline (this : *ID3DX11SegmentedScan, Direction : D3DX11_SCAN_DIRECTION) -> HRESULT #no_context
    {
        return this.vtable.SetScanDirection (this, Direction);
    }

    SegScan :: inline (this : *ID3DX11SegmentedScan, 
        ElementType : D3DX11_SCAN_DATA_TYPE,
        OpCode : D3DX11_SCAN_OPCODE,
        ElementScanSize : u32,
        pSrc : *ID3D11UnorderedAccessView,
        pSrcElementFlags : *ID3D11UnorderedAccessView,
        pDst : *ID3D11UnorderedAccessView
    ) -> HRESULT #no_context
    {
        return this.vtable.SegScan (this, ElementType, OpCode, ElementScanSize, pSrc, pSrcElementFlags, pDst);
    }
}

PFN_D3D11_CREATE_DEVICE :: #type (
    param0 : *IDXGIAdapter,
    param1 : D3D_DRIVER_TYPE,
    param2 : HINSTANCE,
    param3 : u32,
    param4 : *D3D_FEATURE_LEVEL,
    FeatureLevels : u32,
    param6 : u32,
    param7 : **ID3D11Device,
    param8 : *D3D_FEATURE_LEVEL,
    param9 : **ID3D11DeviceContext
) -> HRESULT #c_call;

PFN_D3D11_CREATE_DEVICE_AND_SWAP_CHAIN :: #type (
    param0 : *IDXGIAdapter,
    param1 : D3D_DRIVER_TYPE,
    param2 : HINSTANCE,
    param3 : u32,
    param4 : *D3D_FEATURE_LEVEL,
    FeatureLevels : u32,
    param6 : u32,
    param7 : *DXGI_SWAP_CHAIN_DESC,
    param8 : **IDXGISwapChain,
    param9 : **ID3D11Device,
    param10 : *D3D_FEATURE_LEVEL,
    param11 : **ID3D11DeviceContext
) -> HRESULT #c_call;

// Functions

D3D11CreateDevice :: (
    pAdapter : *IDXGIAdapter,
    DriverType : D3D_DRIVER_TYPE,
    Software : HINSTANCE,
    Flags : D3D11_CREATE_DEVICE_FLAG,
    pFeatureLevels : *D3D_FEATURE_LEVEL,
    FeatureLevels : u32,
    SDKVersion : u32,
    ppDevice : **ID3D11Device,
    pFeatureLevel : *D3D_FEATURE_LEVEL,
    ppImmediateContext : **ID3D11DeviceContext
) -> HRESULT #foreign d3d11;

D3D11CreateDeviceAndSwapChain :: (
    pAdapter : *IDXGIAdapter,
    DriverType : D3D_DRIVER_TYPE,
    Software : HINSTANCE,
    Flags : D3D11_CREATE_DEVICE_FLAG,
    pFeatureLevels : *D3D_FEATURE_LEVEL,
    FeatureLevels : u32,
    SDKVersion : u32,
    pSwapChainDesc : *DXGI_SWAP_CHAIN_DESC,
    ppSwapChain : **IDXGISwapChain,
    ppDevice : **ID3D11Device,
    pFeatureLevel : *D3D_FEATURE_LEVEL,
    ppImmediateContext : **ID3D11DeviceContext
) -> HRESULT #foreign d3d11;

D3DDisassemble11Trace :: (
    pSrcData : *void,
    SrcDataSize : u64,
    pTrace : *ID3D11ShaderTrace,
    StartStep : u32,
    NumSteps : u32,
    Flags : u32,
    ppDisassembly : **ID3DBlob
) -> HRESULT #foreign D3DCOMPILER_47;


// COM interface vtables


ID3D11AsynchronousVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

    GetDataSize : (this : *ID3D11Asynchronous) -> u32 #cpp_method;
}

ID3D11AuthenticatedChannelVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

    GetCertificateSize : (this : *ID3D11AuthenticatedChannel, pCertificateSize : *u32) -> HRESULT #cpp_method;
    GetCertificate : (this : *ID3D11AuthenticatedChannel, CertificateSize : u32, pCertificate : *u8) -> HRESULT #cpp_method;
    GetChannelHandle : (this : *ID3D11AuthenticatedChannel, pChannelHandle : *HANDLE) #cpp_method;
}

ID3D11BlendStateVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

    GetDesc : (this : *ID3D11BlendState, pDesc : *D3D11_BLEND_DESC) #cpp_method;
}

ID3D11BlendState1VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11BlendStateVTable;

    GetDesc1 : (this : *ID3D11BlendState1, pDesc : *D3D11_BLEND_DESC1) #cpp_method;
}

ID3D11BufferVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11ResourceVTable;

    GetDesc : (this : *ID3D11Buffer, pDesc : *D3D11_BUFFER_DESC) #cpp_method;
}

ID3D11ClassInstanceVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

    GetClassLinkage : (this : *ID3D11ClassInstance, ppLinkage : **ID3D11ClassLinkage) #cpp_method;
    GetDesc : (this : *ID3D11ClassInstance, pDesc : *D3D11_CLASS_INSTANCE_DESC) #cpp_method;
    GetInstanceName : (this : *ID3D11ClassInstance, pInstanceName : *u8, pBufferLength : *u64) #cpp_method;
    GetTypeName : (this : *ID3D11ClassInstance, pTypeName : *u8, pBufferLength : *u64) #cpp_method;
}

ID3D11ClassLinkageVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

    GetClassInstance : (this : *ID3D11ClassLinkage, pClassInstanceName : PSTR, InstanceIndex : u32, ppInstance : **ID3D11ClassInstance) -> HRESULT #cpp_method;
    CreateClassInstance : (this : *ID3D11ClassLinkage, pClassTypeName : PSTR, ConstantBufferOffset : u32, ConstantVectorOffset : u32, TextureOffset : u32, SamplerOffset : u32, ppInstance : **ID3D11ClassInstance) -> HRESULT #cpp_method;
}

ID3D11CommandListVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

    GetContextFlags : (this : *ID3D11CommandList) -> u32 #cpp_method;
}

ID3D11ComputeShaderVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

}

ID3D11CounterVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11AsynchronousVTable;

    GetDesc : (this : *ID3D11Counter, pDesc : *D3D11_COUNTER_DESC) #cpp_method;
}

ID3D11CryptoSessionVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

    GetCryptoType : (this : *ID3D11CryptoSession, pCryptoType : *GUID) #cpp_method;
    GetDecoderProfile : (this : *ID3D11CryptoSession, pDecoderProfile : *GUID) #cpp_method;
    GetCertificateSize : (this : *ID3D11CryptoSession, pCertificateSize : *u32) -> HRESULT #cpp_method;
    GetCertificate : (this : *ID3D11CryptoSession, CertificateSize : u32, pCertificate : *u8) -> HRESULT #cpp_method;
    GetCryptoSessionHandle : (this : *ID3D11CryptoSession, pCryptoSessionHandle : *HANDLE) #cpp_method;
}

ID3D11DebugVTable :: struct
{
    #as using, except(.["base"]) base : IUnknownVTable;

    SetFeatureMask : (this : *ID3D11Debug, Mask : u32) -> HRESULT #cpp_method;
    GetFeatureMask : (this : *ID3D11Debug) -> u32 #cpp_method;
    SetPresentPerRenderOpDelay : (this : *ID3D11Debug, Milliseconds : u32) -> HRESULT #cpp_method;
    GetPresentPerRenderOpDelay : (this : *ID3D11Debug) -> u32 #cpp_method;
    SetSwapChain : (this : *ID3D11Debug, pSwapChain : *IDXGISwapChain) -> HRESULT #cpp_method;
    GetSwapChain : (this : *ID3D11Debug, ppSwapChain : **IDXGISwapChain) -> HRESULT #cpp_method;
    ValidateContext : (this : *ID3D11Debug, pContext : *ID3D11DeviceContext) -> HRESULT #cpp_method;
    ReportLiveDeviceObjects : (this : *ID3D11Debug, Flags : D3D11_RLDO_FLAGS) -> HRESULT #cpp_method;
    ValidateContextForDispatch : (this : *ID3D11Debug, pContext : *ID3D11DeviceContext) -> HRESULT #cpp_method;
}

ID3D11DepthStencilStateVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

    GetDesc : (this : *ID3D11DepthStencilState, pDesc : *D3D11_DEPTH_STENCIL_DESC) #cpp_method;
}

ID3D11DepthStencilViewVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11ViewVTable;

    GetDesc : (this : *ID3D11DepthStencilView, pDesc : *D3D11_DEPTH_STENCIL_VIEW_DESC) #cpp_method;
}

ID3D11DeviceVTable :: struct
{
    #as using, except(.["base"]) base : IUnknownVTable;

    CreateBuffer : (this : *ID3D11Device, pDesc : *D3D11_BUFFER_DESC, pInitialData : *D3D11_SUBRESOURCE_DATA, ppBuffer : **ID3D11Buffer) -> HRESULT #cpp_method;
    CreateTexture1D : (this : *ID3D11Device, pDesc : *D3D11_TEXTURE1D_DESC, pInitialData : *D3D11_SUBRESOURCE_DATA, ppTexture1D : **ID3D11Texture1D) -> HRESULT #cpp_method;
    CreateTexture2D : (this : *ID3D11Device, pDesc : *D3D11_TEXTURE2D_DESC, pInitialData : *D3D11_SUBRESOURCE_DATA, ppTexture2D : **ID3D11Texture2D) -> HRESULT #cpp_method;
    CreateTexture3D : (this : *ID3D11Device, pDesc : *D3D11_TEXTURE3D_DESC, pInitialData : *D3D11_SUBRESOURCE_DATA, ppTexture3D : **ID3D11Texture3D) -> HRESULT #cpp_method;
    CreateShaderResourceView : (this : *ID3D11Device, pResource : *ID3D11Resource, pDesc : *D3D11_SHADER_RESOURCE_VIEW_DESC, ppSRView : **ID3D11ShaderResourceView) -> HRESULT #cpp_method;
    CreateUnorderedAccessView : (this : *ID3D11Device, pResource : *ID3D11Resource, pDesc : *D3D11_UNORDERED_ACCESS_VIEW_DESC, ppUAView : **ID3D11UnorderedAccessView) -> HRESULT #cpp_method;
    CreateRenderTargetView : (this : *ID3D11Device, pResource : *ID3D11Resource, pDesc : *D3D11_RENDER_TARGET_VIEW_DESC, ppRTView : **ID3D11RenderTargetView) -> HRESULT #cpp_method;
    CreateDepthStencilView : (this : *ID3D11Device, pResource : *ID3D11Resource, pDesc : *D3D11_DEPTH_STENCIL_VIEW_DESC, ppDepthStencilView : **ID3D11DepthStencilView) -> HRESULT #cpp_method;
    CreateInputLayout : (this : *ID3D11Device, pInputElementDescs : *D3D11_INPUT_ELEMENT_DESC, NumElements : u32, pShaderBytecodeWithInputSignature : *void, BytecodeLength : u64, ppInputLayout : **ID3D11InputLayout) -> HRESULT #cpp_method;
    CreateVertexShader : (this : *ID3D11Device, pShaderBytecode : *void, BytecodeLength : u64, pClassLinkage : *ID3D11ClassLinkage, ppVertexShader : **ID3D11VertexShader) -> HRESULT #cpp_method;
    CreateGeometryShader : (this : *ID3D11Device, pShaderBytecode : *void, BytecodeLength : u64, pClassLinkage : *ID3D11ClassLinkage, ppGeometryShader : **ID3D11GeometryShader) -> HRESULT #cpp_method;
    CreateGeometryShaderWithStreamOutput : (this : *ID3D11Device, pShaderBytecode : *void, BytecodeLength : u64, pSODeclaration : *D3D11_SO_DECLARATION_ENTRY, NumEntries : u32, pBufferStrides : *u32, NumStrides : u32, RasterizedStream : u32, pClassLinkage : *ID3D11ClassLinkage, ppGeometryShader : **ID3D11GeometryShader) -> HRESULT #cpp_method;
    CreatePixelShader : (this : *ID3D11Device, pShaderBytecode : *void, BytecodeLength : u64, pClassLinkage : *ID3D11ClassLinkage, ppPixelShader : **ID3D11PixelShader) -> HRESULT #cpp_method;
    CreateHullShader : (this : *ID3D11Device, pShaderBytecode : *void, BytecodeLength : u64, pClassLinkage : *ID3D11ClassLinkage, ppHullShader : **ID3D11HullShader) -> HRESULT #cpp_method;
    CreateDomainShader : (this : *ID3D11Device, pShaderBytecode : *void, BytecodeLength : u64, pClassLinkage : *ID3D11ClassLinkage, ppDomainShader : **ID3D11DomainShader) -> HRESULT #cpp_method;
    CreateComputeShader : (this : *ID3D11Device, pShaderBytecode : *void, BytecodeLength : u64, pClassLinkage : *ID3D11ClassLinkage, ppComputeShader : **ID3D11ComputeShader) -> HRESULT #cpp_method;
    CreateClassLinkage : (this : *ID3D11Device, ppLinkage : **ID3D11ClassLinkage) -> HRESULT #cpp_method;
    CreateBlendState : (this : *ID3D11Device, pBlendStateDesc : *D3D11_BLEND_DESC, ppBlendState : **ID3D11BlendState) -> HRESULT #cpp_method;
    CreateDepthStencilState : (this : *ID3D11Device, pDepthStencilDesc : *D3D11_DEPTH_STENCIL_DESC, ppDepthStencilState : **ID3D11DepthStencilState) -> HRESULT #cpp_method;
    CreateRasterizerState : (this : *ID3D11Device, pRasterizerDesc : *D3D11_RASTERIZER_DESC, ppRasterizerState : **ID3D11RasterizerState) -> HRESULT #cpp_method;
    CreateSamplerState : (this : *ID3D11Device, pSamplerDesc : *D3D11_SAMPLER_DESC, ppSamplerState : **ID3D11SamplerState) -> HRESULT #cpp_method;
    CreateQuery : (this : *ID3D11Device, pQueryDesc : *D3D11_QUERY_DESC, ppQuery : **ID3D11Query) -> HRESULT #cpp_method;
    CreatePredicate : (this : *ID3D11Device, pPredicateDesc : *D3D11_QUERY_DESC, ppPredicate : **ID3D11Predicate) -> HRESULT #cpp_method;
    CreateCounter : (this : *ID3D11Device, pCounterDesc : *D3D11_COUNTER_DESC, ppCounter : **ID3D11Counter) -> HRESULT #cpp_method;
    CreateDeferredContext : (this : *ID3D11Device, ContextFlags : u32, ppDeferredContext : **ID3D11DeviceContext) -> HRESULT #cpp_method;
    OpenSharedResource : (this : *ID3D11Device, hResource : HANDLE, ReturnedInterface : *GUID, ppResource : **void) -> HRESULT #cpp_method;
    CheckFormatSupport : (this : *ID3D11Device, Format : DXGI_FORMAT, pFormatSupport : *u32) -> HRESULT #cpp_method;
    CheckMultisampleQualityLevels : (this : *ID3D11Device, Format : DXGI_FORMAT, SampleCount : u32, pNumQualityLevels : *u32) -> HRESULT #cpp_method;
    CheckCounterInfo : (this : *ID3D11Device, pCounterInfo : *D3D11_COUNTER_INFO) #cpp_method;
    CheckCounter : (this : *ID3D11Device, pDesc : *D3D11_COUNTER_DESC, pType : *D3D11_COUNTER_TYPE, pActiveCounters : *u32, szName : *u8, pNameLength : *u32, szUnits : *u8, pUnitsLength : *u32, szDescription : *u8, pDescriptionLength : *u32) -> HRESULT #cpp_method;
    CheckFeatureSupport : (this : *ID3D11Device, Feature : D3D11_FEATURE, pFeatureSupportData : *void, FeatureSupportDataSize : u32) -> HRESULT #cpp_method;
    GetPrivateData : (this : *ID3D11Device, guid : *GUID, pDataSize : *u32, pData : *void) -> HRESULT #cpp_method;
    SetPrivateData : (this : *ID3D11Device, guid : *GUID, DataSize : u32, pData : *void) -> HRESULT #cpp_method;
    SetPrivateDataInterface : (this : *ID3D11Device, guid : *GUID, pData : *IUnknown) -> HRESULT #cpp_method;
    GetFeatureLevel : (this : *ID3D11Device) -> D3D_FEATURE_LEVEL #cpp_method;
    GetCreationFlags : (this : *ID3D11Device) -> u32 #cpp_method;
    GetDeviceRemovedReason : (this : *ID3D11Device) -> HRESULT #cpp_method;
    GetImmediateContext : (this : *ID3D11Device, ppImmediateContext : **ID3D11DeviceContext) #cpp_method;
    SetExceptionMode : (this : *ID3D11Device, RaiseFlags : u32) -> HRESULT #cpp_method;
    GetExceptionMode : (this : *ID3D11Device) -> u32 #cpp_method;
}

ID3D11Device1VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceVTable;

    GetImmediateContext1 : (this : *ID3D11Device1, ppImmediateContext : **ID3D11DeviceContext1) #cpp_method;
    CreateDeferredContext1 : (this : *ID3D11Device1, ContextFlags : u32, ppDeferredContext : **ID3D11DeviceContext1) -> HRESULT #cpp_method;
    CreateBlendState1 : (this : *ID3D11Device1, pBlendStateDesc : *D3D11_BLEND_DESC1, ppBlendState : **ID3D11BlendState1) -> HRESULT #cpp_method;
    CreateRasterizerState1 : (this : *ID3D11Device1, pRasterizerDesc : *D3D11_RASTERIZER_DESC1, ppRasterizerState : **ID3D11RasterizerState1) -> HRESULT #cpp_method;
    CreateDeviceContextState : (this : *ID3D11Device1, Flags : u32, pFeatureLevels : *D3D_FEATURE_LEVEL, FeatureLevels : u32, SDKVersion : u32, EmulatedInterface : *GUID, pChosenFeatureLevel : *D3D_FEATURE_LEVEL, ppContextState : **ID3DDeviceContextState) -> HRESULT #cpp_method;
    OpenSharedResource1 : (this : *ID3D11Device1, hResource : HANDLE, returnedInterface : *GUID, ppResource : **void) -> HRESULT #cpp_method;
    OpenSharedResourceByName : (this : *ID3D11Device1, lpName : PWSTR, dwDesiredAccess : u32, returnedInterface : *GUID, ppResource : **void) -> HRESULT #cpp_method;
}

ID3D11Device2VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11Device1VTable;

    GetImmediateContext2 : (this : *ID3D11Device2, ppImmediateContext : **ID3D11DeviceContext2) #cpp_method;
    CreateDeferredContext2 : (this : *ID3D11Device2, ContextFlags : u32, ppDeferredContext : **ID3D11DeviceContext2) -> HRESULT #cpp_method;
    GetResourceTiling : (this : *ID3D11Device2, pTiledResource : *ID3D11Resource, pNumTilesForEntireResource : *u32, pPackedMipDesc : *D3D11_PACKED_MIP_DESC, pStandardTileShapeForNonPackedMips : *D3D11_TILE_SHAPE, pNumSubresourceTilings : *u32, FirstSubresourceTilingToGet : u32, pSubresourceTilingsForNonPackedMips : *D3D11_SUBRESOURCE_TILING) #cpp_method;
    CheckMultisampleQualityLevels1 : (this : *ID3D11Device2, Format : DXGI_FORMAT, SampleCount : u32, Flags : u32, pNumQualityLevels : *u32) -> HRESULT #cpp_method;
}

ID3D11Device3VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11Device2VTable;

    CreateTexture2D1 : (this : *ID3D11Device3, pDesc1 : *D3D11_TEXTURE2D_DESC1, pInitialData : *D3D11_SUBRESOURCE_DATA, ppTexture2D : **ID3D11Texture2D1) -> HRESULT #cpp_method;
    CreateTexture3D1 : (this : *ID3D11Device3, pDesc1 : *D3D11_TEXTURE3D_DESC1, pInitialData : *D3D11_SUBRESOURCE_DATA, ppTexture3D : **ID3D11Texture3D1) -> HRESULT #cpp_method;
    CreateRasterizerState2 : (this : *ID3D11Device3, pRasterizerDesc : *D3D11_RASTERIZER_DESC2, ppRasterizerState : **ID3D11RasterizerState2) -> HRESULT #cpp_method;
    CreateShaderResourceView1 : (this : *ID3D11Device3, pResource : *ID3D11Resource, pDesc1 : *D3D11_SHADER_RESOURCE_VIEW_DESC1, ppSRView1 : **ID3D11ShaderResourceView1) -> HRESULT #cpp_method;
    CreateUnorderedAccessView1 : (this : *ID3D11Device3, pResource : *ID3D11Resource, pDesc1 : *D3D11_UNORDERED_ACCESS_VIEW_DESC1, ppUAView1 : **ID3D11UnorderedAccessView1) -> HRESULT #cpp_method;
    CreateRenderTargetView1 : (this : *ID3D11Device3, pResource : *ID3D11Resource, pDesc1 : *D3D11_RENDER_TARGET_VIEW_DESC1, ppRTView1 : **ID3D11RenderTargetView1) -> HRESULT #cpp_method;
    CreateQuery1 : (this : *ID3D11Device3, pQueryDesc1 : *D3D11_QUERY_DESC1, ppQuery1 : **ID3D11Query1) -> HRESULT #cpp_method;
    GetImmediateContext3 : (this : *ID3D11Device3, ppImmediateContext : **ID3D11DeviceContext3) #cpp_method;
    CreateDeferredContext3 : (this : *ID3D11Device3, ContextFlags : u32, ppDeferredContext : **ID3D11DeviceContext3) -> HRESULT #cpp_method;
    WriteToSubresource : (this : *ID3D11Device3, pDstResource : *ID3D11Resource, DstSubresource : u32, pDstBox : *D3D11_BOX, pSrcData : *void, SrcRowPitch : u32, SrcDepthPitch : u32) #cpp_method;
    ReadFromSubresource : (this : *ID3D11Device3, pDstData : *void, DstRowPitch : u32, DstDepthPitch : u32, pSrcResource : *ID3D11Resource, SrcSubresource : u32, pSrcBox : *D3D11_BOX) #cpp_method;
}

ID3D11Device4VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11Device3VTable;

    RegisterDeviceRemovedEvent : (this : *ID3D11Device4, hEvent : HANDLE, pdwCookie : *u32) -> HRESULT #cpp_method;
    UnregisterDeviceRemoved : (this : *ID3D11Device4, dwCookie : u32) #cpp_method;
}

ID3D11Device5VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11Device4VTable;

    OpenSharedFence : (this : *ID3D11Device5, hFence : HANDLE, ReturnedInterface : *GUID, ppFence : **void) -> HRESULT #cpp_method;
    CreateFence : (this : *ID3D11Device5, InitialValue : u64, Flags : D3D11_FENCE_FLAG, ReturnedInterface : *GUID, ppFence : **void) -> HRESULT #cpp_method;
}

ID3D11DeviceChildVTable :: struct
{
    #as using, except(.["base"]) base : IUnknownVTable;

    GetDevice : (this : *ID3D11DeviceChild, ppDevice : **ID3D11Device) #cpp_method;
    GetPrivateData : (this : *ID3D11DeviceChild, guid : *GUID, pDataSize : *u32, pData : *void) -> HRESULT #cpp_method;
    SetPrivateData : (this : *ID3D11DeviceChild, guid : *GUID, DataSize : u32, pData : *void) -> HRESULT #cpp_method;
    SetPrivateDataInterface : (this : *ID3D11DeviceChild, guid : *GUID, pData : *IUnknown) -> HRESULT #cpp_method;
}

ID3D11DeviceContextVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

    VSSetConstantBuffers : (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #cpp_method;
    PSSetShaderResources : (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #cpp_method;
    PSSetShader : (this : *ID3D11DeviceContext, pPixelShader : *ID3D11PixelShader, ppClassInstances : **ID3D11ClassInstance, NumClassInstances : u32) #cpp_method;
    PSSetSamplers : (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #cpp_method;
    VSSetShader : (this : *ID3D11DeviceContext, pVertexShader : *ID3D11VertexShader, ppClassInstances : **ID3D11ClassInstance, NumClassInstances : u32) #cpp_method;
    DrawIndexed : (this : *ID3D11DeviceContext, IndexCount : u32, StartIndexLocation : u32, BaseVertexLocation : s32) #cpp_method;
    Draw : (this : *ID3D11DeviceContext, VertexCount : u32, StartVertexLocation : u32) #cpp_method;
    Map : (this : *ID3D11DeviceContext, pResource : *ID3D11Resource, Subresource : u32, MapType : D3D11_MAP, MapFlags : u32, pMappedResource : *D3D11_MAPPED_SUBRESOURCE) -> HRESULT #cpp_method;
    Unmap : (this : *ID3D11DeviceContext, pResource : *ID3D11Resource, Subresource : u32) #cpp_method;
    PSSetConstantBuffers : (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #cpp_method;
    IASetInputLayout : (this : *ID3D11DeviceContext, pInputLayout : *ID3D11InputLayout) #cpp_method;
    IASetVertexBuffers : (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppVertexBuffers : **ID3D11Buffer, pStrides : *u32, pOffsets : *u32) #cpp_method;
    IASetIndexBuffer : (this : *ID3D11DeviceContext, pIndexBuffer : *ID3D11Buffer, Format : DXGI_FORMAT, Offset : u32) #cpp_method;
    DrawIndexedInstanced : (this : *ID3D11DeviceContext, IndexCountPerInstance : u32, InstanceCount : u32, StartIndexLocation : u32, BaseVertexLocation : s32, StartInstanceLocation : u32) #cpp_method;
    DrawInstanced : (this : *ID3D11DeviceContext, VertexCountPerInstance : u32, InstanceCount : u32, StartVertexLocation : u32, StartInstanceLocation : u32) #cpp_method;
    GSSetConstantBuffers : (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #cpp_method;
    GSSetShader : (this : *ID3D11DeviceContext, pShader : *ID3D11GeometryShader, ppClassInstances : **ID3D11ClassInstance, NumClassInstances : u32) #cpp_method;
    IASetPrimitiveTopology : (this : *ID3D11DeviceContext, Topology : D3D_PRIMITIVE_TOPOLOGY) #cpp_method;
    VSSetShaderResources : (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #cpp_method;
    VSSetSamplers : (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #cpp_method;
    Begin : (this : *ID3D11DeviceContext, pAsync : *ID3D11Asynchronous) #cpp_method;
    End : (this : *ID3D11DeviceContext, pAsync : *ID3D11Asynchronous) #cpp_method;
    GetData : (this : *ID3D11DeviceContext, pAsync : *ID3D11Asynchronous, pData : *void, DataSize : u32, GetDataFlags : u32) -> HRESULT #cpp_method;
    SetPredication : (this : *ID3D11DeviceContext, pPredicate : *ID3D11Predicate, PredicateValue : BOOL) #cpp_method;
    GSSetShaderResources : (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #cpp_method;
    GSSetSamplers : (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #cpp_method;
    OMSetRenderTargets : (this : *ID3D11DeviceContext, NumViews : u32, ppRenderTargetViews : **ID3D11RenderTargetView, pDepthStencilView : *ID3D11DepthStencilView) #cpp_method;
    OMSetRenderTargetsAndUnorderedAccessViews : (this : *ID3D11DeviceContext, NumRTVs : u32, ppRenderTargetViews : **ID3D11RenderTargetView, pDepthStencilView : *ID3D11DepthStencilView, UAVStartSlot : u32, NumUAVs : u32, ppUnorderedAccessViews : **ID3D11UnorderedAccessView, pUAVInitialCounts : *u32) #cpp_method;
    OMSetBlendState : (this : *ID3D11DeviceContext, pBlendState : *ID3D11BlendState, BlendFactor : *float, SampleMask : u32) #cpp_method;
    OMSetDepthStencilState : (this : *ID3D11DeviceContext, pDepthStencilState : *ID3D11DepthStencilState, StencilRef : u32) #cpp_method;
    SOSetTargets : (this : *ID3D11DeviceContext, NumBuffers : u32, ppSOTargets : **ID3D11Buffer, pOffsets : *u32) #cpp_method;
    DrawAuto : (this : *ID3D11DeviceContext) #cpp_method;
    DrawIndexedInstancedIndirect : (this : *ID3D11DeviceContext, pBufferForArgs : *ID3D11Buffer, AlignedByteOffsetForArgs : u32) #cpp_method;
    DrawInstancedIndirect : (this : *ID3D11DeviceContext, pBufferForArgs : *ID3D11Buffer, AlignedByteOffsetForArgs : u32) #cpp_method;
    Dispatch : (this : *ID3D11DeviceContext, ThreadGroupCountX : u32, ThreadGroupCountY : u32, ThreadGroupCountZ : u32) #cpp_method;
    DispatchIndirect : (this : *ID3D11DeviceContext, pBufferForArgs : *ID3D11Buffer, AlignedByteOffsetForArgs : u32) #cpp_method;
    RSSetState : (this : *ID3D11DeviceContext, pRasterizerState : *ID3D11RasterizerState) #cpp_method;
    RSSetViewports : (this : *ID3D11DeviceContext, NumViewports : u32, pViewports : *D3D11_VIEWPORT) #cpp_method;
    RSSetScissorRects : (this : *ID3D11DeviceContext, NumRects : u32, pRects : *RECT) #cpp_method;
    CopySubresourceRegion : (this : *ID3D11DeviceContext, pDstResource : *ID3D11Resource, DstSubresource : u32, DstX : u32, DstY : u32, DstZ : u32, pSrcResource : *ID3D11Resource, SrcSubresource : u32, pSrcBox : *D3D11_BOX) #cpp_method;
    CopyResource : (this : *ID3D11DeviceContext, pDstResource : *ID3D11Resource, pSrcResource : *ID3D11Resource) #cpp_method;
    UpdateSubresource : (this : *ID3D11DeviceContext, pDstResource : *ID3D11Resource, DstSubresource : u32, pDstBox : *D3D11_BOX, pSrcData : *void, SrcRowPitch : u32, SrcDepthPitch : u32) #cpp_method;
    CopyStructureCount : (this : *ID3D11DeviceContext, pDstBuffer : *ID3D11Buffer, DstAlignedByteOffset : u32, pSrcView : *ID3D11UnorderedAccessView) #cpp_method;
    ClearRenderTargetView : (this : *ID3D11DeviceContext, pRenderTargetView : *ID3D11RenderTargetView, ColorRGBA : *float) #cpp_method;
    ClearUnorderedAccessViewUint : (this : *ID3D11DeviceContext, pUnorderedAccessView : *ID3D11UnorderedAccessView, Values : *u32) #cpp_method;
    ClearUnorderedAccessViewFloat : (this : *ID3D11DeviceContext, pUnorderedAccessView : *ID3D11UnorderedAccessView, Values : *float) #cpp_method;
    ClearDepthStencilView : (this : *ID3D11DeviceContext, pDepthStencilView : *ID3D11DepthStencilView, ClearFlags : u32, Depth : float, Stencil : u8) #cpp_method;
    GenerateMips : (this : *ID3D11DeviceContext, pShaderResourceView : *ID3D11ShaderResourceView) #cpp_method;
    SetResourceMinLOD : (this : *ID3D11DeviceContext, pResource : *ID3D11Resource, MinLOD : float) #cpp_method;
    GetResourceMinLOD : (this : *ID3D11DeviceContext, pResource : *ID3D11Resource) -> float #cpp_method;
    ResolveSubresource : (this : *ID3D11DeviceContext, pDstResource : *ID3D11Resource, DstSubresource : u32, pSrcResource : *ID3D11Resource, SrcSubresource : u32, Format : DXGI_FORMAT) #cpp_method;
    ExecuteCommandList : (this : *ID3D11DeviceContext, pCommandList : *ID3D11CommandList, RestoreContextState : BOOL) #cpp_method;
    HSSetShaderResources : (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #cpp_method;
    HSSetShader : (this : *ID3D11DeviceContext, pHullShader : *ID3D11HullShader, ppClassInstances : **ID3D11ClassInstance, NumClassInstances : u32) #cpp_method;
    HSSetSamplers : (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #cpp_method;
    HSSetConstantBuffers : (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #cpp_method;
    DSSetShaderResources : (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #cpp_method;
    DSSetShader : (this : *ID3D11DeviceContext, pDomainShader : *ID3D11DomainShader, ppClassInstances : **ID3D11ClassInstance, NumClassInstances : u32) #cpp_method;
    DSSetSamplers : (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #cpp_method;
    DSSetConstantBuffers : (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #cpp_method;
    CSSetShaderResources : (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #cpp_method;
    CSSetUnorderedAccessViews : (this : *ID3D11DeviceContext, StartSlot : u32, NumUAVs : u32, ppUnorderedAccessViews : **ID3D11UnorderedAccessView, pUAVInitialCounts : *u32) #cpp_method;
    CSSetShader : (this : *ID3D11DeviceContext, pComputeShader : *ID3D11ComputeShader, ppClassInstances : **ID3D11ClassInstance, NumClassInstances : u32) #cpp_method;
    CSSetSamplers : (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #cpp_method;
    CSSetConstantBuffers : (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #cpp_method;
    VSGetConstantBuffers : (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #cpp_method;
    PSGetShaderResources : (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #cpp_method;
    PSGetShader : (this : *ID3D11DeviceContext, ppPixelShader : **ID3D11PixelShader, ppClassInstances : **ID3D11ClassInstance, pNumClassInstances : *u32) #cpp_method;
    PSGetSamplers : (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #cpp_method;
    VSGetShader : (this : *ID3D11DeviceContext, ppVertexShader : **ID3D11VertexShader, ppClassInstances : **ID3D11ClassInstance, pNumClassInstances : *u32) #cpp_method;
    PSGetConstantBuffers : (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #cpp_method;
    IAGetInputLayout : (this : *ID3D11DeviceContext, ppInputLayout : **ID3D11InputLayout) #cpp_method;
    IAGetVertexBuffers : (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppVertexBuffers : **ID3D11Buffer, pStrides : *u32, pOffsets : *u32) #cpp_method;
    IAGetIndexBuffer : (this : *ID3D11DeviceContext, pIndexBuffer : **ID3D11Buffer, Format : *DXGI_FORMAT, Offset : *u32) #cpp_method;
    GSGetConstantBuffers : (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #cpp_method;
    GSGetShader : (this : *ID3D11DeviceContext, ppGeometryShader : **ID3D11GeometryShader, ppClassInstances : **ID3D11ClassInstance, pNumClassInstances : *u32) #cpp_method;
    IAGetPrimitiveTopology : (this : *ID3D11DeviceContext, pTopology : *D3D_PRIMITIVE_TOPOLOGY) #cpp_method;
    VSGetShaderResources : (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #cpp_method;
    VSGetSamplers : (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #cpp_method;
    GetPredication : (this : *ID3D11DeviceContext, ppPredicate : **ID3D11Predicate, pPredicateValue : *BOOL) #cpp_method;
    GSGetShaderResources : (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #cpp_method;
    GSGetSamplers : (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #cpp_method;
    OMGetRenderTargets : (this : *ID3D11DeviceContext, NumViews : u32, ppRenderTargetViews : **ID3D11RenderTargetView, ppDepthStencilView : **ID3D11DepthStencilView) #cpp_method;
    OMGetRenderTargetsAndUnorderedAccessViews : (this : *ID3D11DeviceContext, NumRTVs : u32, ppRenderTargetViews : **ID3D11RenderTargetView, ppDepthStencilView : **ID3D11DepthStencilView, UAVStartSlot : u32, NumUAVs : u32, ppUnorderedAccessViews : **ID3D11UnorderedAccessView) #cpp_method;
    OMGetBlendState : (this : *ID3D11DeviceContext, ppBlendState : **ID3D11BlendState, BlendFactor : *float, pSampleMask : *u32) #cpp_method;
    OMGetDepthStencilState : (this : *ID3D11DeviceContext, ppDepthStencilState : **ID3D11DepthStencilState, pStencilRef : *u32) #cpp_method;
    SOGetTargets : (this : *ID3D11DeviceContext, NumBuffers : u32, ppSOTargets : **ID3D11Buffer) #cpp_method;
    RSGetState : (this : *ID3D11DeviceContext, ppRasterizerState : **ID3D11RasterizerState) #cpp_method;
    RSGetViewports : (this : *ID3D11DeviceContext, pNumViewports : *u32, pViewports : *D3D11_VIEWPORT) #cpp_method;
    RSGetScissorRects : (this : *ID3D11DeviceContext, pNumRects : *u32, pRects : *RECT) #cpp_method;
    HSGetShaderResources : (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #cpp_method;
    HSGetShader : (this : *ID3D11DeviceContext, ppHullShader : **ID3D11HullShader, ppClassInstances : **ID3D11ClassInstance, pNumClassInstances : *u32) #cpp_method;
    HSGetSamplers : (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #cpp_method;
    HSGetConstantBuffers : (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #cpp_method;
    DSGetShaderResources : (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #cpp_method;
    DSGetShader : (this : *ID3D11DeviceContext, ppDomainShader : **ID3D11DomainShader, ppClassInstances : **ID3D11ClassInstance, pNumClassInstances : *u32) #cpp_method;
    DSGetSamplers : (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #cpp_method;
    DSGetConstantBuffers : (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #cpp_method;
    CSGetShaderResources : (this : *ID3D11DeviceContext, StartSlot : u32, NumViews : u32, ppShaderResourceViews : **ID3D11ShaderResourceView) #cpp_method;
    CSGetUnorderedAccessViews : (this : *ID3D11DeviceContext, StartSlot : u32, NumUAVs : u32, ppUnorderedAccessViews : **ID3D11UnorderedAccessView) #cpp_method;
    CSGetShader : (this : *ID3D11DeviceContext, ppComputeShader : **ID3D11ComputeShader, ppClassInstances : **ID3D11ClassInstance, pNumClassInstances : *u32) #cpp_method;
    CSGetSamplers : (this : *ID3D11DeviceContext, StartSlot : u32, NumSamplers : u32, ppSamplers : **ID3D11SamplerState) #cpp_method;
    CSGetConstantBuffers : (this : *ID3D11DeviceContext, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer) #cpp_method;
    ClearState : (this : *ID3D11DeviceContext) #cpp_method;
    Flush : (this : *ID3D11DeviceContext) #cpp_method;
    GetType : (this : *ID3D11DeviceContext) -> D3D11_DEVICE_CONTEXT_TYPE #cpp_method;
    GetContextFlags : (this : *ID3D11DeviceContext) -> u32 #cpp_method;
    FinishCommandList : (this : *ID3D11DeviceContext, RestoreDeferredContextState : BOOL, ppCommandList : **ID3D11CommandList) -> HRESULT #cpp_method;
}

ID3D11DeviceContext1VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceContextVTable;

    CopySubresourceRegion1 : (this : *ID3D11DeviceContext1, pDstResource : *ID3D11Resource, DstSubresource : u32, DstX : u32, DstY : u32, DstZ : u32, pSrcResource : *ID3D11Resource, SrcSubresource : u32, pSrcBox : *D3D11_BOX, CopyFlags : u32) #cpp_method;
    UpdateSubresource1 : (this : *ID3D11DeviceContext1, pDstResource : *ID3D11Resource, DstSubresource : u32, pDstBox : *D3D11_BOX, pSrcData : *void, SrcRowPitch : u32, SrcDepthPitch : u32, CopyFlags : u32) #cpp_method;
    DiscardResource : (this : *ID3D11DeviceContext1, pResource : *ID3D11Resource) #cpp_method;
    DiscardView : (this : *ID3D11DeviceContext1, pResourceView : *ID3D11View) #cpp_method;
    VSSetConstantBuffers1 : (this : *ID3D11DeviceContext1, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer, pFirstConstant : *u32, pNumConstants : *u32) #cpp_method;
    HSSetConstantBuffers1 : (this : *ID3D11DeviceContext1, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer, pFirstConstant : *u32, pNumConstants : *u32) #cpp_method;
    DSSetConstantBuffers1 : (this : *ID3D11DeviceContext1, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer, pFirstConstant : *u32, pNumConstants : *u32) #cpp_method;
    GSSetConstantBuffers1 : (this : *ID3D11DeviceContext1, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer, pFirstConstant : *u32, pNumConstants : *u32) #cpp_method;
    PSSetConstantBuffers1 : (this : *ID3D11DeviceContext1, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer, pFirstConstant : *u32, pNumConstants : *u32) #cpp_method;
    CSSetConstantBuffers1 : (this : *ID3D11DeviceContext1, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer, pFirstConstant : *u32, pNumConstants : *u32) #cpp_method;
    VSGetConstantBuffers1 : (this : *ID3D11DeviceContext1, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer, pFirstConstant : *u32, pNumConstants : *u32) #cpp_method;
    HSGetConstantBuffers1 : (this : *ID3D11DeviceContext1, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer, pFirstConstant : *u32, pNumConstants : *u32) #cpp_method;
    DSGetConstantBuffers1 : (this : *ID3D11DeviceContext1, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer, pFirstConstant : *u32, pNumConstants : *u32) #cpp_method;
    GSGetConstantBuffers1 : (this : *ID3D11DeviceContext1, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer, pFirstConstant : *u32, pNumConstants : *u32) #cpp_method;
    PSGetConstantBuffers1 : (this : *ID3D11DeviceContext1, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer, pFirstConstant : *u32, pNumConstants : *u32) #cpp_method;
    CSGetConstantBuffers1 : (this : *ID3D11DeviceContext1, StartSlot : u32, NumBuffers : u32, ppConstantBuffers : **ID3D11Buffer, pFirstConstant : *u32, pNumConstants : *u32) #cpp_method;
    SwapDeviceContextState : (this : *ID3D11DeviceContext1, pState : *ID3DDeviceContextState, ppPreviousState : **ID3DDeviceContextState) #cpp_method;
    ClearView : (this : *ID3D11DeviceContext1, pView : *ID3D11View, Color : *float, pRect : *RECT, NumRects : u32) #cpp_method;
    DiscardView1 : (this : *ID3D11DeviceContext1, pResourceView : *ID3D11View, pRects : *RECT, NumRects : u32) #cpp_method;
}

ID3D11DeviceContext2VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceContext1VTable;

    UpdateTileMappings : (this : *ID3D11DeviceContext2, pTiledResource : *ID3D11Resource, NumTiledResourceRegions : u32, pTiledResourceRegionStartCoordinates : *D3D11_TILED_RESOURCE_COORDINATE, pTiledResourceRegionSizes : *D3D11_TILE_REGION_SIZE, pTilePool : *ID3D11Buffer, NumRanges : u32, pRangeFlags : *u32, pTilePoolStartOffsets : *u32, pRangeTileCounts : *u32, Flags : u32) -> HRESULT #cpp_method;
    CopyTileMappings : (this : *ID3D11DeviceContext2, pDestTiledResource : *ID3D11Resource, pDestRegionStartCoordinate : *D3D11_TILED_RESOURCE_COORDINATE, pSourceTiledResource : *ID3D11Resource, pSourceRegionStartCoordinate : *D3D11_TILED_RESOURCE_COORDINATE, pTileRegionSize : *D3D11_TILE_REGION_SIZE, Flags : u32) -> HRESULT #cpp_method;
    CopyTiles : (this : *ID3D11DeviceContext2, pTiledResource : *ID3D11Resource, pTileRegionStartCoordinate : *D3D11_TILED_RESOURCE_COORDINATE, pTileRegionSize : *D3D11_TILE_REGION_SIZE, pBuffer : *ID3D11Buffer, BufferStartOffsetInBytes : u64, Flags : u32) #cpp_method;
    UpdateTiles : (this : *ID3D11DeviceContext2, pDestTiledResource : *ID3D11Resource, pDestTileRegionStartCoordinate : *D3D11_TILED_RESOURCE_COORDINATE, pDestTileRegionSize : *D3D11_TILE_REGION_SIZE, pSourceTileData : *void, Flags : u32) #cpp_method;
    ResizeTilePool : (this : *ID3D11DeviceContext2, pTilePool : *ID3D11Buffer, NewSizeInBytes : u64) -> HRESULT #cpp_method;
    TiledResourceBarrier : (this : *ID3D11DeviceContext2, pTiledResourceOrViewAccessBeforeBarrier : *ID3D11DeviceChild, pTiledResourceOrViewAccessAfterBarrier : *ID3D11DeviceChild) #cpp_method;
    IsAnnotationEnabled : (this : *ID3D11DeviceContext2) -> BOOL #cpp_method;
    SetMarkerInt : (this : *ID3D11DeviceContext2, pLabel : PWSTR, Data : s32) #cpp_method;
    BeginEventInt : (this : *ID3D11DeviceContext2, pLabel : PWSTR, Data : s32) #cpp_method;
    EndEvent : (this : *ID3D11DeviceContext2) #cpp_method;
}

ID3D11DeviceContext3VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceContext2VTable;

    Flush1 : (this : *ID3D11DeviceContext3, ContextType : D3D11_CONTEXT_TYPE, hEvent : HANDLE) #cpp_method;
    SetHardwareProtectionState : (this : *ID3D11DeviceContext3, HwProtectionEnable : BOOL) #cpp_method;
    GetHardwareProtectionState : (this : *ID3D11DeviceContext3, pHwProtectionEnable : *BOOL) #cpp_method;
}

ID3D11DeviceContext4VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceContext3VTable;

    Signal : (this : *ID3D11DeviceContext4, pFence : *ID3D11Fence, Value : u64) -> HRESULT #cpp_method;
    Wait : (this : *ID3D11DeviceContext4, pFence : *ID3D11Fence, Value : u64) -> HRESULT #cpp_method;
}

ID3D11DomainShaderVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

}

ID3D11FenceVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

    CreateSharedHandle : (this : *ID3D11Fence, pAttributes : *SECURITY_ATTRIBUTES, dwAccess : u32, lpName : PWSTR, pHandle : *HANDLE) -> HRESULT #cpp_method;
    GetCompletedValue : (this : *ID3D11Fence) -> u64 #cpp_method;
    SetEventOnCompletion : (this : *ID3D11Fence, Value : u64, hEvent : HANDLE) -> HRESULT #cpp_method;
}

ID3D11FunctionLinkingGraphVTable :: struct
{
    #as using, except(.["base"]) base : IUnknownVTable;

    CreateModuleInstance : (this : *ID3D11FunctionLinkingGraph, ppModuleInstance : **ID3D11ModuleInstance, ppErrorBuffer : **ID3DBlob) -> HRESULT #cpp_method;
    SetInputSignature : (this : *ID3D11FunctionLinkingGraph, pInputParameters : *D3D11_PARAMETER_DESC, cInputParameters : u32, ppInputNode : **ID3D11LinkingNode) -> HRESULT #cpp_method;
    SetOutputSignature : (this : *ID3D11FunctionLinkingGraph, pOutputParameters : *D3D11_PARAMETER_DESC, cOutputParameters : u32, ppOutputNode : **ID3D11LinkingNode) -> HRESULT #cpp_method;
    CallFunction : (this : *ID3D11FunctionLinkingGraph, pModuleInstanceNamespace : PSTR, pModuleWithFunctionPrototype : *ID3D11Module, pFunctionName : PSTR, ppCallNode : **ID3D11LinkingNode) -> HRESULT #cpp_method;
    PassValue : (this : *ID3D11FunctionLinkingGraph, pSrcNode : *ID3D11LinkingNode, SrcParameterIndex : s32, pDstNode : *ID3D11LinkingNode, DstParameterIndex : s32) -> HRESULT #cpp_method;
    PassValueWithSwizzle : (this : *ID3D11FunctionLinkingGraph, pSrcNode : *ID3D11LinkingNode, SrcParameterIndex : s32, pSrcSwizzle : PSTR, pDstNode : *ID3D11LinkingNode, DstParameterIndex : s32, pDstSwizzle : PSTR) -> HRESULT #cpp_method;
    GetLastError : (this : *ID3D11FunctionLinkingGraph, ppErrorBuffer : **ID3DBlob) -> HRESULT #cpp_method;
    GenerateHlsl : (this : *ID3D11FunctionLinkingGraph, uFlags : u32, ppBuffer : **ID3DBlob) -> HRESULT #cpp_method;
}

ID3D11FunctionParameterReflectionVTable :: struct
{
    GetDesc : (this : *ID3D11FunctionParameterReflection, pDesc : *D3D11_PARAMETER_DESC) -> HRESULT #cpp_method;
}

ID3D11FunctionReflectionVTable :: struct
{
    GetDesc : (this : *ID3D11FunctionReflection, pDesc : *D3D11_FUNCTION_DESC) -> HRESULT #cpp_method;
    GetConstantBufferByIndex : (this : *ID3D11FunctionReflection, BufferIndex : u32) -> *ID3D11ShaderReflectionConstantBuffer #cpp_method;
    GetConstantBufferByName : (this : *ID3D11FunctionReflection, Name : PSTR) -> *ID3D11ShaderReflectionConstantBuffer #cpp_method;
    GetResourceBindingDesc : (this : *ID3D11FunctionReflection, ResourceIndex : u32, pDesc : *D3D11_SHADER_INPUT_BIND_DESC) -> HRESULT #cpp_method;
    GetVariableByName : (this : *ID3D11FunctionReflection, Name : PSTR) -> *ID3D11ShaderReflectionVariable #cpp_method;
    GetResourceBindingDescByName : (this : *ID3D11FunctionReflection, Name : PSTR, pDesc : *D3D11_SHADER_INPUT_BIND_DESC) -> HRESULT #cpp_method;
    GetFunctionParameter : (this : *ID3D11FunctionReflection, ParameterIndex : s32) -> *ID3D11FunctionParameterReflection #cpp_method;
}

ID3D11GeometryShaderVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

}

ID3D11HullShaderVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

}

ID3D11InfoQueueVTable :: struct
{
    #as using, except(.["base"]) base : IUnknownVTable;

    SetMessageCountLimit : (this : *ID3D11InfoQueue, MessageCountLimit : u64) -> HRESULT #cpp_method;
    ClearStoredMessages : (this : *ID3D11InfoQueue) #cpp_method;
    GetMessage : (this : *ID3D11InfoQueue, MessageIndex : u64, pMessage : *D3D11_MESSAGE, pMessageByteLength : *u64) -> HRESULT #cpp_method;
    GetNumMessagesAllowedByStorageFilter : (this : *ID3D11InfoQueue) -> u64 #cpp_method;
    GetNumMessagesDeniedByStorageFilter : (this : *ID3D11InfoQueue) -> u64 #cpp_method;
    GetNumStoredMessages : (this : *ID3D11InfoQueue) -> u64 #cpp_method;
    GetNumStoredMessagesAllowedByRetrievalFilter : (this : *ID3D11InfoQueue) -> u64 #cpp_method;
    GetNumMessagesDiscardedByMessageCountLimit : (this : *ID3D11InfoQueue) -> u64 #cpp_method;
    GetMessageCountLimit : (this : *ID3D11InfoQueue) -> u64 #cpp_method;
    AddStorageFilterEntries : (this : *ID3D11InfoQueue, pFilter : *D3D11_INFO_QUEUE_FILTER) -> HRESULT #cpp_method;
    GetStorageFilter : (this : *ID3D11InfoQueue, pFilter : *D3D11_INFO_QUEUE_FILTER, pFilterByteLength : *u64) -> HRESULT #cpp_method;
    ClearStorageFilter : (this : *ID3D11InfoQueue) #cpp_method;
    PushEmptyStorageFilter : (this : *ID3D11InfoQueue) -> HRESULT #cpp_method;
    PushCopyOfStorageFilter : (this : *ID3D11InfoQueue) -> HRESULT #cpp_method;
    PushStorageFilter : (this : *ID3D11InfoQueue, pFilter : *D3D11_INFO_QUEUE_FILTER) -> HRESULT #cpp_method;
    PopStorageFilter : (this : *ID3D11InfoQueue) #cpp_method;
    GetStorageFilterStackSize : (this : *ID3D11InfoQueue) -> u32 #cpp_method;
    AddRetrievalFilterEntries : (this : *ID3D11InfoQueue, pFilter : *D3D11_INFO_QUEUE_FILTER) -> HRESULT #cpp_method;
    GetRetrievalFilter : (this : *ID3D11InfoQueue, pFilter : *D3D11_INFO_QUEUE_FILTER, pFilterByteLength : *u64) -> HRESULT #cpp_method;
    ClearRetrievalFilter : (this : *ID3D11InfoQueue) #cpp_method;
    PushEmptyRetrievalFilter : (this : *ID3D11InfoQueue) -> HRESULT #cpp_method;
    PushCopyOfRetrievalFilter : (this : *ID3D11InfoQueue) -> HRESULT #cpp_method;
    PushRetrievalFilter : (this : *ID3D11InfoQueue, pFilter : *D3D11_INFO_QUEUE_FILTER) -> HRESULT #cpp_method;
    PopRetrievalFilter : (this : *ID3D11InfoQueue) #cpp_method;
    GetRetrievalFilterStackSize : (this : *ID3D11InfoQueue) -> u32 #cpp_method;
    AddMessage : (this : *ID3D11InfoQueue, Category : D3D11_MESSAGE_CATEGORY, Severity : D3D11_MESSAGE_SEVERITY, ID : D3D11_MESSAGE_ID, pDescription : PSTR) -> HRESULT #cpp_method;
    AddApplicationMessage : (this : *ID3D11InfoQueue, Severity : D3D11_MESSAGE_SEVERITY, pDescription : PSTR) -> HRESULT #cpp_method;
    SetBreakOnCategory : (this : *ID3D11InfoQueue, Category : D3D11_MESSAGE_CATEGORY, bEnable : BOOL) -> HRESULT #cpp_method;
    SetBreakOnSeverity : (this : *ID3D11InfoQueue, Severity : D3D11_MESSAGE_SEVERITY, bEnable : BOOL) -> HRESULT #cpp_method;
    SetBreakOnID : (this : *ID3D11InfoQueue, ID : D3D11_MESSAGE_ID, bEnable : BOOL) -> HRESULT #cpp_method;
    GetBreakOnCategory : (this : *ID3D11InfoQueue, Category : D3D11_MESSAGE_CATEGORY) -> BOOL #cpp_method;
    GetBreakOnSeverity : (this : *ID3D11InfoQueue, Severity : D3D11_MESSAGE_SEVERITY) -> BOOL #cpp_method;
    GetBreakOnID : (this : *ID3D11InfoQueue, ID : D3D11_MESSAGE_ID) -> BOOL #cpp_method;
    SetMuteDebugOutput : (this : *ID3D11InfoQueue, bMute : BOOL) #cpp_method;
    GetMuteDebugOutput : (this : *ID3D11InfoQueue) -> BOOL #cpp_method;
}

ID3D11InputLayoutVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

}

ID3D11LibraryReflectionVTable :: struct
{
    #as using, except(.["base"]) base : IUnknownVTable;

    GetDesc : (this : *ID3D11LibraryReflection, pDesc : *D3D11_LIBRARY_DESC) -> HRESULT #cpp_method;
    GetFunctionByIndex : (this : *ID3D11LibraryReflection, FunctionIndex : s32) -> *ID3D11FunctionReflection #cpp_method;
}

ID3D11LinkerVTable :: struct
{
    #as using, except(.["base"]) base : IUnknownVTable;

    Link : (this : *ID3D11Linker, pEntry : *ID3D11ModuleInstance, pEntryName : PSTR, pTargetName : PSTR, uFlags : u32, ppShaderBlob : **ID3DBlob, ppErrorBuffer : **ID3DBlob) -> HRESULT #cpp_method;
    UseLibrary : (this : *ID3D11Linker, pLibraryMI : *ID3D11ModuleInstance) -> HRESULT #cpp_method;
    AddClipPlaneFromCBuffer : (this : *ID3D11Linker, uCBufferSlot : u32, uCBufferEntry : u32) -> HRESULT #cpp_method;
}

ID3D11LinkingNodeVTable :: struct
{
    #as using, except(.["base"]) base : IUnknownVTable;

}

ID3D11ModuleVTable :: struct
{
    #as using, except(.["base"]) base : IUnknownVTable;

    CreateInstance : (this : *ID3D11Module, pNamespace : PSTR, ppModuleInstance : **ID3D11ModuleInstance) -> HRESULT #cpp_method;
}

ID3D11ModuleInstanceVTable :: struct
{
    #as using, except(.["base"]) base : IUnknownVTable;

    BindConstantBuffer : (this : *ID3D11ModuleInstance, uSrcSlot : u32, uDstSlot : u32, cbDstOffset : u32) -> HRESULT #cpp_method;
    BindConstantBufferByName : (this : *ID3D11ModuleInstance, pName : PSTR, uDstSlot : u32, cbDstOffset : u32) -> HRESULT #cpp_method;
    BindResource : (this : *ID3D11ModuleInstance, uSrcSlot : u32, uDstSlot : u32, uCount : u32) -> HRESULT #cpp_method;
    BindResourceByName : (this : *ID3D11ModuleInstance, pName : PSTR, uDstSlot : u32, uCount : u32) -> HRESULT #cpp_method;
    BindSampler : (this : *ID3D11ModuleInstance, uSrcSlot : u32, uDstSlot : u32, uCount : u32) -> HRESULT #cpp_method;
    BindSamplerByName : (this : *ID3D11ModuleInstance, pName : PSTR, uDstSlot : u32, uCount : u32) -> HRESULT #cpp_method;
    BindUnorderedAccessView : (this : *ID3D11ModuleInstance, uSrcSlot : u32, uDstSlot : u32, uCount : u32) -> HRESULT #cpp_method;
    BindUnorderedAccessViewByName : (this : *ID3D11ModuleInstance, pName : PSTR, uDstSlot : u32, uCount : u32) -> HRESULT #cpp_method;
    BindResourceAsUnorderedAccessView : (this : *ID3D11ModuleInstance, uSrcSrvSlot : u32, uDstUavSlot : u32, uCount : u32) -> HRESULT #cpp_method;
    BindResourceAsUnorderedAccessViewByName : (this : *ID3D11ModuleInstance, pSrvName : PSTR, uDstUavSlot : u32, uCount : u32) -> HRESULT #cpp_method;
}

ID3D11MultithreadVTable :: struct
{
    #as using, except(.["base"]) base : IUnknownVTable;

    Enter : (this : *ID3D11Multithread) #cpp_method;
    Leave : (this : *ID3D11Multithread) #cpp_method;
    SetMultithreadProtected : (this : *ID3D11Multithread, bMTProtect : BOOL) -> BOOL #cpp_method;
    GetMultithreadProtected : (this : *ID3D11Multithread) -> BOOL #cpp_method;
}

ID3D11PixelShaderVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

}

ID3D11PredicateVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11QueryVTable;

}

ID3D11QueryVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11AsynchronousVTable;

    GetDesc : (this : *ID3D11Query, pDesc : *D3D11_QUERY_DESC) #cpp_method;
}

ID3D11Query1VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11QueryVTable;

    GetDesc1 : (this : *ID3D11Query1, pDesc1 : *D3D11_QUERY_DESC1) #cpp_method;
}

ID3D11RasterizerStateVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

    GetDesc : (this : *ID3D11RasterizerState, pDesc : *D3D11_RASTERIZER_DESC) #cpp_method;
}

ID3D11RasterizerState1VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11RasterizerStateVTable;

    GetDesc1 : (this : *ID3D11RasterizerState1, pDesc : *D3D11_RASTERIZER_DESC1) #cpp_method;
}

ID3D11RasterizerState2VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11RasterizerState1VTable;

    GetDesc2 : (this : *ID3D11RasterizerState2, pDesc : *D3D11_RASTERIZER_DESC2) #cpp_method;
}

ID3D11RefDefaultTrackingOptionsVTable :: struct
{
    #as using, except(.["base"]) base : IUnknownVTable;

    SetTrackingOptions : (this : *ID3D11RefDefaultTrackingOptions, ResourceTypeFlags : u32, Options : u32) -> HRESULT #cpp_method;
}

ID3D11RefTrackingOptionsVTable :: struct
{
    #as using, except(.["base"]) base : IUnknownVTable;

    SetTrackingOptions : (this : *ID3D11RefTrackingOptions, uOptions : u32) -> HRESULT #cpp_method;
}

ID3D11RenderTargetViewVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11ViewVTable;

    GetDesc : (this : *ID3D11RenderTargetView, pDesc : *D3D11_RENDER_TARGET_VIEW_DESC) #cpp_method;
}

ID3D11RenderTargetView1VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11RenderTargetViewVTable;

    GetDesc1 : (this : *ID3D11RenderTargetView1, pDesc1 : *D3D11_RENDER_TARGET_VIEW_DESC1) #cpp_method;
}

ID3D11ResourceVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

    GetType : (this : *ID3D11Resource, pResourceDimension : *D3D11_RESOURCE_DIMENSION) #cpp_method;
    SetEvictionPriority : (this : *ID3D11Resource, EvictionPriority : u32) #cpp_method;
    GetEvictionPriority : (this : *ID3D11Resource) -> u32 #cpp_method;
}

ID3D11SamplerStateVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

    GetDesc : (this : *ID3D11SamplerState, pDesc : *D3D11_SAMPLER_DESC) #cpp_method;
}

ID3D11ShaderReflectionVTable :: struct
{
    #as using, except(.["base"]) base : IUnknownVTable;

    GetDesc : (this : *ID3D11ShaderReflection, pDesc : *D3D11_SHADER_DESC) -> HRESULT #cpp_method;
    GetConstantBufferByIndex : (this : *ID3D11ShaderReflection, Index : u32) -> *ID3D11ShaderReflectionConstantBuffer #cpp_method;
    GetConstantBufferByName : (this : *ID3D11ShaderReflection, Name : PSTR) -> *ID3D11ShaderReflectionConstantBuffer #cpp_method;
    GetResourceBindingDesc : (this : *ID3D11ShaderReflection, ResourceIndex : u32, pDesc : *D3D11_SHADER_INPUT_BIND_DESC) -> HRESULT #cpp_method;
    GetInputParameterDesc : (this : *ID3D11ShaderReflection, ParameterIndex : u32, pDesc : *D3D11_SIGNATURE_PARAMETER_DESC) -> HRESULT #cpp_method;
    GetOutputParameterDesc : (this : *ID3D11ShaderReflection, ParameterIndex : u32, pDesc : *D3D11_SIGNATURE_PARAMETER_DESC) -> HRESULT #cpp_method;
    GetPatchConstantParameterDesc : (this : *ID3D11ShaderReflection, ParameterIndex : u32, pDesc : *D3D11_SIGNATURE_PARAMETER_DESC) -> HRESULT #cpp_method;
    GetVariableByName : (this : *ID3D11ShaderReflection, Name : PSTR) -> *ID3D11ShaderReflectionVariable #cpp_method;
    GetResourceBindingDescByName : (this : *ID3D11ShaderReflection, Name : PSTR, pDesc : *D3D11_SHADER_INPUT_BIND_DESC) -> HRESULT #cpp_method;
    GetMovInstructionCount : (this : *ID3D11ShaderReflection) -> u32 #cpp_method;
    GetMovcInstructionCount : (this : *ID3D11ShaderReflection) -> u32 #cpp_method;
    GetConversionInstructionCount : (this : *ID3D11ShaderReflection) -> u32 #cpp_method;
    GetBitwiseInstructionCount : (this : *ID3D11ShaderReflection) -> u32 #cpp_method;
    GetGSInputPrimitive : (this : *ID3D11ShaderReflection) -> D3D_PRIMITIVE #cpp_method;
    IsSampleFrequencyShader : (this : *ID3D11ShaderReflection) -> BOOL #cpp_method;
    GetNumInterfaceSlots : (this : *ID3D11ShaderReflection) -> u32 #cpp_method;
    GetMinFeatureLevel : (this : *ID3D11ShaderReflection, pLevel : *D3D_FEATURE_LEVEL) -> HRESULT #cpp_method;
    GetThreadGroupSize : (this : *ID3D11ShaderReflection, pSizeX : *u32, pSizeY : *u32, pSizeZ : *u32) -> u32 #cpp_method;
    GetRequiresFlags : (this : *ID3D11ShaderReflection) -> u64 #cpp_method;
}

ID3D11ShaderReflectionConstantBufferVTable :: struct
{
    GetDesc : (this : *ID3D11ShaderReflectionConstantBuffer, pDesc : *D3D11_SHADER_BUFFER_DESC) -> HRESULT #cpp_method;
    GetVariableByIndex : (this : *ID3D11ShaderReflectionConstantBuffer, Index : u32) -> *ID3D11ShaderReflectionVariable #cpp_method;
    GetVariableByName : (this : *ID3D11ShaderReflectionConstantBuffer, Name : PSTR) -> *ID3D11ShaderReflectionVariable #cpp_method;
}

ID3D11ShaderReflectionTypeVTable :: struct
{
    GetDesc : (this : *ID3D11ShaderReflectionType, pDesc : *D3D11_SHADER_TYPE_DESC) -> HRESULT #cpp_method;
    GetMemberTypeByIndex : (this : *ID3D11ShaderReflectionType, Index : u32) -> *ID3D11ShaderReflectionType #cpp_method;
    GetMemberTypeByName : (this : *ID3D11ShaderReflectionType, Name : PSTR) -> *ID3D11ShaderReflectionType #cpp_method;
    GetMemberTypeName : (this : *ID3D11ShaderReflectionType, Index : u32) -> PSTR #cpp_method;
    IsEqual : (this : *ID3D11ShaderReflectionType, pType : *ID3D11ShaderReflectionType) -> HRESULT #cpp_method;
    GetSubType : (this : *ID3D11ShaderReflectionType) -> *ID3D11ShaderReflectionType #cpp_method;
    GetBaseClass : (this : *ID3D11ShaderReflectionType) -> *ID3D11ShaderReflectionType #cpp_method;
    GetNumInterfaces : (this : *ID3D11ShaderReflectionType) -> u32 #cpp_method;
    GetInterfaceByIndex : (this : *ID3D11ShaderReflectionType, uIndex : u32) -> *ID3D11ShaderReflectionType #cpp_method;
    IsOfType : (this : *ID3D11ShaderReflectionType, pType : *ID3D11ShaderReflectionType) -> HRESULT #cpp_method;
    ImplementsInterface : (this : *ID3D11ShaderReflectionType, pBase : *ID3D11ShaderReflectionType) -> HRESULT #cpp_method;
}

ID3D11ShaderReflectionVariableVTable :: struct
{
    GetDesc : (this : *ID3D11ShaderReflectionVariable, pDesc : *D3D11_SHADER_VARIABLE_DESC) -> HRESULT #cpp_method;
    GetType : (this : *ID3D11ShaderReflectionVariable) -> *ID3D11ShaderReflectionType #cpp_method;
    GetBuffer : (this : *ID3D11ShaderReflectionVariable) -> *ID3D11ShaderReflectionConstantBuffer #cpp_method;
    GetInterfaceSlot : (this : *ID3D11ShaderReflectionVariable, uArrayIndex : u32) -> u32 #cpp_method;
}

ID3D11ShaderResourceViewVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11ViewVTable;

    GetDesc : (this : *ID3D11ShaderResourceView, pDesc : *D3D11_SHADER_RESOURCE_VIEW_DESC) #cpp_method;
}

ID3D11ShaderResourceView1VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11ShaderResourceViewVTable;

    GetDesc1 : (this : *ID3D11ShaderResourceView1, pDesc1 : *D3D11_SHADER_RESOURCE_VIEW_DESC1) #cpp_method;
}

ID3D11ShaderTraceVTable :: struct
{
    #as using, except(.["base"]) base : IUnknownVTable;

    TraceReady : (this : *ID3D11ShaderTrace, pTestCount : *u64) -> HRESULT #cpp_method;
    ResetTrace : (this : *ID3D11ShaderTrace) #cpp_method;
    GetTraceStats : (this : *ID3D11ShaderTrace, pTraceStats : *D3D11_TRACE_STATS) -> HRESULT #cpp_method;
    PSSelectStamp : (this : *ID3D11ShaderTrace, stampIndex : u32) -> HRESULT #cpp_method;
    GetInitialRegisterContents : (this : *ID3D11ShaderTrace, pRegister : *D3D11_TRACE_REGISTER, pValue : *D3D11_TRACE_VALUE) -> HRESULT #cpp_method;
    GetStep : (this : *ID3D11ShaderTrace, stepIndex : u32, pTraceStep : *D3D11_TRACE_STEP) -> HRESULT #cpp_method;
    GetWrittenRegister : (this : *ID3D11ShaderTrace, stepIndex : u32, writtenRegisterIndex : u32, pRegister : *D3D11_TRACE_REGISTER, pValue : *D3D11_TRACE_VALUE) -> HRESULT #cpp_method;
    GetReadRegister : (this : *ID3D11ShaderTrace, stepIndex : u32, readRegisterIndex : u32, pRegister : *D3D11_TRACE_REGISTER, pValue : *D3D11_TRACE_VALUE) -> HRESULT #cpp_method;
}

ID3D11ShaderTraceFactoryVTable :: struct
{
    #as using, except(.["base"]) base : IUnknownVTable;

    CreateShaderTrace : (this : *ID3D11ShaderTraceFactory, pShader : *IUnknown, pTraceDesc : *D3D11_SHADER_TRACE_DESC, ppShaderTrace : **ID3D11ShaderTrace) -> HRESULT #cpp_method;
}

ID3D11SwitchToRefVTable :: struct
{
    #as using, except(.["base"]) base : IUnknownVTable;

    SetUseRef : (this : *ID3D11SwitchToRef, UseRef : BOOL) -> BOOL #cpp_method;
    GetUseRef : (this : *ID3D11SwitchToRef) -> BOOL #cpp_method;
}

ID3D11Texture1DVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11ResourceVTable;

    GetDesc : (this : *ID3D11Texture1D, pDesc : *D3D11_TEXTURE1D_DESC) #cpp_method;
}

ID3D11Texture2DVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11ResourceVTable;

    GetDesc : (this : *ID3D11Texture2D, pDesc : *D3D11_TEXTURE2D_DESC) #cpp_method;
}

ID3D11Texture2D1VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11Texture2DVTable;

    GetDesc1 : (this : *ID3D11Texture2D1, pDesc : *D3D11_TEXTURE2D_DESC1) #cpp_method;
}

ID3D11Texture3DVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11ResourceVTable;

    GetDesc : (this : *ID3D11Texture3D, pDesc : *D3D11_TEXTURE3D_DESC) #cpp_method;
}

ID3D11Texture3D1VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11Texture3DVTable;

    GetDesc1 : (this : *ID3D11Texture3D1, pDesc : *D3D11_TEXTURE3D_DESC1) #cpp_method;
}

ID3D11TracingDeviceVTable :: struct
{
    #as using, except(.["base"]) base : IUnknownVTable;

    SetShaderTrackingOptionsByType : (this : *ID3D11TracingDevice, ResourceTypeFlags : u32, Options : u32) -> HRESULT #cpp_method;
    SetShaderTrackingOptions : (this : *ID3D11TracingDevice, pShader : *IUnknown, Options : u32) -> HRESULT #cpp_method;
}

ID3D11UnorderedAccessViewVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11ViewVTable;

    GetDesc : (this : *ID3D11UnorderedAccessView, pDesc : *D3D11_UNORDERED_ACCESS_VIEW_DESC) #cpp_method;
}

ID3D11UnorderedAccessView1VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11UnorderedAccessViewVTable;

    GetDesc1 : (this : *ID3D11UnorderedAccessView1, pDesc1 : *D3D11_UNORDERED_ACCESS_VIEW_DESC1) #cpp_method;
}

ID3D11VertexShaderVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

}

ID3D11VideoContextVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

    GetDecoderBuffer : (this : *ID3D11VideoContext, pDecoder : *ID3D11VideoDecoder, _Type : D3D11_VIDEO_DECODER_BUFFER_TYPE, pBufferSize : *u32, ppBuffer : **void) -> HRESULT #cpp_method;
    ReleaseDecoderBuffer : (this : *ID3D11VideoContext, pDecoder : *ID3D11VideoDecoder, _Type : D3D11_VIDEO_DECODER_BUFFER_TYPE) -> HRESULT #cpp_method;
    DecoderBeginFrame : (this : *ID3D11VideoContext, pDecoder : *ID3D11VideoDecoder, pView : *ID3D11VideoDecoderOutputView, ContentKeySize : u32, pContentKey : *void) -> HRESULT #cpp_method;
    DecoderEndFrame : (this : *ID3D11VideoContext, pDecoder : *ID3D11VideoDecoder) -> HRESULT #cpp_method;
    SubmitDecoderBuffers : (this : *ID3D11VideoContext, pDecoder : *ID3D11VideoDecoder, NumBuffers : u32, pBufferDesc : *D3D11_VIDEO_DECODER_BUFFER_DESC) -> HRESULT #cpp_method;
    DecoderExtension : (this : *ID3D11VideoContext, pDecoder : *ID3D11VideoDecoder, pExtensionData : *D3D11_VIDEO_DECODER_EXTENSION) -> s32 #cpp_method;
    VideoProcessorSetOutputTargetRect : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, Enable : BOOL, pRect : *RECT) #cpp_method;
    VideoProcessorSetOutputBackgroundColor : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, YCbCr : BOOL, pColor : *D3D11_VIDEO_COLOR) #cpp_method;
    VideoProcessorSetOutputColorSpace : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, pColorSpace : *D3D11_VIDEO_PROCESSOR_COLOR_SPACE) #cpp_method;
    VideoProcessorSetOutputAlphaFillMode : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, AlphaFillMode : D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, StreamIndex : u32) #cpp_method;
    VideoProcessorSetOutputConstriction : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, Enable : BOOL, Size : SIZE) #cpp_method;
    VideoProcessorSetOutputStereoMode : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, Enable : BOOL) #cpp_method;
    VideoProcessorSetOutputExtension : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, pExtensionGuid : *GUID, DataSize : u32, pData : *void) -> s32 #cpp_method;
    VideoProcessorGetOutputTargetRect : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, Enabled : *BOOL, pRect : *RECT) #cpp_method;
    VideoProcessorGetOutputBackgroundColor : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, pYCbCr : *BOOL, pColor : *D3D11_VIDEO_COLOR) #cpp_method;
    VideoProcessorGetOutputColorSpace : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, pColorSpace : *D3D11_VIDEO_PROCESSOR_COLOR_SPACE) #cpp_method;
    VideoProcessorGetOutputAlphaFillMode : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, pAlphaFillMode : *D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, pStreamIndex : *u32) #cpp_method;
    VideoProcessorGetOutputConstriction : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, pEnabled : *BOOL, pSize : *SIZE) #cpp_method;
    VideoProcessorGetOutputStereoMode : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, pEnabled : *BOOL) #cpp_method;
    VideoProcessorGetOutputExtension : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, pExtensionGuid : *GUID, DataSize : u32, pData : *void) -> s32 #cpp_method;
    VideoProcessorSetStreamFrameFormat : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, FrameFormat : D3D11_VIDEO_FRAME_FORMAT) #cpp_method;
    VideoProcessorSetStreamColorSpace : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, pColorSpace : *D3D11_VIDEO_PROCESSOR_COLOR_SPACE) #cpp_method;
    VideoProcessorSetStreamOutputRate : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, OutputRate : D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, RepeatFrame : BOOL, pCustomRate : *DXGI_RATIONAL) #cpp_method;
    VideoProcessorSetStreamSourceRect : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, Enable : BOOL, pRect : *RECT) #cpp_method;
    VideoProcessorSetStreamDestRect : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, Enable : BOOL, pRect : *RECT) #cpp_method;
    VideoProcessorSetStreamAlpha : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, Enable : BOOL, Alpha : float) #cpp_method;
    VideoProcessorSetStreamPalette : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, Count : u32, pEntries : *u32) #cpp_method;
    VideoProcessorSetStreamPixelAspectRatio : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, Enable : BOOL, pSourceAspectRatio : *DXGI_RATIONAL, pDestinationAspectRatio : *DXGI_RATIONAL) #cpp_method;
    VideoProcessorSetStreamLumaKey : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, Enable : BOOL, Lower : float, Upper : float) #cpp_method;
    VideoProcessorSetStreamStereoFormat : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, Enable : BOOL, Format : D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, LeftViewFrame0 : BOOL, BaseViewFrame0 : BOOL, FlipMode : D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, MonoOffset : s32) #cpp_method;
    VideoProcessorSetStreamAutoProcessingMode : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, Enable : BOOL) #cpp_method;
    VideoProcessorSetStreamFilter : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, Filter : D3D11_VIDEO_PROCESSOR_FILTER, Enable : BOOL, Level : s32) #cpp_method;
    VideoProcessorSetStreamExtension : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, pExtensionGuid : *GUID, DataSize : u32, pData : *void) -> s32 #cpp_method;
    VideoProcessorGetStreamFrameFormat : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, pFrameFormat : *D3D11_VIDEO_FRAME_FORMAT) #cpp_method;
    VideoProcessorGetStreamColorSpace : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, pColorSpace : *D3D11_VIDEO_PROCESSOR_COLOR_SPACE) #cpp_method;
    VideoProcessorGetStreamOutputRate : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, pOutputRate : *D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, pRepeatFrame : *BOOL, pCustomRate : *DXGI_RATIONAL) #cpp_method;
    VideoProcessorGetStreamSourceRect : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, pEnabled : *BOOL, pRect : *RECT) #cpp_method;
    VideoProcessorGetStreamDestRect : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, pEnabled : *BOOL, pRect : *RECT) #cpp_method;
    VideoProcessorGetStreamAlpha : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, pEnabled : *BOOL, pAlpha : *float) #cpp_method;
    VideoProcessorGetStreamPalette : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, Count : u32, pEntries : *u32) #cpp_method;
    VideoProcessorGetStreamPixelAspectRatio : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, pEnabled : *BOOL, pSourceAspectRatio : *DXGI_RATIONAL, pDestinationAspectRatio : *DXGI_RATIONAL) #cpp_method;
    VideoProcessorGetStreamLumaKey : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, pEnabled : *BOOL, pLower : *float, pUpper : *float) #cpp_method;
    VideoProcessorGetStreamStereoFormat : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, pEnable : *BOOL, pFormat : *D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, pLeftViewFrame0 : *BOOL, pBaseViewFrame0 : *BOOL, pFlipMode : *D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, MonoOffset : *s32) #cpp_method;
    VideoProcessorGetStreamAutoProcessingMode : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, pEnabled : *BOOL) #cpp_method;
    VideoProcessorGetStreamFilter : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, Filter : D3D11_VIDEO_PROCESSOR_FILTER, pEnabled : *BOOL, pLevel : *s32) #cpp_method;
    VideoProcessorGetStreamExtension : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, pExtensionGuid : *GUID, DataSize : u32, pData : *void) -> s32 #cpp_method;
    VideoProcessorBlt : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, pView : *ID3D11VideoProcessorOutputView, OutputFrame : u32, StreamCount : u32, pStreams : *D3D11_VIDEO_PROCESSOR_STREAM) -> HRESULT #cpp_method;
    NegotiateCryptoSessionKeyExchange : (this : *ID3D11VideoContext, pCryptoSession : *ID3D11CryptoSession, DataSize : u32, pData : *void) -> HRESULT #cpp_method;
    EncryptionBlt : (this : *ID3D11VideoContext, pCryptoSession : *ID3D11CryptoSession, pSrcSurface : *ID3D11Texture2D, pDstSurface : *ID3D11Texture2D, IVSize : u32, pIV : *void) #cpp_method;
    DecryptionBlt : (this : *ID3D11VideoContext, pCryptoSession : *ID3D11CryptoSession, pSrcSurface : *ID3D11Texture2D, pDstSurface : *ID3D11Texture2D, pEncryptedBlockInfo : *D3D11_ENCRYPTED_BLOCK_INFO, ContentKeySize : u32, pContentKey : *void, IVSize : u32, pIV : *void) #cpp_method;
    StartSessionKeyRefresh : (this : *ID3D11VideoContext, pCryptoSession : *ID3D11CryptoSession, RandomNumberSize : u32, pRandomNumber : *void) #cpp_method;
    FinishSessionKeyRefresh : (this : *ID3D11VideoContext, pCryptoSession : *ID3D11CryptoSession) #cpp_method;
    GetEncryptionBltKey : (this : *ID3D11VideoContext, pCryptoSession : *ID3D11CryptoSession, KeySize : u32, pReadbackKey : *void) -> HRESULT #cpp_method;
    NegotiateAuthenticatedChannelKeyExchange : (this : *ID3D11VideoContext, pChannel : *ID3D11AuthenticatedChannel, DataSize : u32, pData : *void) -> HRESULT #cpp_method;
    QueryAuthenticatedChannel : (this : *ID3D11VideoContext, pChannel : *ID3D11AuthenticatedChannel, InputSize : u32, pInput : *void, OutputSize : u32, pOutput : *void) -> HRESULT #cpp_method;
    ConfigureAuthenticatedChannel : (this : *ID3D11VideoContext, pChannel : *ID3D11AuthenticatedChannel, InputSize : u32, pInput : *void, pOutput : *D3D11_AUTHENTICATED_CONFIGURE_OUTPUT) -> HRESULT #cpp_method;
    VideoProcessorSetStreamRotation : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, Enable : BOOL, Rotation : D3D11_VIDEO_PROCESSOR_ROTATION) #cpp_method;
    VideoProcessorGetStreamRotation : (this : *ID3D11VideoContext, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, pEnable : *BOOL, pRotation : *D3D11_VIDEO_PROCESSOR_ROTATION) #cpp_method;
}

ID3D11VideoContext1VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11VideoContextVTable;

    SubmitDecoderBuffers1 : (this : *ID3D11VideoContext1, pDecoder : *ID3D11VideoDecoder, NumBuffers : u32, pBufferDesc : *D3D11_VIDEO_DECODER_BUFFER_DESC1) -> HRESULT #cpp_method;
    GetDataForNewHardwareKey : (this : *ID3D11VideoContext1, pCryptoSession : *ID3D11CryptoSession, PrivateInputSize : u32, pPrivatInputData : *void, pPrivateOutputData : *u64) -> HRESULT #cpp_method;
    CheckCryptoSessionStatus : (this : *ID3D11VideoContext1, pCryptoSession : *ID3D11CryptoSession, pStatus : *D3D11_CRYPTO_SESSION_STATUS) -> HRESULT #cpp_method;
    DecoderEnableDownsampling : (this : *ID3D11VideoContext1, pDecoder : *ID3D11VideoDecoder, InputColorSpace : DXGI_COLOR_SPACE_TYPE, pOutputDesc : *D3D11_VIDEO_SAMPLE_DESC, ReferenceFrameCount : u32) -> HRESULT #cpp_method;
    DecoderUpdateDownsampling : (this : *ID3D11VideoContext1, pDecoder : *ID3D11VideoDecoder, pOutputDesc : *D3D11_VIDEO_SAMPLE_DESC) -> HRESULT #cpp_method;
    VideoProcessorSetOutputColorSpace1 : (this : *ID3D11VideoContext1, pVideoProcessor : *ID3D11VideoProcessor, ColorSpace : DXGI_COLOR_SPACE_TYPE) #cpp_method;
    VideoProcessorSetOutputShaderUsage : (this : *ID3D11VideoContext1, pVideoProcessor : *ID3D11VideoProcessor, ShaderUsage : BOOL) #cpp_method;
    VideoProcessorGetOutputColorSpace1 : (this : *ID3D11VideoContext1, pVideoProcessor : *ID3D11VideoProcessor, pColorSpace : *DXGI_COLOR_SPACE_TYPE) #cpp_method;
    VideoProcessorGetOutputShaderUsage : (this : *ID3D11VideoContext1, pVideoProcessor : *ID3D11VideoProcessor, pShaderUsage : *BOOL) #cpp_method;
    VideoProcessorSetStreamColorSpace1 : (this : *ID3D11VideoContext1, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, ColorSpace : DXGI_COLOR_SPACE_TYPE) #cpp_method;
    VideoProcessorSetStreamMirror : (this : *ID3D11VideoContext1, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, Enable : BOOL, FlipHorizontal : BOOL, FlipVertical : BOOL) #cpp_method;
    VideoProcessorGetStreamColorSpace1 : (this : *ID3D11VideoContext1, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, pColorSpace : *DXGI_COLOR_SPACE_TYPE) #cpp_method;
    VideoProcessorGetStreamMirror : (this : *ID3D11VideoContext1, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, pEnable : *BOOL, pFlipHorizontal : *BOOL, pFlipVertical : *BOOL) #cpp_method;
    VideoProcessorGetBehaviorHints : (this : *ID3D11VideoContext1, pVideoProcessor : *ID3D11VideoProcessor, OutputWidth : u32, OutputHeight : u32, OutputFormat : DXGI_FORMAT, StreamCount : u32, pStreams : *D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT, pBehaviorHints : *u32) -> HRESULT #cpp_method;
}

ID3D11VideoContext2VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11VideoContext1VTable;

    VideoProcessorSetOutputHDRMetaData : (this : *ID3D11VideoContext2, pVideoProcessor : *ID3D11VideoProcessor, _Type : DXGI_HDR_METADATA_TYPE, Size : u32, pHDRMetaData : *void) #cpp_method;
    VideoProcessorGetOutputHDRMetaData : (this : *ID3D11VideoContext2, pVideoProcessor : *ID3D11VideoProcessor, pType : *DXGI_HDR_METADATA_TYPE, Size : u32, pMetaData : *void) #cpp_method;
    VideoProcessorSetStreamHDRMetaData : (this : *ID3D11VideoContext2, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, _Type : DXGI_HDR_METADATA_TYPE, Size : u32, pHDRMetaData : *void) #cpp_method;
    VideoProcessorGetStreamHDRMetaData : (this : *ID3D11VideoContext2, pVideoProcessor : *ID3D11VideoProcessor, StreamIndex : u32, pType : *DXGI_HDR_METADATA_TYPE, Size : u32, pMetaData : *void) #cpp_method;
}

ID3D11VideoContext3VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11VideoContext2VTable;

    DecoderBeginFrame1 : (this : *ID3D11VideoContext3, pDecoder : *ID3D11VideoDecoder, pView : *ID3D11VideoDecoderOutputView, ContentKeySize : u32, pContentKey : *void, NumComponentHistograms : u32, pHistogramOffsets : *u32, ppHistogramBuffers : **ID3D11Buffer) -> HRESULT #cpp_method;
    SubmitDecoderBuffers2 : (this : *ID3D11VideoContext3, pDecoder : *ID3D11VideoDecoder, NumBuffers : u32, pBufferDesc : *D3D11_VIDEO_DECODER_BUFFER_DESC2) -> HRESULT #cpp_method;
}

ID3D11VideoDecoderVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

    GetCreationParameters : (this : *ID3D11VideoDecoder, pVideoDesc : *D3D11_VIDEO_DECODER_DESC, pConfig : *D3D11_VIDEO_DECODER_CONFIG) -> HRESULT #cpp_method;
    GetDriverHandle : (this : *ID3D11VideoDecoder, pDriverHandle : *HANDLE) -> HRESULT #cpp_method;
}

ID3D11VideoDecoderOutputViewVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11ViewVTable;

    GetDesc : (this : *ID3D11VideoDecoderOutputView, pDesc : *D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC) #cpp_method;
}

ID3D11VideoDeviceVTable :: struct
{
    #as using, except(.["base"]) base : IUnknownVTable;

    CreateVideoDecoder : (this : *ID3D11VideoDevice, pVideoDesc : *D3D11_VIDEO_DECODER_DESC, pConfig : *D3D11_VIDEO_DECODER_CONFIG, ppDecoder : **ID3D11VideoDecoder) -> HRESULT #cpp_method;
    CreateVideoProcessor : (this : *ID3D11VideoDevice, pEnum : *ID3D11VideoProcessorEnumerator, RateConversionIndex : u32, ppVideoProcessor : **ID3D11VideoProcessor) -> HRESULT #cpp_method;
    CreateAuthenticatedChannel : (this : *ID3D11VideoDevice, ChannelType : D3D11_AUTHENTICATED_CHANNEL_TYPE, ppAuthenticatedChannel : **ID3D11AuthenticatedChannel) -> HRESULT #cpp_method;
    CreateCryptoSession : (this : *ID3D11VideoDevice, pCryptoType : *GUID, pDecoderProfile : *GUID, pKeyExchangeType : *GUID, ppCryptoSession : **ID3D11CryptoSession) -> HRESULT #cpp_method;
    CreateVideoDecoderOutputView : (this : *ID3D11VideoDevice, pResource : *ID3D11Resource, pDesc : *D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC, ppVDOVView : **ID3D11VideoDecoderOutputView) -> HRESULT #cpp_method;
    CreateVideoProcessorInputView : (this : *ID3D11VideoDevice, pResource : *ID3D11Resource, pEnum : *ID3D11VideoProcessorEnumerator, pDesc : *D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC, ppVPIView : **ID3D11VideoProcessorInputView) -> HRESULT #cpp_method;
    CreateVideoProcessorOutputView : (this : *ID3D11VideoDevice, pResource : *ID3D11Resource, pEnum : *ID3D11VideoProcessorEnumerator, pDesc : *D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC, ppVPOView : **ID3D11VideoProcessorOutputView) -> HRESULT #cpp_method;
    CreateVideoProcessorEnumerator : (this : *ID3D11VideoDevice, pDesc : *D3D11_VIDEO_PROCESSOR_CONTENT_DESC, ppEnum : **ID3D11VideoProcessorEnumerator) -> HRESULT #cpp_method;
    GetVideoDecoderProfileCount : (this : *ID3D11VideoDevice) -> u32 #cpp_method;
    GetVideoDecoderProfile : (this : *ID3D11VideoDevice, Index : u32, pDecoderProfile : *GUID) -> HRESULT #cpp_method;
    CheckVideoDecoderFormat : (this : *ID3D11VideoDevice, pDecoderProfile : *GUID, Format : DXGI_FORMAT, pSupported : *BOOL) -> HRESULT #cpp_method;
    GetVideoDecoderConfigCount : (this : *ID3D11VideoDevice, pDesc : *D3D11_VIDEO_DECODER_DESC, pCount : *u32) -> HRESULT #cpp_method;
    GetVideoDecoderConfig : (this : *ID3D11VideoDevice, pDesc : *D3D11_VIDEO_DECODER_DESC, Index : u32, pConfig : *D3D11_VIDEO_DECODER_CONFIG) -> HRESULT #cpp_method;
    GetContentProtectionCaps : (this : *ID3D11VideoDevice, pCryptoType : *GUID, pDecoderProfile : *GUID, pCaps : *D3D11_VIDEO_CONTENT_PROTECTION_CAPS) -> HRESULT #cpp_method;
    CheckCryptoKeyExchange : (this : *ID3D11VideoDevice, pCryptoType : *GUID, pDecoderProfile : *GUID, Index : u32, pKeyExchangeType : *GUID) -> HRESULT #cpp_method;
    SetPrivateData : (this : *ID3D11VideoDevice, guid : *GUID, DataSize : u32, pData : *void) -> HRESULT #cpp_method;
    SetPrivateDataInterface : (this : *ID3D11VideoDevice, guid : *GUID, pData : *IUnknown) -> HRESULT #cpp_method;
}

ID3D11VideoDevice1VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11VideoDeviceVTable;

    GetCryptoSessionPrivateDataSize : (this : *ID3D11VideoDevice1, pCryptoType : *GUID, pDecoderProfile : *GUID, pKeyExchangeType : *GUID, pPrivateInputSize : *u32, pPrivateOutputSize : *u32) -> HRESULT #cpp_method;
    GetVideoDecoderCaps : (this : *ID3D11VideoDevice1, pDecoderProfile : *GUID, SampleWidth : u32, SampleHeight : u32, pFrameRate : *DXGI_RATIONAL, BitRate : u32, pCryptoType : *GUID, pDecoderCaps : *u32) -> HRESULT #cpp_method;
    CheckVideoDecoderDownsampling : (this : *ID3D11VideoDevice1, pInputDesc : *D3D11_VIDEO_DECODER_DESC, InputColorSpace : DXGI_COLOR_SPACE_TYPE, pInputConfig : *D3D11_VIDEO_DECODER_CONFIG, pFrameRate : *DXGI_RATIONAL, pOutputDesc : *D3D11_VIDEO_SAMPLE_DESC, pSupported : *BOOL, pRealTimeHint : *BOOL) -> HRESULT #cpp_method;
    RecommendVideoDecoderDownsampleParameters : (this : *ID3D11VideoDevice1, pInputDesc : *D3D11_VIDEO_DECODER_DESC, InputColorSpace : DXGI_COLOR_SPACE_TYPE, pInputConfig : *D3D11_VIDEO_DECODER_CONFIG, pFrameRate : *DXGI_RATIONAL, pRecommendedOutputDesc : *D3D11_VIDEO_SAMPLE_DESC) -> HRESULT #cpp_method;
}

ID3D11VideoDevice2VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11VideoDevice1VTable;

    CheckFeatureSupport : (this : *ID3D11VideoDevice2, Feature : D3D11_FEATURE_VIDEO, pFeatureSupportData : *void, FeatureSupportDataSize : u32) -> HRESULT #cpp_method;
    NegotiateCryptoSessionKeyExchangeMT : (this : *ID3D11VideoDevice2, pCryptoSession : *ID3D11CryptoSession, flags : D3D11_CRYPTO_SESSION_KEY_EXCHANGE_FLAGS, DataSize : u32, pData : *void) -> HRESULT #cpp_method;
}

ID3D11VideoProcessorVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

    GetContentDesc : (this : *ID3D11VideoProcessor, pDesc : *D3D11_VIDEO_PROCESSOR_CONTENT_DESC) #cpp_method;
    GetRateConversionCaps : (this : *ID3D11VideoProcessor, pCaps : *D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS) #cpp_method;
}

ID3D11VideoProcessorEnumeratorVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

    GetVideoProcessorContentDesc : (this : *ID3D11VideoProcessorEnumerator, pContentDesc : *D3D11_VIDEO_PROCESSOR_CONTENT_DESC) -> HRESULT #cpp_method;
    CheckVideoProcessorFormat : (this : *ID3D11VideoProcessorEnumerator, Format : DXGI_FORMAT, pFlags : *u32) -> HRESULT #cpp_method;
    GetVideoProcessorCaps : (this : *ID3D11VideoProcessorEnumerator, pCaps : *D3D11_VIDEO_PROCESSOR_CAPS) -> HRESULT #cpp_method;
    GetVideoProcessorRateConversionCaps : (this : *ID3D11VideoProcessorEnumerator, TypeIndex : u32, pCaps : *D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS) -> HRESULT #cpp_method;
    GetVideoProcessorCustomRate : (this : *ID3D11VideoProcessorEnumerator, TypeIndex : u32, CustomRateIndex : u32, pRate : *D3D11_VIDEO_PROCESSOR_CUSTOM_RATE) -> HRESULT #cpp_method;
    GetVideoProcessorFilterRange : (this : *ID3D11VideoProcessorEnumerator, Filter : D3D11_VIDEO_PROCESSOR_FILTER, pRange : *D3D11_VIDEO_PROCESSOR_FILTER_RANGE) -> HRESULT #cpp_method;
}

ID3D11VideoProcessorEnumerator1VTable :: struct
{
    #as using, except(.["base"]) base : ID3D11VideoProcessorEnumeratorVTable;

    CheckVideoProcessorFormatConversion : (this : *ID3D11VideoProcessorEnumerator1, InputFormat : DXGI_FORMAT, InputColorSpace : DXGI_COLOR_SPACE_TYPE, OutputFormat : DXGI_FORMAT, OutputColorSpace : DXGI_COLOR_SPACE_TYPE, pSupported : *BOOL) -> HRESULT #cpp_method;
}

ID3D11VideoProcessorInputViewVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11ViewVTable;

    GetDesc : (this : *ID3D11VideoProcessorInputView, pDesc : *D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC) #cpp_method;
}

ID3D11VideoProcessorOutputViewVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11ViewVTable;

    GetDesc : (this : *ID3D11VideoProcessorOutputView, pDesc : *D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC) #cpp_method;
}

ID3D11ViewVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

    GetResource : (this : *ID3D11View, ppResource : **ID3D11Resource) #cpp_method;
}

ID3DDeviceContextStateVTable :: struct
{
    #as using, except(.["base"]) base : ID3D11DeviceChildVTable;

}

ID3DX11FFTVTable :: struct
{
    #as using, except(.["base"]) base : IUnknownVTable;

    SetForwardScale : (this : *ID3DX11FFT, ForwardScale : float) -> HRESULT #cpp_method;
    GetForwardScale : (this : *ID3DX11FFT) -> float #cpp_method;
    SetInverseScale : (this : *ID3DX11FFT, InverseScale : float) -> HRESULT #cpp_method;
    GetInverseScale : (this : *ID3DX11FFT) -> float #cpp_method;
    AttachBuffersAndPrecompute : (this : *ID3DX11FFT, NumTempBuffers : u32, ppTempBuffers : **ID3D11UnorderedAccessView, NumPrecomputeBuffers : u32, ppPrecomputeBufferSizes : **ID3D11UnorderedAccessView) -> HRESULT #cpp_method;
    ForwardTransform : (this : *ID3DX11FFT, pInputBuffer : *ID3D11UnorderedAccessView, ppOutputBuffer : **ID3D11UnorderedAccessView) -> HRESULT #cpp_method;
    InverseTransform : (this : *ID3DX11FFT, pInputBuffer : *ID3D11UnorderedAccessView, ppOutputBuffer : **ID3D11UnorderedAccessView) -> HRESULT #cpp_method;
}

ID3DX11ScanVTable :: struct
{
    #as using, except(.["base"]) base : IUnknownVTable;

    SetScanDirection : (this : *ID3DX11Scan, Direction : D3DX11_SCAN_DIRECTION) -> HRESULT #cpp_method;
    Scan : (this : *ID3DX11Scan, ElementType : D3DX11_SCAN_DATA_TYPE, OpCode : D3DX11_SCAN_OPCODE, ElementScanSize : u32, pSrc : *ID3D11UnorderedAccessView, pDst : *ID3D11UnorderedAccessView) -> HRESULT #cpp_method;
    Multiscan : (this : *ID3DX11Scan, ElementType : D3DX11_SCAN_DATA_TYPE, OpCode : D3DX11_SCAN_OPCODE, ElementScanSize : u32, ElementScanPitch : u32, ScanCount : u32, pSrc : *ID3D11UnorderedAccessView, pDst : *ID3D11UnorderedAccessView) -> HRESULT #cpp_method;
}

ID3DX11SegmentedScanVTable :: struct
{
    #as using, except(.["base"]) base : IUnknownVTable;

    SetScanDirection : (this : *ID3DX11SegmentedScan, Direction : D3DX11_SCAN_DIRECTION) -> HRESULT #cpp_method;
    SegScan : (this : *ID3DX11SegmentedScan, ElementType : D3DX11_SCAN_DATA_TYPE, OpCode : D3DX11_SCAN_OPCODE, ElementScanSize : u32, pSrc : *ID3D11UnorderedAccessView, pSrcElementFlags : *ID3D11UnorderedAccessView, pDst : *ID3D11UnorderedAccessView) -> HRESULT #cpp_method;
}

// System libraries

#scope_file

d3d11 :: #system_library "d3d11";
D3DCOMPILER_47 :: #system_library "D3DCOMPILER_47";

