// This file was auto generated for module Graphics.Gdi

#module_parameters (UNICODE := true);

#import "Win32/Foundation" (UNICODE);

// Constants

GDI_ERROR :: -1;
ERROR :: 0;
NULLREGION :: 1;
SIMPLEREGION :: 2;
COMPLEXREGION :: 3;
RGN_ERROR :: 0;
MAXSTRETCHBLTMODE :: 4;
POLYFILL_LAST :: 2;
LAYOUT_BTT :: 2;
LAYOUT_VBH :: 4;
ASPECT_FILTERING :: 1;
META_SETBKCOLOR :: 513;
META_SETBKMODE :: 258;
META_SETMAPMODE :: 259;
META_SETROP2 :: 260;
META_SETRELABS :: 261;
META_SETPOLYFILLMODE :: 262;
META_SETSTRETCHBLTMODE :: 263;
META_SETTEXTCHAREXTRA :: 264;
META_SETTEXTCOLOR :: 521;
META_SETTEXTJUSTIFICATION :: 522;
META_SETWINDOWORG :: 523;
META_SETWINDOWEXT :: 524;
META_SETVIEWPORTORG :: 525;
META_SETVIEWPORTEXT :: 526;
META_OFFSETWINDOWORG :: 527;
META_SCALEWINDOWEXT :: 1040;
META_OFFSETVIEWPORTORG :: 529;
META_SCALEVIEWPORTEXT :: 1042;
META_LINETO :: 531;
META_MOVETO :: 532;
META_EXCLUDECLIPRECT :: 1045;
META_INTERSECTCLIPRECT :: 1046;
META_ARC :: 2071;
META_ELLIPSE :: 1048;
META_FLOODFILL :: 1049;
META_PIE :: 2074;
META_RECTANGLE :: 1051;
META_ROUNDRECT :: 1564;
META_PATBLT :: 1565;
META_SAVEDC :: 30;
META_SETPIXEL :: 1055;
META_OFFSETCLIPRGN :: 544;
META_TEXTOUT :: 1313;
META_BITBLT :: 2338;
META_STRETCHBLT :: 2851;
META_POLYGON :: 804;
META_POLYLINE :: 805;
META_ESCAPE :: 1574;
META_RESTOREDC :: 295;
META_FILLREGION :: 552;
META_FRAMEREGION :: 1065;
META_INVERTREGION :: 298;
META_PAINTREGION :: 299;
META_SELECTCLIPREGION :: 300;
META_SELECTOBJECT :: 301;
META_SETTEXTALIGN :: 302;
META_CHORD :: 2096;
META_SETMAPPERFLAGS :: 561;
META_EXTTEXTOUT :: 2610;
META_SETDIBTODEV :: 3379;
META_SELECTPALETTE :: 564;
META_REALIZEPALETTE :: 53;
META_ANIMATEPALETTE :: 1078;
META_SETPALENTRIES :: 55;
META_POLYPOLYGON :: 1336;
META_RESIZEPALETTE :: 313;
META_DIBBITBLT :: 2368;
META_DIBSTRETCHBLT :: 2881;
META_DIBCREATEPATTERNBRUSH :: 322;
META_STRETCHDIB :: 3907;
META_EXTFLOODFILL :: 1352;
META_SETLAYOUT :: 329;
META_DELETEOBJECT :: 496;
META_CREATEPALETTE :: 247;
META_CREATEPATTERNBRUSH :: 505;
META_CREATEPENINDIRECT :: 762;
META_CREATEFONTINDIRECT :: 763;
META_CREATEBRUSHINDIRECT :: 764;
META_CREATEREGION :: 1791;
NEWFRAME :: 1;
ABORTDOC :: 2;
NEXTBAND :: 3;
SETCOLORTABLE :: 4;
GETCOLORTABLE :: 5;
FLUSHOUTPUT :: 6;
DRAFTMODE :: 7;
QUERYESCSUPPORT :: 8;
SETABORTPROC :: 9;
STARTDOC :: 10;
ENDDOC :: 11;
GETPHYSPAGESIZE :: 12;
GETPRINTINGOFFSET :: 13;
GETSCALINGFACTOR :: 14;
MFCOMMENT :: 15;
GETPENWIDTH :: 16;
SETCOPYCOUNT :: 17;
SELECTPAPERSOURCE :: 18;
DEVICEDATA :: 19;
PASSTHROUGH :: 19;
GETTECHNOLGY :: 20;
GETTECHNOLOGY :: 20;
SETLINECAP :: 21;
SETLINEJOIN :: 22;
SETMITERLIMIT :: 23;
BANDINFO :: 24;
DRAWPATTERNRECT :: 25;
GETVECTORPENSIZE :: 26;
GETVECTORBRUSHSIZE :: 27;
ENABLEDUPLEX :: 28;
GETSETPAPERBINS :: 29;
GETSETPRINTORIENT :: 30;
ENUMPAPERBINS :: 31;
SETDIBSCALING :: 32;
EPSPRINTING :: 33;
ENUMPAPERMETRICS :: 34;
GETSETPAPERMETRICS :: 35;
POSTSCRIPT_DATA :: 37;
POSTSCRIPT_IGNORE :: 38;
MOUSETRAILS :: 39;
GETDEVICEUNITS :: 42;
GETEXTENDEDTEXTMETRICS :: 256;
GETEXTENTTABLE :: 257;
GETPAIRKERNTABLE :: 258;
GETTRACKKERNTABLE :: 259;
EXTTEXTOUT :: 512;
GETFACENAME :: 513;
DOWNLOADFACE :: 514;
ENABLERELATIVEWIDTHS :: 768;
ENABLEPAIRKERNING :: 769;
SETKERNTRACK :: 770;
SETALLJUSTVALUES :: 771;
SETCHARSET :: 772;
STRETCHBLT :: 2048;
METAFILE_DRIVER :: 2049;
GETSETSCREENPARAMS :: 3072;
QUERYDIBSUPPORT :: 3073;
BEGIN_PATH :: 4096;
CLIP_TO_PATH :: 4097;
END_PATH :: 4098;
EXT_DEVICE_CAPS :: 4099;
RESTORE_CTM :: 4100;
SAVE_CTM :: 4101;
SET_ARC_DIRECTION :: 4102;
SET_BACKGROUND_COLOR :: 4103;
SET_POLY_MODE :: 4104;
SET_SCREEN_ANGLE :: 4105;
SET_SPREAD :: 4106;
TRANSFORM_CTM :: 4107;
SET_CLIP_BOX :: 4108;
SET_BOUNDS :: 4109;
SET_MIRROR_MODE :: 4110;
OPENCHANNEL :: 4110;
DOWNLOADHEADER :: 4111;
CLOSECHANNEL :: 4112;
POSTSCRIPT_PASSTHROUGH :: 4115;
ENCAPSULATED_POSTSCRIPT :: 4116;
POSTSCRIPT_IDENTIFY :: 4117;
POSTSCRIPT_INJECTION :: 4118;
CHECKJPEGFORMAT :: 4119;
CHECKPNGFORMAT :: 4120;
GET_PS_FEATURESETTING :: 4121;
GDIPLUS_TS_QUERYVER :: 4122;
GDIPLUS_TS_RECORD :: 4123;
MILCORE_TS_QUERYVER_RESULT_FALSE :: 0;
MILCORE_TS_QUERYVER_RESULT_TRUE :: 2147483647;
SPCLPASSTHROUGH2 :: 4568;
PSIDENT_GDICENTRIC :: 0;
PSIDENT_PSCENTRIC :: 1;
PSINJECT_DLFONT :: 3722304989;
FEATURESETTING_NUP :: 0;
FEATURESETTING_OUTPUT :: 1;
FEATURESETTING_PSLEVEL :: 2;
FEATURESETTING_CUSTPAPER :: 3;
FEATURESETTING_MIRROR :: 4;
FEATURESETTING_NEGATIVE :: 5;
FEATURESETTING_PROTOCOL :: 6;
FEATURESETTING_PRIVATE_BEGIN :: 4096;
FEATURESETTING_PRIVATE_END :: 8191;
PSPROTOCOL_ASCII :: 0;
PSPROTOCOL_BCP :: 1;
PSPROTOCOL_TBCP :: 2;
PSPROTOCOL_BINARY :: 3;
QDI_SETDIBITS :: 1;
QDI_GETDIBITS :: 2;
QDI_DIBTOSCREEN :: 4;
QDI_STRETCHDIB :: 8;
SP_NOTREPORTED :: 16384;
SP_ERROR :: -1;
SP_APPABORT :: -2;
SP_USERABORT :: -3;
SP_OUTOFDISK :: -4;
SP_OUTOFMEMORY :: -5;
PR_JOBSTATUS :: 0;
LCS_CALIBRATED_RGB :: 0;
LCS_GM_BUSINESS :: 1;
LCS_GM_GRAPHICS :: 2;
LCS_GM_IMAGES :: 4;
LCS_GM_ABS_COLORIMETRIC :: 8;
CM_OUT_OF_GAMUT :: 255;
CM_IN_GAMUT :: 0;
BI_RGB :: 0;
BI_RLE8 :: 1;
BI_RLE4 :: 2;
BI_BITFIELDS :: 3;
BI_JPEG :: 4;
BI_PNG :: 5;
TMPF_FIXED_PITCH :: 1;
TMPF_VECTOR :: 2;
TMPF_DEVICE :: 8;
TMPF_TRUETYPE :: 4;
NTM_REGULAR :: 64;
NTM_BOLD :: 32;
NTM_ITALIC :: 1;
NTM_NONNEGATIVE_AC :: 65536;
NTM_PS_OPENTYPE :: 131072;
NTM_TT_OPENTYPE :: 262144;
NTM_MULTIPLEMASTER :: 524288;
NTM_TYPE1 :: 1048576;
NTM_DSIG :: 2097152;
LF_FACESIZE :: 32;
LF_FULLFACESIZE :: 64;
OUT_SCREEN_OUTLINE_PRECIS :: 9;
CLEARTYPE_NATURAL_QUALITY :: 6;
DEFAULT_PITCH :: 0;
FIXED_PITCH :: 1;
VARIABLE_PITCH :: 2;
MONO_FONT :: 8;
ANSI_CHARSET :: 0;
DEFAULT_CHARSET :: 1;
SYMBOL_CHARSET :: 2;
SHIFTJIS_CHARSET :: 128;
HANGEUL_CHARSET :: 129;
HANGUL_CHARSET :: 129;
GB2312_CHARSET :: 134;
CHINESEBIG5_CHARSET :: 136;
OEM_CHARSET :: 255;
JOHAB_CHARSET :: 130;
HEBREW_CHARSET :: 177;
ARABIC_CHARSET :: 178;
GREEK_CHARSET :: 161;
TURKISH_CHARSET :: 162;
VIETNAMESE_CHARSET :: 163;
THAI_CHARSET :: 222;
EASTEUROPE_CHARSET :: 238;
RUSSIAN_CHARSET :: 204;
MAC_CHARSET :: 77;
BALTIC_CHARSET :: 186;
FS_LATIN1 :: 1;
FS_LATIN2 :: 2;
FS_CYRILLIC :: 4;
FS_GREEK :: 8;
FS_TURKISH :: 16;
FS_HEBREW :: 32;
FS_ARABIC :: 64;
FS_BALTIC :: 128;
FS_VIETNAMESE :: 256;
FS_THAI :: 65536;
FS_JISJAPAN :: 131072;
FS_CHINESESIMP :: 262144;
FS_WANSUNG :: 524288;
FS_CHINESETRAD :: 1048576;
FS_JOHAB :: 2097152;
FS_SYMBOL :: -2147483648;
FW_DONTCARE :: 0;
FW_THIN :: 100;
FW_EXTRALIGHT :: 200;
FW_LIGHT :: 300;
FW_NORMAL :: 400;
FW_MEDIUM :: 500;
FW_SEMIBOLD :: 600;
FW_BOLD :: 700;
FW_EXTRABOLD :: 800;
FW_HEAVY :: 900;
FW_ULTRALIGHT :: 200;
FW_REGULAR :: 400;
FW_DEMIBOLD :: 600;
FW_ULTRABOLD :: 800;
FW_BLACK :: 900;
PANOSE_COUNT :: 10;
PAN_FAMILYTYPE_INDEX :: 0;
PAN_SERIFSTYLE_INDEX :: 1;
PAN_WEIGHT_INDEX :: 2;
PAN_PROPORTION_INDEX :: 3;
PAN_CONTRAST_INDEX :: 4;
PAN_STROKEVARIATION_INDEX :: 5;
PAN_ARMSTYLE_INDEX :: 6;
PAN_LETTERFORM_INDEX :: 7;
PAN_MIDLINE_INDEX :: 8;
PAN_XHEIGHT_INDEX :: 9;
PAN_CULTURE_LATIN :: 0;
PAN_ANY :: 0;
PAN_NO_FIT :: 1;
PAN_FAMILY_TEXT_DISPLAY :: 2;
PAN_FAMILY_SCRIPT :: 3;
PAN_FAMILY_DECORATIVE :: 4;
PAN_FAMILY_PICTORIAL :: 5;
PAN_SERIF_COVE :: 2;
PAN_SERIF_OBTUSE_COVE :: 3;
PAN_SERIF_SQUARE_COVE :: 4;
PAN_SERIF_OBTUSE_SQUARE_COVE :: 5;
PAN_SERIF_SQUARE :: 6;
PAN_SERIF_THIN :: 7;
PAN_SERIF_BONE :: 8;
PAN_SERIF_EXAGGERATED :: 9;
PAN_SERIF_TRIANGLE :: 10;
PAN_SERIF_NORMAL_SANS :: 11;
PAN_SERIF_OBTUSE_SANS :: 12;
PAN_SERIF_PERP_SANS :: 13;
PAN_SERIF_FLARED :: 14;
PAN_SERIF_ROUNDED :: 15;
PAN_WEIGHT_VERY_LIGHT :: 2;
PAN_WEIGHT_LIGHT :: 3;
PAN_WEIGHT_THIN :: 4;
PAN_WEIGHT_BOOK :: 5;
PAN_WEIGHT_MEDIUM :: 6;
PAN_WEIGHT_DEMI :: 7;
PAN_WEIGHT_BOLD :: 8;
PAN_WEIGHT_HEAVY :: 9;
PAN_WEIGHT_BLACK :: 10;
PAN_WEIGHT_NORD :: 11;
PAN_PROP_OLD_STYLE :: 2;
PAN_PROP_MODERN :: 3;
PAN_PROP_EVEN_WIDTH :: 4;
PAN_PROP_EXPANDED :: 5;
PAN_PROP_CONDENSED :: 6;
PAN_PROP_VERY_EXPANDED :: 7;
PAN_PROP_VERY_CONDENSED :: 8;
PAN_PROP_MONOSPACED :: 9;
PAN_CONTRAST_NONE :: 2;
PAN_CONTRAST_VERY_LOW :: 3;
PAN_CONTRAST_LOW :: 4;
PAN_CONTRAST_MEDIUM_LOW :: 5;
PAN_CONTRAST_MEDIUM :: 6;
PAN_CONTRAST_MEDIUM_HIGH :: 7;
PAN_CONTRAST_HIGH :: 8;
PAN_CONTRAST_VERY_HIGH :: 9;
PAN_STROKE_GRADUAL_DIAG :: 2;
PAN_STROKE_GRADUAL_TRAN :: 3;
PAN_STROKE_GRADUAL_VERT :: 4;
PAN_STROKE_GRADUAL_HORZ :: 5;
PAN_STROKE_RAPID_VERT :: 6;
PAN_STROKE_RAPID_HORZ :: 7;
PAN_STROKE_INSTANT_VERT :: 8;
PAN_STRAIGHT_ARMS_HORZ :: 2;
PAN_STRAIGHT_ARMS_WEDGE :: 3;
PAN_STRAIGHT_ARMS_VERT :: 4;
PAN_STRAIGHT_ARMS_SINGLE_SERIF :: 5;
PAN_STRAIGHT_ARMS_DOUBLE_SERIF :: 6;
PAN_BENT_ARMS_HORZ :: 7;
PAN_BENT_ARMS_WEDGE :: 8;
PAN_BENT_ARMS_VERT :: 9;
PAN_BENT_ARMS_SINGLE_SERIF :: 10;
PAN_BENT_ARMS_DOUBLE_SERIF :: 11;
PAN_LETT_NORMAL_CONTACT :: 2;
PAN_LETT_NORMAL_WEIGHTED :: 3;
PAN_LETT_NORMAL_BOXED :: 4;
PAN_LETT_NORMAL_FLATTENED :: 5;
PAN_LETT_NORMAL_ROUNDED :: 6;
PAN_LETT_NORMAL_OFF_CENTER :: 7;
PAN_LETT_NORMAL_SQUARE :: 8;
PAN_LETT_OBLIQUE_CONTACT :: 9;
PAN_LETT_OBLIQUE_WEIGHTED :: 10;
PAN_LETT_OBLIQUE_BOXED :: 11;
PAN_LETT_OBLIQUE_FLATTENED :: 12;
PAN_LETT_OBLIQUE_ROUNDED :: 13;
PAN_LETT_OBLIQUE_OFF_CENTER :: 14;
PAN_LETT_OBLIQUE_SQUARE :: 15;
PAN_MIDLINE_STANDARD_TRIMMED :: 2;
PAN_MIDLINE_STANDARD_POINTED :: 3;
PAN_MIDLINE_STANDARD_SERIFED :: 4;
PAN_MIDLINE_HIGH_TRIMMED :: 5;
PAN_MIDLINE_HIGH_POINTED :: 6;
PAN_MIDLINE_HIGH_SERIFED :: 7;
PAN_MIDLINE_CONSTANT_TRIMMED :: 8;
PAN_MIDLINE_CONSTANT_POINTED :: 9;
PAN_MIDLINE_CONSTANT_SERIFED :: 10;
PAN_MIDLINE_LOW_TRIMMED :: 11;
PAN_MIDLINE_LOW_POINTED :: 12;
PAN_MIDLINE_LOW_SERIFED :: 13;
PAN_XHEIGHT_CONSTANT_SMALL :: 2;
PAN_XHEIGHT_CONSTANT_STD :: 3;
PAN_XHEIGHT_CONSTANT_LARGE :: 4;
PAN_XHEIGHT_DUCKING_SMALL :: 5;
PAN_XHEIGHT_DUCKING_STD :: 6;
PAN_XHEIGHT_DUCKING_LARGE :: 7;
ELF_VENDOR_SIZE :: 4;
ELF_VERSION :: 0;
ELF_CULTURE_LATIN :: 0;
RASTER_FONTTYPE :: 1;
DEVICE_FONTTYPE :: 2;
TRUETYPE_FONTTYPE :: 4;
PC_RESERVED :: 1;
PC_EXPLICIT :: 2;
PC_NOCOLLAPSE :: 4;
BKMODE_LAST :: 2;
GM_LAST :: 2;
PT_CLOSEFIGURE :: 1;
PT_LINETO :: 2;
PT_BEZIERTO :: 4;
PT_MOVETO :: 6;
ABSOLUTE :: 1;
RELATIVE :: 2;
STOCK_LAST :: 19;
CLR_INVALID :: 4294967295;
BS_SOLID :: 0;
BS_NULL :: 1;
BS_HOLLOW :: 1;
BS_HATCHED :: 2;
BS_PATTERN :: 3;
BS_INDEXED :: 4;
BS_DIBPATTERN :: 5;
BS_DIBPATTERNPT :: 6;
BS_PATTERN8X8 :: 7;
BS_DIBPATTERN8X8 :: 8;
BS_MONOPATTERN :: 9;
HS_API_MAX :: 12;
DT_PLOTTER :: 0;
DT_RASDISPLAY :: 1;
DT_RASPRINTER :: 2;
DT_RASCAMERA :: 3;
DT_CHARSTREAM :: 4;
DT_METAFILE :: 5;
DT_DISPFILE :: 6;
CC_NONE :: 0;
CC_CIRCLES :: 1;
CC_PIE :: 2;
CC_CHORD :: 4;
CC_ELLIPSES :: 8;
CC_WIDE :: 16;
CC_STYLED :: 32;
CC_WIDESTYLED :: 64;
CC_INTERIORS :: 128;
CC_ROUNDRECT :: 256;
LC_NONE :: 0;
LC_POLYLINE :: 2;
LC_MARKER :: 4;
LC_POLYMARKER :: 8;
LC_WIDE :: 16;
LC_STYLED :: 32;
LC_WIDESTYLED :: 64;
LC_INTERIORS :: 128;
PC_NONE :: 0;
PC_POLYGON :: 1;
PC_RECTANGLE :: 2;
PC_WINDPOLYGON :: 4;
PC_TRAPEZOID :: 4;
PC_SCANLINE :: 8;
PC_WIDE :: 16;
PC_STYLED :: 32;
PC_WIDESTYLED :: 64;
PC_INTERIORS :: 128;
PC_POLYPOLYGON :: 256;
PC_PATHS :: 512;
CP_NONE :: 0;
CP_RECTANGLE :: 1;
CP_REGION :: 2;
TC_OP_CHARACTER :: 1;
TC_OP_STROKE :: 2;
TC_CP_STROKE :: 4;
TC_CR_90 :: 8;
TC_CR_ANY :: 16;
TC_SF_X_YINDEP :: 32;
TC_SA_DOUBLE :: 64;
TC_SA_INTEGER :: 128;
TC_SA_CONTIN :: 256;
TC_EA_DOUBLE :: 512;
TC_IA_ABLE :: 1024;
TC_UA_ABLE :: 2048;
TC_SO_ABLE :: 4096;
TC_RA_ABLE :: 8192;
TC_VA_ABLE :: 16384;
TC_RESERVED :: 32768;
TC_SCROLLBLT :: 65536;
RC_BITBLT :: 1;
RC_BANDING :: 2;
RC_SCALING :: 4;
RC_BITMAP64 :: 8;
RC_GDI20_OUTPUT :: 16;
RC_GDI20_STATE :: 32;
RC_SAVEBITMAP :: 64;
RC_DI_BITMAP :: 128;
RC_PALETTE :: 256;
RC_DIBTODEV :: 512;
RC_BIGFONT :: 1024;
RC_STRETCHBLT :: 2048;
RC_FLOODFILL :: 4096;
RC_STRETCHDIB :: 8192;
RC_OP_DX_OUTPUT :: 16384;
RC_DEVBITS :: 32768;
SB_NONE :: 0;
SB_CONST_ALPHA :: 1;
SB_PIXEL_ALPHA :: 2;
SB_PREMULT_ALPHA :: 4;
SB_GRAD_RECT :: 16;
SB_GRAD_TRI :: 32;
CM_NONE :: 0;
CM_DEVICE_ICM :: 1;
CM_GAMMA_RAMP :: 2;
CM_CMYK_COLOR :: 4;
SYSPAL_ERROR :: 0;
CBM_INIT :: 4;
CCHFORMNAME :: 32;
DM_SPECVERSION :: 1025;
DM_ORIENTATION :: 1;
DM_PAPERSIZE :: 2;
DM_PAPERLENGTH :: 4;
DM_PAPERWIDTH :: 8;
DM_SCALE :: 16;
DM_POSITION :: 32;
DM_NUP :: 64;
DM_DISPLAYORIENTATION :: 128;
DM_COPIES :: 256;
DM_DEFAULTSOURCE :: 512;
DM_PRINTQUALITY :: 1024;
DM_COLOR :: 2048;
DM_DUPLEX :: 4096;
DM_YRESOLUTION :: 8192;
DM_TTOPTION :: 16384;
DM_COLLATE :: 32768;
DM_FORMNAME :: 65536;
DM_LOGPIXELS :: 131072;
DM_BITSPERPEL :: 262144;
DM_PELSWIDTH :: 524288;
DM_PELSHEIGHT :: 1048576;
DM_DISPLAYFLAGS :: 2097152;
DM_DISPLAYFREQUENCY :: 4194304;
DM_ICMMETHOD :: 8388608;
DM_ICMINTENT :: 16777216;
DM_MEDIATYPE :: 33554432;
DM_DITHERTYPE :: 67108864;
DM_PANNINGWIDTH :: 134217728;
DM_PANNINGHEIGHT :: 268435456;
DM_DISPLAYFIXEDOUTPUT :: 536870912;
DMORIENT_PORTRAIT :: 1;
DMORIENT_LANDSCAPE :: 2;
DMPAPER_LETTER :: 1;
DMPAPER_LETTERSMALL :: 2;
DMPAPER_TABLOID :: 3;
DMPAPER_LEDGER :: 4;
DMPAPER_LEGAL :: 5;
DMPAPER_STATEMENT :: 6;
DMPAPER_EXECUTIVE :: 7;
DMPAPER_A3 :: 8;
DMPAPER_A4 :: 9;
DMPAPER_A4SMALL :: 10;
DMPAPER_A5 :: 11;
DMPAPER_B4 :: 12;
DMPAPER_B5 :: 13;
DMPAPER_FOLIO :: 14;
DMPAPER_QUARTO :: 15;
DMPAPER_10X14 :: 16;
DMPAPER_11X17 :: 17;
DMPAPER_NOTE :: 18;
DMPAPER_ENV_9 :: 19;
DMPAPER_ENV_10 :: 20;
DMPAPER_ENV_11 :: 21;
DMPAPER_ENV_12 :: 22;
DMPAPER_ENV_14 :: 23;
DMPAPER_CSHEET :: 24;
DMPAPER_DSHEET :: 25;
DMPAPER_ESHEET :: 26;
DMPAPER_ENV_DL :: 27;
DMPAPER_ENV_C5 :: 28;
DMPAPER_ENV_C3 :: 29;
DMPAPER_ENV_C4 :: 30;
DMPAPER_ENV_C6 :: 31;
DMPAPER_ENV_C65 :: 32;
DMPAPER_ENV_B4 :: 33;
DMPAPER_ENV_B5 :: 34;
DMPAPER_ENV_B6 :: 35;
DMPAPER_ENV_ITALY :: 36;
DMPAPER_ENV_MONARCH :: 37;
DMPAPER_ENV_PERSONAL :: 38;
DMPAPER_FANFOLD_US :: 39;
DMPAPER_FANFOLD_STD_GERMAN :: 40;
DMPAPER_FANFOLD_LGL_GERMAN :: 41;
DMPAPER_ISO_B4 :: 42;
DMPAPER_JAPANESE_POSTCARD :: 43;
DMPAPER_9X11 :: 44;
DMPAPER_10X11 :: 45;
DMPAPER_15X11 :: 46;
DMPAPER_ENV_INVITE :: 47;
DMPAPER_RESERVED_48 :: 48;
DMPAPER_RESERVED_49 :: 49;
DMPAPER_LETTER_EXTRA :: 50;
DMPAPER_LEGAL_EXTRA :: 51;
DMPAPER_TABLOID_EXTRA :: 52;
DMPAPER_A4_EXTRA :: 53;
DMPAPER_LETTER_TRANSVERSE :: 54;
DMPAPER_A4_TRANSVERSE :: 55;
DMPAPER_LETTER_EXTRA_TRANSVERSE :: 56;
DMPAPER_A_PLUS :: 57;
DMPAPER_B_PLUS :: 58;
DMPAPER_LETTER_PLUS :: 59;
DMPAPER_A4_PLUS :: 60;
DMPAPER_A5_TRANSVERSE :: 61;
DMPAPER_B5_TRANSVERSE :: 62;
DMPAPER_A3_EXTRA :: 63;
DMPAPER_A5_EXTRA :: 64;
DMPAPER_B5_EXTRA :: 65;
DMPAPER_A2 :: 66;
DMPAPER_A3_TRANSVERSE :: 67;
DMPAPER_A3_EXTRA_TRANSVERSE :: 68;
DMPAPER_DBL_JAPANESE_POSTCARD :: 69;
DMPAPER_A6 :: 70;
DMPAPER_JENV_KAKU2 :: 71;
DMPAPER_JENV_KAKU3 :: 72;
DMPAPER_JENV_CHOU3 :: 73;
DMPAPER_JENV_CHOU4 :: 74;
DMPAPER_LETTER_ROTATED :: 75;
DMPAPER_A3_ROTATED :: 76;
DMPAPER_A4_ROTATED :: 77;
DMPAPER_A5_ROTATED :: 78;
DMPAPER_B4_JIS_ROTATED :: 79;
DMPAPER_B5_JIS_ROTATED :: 80;
DMPAPER_JAPANESE_POSTCARD_ROTATED :: 81;
DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED :: 82;
DMPAPER_A6_ROTATED :: 83;
DMPAPER_JENV_KAKU2_ROTATED :: 84;
DMPAPER_JENV_KAKU3_ROTATED :: 85;
DMPAPER_JENV_CHOU3_ROTATED :: 86;
DMPAPER_JENV_CHOU4_ROTATED :: 87;
DMPAPER_B6_JIS :: 88;
DMPAPER_B6_JIS_ROTATED :: 89;
DMPAPER_12X11 :: 90;
DMPAPER_JENV_YOU4 :: 91;
DMPAPER_JENV_YOU4_ROTATED :: 92;
DMPAPER_P16K :: 93;
DMPAPER_P32K :: 94;
DMPAPER_P32KBIG :: 95;
DMPAPER_PENV_1 :: 96;
DMPAPER_PENV_2 :: 97;
DMPAPER_PENV_3 :: 98;
DMPAPER_PENV_4 :: 99;
DMPAPER_PENV_5 :: 100;
DMPAPER_PENV_6 :: 101;
DMPAPER_PENV_7 :: 102;
DMPAPER_PENV_8 :: 103;
DMPAPER_PENV_9 :: 104;
DMPAPER_PENV_10 :: 105;
DMPAPER_P16K_ROTATED :: 106;
DMPAPER_P32K_ROTATED :: 107;
DMPAPER_P32KBIG_ROTATED :: 108;
DMPAPER_PENV_1_ROTATED :: 109;
DMPAPER_PENV_2_ROTATED :: 110;
DMPAPER_PENV_3_ROTATED :: 111;
DMPAPER_PENV_4_ROTATED :: 112;
DMPAPER_PENV_5_ROTATED :: 113;
DMPAPER_PENV_6_ROTATED :: 114;
DMPAPER_PENV_7_ROTATED :: 115;
DMPAPER_PENV_8_ROTATED :: 116;
DMPAPER_PENV_9_ROTATED :: 117;
DMPAPER_PENV_10_ROTATED :: 118;
DMPAPER_LAST :: 118;
DMPAPER_USER :: 256;
DMBIN_UPPER :: 1;
DMBIN_ONLYONE :: 1;
DMBIN_LOWER :: 2;
DMBIN_MIDDLE :: 3;
DMBIN_MANUAL :: 4;
DMBIN_ENVELOPE :: 5;
DMBIN_ENVMANUAL :: 6;
DMBIN_AUTO :: 7;
DMBIN_TRACTOR :: 8;
DMBIN_SMALLFMT :: 9;
DMBIN_LARGEFMT :: 10;
DMBIN_LARGECAPACITY :: 11;
DMBIN_CASSETTE :: 14;
DMBIN_FORMSOURCE :: 15;
DMBIN_LAST :: 15;
DMBIN_USER :: 256;
DMRES_DRAFT :: -1;
DMRES_LOW :: -2;
DMRES_MEDIUM :: -3;
DMRES_HIGH :: -4;
DMCOLOR_MONOCHROME :: 1;
DMCOLOR_COLOR :: 2;
DMDUP_SIMPLEX :: 1;
DMDUP_VERTICAL :: 2;
DMDUP_HORIZONTAL :: 3;
DMTT_BITMAP :: 1;
DMTT_DOWNLOAD :: 2;
DMTT_SUBDEV :: 3;
DMTT_DOWNLOAD_OUTLINE :: 4;
DMCOLLATE_FALSE :: 0;
DMCOLLATE_TRUE :: 1;
DMDO_DEFAULT :: 0;
DMDO_90 :: 1;
DMDO_180 :: 2;
DMDO_270 :: 3;
DMDFO_DEFAULT :: 0;
DMDFO_STRETCH :: 1;
DMDFO_CENTER :: 2;
DM_INTERLACED :: 2;
DMDISPLAYFLAGS_TEXTMODE :: 4;
DMNUP_SYSTEM :: 1;
DMNUP_ONEUP :: 2;
DMICMMETHOD_NONE :: 1;
DMICMMETHOD_SYSTEM :: 2;
DMICMMETHOD_DRIVER :: 3;
DMICMMETHOD_DEVICE :: 4;
DMICMMETHOD_USER :: 256;
DMICM_SATURATE :: 1;
DMICM_CONTRAST :: 2;
DMICM_COLORIMETRIC :: 3;
DMICM_ABS_COLORIMETRIC :: 4;
DMICM_USER :: 256;
DMMEDIA_STANDARD :: 1;
DMMEDIA_TRANSPARENCY :: 2;
DMMEDIA_GLOSSY :: 3;
DMMEDIA_USER :: 256;
DMDITHER_NONE :: 1;
DMDITHER_COARSE :: 2;
DMDITHER_FINE :: 3;
DMDITHER_LINEART :: 4;
DMDITHER_ERRORDIFFUSION :: 5;
DMDITHER_RESERVED6 :: 6;
DMDITHER_RESERVED7 :: 7;
DMDITHER_RESERVED8 :: 8;
DMDITHER_RESERVED9 :: 9;
DMDITHER_GRAYSCALE :: 10;
DMDITHER_USER :: 256;
DISPLAY_DEVICE_ATTACHED_TO_DESKTOP :: 1;
DISPLAY_DEVICE_MULTI_DRIVER :: 2;
DISPLAY_DEVICE_PRIMARY_DEVICE :: 4;
DISPLAY_DEVICE_MIRRORING_DRIVER :: 8;
DISPLAY_DEVICE_VGA_COMPATIBLE :: 16;
DISPLAY_DEVICE_REMOVABLE :: 32;
DISPLAY_DEVICE_ACC_DRIVER :: 64;
DISPLAY_DEVICE_MODESPRUNED :: 134217728;
DISPLAY_DEVICE_RDPUDD :: 16777216;
DISPLAY_DEVICE_REMOTE :: 67108864;
DISPLAY_DEVICE_DISCONNECT :: 33554432;
DISPLAY_DEVICE_TS_COMPATIBLE :: 2097152;
DISPLAY_DEVICE_UNSAFE_MODES_ON :: 524288;
DISPLAY_DEVICE_ACTIVE :: 1;
DISPLAY_DEVICE_ATTACHED :: 2;
DISPLAYCONFIG_MAXPATH :: 1024;
DISPLAYCONFIG_PATH_MODE_IDX_INVALID :: 4294967295;
DISPLAYCONFIG_PATH_TARGET_MODE_IDX_INVALID :: 65535;
DISPLAYCONFIG_PATH_DESKTOP_IMAGE_IDX_INVALID :: 65535;
DISPLAYCONFIG_PATH_SOURCE_MODE_IDX_INVALID :: 65535;
DISPLAYCONFIG_PATH_CLONE_GROUP_INVALID :: 65535;
DISPLAYCONFIG_SOURCE_IN_USE :: 1;
DISPLAYCONFIG_TARGET_IN_USE :: 1;
DISPLAYCONFIG_TARGET_FORCIBLE :: 2;
DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_BOOT :: 4;
DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_PATH :: 8;
DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_SYSTEM :: 16;
DISPLAYCONFIG_TARGET_IS_HMD :: 32;
DISPLAYCONFIG_PATH_ACTIVE :: 1;
DISPLAYCONFIG_PATH_PREFERRED_UNSCALED :: 4;
DISPLAYCONFIG_PATH_SUPPORT_VIRTUAL_MODE :: 8;
DISPLAYCONFIG_PATH_VALID_FLAGS :: 29;
QDC_ALL_PATHS :: 1;
QDC_ONLY_ACTIVE_PATHS :: 2;
QDC_DATABASE_CURRENT :: 4;
QDC_VIRTUAL_MODE_AWARE :: 16;
QDC_INCLUDE_HMD :: 32;
QDC_VIRTUAL_REFRESH_RATE_AWARE :: 64;
SDC_TOPOLOGY_INTERNAL :: 1;
SDC_TOPOLOGY_CLONE :: 2;
SDC_TOPOLOGY_EXTEND :: 4;
SDC_TOPOLOGY_EXTERNAL :: 8;
SDC_TOPOLOGY_SUPPLIED :: 16;
SDC_USE_SUPPLIED_DISPLAY_CONFIG :: 32;
SDC_VALIDATE :: 64;
SDC_APPLY :: 128;
SDC_NO_OPTIMIZATION :: 256;
SDC_SAVE_TO_DATABASE :: 512;
SDC_ALLOW_CHANGES :: 1024;
SDC_PATH_PERSIST_IF_REQUIRED :: 2048;
SDC_FORCE_MODE_ENUMERATION :: 4096;
SDC_ALLOW_PATH_ORDER_CHANGES :: 8192;
SDC_VIRTUAL_MODE_AWARE :: 32768;
SDC_VIRTUAL_REFRESH_RATE_AWARE :: 131072;
RDH_RECTANGLES :: 1;
SYSRGN :: 4;
TT_POLYGON_TYPE :: 24;
TT_PRIM_LINE :: 1;
TT_PRIM_QSPLINE :: 2;
TT_PRIM_CSPLINE :: 3;
GCP_DBCS :: 1;
GCP_ERROR :: 32768;
FLI_MASK :: 4155;
FLI_GLYPHS :: 262144;
GCP_JUSTIFYIN :: 2097152;
GCPCLASS_LATIN :: 1;
GCPCLASS_HEBREW :: 2;
GCPCLASS_ARABIC :: 2;
GCPCLASS_NEUTRAL :: 3;
GCPCLASS_LOCALNUMBER :: 4;
GCPCLASS_LATINNUMBER :: 5;
GCPCLASS_LATINNUMERICTERMINATOR :: 6;
GCPCLASS_LATINNUMERICSEPARATOR :: 7;
GCPCLASS_NUMERICSEPARATOR :: 8;
GCPCLASS_PREBOUNDLTR :: 128;
GCPCLASS_PREBOUNDRTL :: 64;
GCPCLASS_POSTBOUNDLTR :: 32;
GCPCLASS_POSTBOUNDRTL :: 16;
GCPGLYPH_LINKBEFORE :: 32768;
GCPGLYPH_LINKAFTER :: 16384;
TT_AVAILABLE :: 1;
TT_ENABLED :: 2;
PFD_TYPE_RGBA :: 0;
PFD_TYPE_COLORINDEX :: 1;
PFD_MAIN_PLANE :: 0;
PFD_OVERLAY_PLANE :: 1;
PFD_UNDERLAY_PLANE :: -1;
PFD_DOUBLEBUFFER :: 1;
PFD_STEREO :: 2;
PFD_DRAW_TO_WINDOW :: 4;
PFD_DRAW_TO_BITMAP :: 8;
PFD_SUPPORT_GDI :: 16;
PFD_SUPPORT_OPENGL :: 32;
PFD_GENERIC_FORMAT :: 64;
PFD_NEED_PALETTE :: 128;
PFD_NEED_SYSTEM_PALETTE :: 256;
PFD_SWAP_EXCHANGE :: 512;
PFD_SWAP_COPY :: 1024;
PFD_SWAP_LAYER_BUFFERS :: 2048;
PFD_GENERIC_ACCELERATED :: 4096;
PFD_SUPPORT_DIRECTDRAW :: 8192;
PFD_DIRECT3D_ACCELERATED :: 16384;
PFD_SUPPORT_COMPOSITION :: 32768;
PFD_DEPTH_DONTCARE :: 536870912;
PFD_DOUBLEBUFFER_DONTCARE :: 1073741824;
PFD_STEREO_DONTCARE :: 2147483648;
DC_BINADJUST :: 19;
DC_EMF_COMPLIANT :: 20;
DC_DATATYPE_PRODUCED :: 21;
DC_MANUFACTURER :: 23;
DC_MODEL :: 24;
PRINTRATEUNIT_PPM :: 1;
PRINTRATEUNIT_CPS :: 2;
PRINTRATEUNIT_LPM :: 3;
PRINTRATEUNIT_IPM :: 4;
DCTT_BITMAP :: 1;
DCTT_DOWNLOAD :: 2;
DCTT_SUBDEV :: 4;
DCTT_DOWNLOAD_OUTLINE :: 8;
DCBA_FACEUPNONE :: 0;
DCBA_FACEUPCENTER :: 1;
DCBA_FACEUPLEFT :: 2;
DCBA_FACEUPRIGHT :: 3;
DCBA_FACEDOWNNONE :: 256;
DCBA_FACEDOWNCENTER :: 257;
DCBA_FACEDOWNLEFT :: 258;
DCBA_FACEDOWNRIGHT :: 259;
GS_8BIT_INDICES :: 1;
GGI_MARK_NONEXISTING_GLYPHS :: 1;
MM_MAX_NUMAXES :: 16;
MM_MAX_AXES_NAMELEN :: 16;
GDIREGISTERDDRAWPACKETVERSION :: 1;
AC_SRC_OVER :: 0;
AC_SRC_ALPHA :: 1;
GRADIENT_FILL_OP_FLAG :: 255;
CA_NEGATIVE :: 1;
CA_LOG_FILTER :: 2;
ILLUMINANT_DEVICE_DEFAULT :: 0;
ILLUMINANT_A :: 1;
ILLUMINANT_B :: 2;
ILLUMINANT_C :: 3;
ILLUMINANT_D50 :: 4;
ILLUMINANT_D55 :: 5;
ILLUMINANT_D65 :: 6;
ILLUMINANT_D75 :: 7;
ILLUMINANT_F2 :: 8;
ILLUMINANT_MAX_INDEX :: 8;
ILLUMINANT_TUNGSTEN :: 1;
ILLUMINANT_DAYLIGHT :: 3;
ILLUMINANT_FLUORESCENT :: 8;
ILLUMINANT_NTSC :: 3;
DI_APPBANDING :: 1;
DI_ROPS_READ_DESTINATION :: 2;
FONTMAPPER_MAX :: 10;
ICM_OFF :: 1;
ICM_ON :: 2;
ICM_QUERY :: 3;
ICM_DONE_OUTSIDEDC :: 4;
ENHMETA_SIGNATURE :: 1179469088;
ENHMETA_STOCK_OBJECT :: 2147483648;
EMR_HEADER :: 1;
EMR_POLYBEZIER :: 2;
EMR_POLYGON :: 3;
EMR_POLYLINE :: 4;
EMR_POLYBEZIERTO :: 5;
EMR_POLYLINETO :: 6;
EMR_POLYPOLYLINE :: 7;
EMR_POLYPOLYGON :: 8;
EMR_SETWINDOWEXTEX :: 9;
EMR_SETWINDOWORGEX :: 10;
EMR_SETVIEWPORTEXTEX :: 11;
EMR_SETVIEWPORTORGEX :: 12;
EMR_SETBRUSHORGEX :: 13;
EMR_EOF :: 14;
EMR_SETPIXELV :: 15;
EMR_SETMAPPERFLAGS :: 16;
EMR_SETMAPMODE :: 17;
EMR_SETBKMODE :: 18;
EMR_SETPOLYFILLMODE :: 19;
EMR_SETROP2 :: 20;
EMR_SETSTRETCHBLTMODE :: 21;
EMR_SETTEXTALIGN :: 22;
EMR_SETCOLORADJUSTMENT :: 23;
EMR_SETTEXTCOLOR :: 24;
EMR_SETBKCOLOR :: 25;
EMR_OFFSETCLIPRGN :: 26;
EMR_MOVETOEX :: 27;
EMR_SETMETARGN :: 28;
EMR_EXCLUDECLIPRECT :: 29;
EMR_INTERSECTCLIPRECT :: 30;
EMR_SCALEVIEWPORTEXTEX :: 31;
EMR_SCALEWINDOWEXTEX :: 32;
EMR_SAVEDC :: 33;
EMR_RESTOREDC :: 34;
EMR_SETWORLDTRANSFORM :: 35;
EMR_MODIFYWORLDTRANSFORM :: 36;
EMR_SELECTOBJECT :: 37;
EMR_CREATEPEN :: 38;
EMR_CREATEBRUSHINDIRECT :: 39;
EMR_DELETEOBJECT :: 40;
EMR_ANGLEARC :: 41;
EMR_ELLIPSE :: 42;
EMR_RECTANGLE :: 43;
EMR_ROUNDRECT :: 44;
EMR_ARC :: 45;
EMR_CHORD :: 46;
EMR_PIE :: 47;
EMR_SELECTPALETTE :: 48;
EMR_CREATEPALETTE :: 49;
EMR_SETPALETTEENTRIES :: 50;
EMR_RESIZEPALETTE :: 51;
EMR_REALIZEPALETTE :: 52;
EMR_EXTFLOODFILL :: 53;
EMR_LINETO :: 54;
EMR_ARCTO :: 55;
EMR_POLYDRAW :: 56;
EMR_SETARCDIRECTION :: 57;
EMR_SETMITERLIMIT :: 58;
EMR_BEGINPATH :: 59;
EMR_ENDPATH :: 60;
EMR_CLOSEFIGURE :: 61;
EMR_FILLPATH :: 62;
EMR_STROKEANDFILLPATH :: 63;
EMR_STROKEPATH :: 64;
EMR_FLATTENPATH :: 65;
EMR_WIDENPATH :: 66;
EMR_SELECTCLIPPATH :: 67;
EMR_ABORTPATH :: 68;
EMR_GDICOMMENT :: 70;
EMR_FILLRGN :: 71;
EMR_FRAMERGN :: 72;
EMR_INVERTRGN :: 73;
EMR_PAINTRGN :: 74;
EMR_EXTSELECTCLIPRGN :: 75;
EMR_BITBLT :: 76;
EMR_STRETCHBLT :: 77;
EMR_MASKBLT :: 78;
EMR_PLGBLT :: 79;
EMR_SETDIBITSTODEVICE :: 80;
EMR_STRETCHDIBITS :: 81;
EMR_EXTCREATEFONTINDIRECTW :: 82;
EMR_EXTTEXTOUTA :: 83;
EMR_EXTTEXTOUTW :: 84;
EMR_POLYBEZIER16 :: 85;
EMR_POLYGON16 :: 86;
EMR_POLYLINE16 :: 87;
EMR_POLYBEZIERTO16 :: 88;
EMR_POLYLINETO16 :: 89;
EMR_POLYPOLYLINE16 :: 90;
EMR_POLYPOLYGON16 :: 91;
EMR_POLYDRAW16 :: 92;
EMR_CREATEMONOBRUSH :: 93;
EMR_CREATEDIBPATTERNBRUSHPT :: 94;
EMR_EXTCREATEPEN :: 95;
EMR_POLYTEXTOUTA :: 96;
EMR_POLYTEXTOUTW :: 97;
EMR_SETICMMODE :: 98;
EMR_CREATECOLORSPACE :: 99;
EMR_SETCOLORSPACE :: 100;
EMR_DELETECOLORSPACE :: 101;
EMR_GLSRECORD :: 102;
EMR_GLSBOUNDEDRECORD :: 103;
EMR_PIXELFORMAT :: 104;
EMR_RESERVED_105 :: 105;
EMR_RESERVED_106 :: 106;
EMR_RESERVED_107 :: 107;
EMR_RESERVED_108 :: 108;
EMR_RESERVED_109 :: 109;
EMR_RESERVED_110 :: 110;
EMR_COLORCORRECTPALETTE :: 111;
EMR_SETICMPROFILEA :: 112;
EMR_SETICMPROFILEW :: 113;
EMR_ALPHABLEND :: 114;
EMR_SETLAYOUT :: 115;
EMR_TRANSPARENTBLT :: 116;
EMR_RESERVED_117 :: 117;
EMR_GRADIENTFILL :: 118;
EMR_RESERVED_119 :: 119;
EMR_RESERVED_120 :: 120;
EMR_COLORMATCHTOTARGETW :: 121;
EMR_CREATECOLORSPACEW :: 122;
EMR_MIN :: 1;
EMR_MAX :: 122;
SETICMPROFILE_EMBEDED :: 1;
CREATECOLORSPACE_EMBEDED :: 1;
COLORMATCHTOTARGET_EMBEDED :: 1;
GDICOMMENT_IDENTIFIER :: 1128875079;
GDICOMMENT_WINDOWS_METAFILE :: 2147483649;
GDICOMMENT_BEGINGROUP :: 2;
GDICOMMENT_ENDGROUP :: 3;
GDICOMMENT_MULTIFORMATS :: 1073741828;
EPS_SIGNATURE :: 1179865157;
GDICOMMENT_UNICODE_STRING :: 64;
GDICOMMENT_UNICODE_END :: 128;
WGL_FONT_LINES :: 0;
WGL_FONT_POLYGONS :: 1;
LPD_DOUBLEBUFFER :: 1;
LPD_STEREO :: 2;
LPD_SUPPORT_GDI :: 16;
LPD_SUPPORT_OPENGL :: 32;
LPD_SHARE_DEPTH :: 64;
LPD_SHARE_STENCIL :: 128;
LPD_SHARE_ACCUM :: 256;
LPD_SWAP_EXCHANGE :: 512;
LPD_SWAP_COPY :: 1024;
LPD_TRANSPARENT :: 4096;
LPD_TYPE_RGBA :: 0;
LPD_TYPE_COLORINDEX :: 1;
WGL_SWAP_MAIN_PLANE :: 1;
WGL_SWAP_OVERLAY1 :: 2;
WGL_SWAP_OVERLAY2 :: 4;
WGL_SWAP_OVERLAY3 :: 8;
WGL_SWAP_OVERLAY4 :: 16;
WGL_SWAP_OVERLAY5 :: 32;
WGL_SWAP_OVERLAY6 :: 64;
WGL_SWAP_OVERLAY7 :: 128;
WGL_SWAP_OVERLAY8 :: 256;
WGL_SWAP_OVERLAY9 :: 512;
WGL_SWAP_OVERLAY10 :: 1024;
WGL_SWAP_OVERLAY11 :: 2048;
WGL_SWAP_OVERLAY12 :: 4096;
WGL_SWAP_OVERLAY13 :: 8192;
WGL_SWAP_OVERLAY14 :: 16384;
WGL_SWAP_OVERLAY15 :: 32768;
WGL_SWAP_UNDERLAY1 :: 65536;
WGL_SWAP_UNDERLAY2 :: 131072;
WGL_SWAP_UNDERLAY3 :: 262144;
WGL_SWAP_UNDERLAY4 :: 524288;
WGL_SWAP_UNDERLAY5 :: 1048576;
WGL_SWAP_UNDERLAY6 :: 2097152;
WGL_SWAP_UNDERLAY7 :: 4194304;
WGL_SWAP_UNDERLAY8 :: 8388608;
WGL_SWAP_UNDERLAY9 :: 16777216;
WGL_SWAP_UNDERLAY10 :: 33554432;
WGL_SWAP_UNDERLAY11 :: 67108864;
WGL_SWAP_UNDERLAY12 :: 134217728;
WGL_SWAP_UNDERLAY13 :: 268435456;
WGL_SWAP_UNDERLAY14 :: 536870912;
WGL_SWAP_UNDERLAY15 :: 1073741824;
WGL_SWAPMULTIPLE_MAX :: 16;
NEWTRANSPARENT :: 3;
QUERYROPSUPPORT :: 40;
SELECTDIB :: 41;
SC_SCREENSAVE :: 61760;
TTFCFP_SUBSET :: 0;
TTFCFP_SUBSET1 :: 1;
TTFCFP_DELTA :: 2;
TTFCFP_APPLE_PLATFORMID :: 1;
TTFCFP_MS_PLATFORMID :: 3;
TTFCFP_DONT_CARE :: 65535;
TTFCFP_LANG_KEEP_ALL :: 0;
TTFCFP_FLAGS_SUBSET :: 1;
TTFCFP_FLAGS_COMPRESS :: 2;
TTFCFP_FLAGS_TTC :: 4;
TTFCFP_FLAGS_GLYPHLIST :: 8;
TTFMFP_SUBSET :: 0;
TTFMFP_SUBSET1 :: 1;
TTFMFP_DELTA :: 2;
ERR_GENERIC :: 1000;
ERR_READOUTOFBOUNDS :: 1001;
ERR_WRITEOUTOFBOUNDS :: 1002;
ERR_READCONTROL :: 1003;
ERR_WRITECONTROL :: 1004;
ERR_MEM :: 1005;
ERR_FORMAT :: 1006;
ERR_WOULD_GROW :: 1007;
ERR_VERSION :: 1008;
ERR_NO_GLYPHS :: 1009;
ERR_INVALID_MERGE_FORMATS :: 1010;
ERR_INVALID_MERGE_CHECKSUMS :: 1011;
ERR_INVALID_MERGE_NUMGLYPHS :: 1012;
ERR_INVALID_DELTA_FORMAT :: 1013;
ERR_NOT_TTC :: 1014;
ERR_INVALID_TTC_INDEX :: 1015;
ERR_MISSING_CMAP :: 1030;
ERR_MISSING_GLYF :: 1031;
ERR_MISSING_HEAD :: 1032;
ERR_MISSING_HHEA :: 1033;
ERR_MISSING_HMTX :: 1034;
ERR_MISSING_LOCA :: 1035;
ERR_MISSING_MAXP :: 1036;
ERR_MISSING_NAME :: 1037;
ERR_MISSING_POST :: 1038;
ERR_MISSING_OS2 :: 1039;
ERR_MISSING_VHEA :: 1040;
ERR_MISSING_VMTX :: 1041;
ERR_MISSING_HHEA_OR_VHEA :: 1042;
ERR_MISSING_HMTX_OR_VMTX :: 1043;
ERR_MISSING_EBDT :: 1044;
ERR_INVALID_CMAP :: 1060;
ERR_INVALID_GLYF :: 1061;
ERR_INVALID_HEAD :: 1062;
ERR_INVALID_HHEA :: 1063;
ERR_INVALID_HMTX :: 1064;
ERR_INVALID_LOCA :: 1065;
ERR_INVALID_MAXP :: 1066;
ERR_INVALID_NAME :: 1067;
ERR_INVALID_POST :: 1068;
ERR_INVALID_OS2 :: 1069;
ERR_INVALID_VHEA :: 1070;
ERR_INVALID_VMTX :: 1071;
ERR_INVALID_HHEA_OR_VHEA :: 1072;
ERR_INVALID_HMTX_OR_VMTX :: 1073;
ERR_INVALID_TTO :: 1080;
ERR_INVALID_GSUB :: 1081;
ERR_INVALID_GPOS :: 1082;
ERR_INVALID_GDEF :: 1083;
ERR_INVALID_JSTF :: 1084;
ERR_INVALID_BASE :: 1085;
ERR_INVALID_EBLC :: 1086;
ERR_INVALID_LTSH :: 1087;
ERR_INVALID_VDMX :: 1088;
ERR_INVALID_HDMX :: 1089;
ERR_PARAMETER0 :: 1100;
ERR_PARAMETER1 :: 1101;
ERR_PARAMETER2 :: 1102;
ERR_PARAMETER3 :: 1103;
ERR_PARAMETER4 :: 1104;
ERR_PARAMETER5 :: 1105;
ERR_PARAMETER6 :: 1106;
ERR_PARAMETER7 :: 1107;
ERR_PARAMETER8 :: 1108;
ERR_PARAMETER9 :: 1109;
ERR_PARAMETER10 :: 1110;
ERR_PARAMETER11 :: 1111;
ERR_PARAMETER12 :: 1112;
ERR_PARAMETER13 :: 1113;
ERR_PARAMETER14 :: 1114;
ERR_PARAMETER15 :: 1115;
ERR_PARAMETER16 :: 1116;
CHARSET_DEFAULT :: 1;
CHARSET_GLYPHIDX :: 3;
TTEMBED_FAILIFVARIATIONSIMULATED :: 16;
TTEMBED_WEBOBJECT :: 128;
TTEMBED_XORENCRYPTDATA :: 268435456;
TTEMBED_VARIATIONSIMULATED :: 1;
TTEMBED_EUDCEMBEDDED :: 2;
TTEMBED_SUBSETCANCEL :: 4;
TTLOAD_PRIVATE :: 1;
TTLOAD_EUDC_OVERWRITE :: 2;
TTLOAD_EUDC_SET :: 4;
TTDELETE_DONTREMOVEFONT :: 1;
E_NONE :: 0;
E_API_NOTIMPL :: 1;
E_CHARCODECOUNTINVALID :: 2;
E_CHARCODESETINVALID :: 3;
E_DEVICETRUETYPEFONT :: 4;
E_HDCINVALID :: 6;
E_NOFREEMEMORY :: 7;
E_FONTREFERENCEINVALID :: 8;
E_NOTATRUETYPEFONT :: 10;
E_ERRORACCESSINGFONTDATA :: 12;
E_ERRORACCESSINGFACENAME :: 13;
E_ERRORUNICODECONVERSION :: 17;
E_ERRORCONVERTINGCHARS :: 18;
E_EXCEPTION :: 19;
E_RESERVEDPARAMNOTNULL :: 20;
E_CHARSETINVALID :: 21;
E_FILE_NOT_FOUND :: 23;
E_TTC_INDEX_OUT_OF_RANGE :: 24;
E_INPUTPARAMINVALID :: 25;
E_ERRORCOMPRESSINGFONTDATA :: 256;
E_FONTDATAINVALID :: 258;
E_NAMECHANGEFAILED :: 259;
E_FONTNOTEMBEDDABLE :: 260;
E_PRIVSINVALID :: 261;
E_SUBSETTINGFAILED :: 262;
E_READFROMSTREAMFAILED :: 263;
E_SAVETOSTREAMFAILED :: 264;
E_NOOS2 :: 265;
E_T2NOFREEMEMORY :: 266;
E_ERRORREADINGFONTDATA :: 267;
E_FLAGSINVALID :: 268;
E_ERRORCREATINGFONTFILE :: 269;
E_FONTALREADYEXISTS :: 270;
E_FONTNAMEALREADYEXISTS :: 271;
E_FONTINSTALLFAILED :: 272;
E_ERRORDECOMPRESSINGFONTDATA :: 273;
E_ERRORACCESSINGEXCLUDELIST :: 274;
E_FACENAMEINVALID :: 275;
E_STREAMINVALID :: 276;
E_STATUSINVALID :: 277;
E_PRIVSTATUSINVALID :: 278;
E_PERMISSIONSINVALID :: 279;
E_PBENABLEDINVALID :: 280;
E_SUBSETTINGEXCEPTION :: 281;
E_SUBSTRING_TEST_FAIL :: 282;
E_FONTVARIATIONSIMULATED :: 283;
E_FONTFAMILYNAMENOTINFULL :: 285;
E_ADDFONTFAILED :: 512;
E_COULDNTCREATETEMPFILE :: 513;
E_FONTFILECREATEFAILED :: 515;
E_WINDOWSAPI :: 516;
E_FONTFILENOTFOUND :: 517;
E_RESOURCEFILECREATEFAILED :: 518;
E_ERROREXPANDINGFONTDATA :: 519;
E_ERRORGETTINGDC :: 520;
E_EXCEPTIONINDECOMPRESSION :: 521;
E_EXCEPTIONINCOMPRESSION :: 522;

// Types

R2_MODE :: enum s32
{
    R2_BLACK :: 1;
    R2_NOTMERGEPEN :: 2;
    R2_MASKNOTPEN :: 3;
    R2_NOTCOPYPEN :: 4;
    R2_MASKPENNOT :: 5;
    R2_NOT :: 6;
    R2_XORPEN :: 7;
    R2_NOTMASKPEN :: 8;
    R2_MASKPEN :: 9;
    R2_NOTXORPEN :: 10;
    R2_NOP :: 11;
    R2_MERGENOTPEN :: 12;
    R2_COPYPEN :: 13;
    R2_MERGEPENNOT :: 14;
    R2_MERGEPEN :: 15;
    R2_WHITE :: 16;
    R2_LAST :: 16;
}

RGN_COMBINE_MODE :: enum s32
{
    RGN_AND :: 1;
    RGN_OR :: 2;
    RGN_XOR :: 3;
    RGN_DIFF :: 4;
    RGN_COPY :: 5;
    RGN_MIN :: 1;
    RGN_MAX :: 5;
}

ETO_OPTIONS :: enum_flags u32
{
    ETO_OPAQUE :: 2;
    ETO_CLIPPED :: 4;
    ETO_GLYPH_INDEX :: 16;
    ETO_RTLREADING :: 128;
    ETO_NUMERICSLOCAL :: 1024;
    ETO_NUMERICSLATIN :: 2048;
    ETO_IGNORELANGUAGE :: 4096;
    ETO_PDY :: 8192;
    ETO_REVERSE_INDEX_MAP :: 65536;
}

OBJ_TYPE :: enum s32
{
    OBJ_PEN :: 1;
    OBJ_BRUSH :: 2;
    OBJ_DC :: 3;
    OBJ_METADC :: 4;
    OBJ_PAL :: 5;
    OBJ_FONT :: 6;
    OBJ_BITMAP :: 7;
    OBJ_REGION :: 8;
    OBJ_METAFILE :: 9;
    OBJ_MEMDC :: 10;
    OBJ_EXTPEN :: 11;
    OBJ_ENHMETADC :: 12;
    OBJ_ENHMETAFILE :: 13;
    OBJ_COLORSPACE :: 14;
}

ROP_CODE :: enum u32
{
    SRCCOPY :: 13369376;
    SRCPAINT :: 15597702;
    SRCAND :: 8913094;
    SRCINVERT :: 6684742;
    SRCERASE :: 4457256;
    NOTSRCCOPY :: 3342344;
    NOTSRCERASE :: 1114278;
    MERGECOPY :: 12583114;
    MERGEPAINT :: 12255782;
    PATCOPY :: 15728673;
    PATPAINT :: 16452105;
    PATINVERT :: 5898313;
    DSTINVERT :: 5570569;
    BLACKNESS :: 66;
    WHITENESS :: 16711778;
    NOMIRRORBITMAP :: 2147483648;
    CAPTUREBLT :: 1073741824;
}

DIB_USAGE :: enum u32
{
    DIB_RGB_COLORS :: 0;
    DIB_PAL_COLORS :: 1;
}

DRAWEDGE_FLAGS :: enum_flags u32
{
    BDR_RAISEDOUTER :: 1;
    BDR_SUNKENOUTER :: 2;
    BDR_RAISEDINNER :: 4;
    BDR_SUNKENINNER :: 8;
    BDR_OUTER :: 3;
    BDR_INNER :: 12;
    BDR_RAISED :: 5;
    BDR_SUNKEN :: 10;
    EDGE_RAISED :: 5;
    EDGE_SUNKEN :: 10;
    EDGE_ETCHED :: 6;
    EDGE_BUMP :: 9;
}

DFC_TYPE :: enum u32
{
    DFC_CAPTION :: 1;
    DFC_MENU :: 2;
    DFC_SCROLL :: 3;
    DFC_BUTTON :: 4;
    DFC_POPUPMENU :: 5;
}

DFCS_STATE :: enum_flags u32
{
    DFCS_CAPTIONCLOSE :: 0;
    DFCS_CAPTIONMIN :: 1;
    DFCS_CAPTIONMAX :: 2;
    DFCS_CAPTIONRESTORE :: 3;
    DFCS_CAPTIONHELP :: 4;
    DFCS_MENUARROW :: 0;
    DFCS_MENUCHECK :: 1;
    DFCS_MENUBULLET :: 2;
    DFCS_MENUARROWRIGHT :: 4;
    DFCS_SCROLLUP :: 0;
    DFCS_SCROLLDOWN :: 1;
    DFCS_SCROLLLEFT :: 2;
    DFCS_SCROLLRIGHT :: 3;
    DFCS_SCROLLCOMBOBOX :: 5;
    DFCS_SCROLLSIZEGRIP :: 8;
    DFCS_SCROLLSIZEGRIPRIGHT :: 16;
    DFCS_BUTTONCHECK :: 0;
    DFCS_BUTTONRADIOIMAGE :: 1;
    DFCS_BUTTONRADIOMASK :: 2;
    DFCS_BUTTONRADIO :: 4;
    DFCS_BUTTON3STATE :: 8;
    DFCS_BUTTONPUSH :: 16;
    DFCS_INACTIVE :: 256;
    DFCS_PUSHED :: 512;
    DFCS_CHECKED :: 1024;
    DFCS_TRANSPARENT :: 2048;
    DFCS_HOT :: 4096;
    DFCS_ADJUSTRECT :: 8192;
    DFCS_FLAT :: 16384;
    DFCS_MONO :: 32768;
}

CDS_TYPE :: enum_flags u32
{
    CDS_FULLSCREEN :: 4;
    CDS_GLOBAL :: 8;
    CDS_NORESET :: 268435456;
    CDS_RESET :: 1073741824;
    CDS_SET_PRIMARY :: 16;
    CDS_TEST :: 2;
    CDS_UPDATEREGISTRY :: 1;
    CDS_VIDEOPARAMETERS :: 32;
    CDS_ENABLE_UNSAFE_MODES :: 256;
    CDS_DISABLE_UNSAFE_MODES :: 512;
    CDS_RESET_EX :: 536870912;
}

DISP_CHANGE :: enum s32
{
    DISP_CHANGE_SUCCESSFUL :: 0;
    DISP_CHANGE_RESTART :: 1;
    DISP_CHANGE_FAILED :: -1;
    DISP_CHANGE_BADMODE :: -2;
    DISP_CHANGE_NOTUPDATED :: -3;
    DISP_CHANGE_BADFLAGS :: -4;
    DISP_CHANGE_BADPARAM :: -5;
    DISP_CHANGE_BADDUALVIEW :: -6;
}

DRAWSTATE_FLAGS :: enum_flags u32
{
    DST_COMPLEX :: 0;
    DST_TEXT :: 1;
    DST_PREFIXTEXT :: 2;
    DST_ICON :: 3;
    DST_BITMAP :: 4;
    DSS_NORMAL :: 0;
    DSS_UNION :: 16;
    DSS_DISABLED :: 32;
    DSS_MONO :: 128;
    DSS_HIDEPREFIX :: 512;
    DSS_PREFIXONLY :: 1024;
    DSS_RIGHT :: 32768;
}

REDRAW_WINDOW_FLAGS :: enum_flags u32
{
    RDW_INVALIDATE :: 1;
    RDW_INTERNALPAINT :: 2;
    RDW_ERASE :: 4;
    RDW_VALIDATE :: 8;
    RDW_NOINTERNALPAINT :: 16;
    RDW_NOERASE :: 32;
    RDW_NOCHILDREN :: 64;
    RDW_ALLCHILDREN :: 128;
    RDW_UPDATENOW :: 256;
    RDW_ERASENOW :: 512;
    RDW_FRAME :: 1024;
    RDW_NOFRAME :: 2048;
}

ENUM_DISPLAY_SETTINGS_MODE :: enum u32
{
    ENUM_CURRENT_SETTINGS :: 4294967295;
    ENUM_REGISTRY_SETTINGS :: 4294967294;
}

TEXT_ALIGN_OPTIONS :: enum u32
{
    TA_NOUPDATECP :: 0;
    TA_UPDATECP :: 1;
    TA_LEFT :: 0;
    TA_RIGHT :: 2;
    TA_CENTER :: 6;
    TA_TOP :: 0;
    TA_BOTTOM :: 8;
    TA_BASELINE :: 24;
    TA_RTLREADING :: 256;
    TA_MASK :: 287;
    VTA_BASELINE :: 24;
    VTA_LEFT :: 8;
    VTA_RIGHT :: 0;
    VTA_CENTER :: 6;
    VTA_BOTTOM :: 2;
    VTA_TOP :: 0;
}

PEN_STYLE :: enum_flags u32
{
    PS_GEOMETRIC :: 65536;
    PS_COSMETIC :: 0;
    PS_SOLID :: 0;
    PS_DASH :: 1;
    PS_DOT :: 2;
    PS_DASHDOT :: 3;
    PS_DASHDOTDOT :: 4;
    PS_NULL :: 5;
    PS_INSIDEFRAME :: 6;
    PS_USERSTYLE :: 7;
    PS_ALTERNATE :: 8;
    PS_STYLE_MASK :: 15;
    PS_ENDCAP_ROUND :: 0;
    PS_ENDCAP_SQUARE :: 256;
    PS_ENDCAP_FLAT :: 512;
    PS_ENDCAP_MASK :: 3840;
    PS_JOIN_ROUND :: 0;
    PS_JOIN_BEVEL :: 4096;
    PS_JOIN_MITER :: 8192;
    PS_JOIN_MASK :: 61440;
    PS_TYPE_MASK :: 983040;
}

TTEMBED_FLAGS :: enum_flags u32
{
    TTEMBED_EMBEDEUDC :: 32;
    TTEMBED_RAW :: 0;
    TTEMBED_SUBSET :: 1;
    TTEMBED_TTCOMPRESSED :: 4;
}

DRAW_TEXT_FORMAT :: enum_flags u32
{
    DT_BOTTOM :: 8;
    DT_CALCRECT :: 1024;
    DT_CENTER :: 1;
    DT_EDITCONTROL :: 8192;
    DT_END_ELLIPSIS :: 32768;
    DT_EXPANDTABS :: 64;
    DT_EXTERNALLEADING :: 512;
    DT_HIDEPREFIX :: 1048576;
    DT_INTERNAL :: 4096;
    DT_LEFT :: 0;
    DT_MODIFYSTRING :: 65536;
    DT_NOCLIP :: 256;
    DT_NOFULLWIDTHCHARBREAK :: 524288;
    DT_NOPREFIX :: 2048;
    DT_PATH_ELLIPSIS :: 16384;
    DT_PREFIXONLY :: 2097152;
    DT_RIGHT :: 2;
    DT_RTLREADING :: 131072;
    DT_SINGLELINE :: 32;
    DT_TABSTOP :: 128;
    DT_TOP :: 0;
    DT_VCENTER :: 4;
    DT_WORDBREAK :: 16;
    DT_WORD_ELLIPSIS :: 262144;
}

EMBED_FONT_CHARSET :: enum u32
{
    CHARSET_UNICODE :: 1;
    CHARSET_SYMBOL :: 2;
}

GET_DCX_FLAGS :: enum_flags u32
{
    DCX_WINDOW :: 1;
    DCX_CACHE :: 2;
    DCX_PARENTCLIP :: 32;
    DCX_CLIPSIBLINGS :: 16;
    DCX_CLIPCHILDREN :: 8;
    DCX_NORESETATTRS :: 4;
    DCX_LOCKWINDOWUPDATE :: 1024;
    DCX_EXCLUDERGN :: 64;
    DCX_INTERSECTRGN :: 128;
    DCX_INTERSECTUPDATE :: 512;
    DCX_VALIDATE :: 2097152;
}

GET_GLYPH_OUTLINE_FORMAT :: enum u32
{
    GGO_BEZIER :: 3;
    GGO_BITMAP :: 1;
    GGO_GLYPH_INDEX :: 128;
    GGO_GRAY2_BITMAP :: 4;
    GGO_GRAY4_BITMAP :: 5;
    GGO_GRAY8_BITMAP :: 6;
    GGO_METRICS :: 0;
    GGO_NATIVE :: 2;
    GGO_UNHINTED :: 256;
}

SET_BOUNDS_RECT_FLAGS :: enum u32
{
    DCB_ACCUMULATE :: 2;
    DCB_DISABLE :: 8;
    DCB_ENABLE :: 4;
    DCB_RESET :: 1;
}

GET_STOCK_OBJECT_FLAGS :: enum u32
{
    BLACK_BRUSH :: 4;
    DKGRAY_BRUSH :: 3;
    DC_BRUSH :: 18;
    GRAY_BRUSH :: 2;
    HOLLOW_BRUSH :: 5;
    LTGRAY_BRUSH :: 1;
    NULL_BRUSH :: 5;
    WHITE_BRUSH :: 0;
    BLACK_PEN :: 7;
    DC_PEN :: 19;
    NULL_PEN :: 8;
    WHITE_PEN :: 6;
    ANSI_FIXED_FONT :: 11;
    ANSI_VAR_FONT :: 12;
    DEVICE_DEFAULT_FONT :: 14;
    DEFAULT_GUI_FONT :: 17;
    OEM_FIXED_FONT :: 10;
    SYSTEM_FONT :: 13;
    SYSTEM_FIXED_FONT :: 16;
    DEFAULT_PALETTE :: 15;
}

MODIFY_WORLD_TRANSFORM_MODE :: enum u32
{
    MWT_IDENTITY :: 1;
    MWT_LEFTMULTIPLY :: 2;
    MWT_RIGHTMULTIPLY :: 3;
}

FONT_CLIP_PRECISION :: enum_flags u32
{
    CLIP_CHARACTER_PRECIS :: 1;
    CLIP_DEFAULT_PRECIS :: 0;
    CLIP_DFA_DISABLE :: 64;
    CLIP_EMBEDDED :: 128;
    CLIP_LH_ANGLES :: 16;
    CLIP_MASK :: 15;
    CLIP_STROKE_PRECIS :: 2;
    CLIP_TT_ALWAYS :: 32;
}

CREATE_POLYGON_RGN_MODE :: enum u32
{
    ALTERNATE :: 1;
    WINDING :: 2;
}

EMBEDDED_FONT_PRIV_STATUS :: enum u32
{
    EMBED_PREVIEWPRINT :: 1;
    EMBED_EDITABLE :: 2;
    EMBED_INSTALLABLE :: 3;
    EMBED_NOEMBEDDING :: 4;
}

MONITOR_FROM_FLAGS :: enum u32
{
    MONITOR_DEFAULTTONEAREST :: 2;
    MONITOR_DEFAULTTONULL :: 0;
    MONITOR_DEFAULTTOPRIMARY :: 1;
}

FONT_RESOURCE_CHARACTERISTICS :: enum u32
{
    FR_PRIVATE :: 16;
    FR_NOT_ENUM :: 32;
}

DC_LAYOUT :: enum_flags u32
{
    LAYOUT_BITMAPORIENTATIONPRESERVED :: 8;
    LAYOUT_RTL :: 1;
}

GET_DEVICE_CAPS_INDEX :: enum u32
{
    DRIVERVERSION :: 0;
    TECHNOLOGY :: 2;
    HORZSIZE :: 4;
    VERTSIZE :: 6;
    HORZRES :: 8;
    VERTRES :: 10;
    BITSPIXEL :: 12;
    PLANES :: 14;
    NUMBRUSHES :: 16;
    NUMPENS :: 18;
    NUMMARKERS :: 20;
    NUMFONTS :: 22;
    NUMCOLORS :: 24;
    PDEVICESIZE :: 26;
    CURVECAPS :: 28;
    LINECAPS :: 30;
    POLYGONALCAPS :: 32;
    TEXTCAPS :: 34;
    CLIPCAPS :: 36;
    RASTERCAPS :: 38;
    ASPECTX :: 40;
    ASPECTY :: 42;
    ASPECTXY :: 44;
    LOGPIXELSX :: 88;
    LOGPIXELSY :: 90;
    SIZEPALETTE :: 104;
    NUMRESERVED :: 106;
    COLORRES :: 108;
    PHYSICALWIDTH :: 110;
    PHYSICALHEIGHT :: 111;
    PHYSICALOFFSETX :: 112;
    PHYSICALOFFSETY :: 113;
    SCALINGFACTORX :: 114;
    SCALINGFACTORY :: 115;
    VREFRESH :: 116;
    DESKTOPVERTRES :: 117;
    DESKTOPHORZRES :: 118;
    BLTALIGNMENT :: 119;
    SHADEBLENDCAPS :: 120;
    COLORMGMTCAPS :: 121;
}

FONT_OUTPUT_PRECISION :: enum u32
{
    OUT_CHARACTER_PRECIS :: 2;
    OUT_DEFAULT_PRECIS :: 0;
    OUT_DEVICE_PRECIS :: 5;
    OUT_OUTLINE_PRECIS :: 8;
    OUT_PS_ONLY_PRECIS :: 10;
    OUT_RASTER_PRECIS :: 6;
    OUT_STRING_PRECIS :: 1;
    OUT_STROKE_PRECIS :: 3;
    OUT_TT_ONLY_PRECIS :: 7;
    OUT_TT_PRECIS :: 4;
}

ARC_DIRECTION :: enum u32
{
    AD_COUNTERCLOCKWISE :: 1;
    AD_CLOCKWISE :: 2;
}

TTLOAD_EMBEDDED_FONT_STATUS :: enum_flags u32
{
    TTLOAD_FONT_SUBSETTED :: 1;
    TTLOAD_FONT_IN_SYSSTARTUP :: 2;
}

STRETCH_BLT_MODE :: enum u32
{
    BLACKONWHITE :: 1;
    COLORONCOLOR :: 3;
    HALFTONE :: 4;
    STRETCH_ANDSCANS :: 1;
    STRETCH_DELETESCANS :: 3;
    STRETCH_HALFTONE :: 4;
    STRETCH_ORSCANS :: 2;
    WHITEONBLACK :: 2;
}

FONT_QUALITY :: enum u32
{
    ANTIALIASED_QUALITY :: 4;
    CLEARTYPE_QUALITY :: 5;
    DEFAULT_QUALITY :: 0;
    DRAFT_QUALITY :: 1;
    NONANTIALIASED_QUALITY :: 3;
    PROOF_QUALITY :: 2;
}

BACKGROUND_MODE :: enum u32
{
    OPAQUE :: 2;
    TRANSPARENT :: 1;
}

GET_CHARACTER_PLACEMENT_FLAGS :: enum_flags u32
{
    GCP_CLASSIN :: 524288;
    GCP_DIACRITIC :: 256;
    GCP_DISPLAYZWG :: 4194304;
    GCP_GLYPHSHAPE :: 16;
    GCP_JUSTIFY :: 65536;
    GCP_KASHIDA :: 1024;
    GCP_LIGATE :: 32;
    GCP_MAXEXTENT :: 1048576;
    GCP_NEUTRALOVERRIDE :: 33554432;
    GCP_NUMERICOVERRIDE :: 16777216;
    GCP_NUMERICSLATIN :: 67108864;
    GCP_NUMERICSLOCAL :: 134217728;
    GCP_REORDER :: 2;
    GCP_SYMSWAPOFF :: 8388608;
    GCP_USEKERNING :: 8;
}

DRAW_EDGE_FLAGS :: enum_flags u32
{
    BF_ADJUST :: 8192;
    BF_BOTTOM :: 8;
    BF_BOTTOMLEFT :: 9;
    BF_BOTTOMRIGHT :: 12;
    BF_DIAGONAL :: 16;
    BF_DIAGONAL_ENDBOTTOMLEFT :: 25;
    BF_DIAGONAL_ENDBOTTOMRIGHT :: 28;
    BF_DIAGONAL_ENDTOPLEFT :: 19;
    BF_DIAGONAL_ENDTOPRIGHT :: 22;
    BF_FLAT :: 16384;
    BF_LEFT :: 1;
    BF_MIDDLE :: 2048;
    BF_MONO :: 32768;
    BF_RECT :: 15;
    BF_RIGHT :: 4;
    BF_SOFT :: 4096;
    BF_TOP :: 2;
    BF_TOPLEFT :: 3;
    BF_TOPRIGHT :: 6;
}

FONT_LICENSE_PRIVS :: enum u32
{
    LICENSE_PREVIEWPRINT :: 4;
    LICENSE_EDITABLE :: 8;
    LICENSE_INSTALLABLE :: 0;
    LICENSE_NOEMBEDDING :: 2;
    LICENSE_DEFAULT :: 0;
}

GRADIENT_FILL :: enum u32
{
    GRADIENT_FILL_RECT_H :: 0;
    GRADIENT_FILL_RECT_V :: 1;
    GRADIENT_FILL_TRIANGLE :: 2;
}

CREATE_FONT_PACKAGE_SUBSET_ENCODING :: enum u32
{
    TTFCFP_STD_MAC_CHAR_SET :: 0;
    TTFCFP_SYMBOL_CHAR_SET :: 0;
    TTFCFP_UNICODE_CHAR_SET :: 1;
}

EXT_FLOOD_FILL_TYPE :: enum u32
{
    FLOODFILLBORDER :: 0;
    FLOODFILLSURFACE :: 1;
}

HATCH_BRUSH_STYLE :: enum u32
{
    HS_BDIAGONAL :: 3;
    HS_CROSS :: 4;
    HS_DIAGCROSS :: 5;
    HS_FDIAGONAL :: 2;
    HS_HORIZONTAL :: 0;
    HS_VERTICAL :: 1;
}

DRAW_CAPTION_FLAGS :: enum_flags u32
{
    DC_ACTIVE :: 1;
    DC_BUTTONS :: 4096;
    DC_GRADIENT :: 32;
    DC_ICON :: 4;
    DC_INBUTTON :: 16;
    DC_SMALLCAP :: 2;
    DC_TEXT :: 8;
}

SYSTEM_PALETTE_USE :: enum u32
{
    SYSPAL_NOSTATIC :: 2;
    SYSPAL_NOSTATIC256 :: 3;
    SYSPAL_STATIC :: 1;
}

GRAPHICS_MODE :: enum u32
{
    GM_COMPATIBLE :: 1;
    GM_ADVANCED :: 2;
}

FONT_PITCH_AND_FAMILY :: enum u32
{
    FF_DECORATIVE :: 80;
    FF_DONTCARE :: 0;
    FF_MODERN :: 48;
    FF_ROMAN :: 16;
    FF_SCRIPT :: 64;
    FF_SWISS :: 32;
}

CREATE_FONT_PACKAGE_SUBSET_PLATFORM :: enum u32
{
    TTFCFP_UNICODE_PLATFORMID :: 0;
    TTFCFP_ISO_PLATFORMID :: 2;
}

HDC_MAP_MODE :: enum u32
{
    MM_ANISOTROPIC :: 8;
    MM_HIENGLISH :: 5;
    MM_HIMETRIC :: 3;
    MM_ISOTROPIC :: 7;
    MM_LOENGLISH :: 4;
    MM_LOMETRIC :: 2;
    MM_TEXT :: 1;
    MM_TWIPS :: 6;
}

HDC :: *void;

CreatedHDC :: *void;

HBITMAP :: *void;

HRGN :: *void;

HPEN :: *void;

HBRUSH :: *void;

HFONT :: *void;

HMETAFILE :: *void;

HENHMETAFILE :: *void;

HPALETTE :: *void;

HdcMetdataFileHandle :: s64;

HdcMetdataEnhFileHandle :: s64;

HGDIOBJ :: *void;

HMONITOR :: *void;

XFORM :: struct
{
    eM11 : float;
    eM12 : float;
    eM21 : float;
    eM22 : float;
    eDx : float;
    eDy : float;
}

BITMAP :: struct
{
    bmType : s32;
    bmWidth : s32;
    bmHeight : s32;
    bmWidthBytes : s32;
    bmPlanes : u16;
    bmBitsPixel : u16;
    bmBits : *void;
}

RGBTRIPLE :: struct
{
    rgbtBlue : u8;
    rgbtGreen : u8;
    rgbtRed : u8;
}

RGBQUAD :: struct
{
    rgbBlue : u8;
    rgbGreen : u8;
    rgbRed : u8;
    rgbReserved : u8;
}

CIEXYZ :: struct
{
    ciexyzX : s32;
    ciexyzY : s32;
    ciexyzZ : s32;
}

CIEXYZTRIPLE :: struct
{
    ciexyzRed : CIEXYZ;
    ciexyzGreen : CIEXYZ;
    ciexyzBlue : CIEXYZ;
}

BITMAPCOREHEADER :: struct
{
    bcSize : u32;
    bcWidth : u16;
    bcHeight : u16;
    bcPlanes : u16;
    bcBitCount : u16;
}

BITMAPINFOHEADER :: struct
{
    biSize : u32;
    biWidth : s32;
    biHeight : s32;
    biPlanes : u16;
    biBitCount : u16;
    biCompression : u32;
    biSizeImage : u32;
    biXPelsPerMeter : s32;
    biYPelsPerMeter : s32;
    biClrUsed : u32;
    biClrImportant : u32;
}

BITMAPV4HEADER :: struct
{
    bV4Size : u32;
    bV4Width : s32;
    bV4Height : s32;
    bV4Planes : u16;
    bV4BitCount : u16;
    bV4V4Compression : u32;
    bV4SizeImage : u32;
    bV4XPelsPerMeter : s32;
    bV4YPelsPerMeter : s32;
    bV4ClrUsed : u32;
    bV4ClrImportant : u32;
    bV4RedMask : u32;
    bV4GreenMask : u32;
    bV4BlueMask : u32;
    bV4AlphaMask : u32;
    bV4CSType : u32;
    bV4Endpoints : CIEXYZTRIPLE;
    bV4GammaRed : u32;
    bV4GammaGreen : u32;
    bV4GammaBlue : u32;
}

BITMAPV5HEADER :: struct
{
    bV5Size : u32;
    bV5Width : s32;
    bV5Height : s32;
    bV5Planes : u16;
    bV5BitCount : u16;
    bV5Compression : u32;
    bV5SizeImage : u32;
    bV5XPelsPerMeter : s32;
    bV5YPelsPerMeter : s32;
    bV5ClrUsed : u32;
    bV5ClrImportant : u32;
    bV5RedMask : u32;
    bV5GreenMask : u32;
    bV5BlueMask : u32;
    bV5AlphaMask : u32;
    bV5CSType : u32;
    bV5Endpoints : CIEXYZTRIPLE;
    bV5GammaRed : u32;
    bV5GammaGreen : u32;
    bV5GammaBlue : u32;
    bV5Intent : u32;
    bV5ProfileData : u32;
    bV5ProfileSize : u32;
    bV5Reserved : u32;
}

BITMAPINFO :: struct
{
    bmiHeader : BITMAPINFOHEADER;
    bmiColors : *RGBQUAD;
}

BITMAPCOREINFO :: struct
{
    bmciHeader : BITMAPCOREHEADER;
    bmciColors : *RGBTRIPLE;
}

BITMAPFILEHEADER :: struct
{
    bfType : u16;
    bfSize : u32;
    bfReserved1 : u16;
    bfReserved2 : u16;
    bfOffBits : u32;
}

HANDLETABLE :: struct
{
    objectHandle : *HGDIOBJ;
}

METARECORD :: struct
{
    rdSize : u32;
    rdFunction : u16;
    rdParm : *u16;
}

METAHEADER :: struct
{
    mtType : u16;
    mtHeaderSize : u16;
    mtVersion : u16;
    mtSize : u32;
    mtNoObjects : u16;
    mtMaxRecord : u32;
    mtNoParameters : u16;
}

ENHMETARECORD :: struct
{
    iType : u32;
    nSize : u32;
    dParm : *u32;
}

ENHMETAHEADER :: struct
{
    iType : u32;
    nSize : u32;
    rclBounds : RECTL;
    rclFrame : RECTL;
    dSignature : u32;
    nVersion : u32;
    nBytes : u32;
    nRecords : u32;
    nHandles : u16;
    sReserved : u16;
    nDescription : u32;
    offDescription : u32;
    nPalEntries : u32;
    szlDevice : SIZE;
    szlMillimeters : SIZE;
    cbPixelFormat : u32;
    offPixelFormat : u32;
    bOpenGL : u32;
    szlMicrometers : SIZE;
}

TEXTMETRICA :: struct
{
    tmHeight : s32;
    tmAscent : s32;
    tmDescent : s32;
    tmInternalLeading : s32;
    tmExternalLeading : s32;
    tmAveCharWidth : s32;
    tmMaxCharWidth : s32;
    tmWeight : s32;
    tmOverhang : s32;
    tmDigitizedAspectX : s32;
    tmDigitizedAspectY : s32;
    tmFirstChar : u8;
    tmLastChar : u8;
    tmDefaultChar : u8;
    tmBreakChar : u8;
    tmItalic : u8;
    tmUnderlined : u8;
    tmStruckOut : u8;
    tmPitchAndFamily : u8;
    tmCharSet : u8;
}

TEXTMETRICW :: struct
{
    tmHeight : s32;
    tmAscent : s32;
    tmDescent : s32;
    tmInternalLeading : s32;
    tmExternalLeading : s32;
    tmAveCharWidth : s32;
    tmMaxCharWidth : s32;
    tmWeight : s32;
    tmOverhang : s32;
    tmDigitizedAspectX : s32;
    tmDigitizedAspectY : s32;
    tmFirstChar : u16;
    tmLastChar : u16;
    tmDefaultChar : u16;
    tmBreakChar : u16;
    tmItalic : u8;
    tmUnderlined : u8;
    tmStruckOut : u8;
    tmPitchAndFamily : u8;
    tmCharSet : u8;
}

NEWTEXTMETRICA :: struct
{
    tmHeight : s32;
    tmAscent : s32;
    tmDescent : s32;
    tmInternalLeading : s32;
    tmExternalLeading : s32;
    tmAveCharWidth : s32;
    tmMaxCharWidth : s32;
    tmWeight : s32;
    tmOverhang : s32;
    tmDigitizedAspectX : s32;
    tmDigitizedAspectY : s32;
    tmFirstChar : u8;
    tmLastChar : u8;
    tmDefaultChar : u8;
    tmBreakChar : u8;
    tmItalic : u8;
    tmUnderlined : u8;
    tmStruckOut : u8;
    tmPitchAndFamily : u8;
    tmCharSet : u8;
    ntmFlags : u32;
    ntmSizeEM : u32;
    ntmCellHeight : u32;
    ntmAvgWidth : u32;
}

NEWTEXTMETRICW :: struct
{
    tmHeight : s32;
    tmAscent : s32;
    tmDescent : s32;
    tmInternalLeading : s32;
    tmExternalLeading : s32;
    tmAveCharWidth : s32;
    tmMaxCharWidth : s32;
    tmWeight : s32;
    tmOverhang : s32;
    tmDigitizedAspectX : s32;
    tmDigitizedAspectY : s32;
    tmFirstChar : u16;
    tmLastChar : u16;
    tmDefaultChar : u16;
    tmBreakChar : u16;
    tmItalic : u8;
    tmUnderlined : u8;
    tmStruckOut : u8;
    tmPitchAndFamily : u8;
    tmCharSet : u8;
    ntmFlags : u32;
    ntmSizeEM : u32;
    ntmCellHeight : u32;
    ntmAvgWidth : u32;
}

PELARRAY :: struct
{
    paXCount : s32;
    paYCount : s32;
    paXExt : s32;
    paYExt : s32;
    paRGBs : u8;
}

LOGBRUSH :: struct
{
    lbStyle : u32;
    lbColor : u32;
    lbHatch : u64;
}

LOGBRUSH32 :: struct
{
    lbStyle : u32;
    lbColor : u32;
    lbHatch : u32;
}

LOGPEN :: struct
{
    lopnStyle : u32;
    lopnWidth : POINT;
    lopnColor : u32;
}

EXTLOGPEN :: struct
{
    elpPenStyle : u32;
    elpWidth : u32;
    elpBrushStyle : u32;
    elpColor : u32;
    elpHatch : u64;
    elpNumEntries : u32;
    elpStyleEntry : *u32;
}

EXTLOGPEN32 :: struct
{
    elpPenStyle : u32;
    elpWidth : u32;
    elpBrushStyle : u32;
    elpColor : u32;
    elpHatch : u32;
    elpNumEntries : u32;
    elpStyleEntry : *u32;
}

PALETTEENTRY :: struct
{
    peRed : u8;
    peGreen : u8;
    peBlue : u8;
    peFlags : u8;
}

LOGPALETTE :: struct
{
    palVersion : u16;
    palNumEntries : u16;
    palPalEntry : *PALETTEENTRY;
}

LOGFONTA :: struct
{
    lfHeight : s32;
    lfWidth : s32;
    lfEscapement : s32;
    lfOrientation : s32;
    lfWeight : s32;
    lfItalic : u8;
    lfUnderline : u8;
    lfStrikeOut : u8;
    lfCharSet : u8;
    lfOutPrecision : u8;
    lfClipPrecision : u8;
    lfQuality : u8;
    lfPitchAndFamily : u8;
    lfFaceName : [32]CHAR;
}

LOGFONTW :: struct
{
    lfHeight : s32;
    lfWidth : s32;
    lfEscapement : s32;
    lfOrientation : s32;
    lfWeight : s32;
    lfItalic : u8;
    lfUnderline : u8;
    lfStrikeOut : u8;
    lfCharSet : u8;
    lfOutPrecision : u8;
    lfClipPrecision : u8;
    lfQuality : u8;
    lfPitchAndFamily : u8;
    lfFaceName : [32]u16;
}

ENUMLOGFONTA :: struct
{
    elfLogFont : LOGFONTA;
    elfFullName : [64]u8;
    elfStyle : [32]u8;
}

ENUMLOGFONTW :: struct
{
    elfLogFont : LOGFONTW;
    elfFullName : [64]u16;
    elfStyle : [32]u16;
}

ENUMLOGFONTEXA :: struct
{
    elfLogFont : LOGFONTA;
    elfFullName : [64]u8;
    elfStyle : [32]u8;
    elfScript : [32]u8;
}

ENUMLOGFONTEXW :: struct
{
    elfLogFont : LOGFONTW;
    elfFullName : [64]u16;
    elfStyle : [32]u16;
    elfScript : [32]u16;
}

PANOSE :: struct
{
    bFamilyType : u8;
    bSerifStyle : u8;
    bWeight : u8;
    bProportion : u8;
    bContrast : u8;
    bStrokeVariation : u8;
    bArmStyle : u8;
    bLetterform : u8;
    bMidline : u8;
    bXHeight : u8;
}

EXTLOGFONTA :: struct
{
    elfLogFont : LOGFONTA;
    elfFullName : [64]u8;
    elfStyle : [32]u8;
    elfVersion : u32;
    elfStyleSize : u32;
    elfMatch : u32;
    elfReserved : u32;
    elfVendorId : [4]u8;
    elfCulture : u32;
    elfPanose : PANOSE;
}

EXTLOGFONTW :: struct
{
    elfLogFont : LOGFONTW;
    elfFullName : [64]u16;
    elfStyle : [32]u16;
    elfVersion : u32;
    elfStyleSize : u32;
    elfMatch : u32;
    elfReserved : u32;
    elfVendorId : [4]u8;
    elfCulture : u32;
    elfPanose : PANOSE;
}

DEVMODEA :: struct
{
    dmDeviceName : [32]u8;
    dmSpecVersion : u16;
    dmDriverVersion : u16;
    dmSize : u16;
    dmDriverExtra : u16;
    dmFields : u32;
    Anonymous1 : _Anonymous1_e__Union;
    dmColor : s16;
    dmDuplex : s16;
    dmYResolution : s16;
    dmTTOption : s16;
    dmCollate : s16;
    dmFormName : [32]u8;
    dmLogPixels : u16;
    dmBitsPerPel : u32;
    dmPelsWidth : u32;
    dmPelsHeight : u32;
    Anonymous2 : _Anonymous2_e__Union;
    dmDisplayFrequency : u32;
    dmICMMethod : u32;
    dmICMIntent : u32;
    dmMediaType : u32;
    dmDitherType : u32;
    dmReserved1 : u32;
    dmReserved2 : u32;
    dmPanningWidth : u32;
    dmPanningHeight : u32;

    _Anonymous1_e__Union :: union
    {
        Anonymous1 : _Anonymous1_e__Struct;
        Anonymous2 : _Anonymous2_e__Struct;

        _Anonymous2_e__Struct :: struct
        {
            dmPosition : POINTL;
            dmDisplayOrientation : u32;
            dmDisplayFixedOutput : u32;
        }

        _Anonymous1_e__Struct :: struct
        {
            dmOrientation : s16;
            dmPaperSize : s16;
            dmPaperLength : s16;
            dmPaperWidth : s16;
            dmScale : s16;
            dmCopies : s16;
            dmDefaultSource : s16;
            dmPrintQuality : s16;
        }
    }

    _Anonymous2_e__Union :: union
    {
        dmDisplayFlags : u32;
        dmNup : u32;
    }
}

DEVMODEW :: struct
{
    dmDeviceName : [32]u16;
    dmSpecVersion : u16;
    dmDriverVersion : u16;
    dmSize : u16;
    dmDriverExtra : u16;
    dmFields : u32;
    Anonymous1 : _Anonymous1_e__Union;
    dmColor : s16;
    dmDuplex : s16;
    dmYResolution : s16;
    dmTTOption : s16;
    dmCollate : s16;
    dmFormName : [32]u16;
    dmLogPixels : u16;
    dmBitsPerPel : u32;
    dmPelsWidth : u32;
    dmPelsHeight : u32;
    Anonymous2 : _Anonymous2_e__Union;
    dmDisplayFrequency : u32;
    dmICMMethod : u32;
    dmICMIntent : u32;
    dmMediaType : u32;
    dmDitherType : u32;
    dmReserved1 : u32;
    dmReserved2 : u32;
    dmPanningWidth : u32;
    dmPanningHeight : u32;

    _Anonymous1_e__Union :: union
    {
        Anonymous1 : _Anonymous1_e__Struct;
        Anonymous2 : _Anonymous2_e__Struct;

        _Anonymous1_e__Struct :: struct
        {
            dmOrientation : s16;
            dmPaperSize : s16;
            dmPaperLength : s16;
            dmPaperWidth : s16;
            dmScale : s16;
            dmCopies : s16;
            dmDefaultSource : s16;
            dmPrintQuality : s16;
        }

        _Anonymous2_e__Struct :: struct
        {
            dmPosition : POINTL;
            dmDisplayOrientation : u32;
            dmDisplayFixedOutput : u32;
        }
    }

    _Anonymous2_e__Union :: union
    {
        dmDisplayFlags : u32;
        dmNup : u32;
    }
}

DISPLAY_DEVICEA :: struct
{
    cb : u32;
    DeviceName : [32]CHAR;
    DeviceString : [128]CHAR;
    StateFlags : u32;
    DeviceID : [128]CHAR;
    DeviceKey : [128]CHAR;
}

DISPLAY_DEVICEW :: struct
{
    cb : u32;
    DeviceName : [32]u16;
    DeviceString : [128]u16;
    StateFlags : u32;
    DeviceID : [128]u16;
    DeviceKey : [128]u16;
}

DISPLAYCONFIG_COLOR_ENCODING :: enum s32
{
    DISPLAYCONFIG_COLOR_ENCODING_RGB :: 0;
    DISPLAYCONFIG_COLOR_ENCODING_YCBCR444 :: 1;
    DISPLAYCONFIG_COLOR_ENCODING_YCBCR422 :: 2;
    DISPLAYCONFIG_COLOR_ENCODING_YCBCR420 :: 3;
    DISPLAYCONFIG_COLOR_ENCODING_INTENSITY :: 4;
    DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32 :: -1;
}

RGNDATAHEADER :: struct
{
    dwSize : u32;
    iType : u32;
    nCount : u32;
    nRgnSize : u32;
    rcBound : RECT;
}

RGNDATA :: struct
{
    rdh : RGNDATAHEADER;
    Buffer : *CHAR;
}

ABC :: struct
{
    abcA : s32;
    abcB : u32;
    abcC : s32;
}

ABCFLOAT :: struct
{
    abcfA : float;
    abcfB : float;
    abcfC : float;
}

OUTLINETEXTMETRICA :: struct
{
    otmSize : u32;
    otmTextMetrics : TEXTMETRICA;
    otmFiller : u8;
    otmPanoseNumber : PANOSE;
    otmfsSelection : u32;
    otmfsType : u32;
    otmsCharSlopeRise : s32;
    otmsCharSlopeRun : s32;
    otmItalicAngle : s32;
    otmEMSquare : u32;
    otmAscent : s32;
    otmDescent : s32;
    otmLineGap : u32;
    otmsCapEmHeight : u32;
    otmsXHeight : u32;
    otmrcFontBox : RECT;
    otmMacAscent : s32;
    otmMacDescent : s32;
    otmMacLineGap : u32;
    otmusMinimumPPEM : u32;
    otmptSubscriptSize : POINT;
    otmptSubscriptOffset : POINT;
    otmptSuperscriptSize : POINT;
    otmptSuperscriptOffset : POINT;
    otmsStrikeoutSize : u32;
    otmsStrikeoutPosition : s32;
    otmsUnderscoreSize : s32;
    otmsUnderscorePosition : s32;
    otmpFamilyName : PSTR;
    otmpFaceName : PSTR;
    otmpStyleName : PSTR;
    otmpFullName : PSTR;
}

OUTLINETEXTMETRICW :: struct
{
    otmSize : u32;
    otmTextMetrics : TEXTMETRICW;
    otmFiller : u8;
    otmPanoseNumber : PANOSE;
    otmfsSelection : u32;
    otmfsType : u32;
    otmsCharSlopeRise : s32;
    otmsCharSlopeRun : s32;
    otmItalicAngle : s32;
    otmEMSquare : u32;
    otmAscent : s32;
    otmDescent : s32;
    otmLineGap : u32;
    otmsCapEmHeight : u32;
    otmsXHeight : u32;
    otmrcFontBox : RECT;
    otmMacAscent : s32;
    otmMacDescent : s32;
    otmMacLineGap : u32;
    otmusMinimumPPEM : u32;
    otmptSubscriptSize : POINT;
    otmptSubscriptOffset : POINT;
    otmptSuperscriptSize : POINT;
    otmptSuperscriptOffset : POINT;
    otmsStrikeoutSize : u32;
    otmsStrikeoutPosition : s32;
    otmsUnderscoreSize : s32;
    otmsUnderscorePosition : s32;
    otmpFamilyName : PSTR;
    otmpFaceName : PSTR;
    otmpStyleName : PSTR;
    otmpFullName : PSTR;
}

POLYTEXTA :: struct
{
    x : s32;
    y : s32;
    n : u32;
    lpstr : PSTR; // Const
    uiFlags : u32;
    rcl : RECT;
    pdx : *s32;
}

POLYTEXTW :: struct
{
    x : s32;
    y : s32;
    n : u32;
    lpstr : PWSTR; // Const
    uiFlags : u32;
    rcl : RECT;
    pdx : *s32;
}

FIXED :: struct
{
    fract : u16;
    value : s16;
}

MAT2 :: struct
{
    eM11 : FIXED;
    eM12 : FIXED;
    eM21 : FIXED;
    eM22 : FIXED;
}

GLYPHMETRICS :: struct
{
    gmBlackBoxX : u32;
    gmBlackBoxY : u32;
    gmptGlyphOrigin : POINT;
    gmCellIncX : s16;
    gmCellIncY : s16;
}

POINTFX :: struct
{
    x : FIXED;
    y : FIXED;
}

TTPOLYCURVE :: struct
{
    wType : u16;
    cpfx : u16;
    apfx : *POINTFX;
}

TTPOLYGONHEADER :: struct
{
    cb : u32;
    dwType : u32;
    pfxStart : POINTFX;
}

GCP_RESULTSA :: struct
{
    lStructSize : u32;
    lpOutString : PSTR;
    lpOrder : *u32;
    lpDx : *s32;
    lpCaretPos : *s32;
    lpClass : PSTR;
    lpGlyphs : PWSTR;
    nGlyphs : u32;
    nMaxFit : s32;
}

GCP_RESULTSW :: struct
{
    lStructSize : u32;
    lpOutString : PWSTR;
    lpOrder : *u32;
    lpDx : *s32;
    lpCaretPos : *s32;
    lpClass : PSTR;
    lpGlyphs : PWSTR;
    nGlyphs : u32;
    nMaxFit : s32;
}

RASTERIZER_STATUS :: struct
{
    nSize : s16;
    wFlags : s16;
    nLanguageID : s16;
}

FONTENUMPROCA :: #type (param0 : *LOGFONTA, param1 : *TEXTMETRICA, param2 : u32, param3 : LPARAM) -> s32 #c_call;

FONTENUMPROCW :: #type (param0 : *LOGFONTW, param1 : *TEXTMETRICW, param2 : u32, param3 : LPARAM) -> s32 #c_call;

GOBJENUMPROC :: #type (param0 : *void, param1 : LPARAM) -> s32 #c_call;

LINEDDAPROC :: #type (param0 : s32, param1 : s32, param2 : LPARAM) -> void #c_call;

LPFNDEVMODE :: #type (param0 : HWND, param1 : HINSTANCE, param2 : *DEVMODEA, param3 : PSTR, param4 : PSTR, param5 : *DEVMODEA, param6 : PSTR, param7 : u32) -> u32 #c_call;

LPFNDEVCAPS :: #type (param0 : PSTR, param1 : PSTR, param2 : u32, param3 : PSTR, param4 : *DEVMODEA) -> u32 #c_call;

WCRANGE :: struct
{
    wcLow : u16;
    cGlyphs : u16;
}

GLYPHSET :: struct
{
    cbThis : u32;
    flAccel : u32;
    cGlyphsSupported : u32;
    cRanges : u32;
    ranges : *WCRANGE;
}

DESIGNVECTOR :: struct
{
    dvReserved : u32;
    dvNumAxes : u32;
    dvValues : [16]s32;
}

AXISINFOA :: struct
{
    axMinValue : s32;
    axMaxValue : s32;
    axAxisName : [16]u8;
}

AXISINFOW :: struct
{
    axMinValue : s32;
    axMaxValue : s32;
    axAxisName : [16]u16;
}

AXESLISTA :: struct
{
    axlReserved : u32;
    axlNumAxes : u32;
    axlAxisInfo : [16]AXISINFOA;
}

AXESLISTW :: struct
{
    axlReserved : u32;
    axlNumAxes : u32;
    axlAxisInfo : [16]AXISINFOW;
}

ENUMLOGFONTEXDVA :: struct
{
    elfEnumLogfontEx : ENUMLOGFONTEXA;
    elfDesignVector : DESIGNVECTOR;
}

ENUMLOGFONTEXDVW :: struct
{
    elfEnumLogfontEx : ENUMLOGFONTEXW;
    elfDesignVector : DESIGNVECTOR;
}

TRIVERTEX :: struct
{
    x : s32;
    y : s32;
    Red : u16;
    Green : u16;
    Blue : u16;
    Alpha : u16;
}

GRADIENT_TRIANGLE :: struct
{
    Vertex1 : u32;
    Vertex2 : u32;
    Vertex3 : u32;
}

GRADIENT_RECT :: struct
{
    UpperLeft : u32;
    LowerRight : u32;
}

BLENDFUNCTION :: struct
{
    BlendOp : u8;
    BlendFlags : u8;
    SourceConstantAlpha : u8;
    AlphaFormat : u8;
}

MFENUMPROC :: #type (hdc : HDC, lpht : *HANDLETABLE, lpMR : *METARECORD, nObj : s32, param4 : LPARAM) -> s32 #c_call;

ENHMFENUMPROC :: #type (hdc : HDC, lpht : *HANDLETABLE, lpmr : *ENHMETARECORD, nHandles : s32, data : LPARAM) -> s32 #c_call;

DIBSECTION :: struct
{
    dsBm : BITMAP;
    dsBmih : BITMAPINFOHEADER;
    dsBitfields : [3]u32;
    dshSection : HANDLE;
    dsOffset : u32;
}

COLORADJUSTMENT :: struct
{
    caSize : u16;
    caFlags : u16;
    caIlluminantIndex : u16;
    caRedGamma : u16;
    caGreenGamma : u16;
    caBlueGamma : u16;
    caReferenceBlack : u16;
    caReferenceWhite : u16;
    caContrast : s16;
    caBrightness : s16;
    caColorfulness : s16;
    caRedGreenTint : s16;
}

KERNINGPAIR :: struct
{
    wFirst : u16;
    wSecond : u16;
    iKernAmount : s32;
}

EMR :: struct
{
    iType : u32;
    nSize : u32;
}

EMRTEXT :: struct
{
    ptlReference : POINTL;
    nChars : u32;
    offString : u32;
    fOptions : u32;
    rcl : RECTL;
    offDx : u32;
}

ABORTPATH :: struct
{
    emr : EMR;
}

EMRSELECTCLIPPATH :: struct
{
    emr : EMR;
    iMode : u32;
}

EMRSETMITERLIMIT :: struct
{
    emr : EMR;
    eMiterLimit : float;
}

EMRRESTOREDC :: struct
{
    emr : EMR;
    iRelative : s32;
}

EMRSETARCDIRECTION :: struct
{
    emr : EMR;
    iArcDirection : u32;
}

EMRSETMAPPERFLAGS :: struct
{
    emr : EMR;
    dwFlags : u32;
}

EMRSETTEXTCOLOR :: struct
{
    emr : EMR;
    crColor : u32;
}

EMRSELECTOBJECT :: struct
{
    emr : EMR;
    ihObject : u32;
}

EMRSELECTPALETTE :: struct
{
    emr : EMR;
    ihPal : u32;
}

EMRRESIZEPALETTE :: struct
{
    emr : EMR;
    ihPal : u32;
    cEntries : u32;
}

EMRSETPALETTEENTRIES :: struct
{
    emr : EMR;
    ihPal : u32;
    iStart : u32;
    cEntries : u32;
    aPalEntries : *PALETTEENTRY;
}

EMRSETCOLORADJUSTMENT :: struct
{
    emr : EMR;
    ColorAdjustment : COLORADJUSTMENT;
}

EMRGDICOMMENT :: struct
{
    emr : EMR;
    cbData : u32;
    Data : *u8;
}

EMREOF :: struct
{
    emr : EMR;
    nPalEntries : u32;
    offPalEntries : u32;
    nSizeLast : u32;
}

EMRLINETO :: struct
{
    emr : EMR;
    ptl : POINTL;
}

EMROFFSETCLIPRGN :: struct
{
    emr : EMR;
    ptlOffset : POINTL;
}

EMRFILLPATH :: struct
{
    emr : EMR;
    rclBounds : RECTL;
}

EMREXCLUDECLIPRECT :: struct
{
    emr : EMR;
    rclClip : RECTL;
}

EMRSETVIEWPORTORGEX :: struct
{
    emr : EMR;
    ptlOrigin : POINTL;
}

EMRSETVIEWPORTEXTEX :: struct
{
    emr : EMR;
    szlExtent : SIZE;
}

EMRSCALEVIEWPORTEXTEX :: struct
{
    emr : EMR;
    xNum : s32;
    xDenom : s32;
    yNum : s32;
    yDenom : s32;
}

EMRSETWORLDTRANSFORM :: struct
{
    emr : EMR;
    xform : XFORM;
}

EMRMODIFYWORLDTRANSFORM :: struct
{
    emr : EMR;
    xform : XFORM;
    iMode : u32;
}

EMRSETPIXELV :: struct
{
    emr : EMR;
    ptlPixel : POINTL;
    crColor : u32;
}

EMREXTFLOODFILL :: struct
{
    emr : EMR;
    ptlStart : POINTL;
    crColor : u32;
    iMode : u32;
}

EMRELLIPSE :: struct
{
    emr : EMR;
    rclBox : RECTL;
}

EMRROUNDRECT :: struct
{
    emr : EMR;
    rclBox : RECTL;
    szlCorner : SIZE;
}

EMRARC :: struct
{
    emr : EMR;
    rclBox : RECTL;
    ptlStart : POINTL;
    ptlEnd : POINTL;
}

EMRANGLEARC :: struct
{
    emr : EMR;
    ptlCenter : POINTL;
    nRadius : u32;
    eStartAngle : float;
    eSweepAngle : float;
}

EMRPOLYLINE :: struct
{
    emr : EMR;
    rclBounds : RECTL;
    cptl : u32;
    aptl : *POINTL;
}

EMRPOLYLINE16 :: struct
{
    emr : EMR;
    rclBounds : RECTL;
    cpts : u32;
    apts : *POINTS;
}

EMRPOLYDRAW :: struct
{
    emr : EMR;
    rclBounds : RECTL;
    cptl : u32;
    aptl : *POINTL;
    abTypes : *u8;
}

EMRPOLYDRAW16 :: struct
{
    emr : EMR;
    rclBounds : RECTL;
    cpts : u32;
    apts : *POINTS;
    abTypes : *u8;
}

EMRPOLYPOLYLINE :: struct
{
    emr : EMR;
    rclBounds : RECTL;
    nPolys : u32;
    cptl : u32;
    aPolyCounts : *u32;
    aptl : *POINTL;
}

EMRPOLYPOLYLINE16 :: struct
{
    emr : EMR;
    rclBounds : RECTL;
    nPolys : u32;
    cpts : u32;
    aPolyCounts : *u32;
    apts : *POINTS;
}

EMRINVERTRGN :: struct
{
    emr : EMR;
    rclBounds : RECTL;
    cbRgnData : u32;
    RgnData : *u8;
}

EMRFILLRGN :: struct
{
    emr : EMR;
    rclBounds : RECTL;
    cbRgnData : u32;
    ihBrush : u32;
    RgnData : *u8;
}

EMRFRAMERGN :: struct
{
    emr : EMR;
    rclBounds : RECTL;
    cbRgnData : u32;
    ihBrush : u32;
    szlStroke : SIZE;
    RgnData : *u8;
}

EMREXTSELECTCLIPRGN :: struct
{
    emr : EMR;
    cbRgnData : u32;
    iMode : u32;
    RgnData : *u8;
}

EMREXTTEXTOUTA :: struct
{
    emr : EMR;
    rclBounds : RECTL;
    iGraphicsMode : u32;
    exScale : float;
    eyScale : float;
    emrtext : EMRTEXT;
}

EMRPOLYTEXTOUTA :: struct
{
    emr : EMR;
    rclBounds : RECTL;
    iGraphicsMode : u32;
    exScale : float;
    eyScale : float;
    cStrings : s32;
    aemrtext : *EMRTEXT;
}

EMRBITBLT :: struct
{
    emr : EMR;
    rclBounds : RECTL;
    xDest : s32;
    yDest : s32;
    cxDest : s32;
    cyDest : s32;
    dwRop : u32;
    xSrc : s32;
    ySrc : s32;
    xformSrc : XFORM;
    crBkColorSrc : u32;
    iUsageSrc : u32;
    offBmiSrc : u32;
    cbBmiSrc : u32;
    offBitsSrc : u32;
    cbBitsSrc : u32;
}

EMRSTRETCHBLT :: struct
{
    emr : EMR;
    rclBounds : RECTL;
    xDest : s32;
    yDest : s32;
    cxDest : s32;
    cyDest : s32;
    dwRop : u32;
    xSrc : s32;
    ySrc : s32;
    xformSrc : XFORM;
    crBkColorSrc : u32;
    iUsageSrc : u32;
    offBmiSrc : u32;
    cbBmiSrc : u32;
    offBitsSrc : u32;
    cbBitsSrc : u32;
    cxSrc : s32;
    cySrc : s32;
}

EMRMASKBLT :: struct
{
    emr : EMR;
    rclBounds : RECTL;
    xDest : s32;
    yDest : s32;
    cxDest : s32;
    cyDest : s32;
    dwRop : u32;
    xSrc : s32;
    ySrc : s32;
    xformSrc : XFORM;
    crBkColorSrc : u32;
    iUsageSrc : u32;
    offBmiSrc : u32;
    cbBmiSrc : u32;
    offBitsSrc : u32;
    cbBitsSrc : u32;
    xMask : s32;
    yMask : s32;
    iUsageMask : u32;
    offBmiMask : u32;
    cbBmiMask : u32;
    offBitsMask : u32;
    cbBitsMask : u32;
}

EMRPLGBLT :: struct
{
    emr : EMR;
    rclBounds : RECTL;
    aptlDest : [3]POINTL;
    xSrc : s32;
    ySrc : s32;
    cxSrc : s32;
    cySrc : s32;
    xformSrc : XFORM;
    crBkColorSrc : u32;
    iUsageSrc : u32;
    offBmiSrc : u32;
    cbBmiSrc : u32;
    offBitsSrc : u32;
    cbBitsSrc : u32;
    xMask : s32;
    yMask : s32;
    iUsageMask : u32;
    offBmiMask : u32;
    cbBmiMask : u32;
    offBitsMask : u32;
    cbBitsMask : u32;
}

EMRSETDIBITSTODEVICE :: struct
{
    emr : EMR;
    rclBounds : RECTL;
    xDest : s32;
    yDest : s32;
    xSrc : s32;
    ySrc : s32;
    cxSrc : s32;
    cySrc : s32;
    offBmiSrc : u32;
    cbBmiSrc : u32;
    offBitsSrc : u32;
    cbBitsSrc : u32;
    iUsageSrc : u32;
    iStartScan : u32;
    cScans : u32;
}

EMRSTRETCHDIBITS :: struct
{
    emr : EMR;
    rclBounds : RECTL;
    xDest : s32;
    yDest : s32;
    xSrc : s32;
    ySrc : s32;
    cxSrc : s32;
    cySrc : s32;
    offBmiSrc : u32;
    cbBmiSrc : u32;
    offBitsSrc : u32;
    cbBitsSrc : u32;
    iUsageSrc : u32;
    dwRop : u32;
    cxDest : s32;
    cyDest : s32;
}

EMREXTCREATEFONTINDIRECTW :: struct
{
    emr : EMR;
    ihFont : u32;
    elfw : EXTLOGFONTW;
}

EMRCREATEPALETTE :: struct
{
    emr : EMR;
    ihPal : u32;
    lgpl : LOGPALETTE;
}

EMRCREATEPEN :: struct
{
    emr : EMR;
    ihPen : u32;
    lopn : LOGPEN;
}

EMREXTCREATEPEN :: struct
{
    emr : EMR;
    ihPen : u32;
    offBmi : u32;
    cbBmi : u32;
    offBits : u32;
    cbBits : u32;
    elp : EXTLOGPEN32;
}

EMRCREATEBRUSHINDIRECT :: struct
{
    emr : EMR;
    ihBrush : u32;
    lb : LOGBRUSH32;
}

EMRCREATEMONOBRUSH :: struct
{
    emr : EMR;
    ihBrush : u32;
    iUsage : u32;
    offBmi : u32;
    cbBmi : u32;
    offBits : u32;
    cbBits : u32;
}

EMRCREATEDIBPATTERNBRUSHPT :: struct
{
    emr : EMR;
    ihBrush : u32;
    iUsage : u32;
    offBmi : u32;
    cbBmi : u32;
    offBits : u32;
    cbBits : u32;
}

EMRFORMAT :: struct
{
    dSignature : u32;
    nVersion : u32;
    cbData : u32;
    offData : u32;
}

EMRGLSRECORD :: struct
{
    emr : EMR;
    cbData : u32;
    Data : *u8;
}

EMRGLSBOUNDEDRECORD :: struct
{
    emr : EMR;
    rclBounds : RECTL;
    cbData : u32;
    Data : *u8;
}

EMRSETCOLORSPACE :: struct
{
    emr : EMR;
    ihCS : u32;
}

EMREXTESCAPE :: struct
{
    emr : EMR;
    iEscape : s32;
    cbEscData : s32;
    EscData : *u8;
}

EMRNAMEDESCAPE :: struct
{
    emr : EMR;
    iEscape : s32;
    cbDriver : s32;
    cbEscData : s32;
    EscData : *u8;
}

EMRSETICMPROFILE :: struct
{
    emr : EMR;
    dwFlags : u32;
    cbName : u32;
    cbData : u32;
    Data : *u8;
}

COLORMATCHTOTARGET :: struct
{
    emr : EMR;
    dwAction : u32;
    dwFlags : u32;
    cbName : u32;
    cbData : u32;
    Data : *u8;
}

COLORCORRECTPALETTE :: struct
{
    emr : EMR;
    ihPalette : u32;
    nFirstEntry : u32;
    nPalEntries : u32;
    nReserved : u32;
}

EMRALPHABLEND :: struct
{
    emr : EMR;
    rclBounds : RECTL;
    xDest : s32;
    yDest : s32;
    cxDest : s32;
    cyDest : s32;
    dwRop : u32;
    xSrc : s32;
    ySrc : s32;
    xformSrc : XFORM;
    crBkColorSrc : u32;
    iUsageSrc : u32;
    offBmiSrc : u32;
    cbBmiSrc : u32;
    offBitsSrc : u32;
    cbBitsSrc : u32;
    cxSrc : s32;
    cySrc : s32;
}

EMRGRADIENTFILL :: struct
{
    emr : EMR;
    rclBounds : RECTL;
    nVer : u32;
    nTri : u32;
    ulMode : GRADIENT_FILL;
    Ver : *TRIVERTEX;
}

EMRTRANSPARENTBLT :: struct
{
    emr : EMR;
    rclBounds : RECTL;
    xDest : s32;
    yDest : s32;
    cxDest : s32;
    cyDest : s32;
    dwRop : u32;
    xSrc : s32;
    ySrc : s32;
    xformSrc : XFORM;
    crBkColorSrc : u32;
    iUsageSrc : u32;
    offBmiSrc : u32;
    cbBmiSrc : u32;
    offBitsSrc : u32;
    cbBitsSrc : u32;
    cxSrc : s32;
    cySrc : s32;
}

WGLSWAP :: struct
{
    hdc : HDC;
    uiFlags : u32;
}

CFP_ALLOCPROC :: #type (param0 : u64) -> *void #c_call;

CFP_REALLOCPROC :: #type (param0 : *void, param1 : u64) -> *void #c_call;

CFP_FREEPROC :: #type (param0 : *void) -> void #c_call;

READEMBEDPROC :: #type (param0 : *void, param1 : *void, param2 : u32) -> u32 #c_call;

WRITEEMBEDPROC :: #type (param0 : *void, param1 : *void, param2 : u32) -> u32 #c_call;

TTLOADINFO :: struct
{
    usStructSize : u16;
    usRefStrSize : u16;
    pusRefStr : *u16;
}

TTEMBEDINFO :: struct
{
    usStructSize : u16;
    usRootStrSize : u16;
    pusRootStr : *u16;
}

TTVALIDATIONTESTSPARAMS :: struct
{
    ulStructSize : u32;
    lTestFromSize : s32;
    lTestToSize : s32;
    ulCharSet : u32;
    usReserved1 : u16;
    usCharCodeCount : u16;
    pusCharCodeSet : *u16;
}

TTVALIDATIONTESTSPARAMSEX :: struct
{
    ulStructSize : u32;
    lTestFromSize : s32;
    lTestToSize : s32;
    ulCharSet : u32;
    usReserved1 : u16;
    usCharCodeCount : u16;
    pulCharCodeSet : *u32;
}

GRAYSTRINGPROC :: #type (param0 : HDC, param1 : LPARAM, param2 : s32) -> BOOL #c_call;

DRAWSTATEPROC :: #type (hdc : HDC, lData : LPARAM, wData : WPARAM, cx : s32, cy : s32) -> BOOL #c_call;

PAINTSTRUCT :: struct
{
    hdc : HDC;
    fErase : BOOL;
    rcPaint : RECT;
    fRestore : BOOL;
    fIncUpdate : BOOL;
    rgbReserved : [32]u8;
}

DRAWTEXTPARAMS :: struct
{
    cbSize : u32;
    iTabLength : s32;
    iLeftMargin : s32;
    iRightMargin : s32;
    uiLengthDrawn : u32;
}

MONITORINFO :: struct
{
    cbSize : u32;
    rcMonitor : RECT;
    rcWork : RECT;
    dwFlags : u32;
}

MONITORINFOEXA :: struct
{
    __AnonymousBase_winuser_L13567_C43 : MONITORINFO;
    szDevice : [32]CHAR;
}

MONITORINFOEXW :: struct
{
    __AnonymousBase_winuser_L13571_C43 : MONITORINFO;
    szDevice : [32]u16;
}

MONITORENUMPROC :: #type (param0 : HMONITOR, param1 : HDC, param2 : *RECT, param3 : LPARAM) -> BOOL #c_call;

// Functions

GetObjectA :: (h : HGDIOBJ, c : s32, pv : *void) -> s32 #foreign GDI32;
AddFontResourceA :: (param0 : PSTR) -> s32 #foreign GDI32;
AddFontResourceW :: (param0 : PWSTR) -> s32 #foreign GDI32;
AnimatePalette :: (hPal : HPALETTE, iStartIndex : u32, cEntries : u32, ppe : *PALETTEENTRY) -> BOOL #foreign GDI32;
Arc :: (hdc : HDC, x1 : s32, y1 : s32, x2 : s32, y2 : s32, x3 : s32, y3 : s32, x4 : s32, y4 : s32) -> BOOL #foreign GDI32;
BitBlt :: (hdc : HDC, x : s32, y : s32, cx : s32, cy : s32, hdcSrc : HDC, x1 : s32, y1 : s32, rop : ROP_CODE) -> BOOL #foreign GDI32;
CancelDC :: (hdc : HDC) -> BOOL #foreign GDI32;
Chord :: (hdc : HDC, x1 : s32, y1 : s32, x2 : s32, y2 : s32, x3 : s32, y3 : s32, x4 : s32, y4 : s32) -> BOOL #foreign GDI32;
CloseMetaFile :: (hdc : HDC) -> HMETAFILE #foreign GDI32;
CombineRgn :: (hrgnDst : HRGN, hrgnSrc1 : HRGN, hrgnSrc2 : HRGN, iMode : RGN_COMBINE_MODE) -> s32 #foreign GDI32;
CopyMetaFileA :: (param0 : HMETAFILE, param1 : PSTR) -> HMETAFILE #foreign GDI32;
CopyMetaFileW :: (param0 : HMETAFILE, param1 : PWSTR) -> HMETAFILE #foreign GDI32;
CreateBitmap :: (nWidth : s32, nHeight : s32, nPlanes : u32, nBitCount : u32, lpBits : *void) -> HBITMAP #foreign GDI32;
CreateBitmapIndirect :: (pbm : *BITMAP) -> HBITMAP #foreign GDI32;
CreateBrushIndirect :: (plbrush : *LOGBRUSH) -> HBRUSH #foreign GDI32;
CreateCompatibleBitmap :: (hdc : HDC, cx : s32, cy : s32) -> HBITMAP #foreign GDI32;
CreateDiscardableBitmap :: (hdc : HDC, cx : s32, cy : s32) -> HBITMAP #foreign GDI32;
CreateCompatibleDC :: (hdc : HDC) -> CreatedHDC #foreign GDI32;
CreateDCA :: (pwszDriver : PSTR, pwszDevice : PSTR, pszPort : PSTR, pdm : *DEVMODEA) -> CreatedHDC #foreign GDI32;
CreateDCW :: (pwszDriver : PWSTR, pwszDevice : PWSTR, pszPort : PWSTR, pdm : *DEVMODEW) -> CreatedHDC #foreign GDI32;
CreateDIBitmap :: (hdc : HDC, pbmih : *BITMAPINFOHEADER, flInit : u32, pjBits : *void, pbmi : *BITMAPINFO, iUsage : DIB_USAGE) -> HBITMAP #foreign GDI32;
CreateDIBPatternBrush :: (h : s64, iUsage : DIB_USAGE) -> HBRUSH #foreign GDI32;
CreateDIBPatternBrushPt :: (lpPackedDIB : *void, iUsage : DIB_USAGE) -> HBRUSH #foreign GDI32;
CreateEllipticRgn :: (x1 : s32, y1 : s32, x2 : s32, y2 : s32) -> HRGN #foreign GDI32;
CreateEllipticRgnIndirect :: (lprect : *RECT) -> HRGN #foreign GDI32;
CreateFontIndirectA :: (lplf : *LOGFONTA) -> HFONT #foreign GDI32;
CreateFontIndirectW :: (lplf : *LOGFONTW) -> HFONT #foreign GDI32;
CreateFontA :: (cHeight : s32, cWidth : s32, cEscapement : s32, cOrientation : s32, cWeight : s32, bItalic : u32, bUnderline : u32, bStrikeOut : u32, iCharSet : u32, iOutPrecision : FONT_OUTPUT_PRECISION, iClipPrecision : FONT_CLIP_PRECISION, iQuality : FONT_QUALITY, iPitchAndFamily : FONT_PITCH_AND_FAMILY, pszFaceName : PSTR) -> HFONT #foreign GDI32;
CreateFontW :: (cHeight : s32, cWidth : s32, cEscapement : s32, cOrientation : s32, cWeight : s32, bItalic : u32, bUnderline : u32, bStrikeOut : u32, iCharSet : u32, iOutPrecision : FONT_OUTPUT_PRECISION, iClipPrecision : FONT_CLIP_PRECISION, iQuality : FONT_QUALITY, iPitchAndFamily : FONT_PITCH_AND_FAMILY, pszFaceName : PWSTR) -> HFONT #foreign GDI32;
CreateHatchBrush :: (iHatch : HATCH_BRUSH_STYLE, color : u32) -> HBRUSH #foreign GDI32;
CreateICA :: (pszDriver : PSTR, pszDevice : PSTR, pszPort : PSTR, pdm : *DEVMODEA) -> CreatedHDC #foreign GDI32;
CreateICW :: (pszDriver : PWSTR, pszDevice : PWSTR, pszPort : PWSTR, pdm : *DEVMODEW) -> CreatedHDC #foreign GDI32;
CreateMetaFileA :: (pszFile : PSTR) -> HdcMetdataFileHandle #foreign GDI32;
CreateMetaFileW :: (pszFile : PWSTR) -> HdcMetdataFileHandle #foreign GDI32;
CreatePalette :: (plpal : *LOGPALETTE) -> HPALETTE #foreign GDI32;
CreatePen :: (iStyle : PEN_STYLE, cWidth : s32, color : u32) -> HPEN #foreign GDI32;
CreatePenIndirect :: (plpen : *LOGPEN) -> HPEN #foreign GDI32;
CreatePolyPolygonRgn :: (pptl : *POINT, pc : *s32, cPoly : s32, iMode : CREATE_POLYGON_RGN_MODE) -> HRGN #foreign GDI32;
CreatePatternBrush :: (hbm : HBITMAP) -> HBRUSH #foreign GDI32;
CreateRectRgn :: (x1 : s32, y1 : s32, x2 : s32, y2 : s32) -> HRGN #foreign GDI32;
CreateRectRgnIndirect :: (lprect : *RECT) -> HRGN #foreign GDI32;
CreateRoundRectRgn :: (x1 : s32, y1 : s32, x2 : s32, y2 : s32, w : s32, h : s32) -> HRGN #foreign GDI32;
CreateScalableFontResourceA :: (fdwHidden : u32, lpszFont : PSTR, lpszFile : PSTR, lpszPath : PSTR) -> BOOL #foreign GDI32;
CreateScalableFontResourceW :: (fdwHidden : u32, lpszFont : PWSTR, lpszFile : PWSTR, lpszPath : PWSTR) -> BOOL #foreign GDI32;
CreateSolidBrush :: (color : u32) -> HBRUSH #foreign GDI32;
DeleteDC :: (hdc : CreatedHDC) -> BOOL #foreign GDI32;
DeleteMetaFile :: (hmf : HMETAFILE) -> BOOL #foreign GDI32;
DeleteObject :: (ho : HGDIOBJ) -> BOOL #foreign GDI32;
DrawEscape :: (hdc : HDC, iEscape : s32, cjIn : s32, lpIn : PSTR) -> s32 #foreign GDI32;
Ellipse :: (hdc : HDC, left : s32, top : s32, right : s32, bottom : s32) -> BOOL #foreign GDI32;
EnumFontFamiliesExA :: (hdc : HDC, lpLogfont : *LOGFONTA, lpProc : FONTENUMPROCA, lParam : LPARAM, dwFlags : u32) -> s32 #foreign GDI32;
EnumFontFamiliesExW :: (hdc : HDC, lpLogfont : *LOGFONTW, lpProc : FONTENUMPROCW, lParam : LPARAM, dwFlags : u32) -> s32 #foreign GDI32;
EnumFontFamiliesA :: (hdc : HDC, lpLogfont : PSTR, lpProc : FONTENUMPROCA, lParam : LPARAM) -> s32 #foreign GDI32;
EnumFontFamiliesW :: (hdc : HDC, lpLogfont : PWSTR, lpProc : FONTENUMPROCW, lParam : LPARAM) -> s32 #foreign GDI32;
EnumFontsA :: (hdc : HDC, lpLogfont : PSTR, lpProc : FONTENUMPROCA, lParam : LPARAM) -> s32 #foreign GDI32;
EnumFontsW :: (hdc : HDC, lpLogfont : PWSTR, lpProc : FONTENUMPROCW, lParam : LPARAM) -> s32 #foreign GDI32;
EnumObjects :: (hdc : HDC, nType : OBJ_TYPE, lpFunc : GOBJENUMPROC, lParam : LPARAM) -> s32 #foreign GDI32;
EqualRgn :: (hrgn1 : HRGN, hrgn2 : HRGN) -> BOOL #foreign GDI32;
ExcludeClipRect :: (hdc : HDC, left : s32, top : s32, right : s32, bottom : s32) -> s32 #foreign GDI32;
ExtCreateRegion :: (lpx : *XFORM, nCount : u32, lpData : *RGNDATA) -> HRGN #foreign GDI32;
ExtFloodFill :: (hdc : HDC, x : s32, y : s32, color : u32, type : EXT_FLOOD_FILL_TYPE) -> BOOL #foreign GDI32;
FillRgn :: (hdc : HDC, hrgn : HRGN, hbr : HBRUSH) -> BOOL #foreign GDI32;
FloodFill :: (hdc : HDC, x : s32, y : s32, color : u32) -> BOOL #foreign GDI32;
FrameRgn :: (hdc : HDC, hrgn : HRGN, hbr : HBRUSH, w : s32, h : s32) -> BOOL #foreign GDI32;
GetROP2 :: (hdc : HDC) -> s32 #foreign GDI32;
GetAspectRatioFilterEx :: (hdc : HDC, lpsize : *SIZE) -> BOOL #foreign GDI32;
GetBkColor :: (hdc : HDC) -> u32 #foreign GDI32;
GetDCBrushColor :: (hdc : HDC) -> u32 #foreign GDI32;
GetDCPenColor :: (hdc : HDC) -> u32 #foreign GDI32;
GetBkMode :: (hdc : HDC) -> s32 #foreign GDI32;
GetBitmapBits :: (hbit : HBITMAP, cb : s32, lpvBits : *void) -> s32 #foreign GDI32;
GetBitmapDimensionEx :: (hbit : HBITMAP, lpsize : *SIZE) -> BOOL #foreign GDI32;
GetBoundsRect :: (hdc : HDC, lprect : *RECT, flags : u32) -> u32 #foreign GDI32;
GetBrushOrgEx :: (hdc : HDC, lppt : *POINT) -> BOOL #foreign GDI32;
GetCharWidthA :: (hdc : HDC, iFirst : u32, iLast : u32, lpBuffer : *s32) -> BOOL #foreign GDI32;
GetCharWidthW :: (hdc : HDC, iFirst : u32, iLast : u32, lpBuffer : *s32) -> BOOL #foreign GDI32;
GetCharWidth32A :: (hdc : HDC, iFirst : u32, iLast : u32, lpBuffer : *s32) -> BOOL #foreign GDI32;
GetCharWidth32W :: (hdc : HDC, iFirst : u32, iLast : u32, lpBuffer : *s32) -> BOOL #foreign GDI32;
GetCharWidthFloatA :: (hdc : HDC, iFirst : u32, iLast : u32, lpBuffer : *float) -> BOOL #foreign GDI32;
GetCharWidthFloatW :: (hdc : HDC, iFirst : u32, iLast : u32, lpBuffer : *float) -> BOOL #foreign GDI32;
GetCharABCWidthsA :: (hdc : HDC, wFirst : u32, wLast : u32, lpABC : *ABC) -> BOOL #foreign GDI32;
GetCharABCWidthsW :: (hdc : HDC, wFirst : u32, wLast : u32, lpABC : *ABC) -> BOOL #foreign GDI32;
GetCharABCWidthsFloatA :: (hdc : HDC, iFirst : u32, iLast : u32, lpABC : *ABCFLOAT) -> BOOL #foreign GDI32;
GetCharABCWidthsFloatW :: (hdc : HDC, iFirst : u32, iLast : u32, lpABC : *ABCFLOAT) -> BOOL #foreign GDI32;
GetClipBox :: (hdc : HDC, lprect : *RECT) -> s32 #foreign GDI32;
GetClipRgn :: (hdc : HDC, hrgn : HRGN) -> s32 #foreign GDI32;
GetMetaRgn :: (hdc : HDC, hrgn : HRGN) -> s32 #foreign GDI32;
GetCurrentObject :: (hdc : HDC, type : OBJ_TYPE) -> HGDIOBJ #foreign GDI32;
GetCurrentPositionEx :: (hdc : HDC, lppt : *POINT) -> BOOL #foreign GDI32;
GetDeviceCaps :: (hdc : HDC, index : GET_DEVICE_CAPS_INDEX) -> s32 #foreign GDI32;
GetDIBits :: (hdc : HDC, hbm : HBITMAP, start : u32, cLines : u32, lpvBits : *void, lpbmi : *BITMAPINFO, usage : DIB_USAGE) -> s32 #foreign GDI32;
GetFontData :: (hdc : HDC, dwTable : u32, dwOffset : u32, pvBuffer : *void, cjBuffer : u32) -> u32 #foreign GDI32;
GetGlyphOutlineA :: (hdc : HDC, uChar : u32, fuFormat : GET_GLYPH_OUTLINE_FORMAT, lpgm : *GLYPHMETRICS, cjBuffer : u32, pvBuffer : *void, lpmat2 : *MAT2) -> u32 #foreign GDI32;
GetGlyphOutlineW :: (hdc : HDC, uChar : u32, fuFormat : GET_GLYPH_OUTLINE_FORMAT, lpgm : *GLYPHMETRICS, cjBuffer : u32, pvBuffer : *void, lpmat2 : *MAT2) -> u32 #foreign GDI32;
GetGraphicsMode :: (hdc : HDC) -> s32 #foreign GDI32;
GetMapMode :: (hdc : HDC) -> s32 #foreign GDI32;
GetMetaFileBitsEx :: (hMF : HMETAFILE, cbBuffer : u32, lpData : *void) -> u32 #foreign GDI32;
GetMetaFileA :: (lpName : PSTR) -> HMETAFILE #foreign GDI32;
GetMetaFileW :: (lpName : PWSTR) -> HMETAFILE #foreign GDI32;
GetNearestColor :: (hdc : HDC, color : u32) -> u32 #foreign GDI32;
GetNearestPaletteIndex :: (h : HPALETTE, color : u32) -> u32 #foreign GDI32;
GetObjectType :: (h : HGDIOBJ) -> u32 #foreign GDI32;
GetOutlineTextMetricsA :: (hdc : HDC, cjCopy : u32, potm : *OUTLINETEXTMETRICA) -> u32 #foreign GDI32;
GetOutlineTextMetricsW :: (hdc : HDC, cjCopy : u32, potm : *OUTLINETEXTMETRICW) -> u32 #foreign GDI32;
GetPaletteEntries :: (hpal : HPALETTE, iStart : u32, cEntries : u32, pPalEntries : *PALETTEENTRY) -> u32 #foreign GDI32;
GetPixel :: (hdc : HDC, x : s32, y : s32) -> u32 #foreign GDI32;
GetPolyFillMode :: (hdc : HDC) -> s32 #foreign GDI32;
GetRasterizerCaps :: (lpraststat : *RASTERIZER_STATUS, cjBytes : u32) -> BOOL #foreign GDI32;
GetRandomRgn :: (hdc : HDC, hrgn : HRGN, i : s32) -> s32 #foreign GDI32;
GetRegionData :: (hrgn : HRGN, nCount : u32, lpRgnData : *RGNDATA) -> u32 #foreign GDI32;
GetRgnBox :: (hrgn : HRGN, lprc : *RECT) -> s32 #foreign GDI32;
GetStockObject :: (i : GET_STOCK_OBJECT_FLAGS) -> HGDIOBJ #foreign GDI32;
GetStretchBltMode :: (hdc : HDC) -> s32 #foreign GDI32;
GetSystemPaletteEntries :: (hdc : HDC, iStart : u32, cEntries : u32, pPalEntries : *PALETTEENTRY) -> u32 #foreign GDI32;
GetSystemPaletteUse :: (hdc : HDC) -> u32 #foreign GDI32;
GetTextCharacterExtra :: (hdc : HDC) -> s32 #foreign GDI32;
GetTextAlign :: (hdc : HDC) -> u32 #foreign GDI32;
GetTextColor :: (hdc : HDC) -> u32 #foreign GDI32;
GetTextExtentPointA :: (hdc : HDC, lpString : *u8, c : s32, lpsz : *SIZE) -> BOOL #foreign GDI32;
GetTextExtentPointW :: (hdc : HDC, lpString : *u16, c : s32, lpsz : *SIZE) -> BOOL #foreign GDI32;
GetTextExtentPoint32A :: (hdc : HDC, lpString : *u8, c : s32, psizl : *SIZE) -> BOOL #foreign GDI32;
GetTextExtentPoint32W :: (hdc : HDC, lpString : *u16, c : s32, psizl : *SIZE) -> BOOL #foreign GDI32;
GetTextExtentExPointA :: (hdc : HDC, lpszString : *u8, cchString : s32, nMaxExtent : s32, lpnFit : *s32, lpnDx : *s32, lpSize : *SIZE) -> BOOL #foreign GDI32;
GetTextExtentExPointW :: (hdc : HDC, lpszString : *u16, cchString : s32, nMaxExtent : s32, lpnFit : *s32, lpnDx : *s32, lpSize : *SIZE) -> BOOL #foreign GDI32;
GetFontLanguageInfo :: (hdc : HDC) -> u32 #foreign GDI32;
GetCharacterPlacementA :: (hdc : HDC, lpString : *u8, nCount : s32, nMexExtent : s32, lpResults : *GCP_RESULTSA, dwFlags : GET_CHARACTER_PLACEMENT_FLAGS) -> u32 #foreign GDI32;
GetCharacterPlacementW :: (hdc : HDC, lpString : *u16, nCount : s32, nMexExtent : s32, lpResults : *GCP_RESULTSW, dwFlags : GET_CHARACTER_PLACEMENT_FLAGS) -> u32 #foreign GDI32;
GetFontUnicodeRanges :: (hdc : HDC, lpgs : *GLYPHSET) -> u32 #foreign GDI32;
GetGlyphIndicesA :: (hdc : HDC, lpstr : *u8, c : s32, pgi : *u16, fl : u32) -> u32 #foreign GDI32;
GetGlyphIndicesW :: (hdc : HDC, lpstr : *u16, c : s32, pgi : *u16, fl : u32) -> u32 #foreign GDI32;
GetTextExtentPointI :: (hdc : HDC, pgiIn : *u16, cgi : s32, psize : *SIZE) -> BOOL #foreign GDI32;
GetTextExtentExPointI :: (hdc : HDC, lpwszString : *u16, cwchString : s32, nMaxExtent : s32, lpnFit : *s32, lpnDx : *s32, lpSize : *SIZE) -> BOOL #foreign GDI32;
GetCharWidthI :: (hdc : HDC, giFirst : u32, cgi : u32, pgi : *u16, piWidths : *s32) -> BOOL #foreign GDI32;
GetCharABCWidthsI :: (hdc : HDC, giFirst : u32, cgi : u32, pgi : *u16, pabc : *ABC) -> BOOL #foreign GDI32;
AddFontResourceExA :: (name : PSTR, fl : FONT_RESOURCE_CHARACTERISTICS, res : *void) -> s32 #foreign GDI32;
AddFontResourceExW :: (name : PWSTR, fl : FONT_RESOURCE_CHARACTERISTICS, res : *void) -> s32 #foreign GDI32;
RemoveFontResourceExA :: (name : PSTR, fl : u32, pdv : *void) -> BOOL #foreign GDI32;
RemoveFontResourceExW :: (name : PWSTR, fl : u32, pdv : *void) -> BOOL #foreign GDI32;
AddFontMemResourceEx :: (pFileView : *void, cjSize : u32, pvResrved : *void, pNumFonts : *u32) -> HANDLE #foreign GDI32;
RemoveFontMemResourceEx :: (h : HANDLE) -> BOOL #foreign GDI32;
CreateFontIndirectExA :: (param0 : *ENUMLOGFONTEXDVA) -> HFONT #foreign GDI32;
CreateFontIndirectExW :: (param0 : *ENUMLOGFONTEXDVW) -> HFONT #foreign GDI32;
GetViewportExtEx :: (hdc : HDC, lpsize : *SIZE) -> BOOL #foreign GDI32;
GetViewportOrgEx :: (hdc : HDC, lppoint : *POINT) -> BOOL #foreign GDI32;
GetWindowExtEx :: (hdc : HDC, lpsize : *SIZE) -> BOOL #foreign GDI32;
GetWindowOrgEx :: (hdc : HDC, lppoint : *POINT) -> BOOL #foreign GDI32;
IntersectClipRect :: (hdc : HDC, left : s32, top : s32, right : s32, bottom : s32) -> s32 #foreign GDI32;
InvertRgn :: (hdc : HDC, hrgn : HRGN) -> BOOL #foreign GDI32;
LineDDA :: (xStart : s32, yStart : s32, xEnd : s32, yEnd : s32, lpProc : LINEDDAPROC, data : LPARAM) -> BOOL #foreign GDI32;
LineTo :: (hdc : HDC, x : s32, y : s32) -> BOOL #foreign GDI32;
MaskBlt :: (hdcDest : HDC, xDest : s32, yDest : s32, width : s32, height : s32, hdcSrc : HDC, xSrc : s32, ySrc : s32, hbmMask : HBITMAP, xMask : s32, yMask : s32, rop : u32) -> BOOL #foreign GDI32;
PlgBlt :: (hdcDest : HDC, lpPoint : *[3]POINT, hdcSrc : HDC, xSrc : s32, ySrc : s32, width : s32, height : s32, hbmMask : HBITMAP, xMask : s32, yMask : s32) -> BOOL #foreign GDI32;
OffsetClipRgn :: (hdc : HDC, x : s32, y : s32) -> s32 #foreign GDI32;
OffsetRgn :: (hrgn : HRGN, x : s32, y : s32) -> s32 #foreign GDI32;
PatBlt :: (hdc : HDC, x : s32, y : s32, w : s32, h : s32, rop : ROP_CODE) -> BOOL #foreign GDI32;
Pie :: (hdc : HDC, left : s32, top : s32, right : s32, bottom : s32, xr1 : s32, yr1 : s32, xr2 : s32, yr2 : s32) -> BOOL #foreign GDI32;
PlayMetaFile :: (hdc : HDC, hmf : HMETAFILE) -> BOOL #foreign GDI32;
PaintRgn :: (hdc : HDC, hrgn : HRGN) -> BOOL #foreign GDI32;
PolyPolygon :: (hdc : HDC, apt : *POINT, asz : *s32, csz : s32) -> BOOL #foreign GDI32;
PtInRegion :: (hrgn : HRGN, x : s32, y : s32) -> BOOL #foreign GDI32;
PtVisible :: (hdc : HDC, x : s32, y : s32) -> BOOL #foreign GDI32;
RectInRegion :: (hrgn : HRGN, lprect : *RECT) -> BOOL #foreign GDI32;
RectVisible :: (hdc : HDC, lprect : *RECT) -> BOOL #foreign GDI32;
Rectangle :: (hdc : HDC, left : s32, top : s32, right : s32, bottom : s32) -> BOOL #foreign GDI32;
RestoreDC :: (hdc : HDC, nSavedDC : s32) -> BOOL #foreign GDI32;
ResetDCA :: (hdc : HDC, lpdm : *DEVMODEA) -> HDC #foreign GDI32;
ResetDCW :: (hdc : HDC, lpdm : *DEVMODEW) -> HDC #foreign GDI32;
RealizePalette :: (hdc : HDC) -> u32 #foreign GDI32;
RemoveFontResourceA :: (lpFileName : PSTR) -> BOOL #foreign GDI32;
RemoveFontResourceW :: (lpFileName : PWSTR) -> BOOL #foreign GDI32;
RoundRect :: (hdc : HDC, left : s32, top : s32, right : s32, bottom : s32, width : s32, height : s32) -> BOOL #foreign GDI32;
ResizePalette :: (hpal : HPALETTE, n : u32) -> BOOL #foreign GDI32;
SaveDC :: (hdc : HDC) -> s32 #foreign GDI32;
SelectClipRgn :: (hdc : HDC, hrgn : HRGN) -> s32 #foreign GDI32;
ExtSelectClipRgn :: (hdc : HDC, hrgn : HRGN, mode : RGN_COMBINE_MODE) -> s32 #foreign GDI32;
SetMetaRgn :: (hdc : HDC) -> s32 #foreign GDI32;
SelectObject :: (hdc : HDC, h : HGDIOBJ) -> HGDIOBJ #foreign GDI32;
SelectPalette :: (hdc : HDC, hPal : HPALETTE, bForceBkgd : BOOL) -> HPALETTE #foreign GDI32;
SetBkColor :: (hdc : HDC, color : u32) -> u32 #foreign GDI32;
SetDCBrushColor :: (hdc : HDC, color : u32) -> u32 #foreign GDI32;
SetDCPenColor :: (hdc : HDC, color : u32) -> u32 #foreign GDI32;
SetBkMode :: (hdc : HDC, mode : BACKGROUND_MODE) -> s32 #foreign GDI32;
SetBitmapBits :: (hbm : HBITMAP, cb : u32, pvBits : *void) -> s32 #foreign GDI32;
SetBoundsRect :: (hdc : HDC, lprect : *RECT, flags : SET_BOUNDS_RECT_FLAGS) -> u32 #foreign GDI32;
SetDIBits :: (hdc : HDC, hbm : HBITMAP, start : u32, cLines : u32, lpBits : *void, lpbmi : *BITMAPINFO, ColorUse : DIB_USAGE) -> s32 #foreign GDI32;
SetDIBitsToDevice :: (hdc : HDC, xDest : s32, yDest : s32, w : u32, h : u32, xSrc : s32, ySrc : s32, StartScan : u32, cLines : u32, lpvBits : *void, lpbmi : *BITMAPINFO, ColorUse : DIB_USAGE) -> s32 #foreign GDI32;
SetMapperFlags :: (hdc : HDC, flags : u32) -> u32 #foreign GDI32;
SetGraphicsMode :: (hdc : HDC, iMode : GRAPHICS_MODE) -> s32 #foreign GDI32;
SetMapMode :: (hdc : HDC, iMode : HDC_MAP_MODE) -> s32 #foreign GDI32;
SetLayout :: (hdc : HDC, l : DC_LAYOUT) -> u32 #foreign GDI32;
GetLayout :: (hdc : HDC) -> u32 #foreign GDI32;
SetMetaFileBitsEx :: (cbBuffer : u32, lpData : *u8) -> HMETAFILE #foreign GDI32;
SetPaletteEntries :: (hpal : HPALETTE, iStart : u32, cEntries : u32, pPalEntries : *PALETTEENTRY) -> u32 #foreign GDI32;
SetPixel :: (hdc : HDC, x : s32, y : s32, color : u32) -> u32 #foreign GDI32;
SetPixelV :: (hdc : HDC, x : s32, y : s32, color : u32) -> BOOL #foreign GDI32;
SetPolyFillMode :: (hdc : HDC, mode : CREATE_POLYGON_RGN_MODE) -> s32 #foreign GDI32;
StretchBlt :: (hdcDest : HDC, xDest : s32, yDest : s32, wDest : s32, hDest : s32, hdcSrc : HDC, xSrc : s32, ySrc : s32, wSrc : s32, hSrc : s32, rop : ROP_CODE) -> BOOL #foreign GDI32;
SetRectRgn :: (hrgn : HRGN, left : s32, top : s32, right : s32, bottom : s32) -> BOOL #foreign GDI32;
StretchDIBits :: (hdc : HDC, xDest : s32, yDest : s32, DestWidth : s32, DestHeight : s32, xSrc : s32, ySrc : s32, SrcWidth : s32, SrcHeight : s32, lpBits : *void, lpbmi : *BITMAPINFO, iUsage : DIB_USAGE, rop : ROP_CODE) -> s32 #foreign GDI32;
SetROP2 :: (hdc : HDC, rop2 : R2_MODE) -> s32 #foreign GDI32;
SetStretchBltMode :: (hdc : HDC, mode : STRETCH_BLT_MODE) -> s32 #foreign GDI32;
SetSystemPaletteUse :: (hdc : HDC, use : SYSTEM_PALETTE_USE) -> u32 #foreign GDI32;
SetTextCharacterExtra :: (hdc : HDC, extra : s32) -> s32 #foreign GDI32;
SetTextColor :: (hdc : HDC, color : u32) -> u32 #foreign GDI32;
SetTextAlign :: (hdc : HDC, align : TEXT_ALIGN_OPTIONS) -> u32 #foreign GDI32;
SetTextJustification :: (hdc : HDC, extra : s32, count : s32) -> BOOL #foreign GDI32;
UpdateColors :: (hdc : HDC) -> BOOL #foreign GDI32;
AlphaBlend :: (hdcDest : HDC, xoriginDest : s32, yoriginDest : s32, wDest : s32, hDest : s32, hdcSrc : HDC, xoriginSrc : s32, yoriginSrc : s32, wSrc : s32, hSrc : s32, ftn : BLENDFUNCTION) -> BOOL #foreign MSIMG32;
TransparentBlt :: (hdcDest : HDC, xoriginDest : s32, yoriginDest : s32, wDest : s32, hDest : s32, hdcSrc : HDC, xoriginSrc : s32, yoriginSrc : s32, wSrc : s32, hSrc : s32, crTransparent : u32) -> BOOL #foreign MSIMG32;
GradientFill :: (hdc : HDC, pVertex : *TRIVERTEX, nVertex : u32, pMesh : *void, nMesh : u32, ulMode : GRADIENT_FILL) -> BOOL #foreign MSIMG32;
GdiAlphaBlend :: (hdcDest : HDC, xoriginDest : s32, yoriginDest : s32, wDest : s32, hDest : s32, hdcSrc : HDC, xoriginSrc : s32, yoriginSrc : s32, wSrc : s32, hSrc : s32, ftn : BLENDFUNCTION) -> BOOL #foreign GDI32;
GdiTransparentBlt :: (hdcDest : HDC, xoriginDest : s32, yoriginDest : s32, wDest : s32, hDest : s32, hdcSrc : HDC, xoriginSrc : s32, yoriginSrc : s32, wSrc : s32, hSrc : s32, crTransparent : u32) -> BOOL #foreign GDI32;
GdiGradientFill :: (hdc : HDC, pVertex : *TRIVERTEX, nVertex : u32, pMesh : *void, nCount : u32, ulMode : GRADIENT_FILL) -> BOOL #foreign GDI32;
PlayMetaFileRecord :: (hdc : HDC, lpHandleTable : *HANDLETABLE, lpMR : *METARECORD, noObjs : u32) -> BOOL #foreign GDI32;
EnumMetaFile :: (hdc : HDC, hmf : HMETAFILE, proc : MFENUMPROC, param3 : LPARAM) -> BOOL #foreign GDI32;
CloseEnhMetaFile :: (hdc : HDC) -> HENHMETAFILE #foreign GDI32;
CopyEnhMetaFileA :: (hEnh : HENHMETAFILE, lpFileName : PSTR) -> HENHMETAFILE #foreign GDI32;
CopyEnhMetaFileW :: (hEnh : HENHMETAFILE, lpFileName : PWSTR) -> HENHMETAFILE #foreign GDI32;
CreateEnhMetaFileA :: (hdc : HDC, lpFilename : PSTR, lprc : *RECT, lpDesc : PSTR) -> HdcMetdataEnhFileHandle #foreign GDI32;
CreateEnhMetaFileW :: (hdc : HDC, lpFilename : PWSTR, lprc : *RECT, lpDesc : PWSTR) -> HdcMetdataEnhFileHandle #foreign GDI32;
DeleteEnhMetaFile :: (hmf : HENHMETAFILE) -> BOOL #foreign GDI32;
EnumEnhMetaFile :: (hdc : HDC, hmf : HENHMETAFILE, proc : ENHMFENUMPROC, param3 : *void, lpRect : *RECT) -> BOOL #foreign GDI32;
GetEnhMetaFileA :: (lpName : PSTR) -> HENHMETAFILE #foreign GDI32;
GetEnhMetaFileW :: (lpName : PWSTR) -> HENHMETAFILE #foreign GDI32;
GetEnhMetaFileBits :: (hEMF : HENHMETAFILE, nSize : u32, lpData : *u8) -> u32 #foreign GDI32;
GetEnhMetaFileDescriptionA :: (hemf : HENHMETAFILE, cchBuffer : u32, lpDescription : *u8) -> u32 #foreign GDI32;
GetEnhMetaFileDescriptionW :: (hemf : HENHMETAFILE, cchBuffer : u32, lpDescription : *u16) -> u32 #foreign GDI32;
GetEnhMetaFileHeader :: (hemf : HENHMETAFILE, nSize : u32, lpEnhMetaHeader : *ENHMETAHEADER) -> u32 #foreign GDI32;
GetEnhMetaFilePaletteEntries :: (hemf : HENHMETAFILE, nNumEntries : u32, lpPaletteEntries : *PALETTEENTRY) -> u32 #foreign GDI32;
GetWinMetaFileBits :: (hemf : HENHMETAFILE, cbData16 : u32, pData16 : *u8, iMapMode : s32, hdcRef : HDC) -> u32 #foreign GDI32;
PlayEnhMetaFile :: (hdc : HDC, hmf : HENHMETAFILE, lprect : *RECT) -> BOOL #foreign GDI32;
PlayEnhMetaFileRecord :: (hdc : HDC, pht : *HANDLETABLE, pmr : *ENHMETARECORD, cht : u32) -> BOOL #foreign GDI32;
SetEnhMetaFileBits :: (nSize : u32, pb : *u8) -> HENHMETAFILE #foreign GDI32;
GdiComment :: (hdc : HDC, nSize : u32, lpData : *u8) -> BOOL #foreign GDI32;
GetTextMetricsA :: (hdc : HDC, lptm : *TEXTMETRICA) -> BOOL #foreign GDI32;
GetTextMetricsW :: (hdc : HDC, lptm : *TEXTMETRICW) -> BOOL #foreign GDI32;
AngleArc :: (hdc : HDC, x : s32, y : s32, r : u32, StartAngle : float, SweepAngle : float) -> BOOL #foreign GDI32;
PolyPolyline :: (hdc : HDC, apt : *POINT, asz : *u32, csz : u32) -> BOOL #foreign GDI32;
GetWorldTransform :: (hdc : HDC, lpxf : *XFORM) -> BOOL #foreign GDI32;
SetWorldTransform :: (hdc : HDC, lpxf : *XFORM) -> BOOL #foreign GDI32;
ModifyWorldTransform :: (hdc : HDC, lpxf : *XFORM, mode : MODIFY_WORLD_TRANSFORM_MODE) -> BOOL #foreign GDI32;
CombineTransform :: (lpxfOut : *XFORM, lpxf1 : *XFORM, lpxf2 : *XFORM) -> BOOL #foreign GDI32;
CreateDIBSection :: (hdc : HDC, pbmi : *BITMAPINFO, usage : DIB_USAGE, ppvBits : **void, hSection : HANDLE, offset : u32) -> HBITMAP #foreign GDI32;
GetDIBColorTable :: (hdc : HDC, iStart : u32, cEntries : u32, prgbq : *RGBQUAD) -> u32 #foreign GDI32;
SetDIBColorTable :: (hdc : HDC, iStart : u32, cEntries : u32, prgbq : *RGBQUAD) -> u32 #foreign GDI32;
SetColorAdjustment :: (hdc : HDC, lpca : *COLORADJUSTMENT) -> BOOL #foreign GDI32;
GetColorAdjustment :: (hdc : HDC, lpca : *COLORADJUSTMENT) -> BOOL #foreign GDI32;
CreateHalftonePalette :: (hdc : HDC) -> HPALETTE #foreign GDI32;
AbortPath :: (hdc : HDC) -> BOOL #foreign GDI32;
ArcTo :: (hdc : HDC, left : s32, top : s32, right : s32, bottom : s32, xr1 : s32, yr1 : s32, xr2 : s32, yr2 : s32) -> BOOL #foreign GDI32;
BeginPath :: (hdc : HDC) -> BOOL #foreign GDI32;
CloseFigure :: (hdc : HDC) -> BOOL #foreign GDI32;
EndPath :: (hdc : HDC) -> BOOL #foreign GDI32;
FillPath :: (hdc : HDC) -> BOOL #foreign GDI32;
FlattenPath :: (hdc : HDC) -> BOOL #foreign GDI32;
GetPath :: (hdc : HDC, apt : *POINT, aj : *u8, cpt : s32) -> s32 #foreign GDI32;
PathToRegion :: (hdc : HDC) -> HRGN #foreign GDI32;
PolyDraw :: (hdc : HDC, apt : *POINT, aj : *u8, cpt : s32) -> BOOL #foreign GDI32;
SelectClipPath :: (hdc : HDC, mode : RGN_COMBINE_MODE) -> BOOL #foreign GDI32;
SetArcDirection :: (hdc : HDC, dir : ARC_DIRECTION) -> s32 #foreign GDI32;
SetMiterLimit :: (hdc : HDC, limit : float, old : *float) -> BOOL #foreign GDI32;
StrokeAndFillPath :: (hdc : HDC) -> BOOL #foreign GDI32;
StrokePath :: (hdc : HDC) -> BOOL #foreign GDI32;
WidenPath :: (hdc : HDC) -> BOOL #foreign GDI32;
ExtCreatePen :: (iPenStyle : PEN_STYLE, cWidth : u32, plbrush : *LOGBRUSH, cStyle : u32, pstyle : *u32) -> HPEN #foreign GDI32;
GetMiterLimit :: (hdc : HDC, plimit : *float) -> BOOL #foreign GDI32;
GetArcDirection :: (hdc : HDC) -> s32 #foreign GDI32;
GetObjectW :: (h : HGDIOBJ, c : s32, pv : *void) -> s32 #foreign GDI32;
MoveToEx :: (hdc : HDC, x : s32, y : s32, lppt : *POINT) -> BOOL #foreign GDI32;
TextOutA :: (hdc : HDC, x : s32, y : s32, lpString : *u8, c : s32) -> BOOL #foreign GDI32;
TextOutW :: (hdc : HDC, x : s32, y : s32, lpString : *u16, c : s32) -> BOOL #foreign GDI32;
ExtTextOutA :: (hdc : HDC, x : s32, y : s32, options : ETO_OPTIONS, lprect : *RECT, lpString : *u8, c : u32, lpDx : *s32) -> BOOL #foreign GDI32;
ExtTextOutW :: (hdc : HDC, x : s32, y : s32, options : ETO_OPTIONS, lprect : *RECT, lpString : *u16, c : u32, lpDx : *s32) -> BOOL #foreign GDI32;
PolyTextOutA :: (hdc : HDC, ppt : *POLYTEXTA, nstrings : s32) -> BOOL #foreign GDI32;
PolyTextOutW :: (hdc : HDC, ppt : *POLYTEXTW, nstrings : s32) -> BOOL #foreign GDI32;
CreatePolygonRgn :: (pptl : *POINT, cPoint : s32, iMode : CREATE_POLYGON_RGN_MODE) -> HRGN #foreign GDI32;
DPtoLP :: (hdc : HDC, lppt : *POINT, c : s32) -> BOOL #foreign GDI32;
LPtoDP :: (hdc : HDC, lppt : *POINT, c : s32) -> BOOL #foreign GDI32;
Polygon :: (hdc : HDC, apt : *POINT, cpt : s32) -> BOOL #foreign GDI32;
Polyline :: (hdc : HDC, apt : *POINT, cpt : s32) -> BOOL #foreign GDI32;
PolyBezier :: (hdc : HDC, apt : *POINT, cpt : u32) -> BOOL #foreign GDI32;
PolyBezierTo :: (hdc : HDC, apt : *POINT, cpt : u32) -> BOOL #foreign GDI32;
PolylineTo :: (hdc : HDC, apt : *POINT, cpt : u32) -> BOOL #foreign GDI32;
SetViewportExtEx :: (hdc : HDC, x : s32, y : s32, lpsz : *SIZE) -> BOOL #foreign GDI32;
SetViewportOrgEx :: (hdc : HDC, x : s32, y : s32, lppt : *POINT) -> BOOL #foreign GDI32;
SetWindowExtEx :: (hdc : HDC, x : s32, y : s32, lpsz : *SIZE) -> BOOL #foreign GDI32;
SetWindowOrgEx :: (hdc : HDC, x : s32, y : s32, lppt : *POINT) -> BOOL #foreign GDI32;
OffsetViewportOrgEx :: (hdc : HDC, x : s32, y : s32, lppt : *POINT) -> BOOL #foreign GDI32;
OffsetWindowOrgEx :: (hdc : HDC, x : s32, y : s32, lppt : *POINT) -> BOOL #foreign GDI32;
ScaleViewportExtEx :: (hdc : HDC, xn : s32, dx : s32, yn : s32, yd : s32, lpsz : *SIZE) -> BOOL #foreign GDI32;
ScaleWindowExtEx :: (hdc : HDC, xn : s32, xd : s32, yn : s32, yd : s32, lpsz : *SIZE) -> BOOL #foreign GDI32;
SetBitmapDimensionEx :: (hbm : HBITMAP, w : s32, h : s32, lpsz : *SIZE) -> BOOL #foreign GDI32;
SetBrushOrgEx :: (hdc : HDC, x : s32, y : s32, lppt : *POINT) -> BOOL #foreign GDI32;
GetTextFaceA :: (hdc : HDC, c : s32, lpName : *u8) -> s32 #foreign GDI32;
GetTextFaceW :: (hdc : HDC, c : s32, lpName : *u16) -> s32 #foreign GDI32;
GetKerningPairsA :: (hdc : HDC, nPairs : u32, lpKernPair : *KERNINGPAIR) -> u32 #foreign GDI32;
GetKerningPairsW :: (hdc : HDC, nPairs : u32, lpKernPair : *KERNINGPAIR) -> u32 #foreign GDI32;
GetDCOrgEx :: (hdc : HDC, lppt : *POINT) -> BOOL #foreign GDI32;
FixBrushOrgEx :: (hdc : HDC, x : s32, y : s32, ptl : *POINT) -> BOOL #foreign GDI32;
UnrealizeObject :: (h : HGDIOBJ) -> BOOL #foreign GDI32;
GdiFlush :: () -> BOOL #foreign GDI32;
GdiSetBatchLimit :: (dw : u32) -> u32 #foreign GDI32;
GdiGetBatchLimit :: () -> u32 #foreign GDI32;
wglSwapMultipleBuffers :: (param0 : u32, param1 : *WGLSWAP) -> u32 #foreign OPENGL32;
CreateFontPackage :: (puchSrcBuffer : *u8, ulSrcBufferSize : u32, ppuchFontPackageBuffer : **u8, pulFontPackageBufferSize : *u32, pulBytesWritten : *u32, usFlag : u16, usTTCIndex : u16, usSubsetFormat : u16, usSubsetLanguage : u16, usSubsetPlatform : CREATE_FONT_PACKAGE_SUBSET_PLATFORM, usSubsetEncoding : CREATE_FONT_PACKAGE_SUBSET_ENCODING, pusSubsetKeepList : *u16, usSubsetListCount : u16, lpfnAllocate : CFP_ALLOCPROC, lpfnReAllocate : CFP_REALLOCPROC, lpfnFree : CFP_FREEPROC, lpvReserved : *void) -> u32 #foreign FONTSUB;
MergeFontPackage :: (puchMergeFontBuffer : *u8, ulMergeFontBufferSize : u32, puchFontPackageBuffer : *u8, ulFontPackageBufferSize : u32, ppuchDestBuffer : **u8, pulDestBufferSize : *u32, pulBytesWritten : *u32, usMode : u16, lpfnAllocate : CFP_ALLOCPROC, lpfnReAllocate : CFP_REALLOCPROC, lpfnFree : CFP_FREEPROC, lpvReserved : *void) -> u32 #foreign FONTSUB;
TTEmbedFont :: (hDC : HDC, ulFlags : TTEMBED_FLAGS, ulCharSet : EMBED_FONT_CHARSET, pulPrivStatus : *EMBEDDED_FONT_PRIV_STATUS, pulStatus : *u32, lpfnWriteToStream : WRITEEMBEDPROC, lpvWriteStream : *void, pusCharCodeSet : *u16, usCharCodeCount : u16, usLanguage : u16, pTTEmbedInfo : *TTEMBEDINFO) -> s32 #foreign t2embed;
TTEmbedFontFromFileA :: (hDC : HDC, szFontFileName : PSTR, usTTCIndex : u16, ulFlags : TTEMBED_FLAGS, ulCharSet : EMBED_FONT_CHARSET, pulPrivStatus : *EMBEDDED_FONT_PRIV_STATUS, pulStatus : *u32, lpfnWriteToStream : WRITEEMBEDPROC, lpvWriteStream : *void, pusCharCodeSet : *u16, usCharCodeCount : u16, usLanguage : u16, pTTEmbedInfo : *TTEMBEDINFO) -> s32 #foreign t2embed;
TTLoadEmbeddedFont :: (phFontReference : *HANDLE, ulFlags : u32, pulPrivStatus : *EMBEDDED_FONT_PRIV_STATUS, ulPrivs : FONT_LICENSE_PRIVS, pulStatus : *TTLOAD_EMBEDDED_FONT_STATUS, lpfnReadFromStream : READEMBEDPROC, lpvReadStream : *void, szWinFamilyName : PWSTR, szMacFamilyName : PSTR, pTTLoadInfo : *TTLOADINFO) -> s32 #foreign t2embed;
TTGetEmbeddedFontInfo :: (ulFlags : TTEMBED_FLAGS, pulPrivStatus : *u32, ulPrivs : FONT_LICENSE_PRIVS, pulStatus : *u32, lpfnReadFromStream : READEMBEDPROC, lpvReadStream : *void, pTTLoadInfo : *TTLOADINFO) -> s32 #foreign t2embed;
TTDeleteEmbeddedFont :: (hFontReference : HANDLE, ulFlags : u32, pulStatus : *u32) -> s32 #foreign t2embed;
TTGetEmbeddingType :: (hDC : HDC, pulEmbedType : *EMBEDDED_FONT_PRIV_STATUS) -> s32 #foreign t2embed;
TTCharToUnicode :: (hDC : HDC, pucCharCodes : *u8, ulCharCodeSize : u32, pusShortCodes : *u16, ulShortCodeSize : u32, ulFlags : u32) -> s32 #foreign t2embed;
TTRunValidationTests :: (hDC : HDC, pTestParam : *TTVALIDATIONTESTSPARAMS) -> s32 #foreign t2embed;
TTIsEmbeddingEnabled :: (hDC : HDC, pbEnabled : *BOOL) -> s32 #foreign t2embed;
TTIsEmbeddingEnabledForFacename :: (lpszFacename : PSTR, pbEnabled : *BOOL) -> s32 #foreign t2embed;
TTEnableEmbeddingForFacename :: (lpszFacename : PSTR, bEnable : BOOL) -> s32 #foreign t2embed;
TTEmbedFontEx :: (hDC : HDC, ulFlags : TTEMBED_FLAGS, ulCharSet : EMBED_FONT_CHARSET, pulPrivStatus : *EMBEDDED_FONT_PRIV_STATUS, pulStatus : *u32, lpfnWriteToStream : WRITEEMBEDPROC, lpvWriteStream : *void, pulCharCodeSet : *u32, usCharCodeCount : u16, usLanguage : u16, pTTEmbedInfo : *TTEMBEDINFO) -> s32 #foreign t2embed;
TTRunValidationTestsEx :: (hDC : HDC, pTestParam : *TTVALIDATIONTESTSPARAMSEX) -> s32 #foreign t2embed;
TTGetNewFontName :: (phFontReference : *HANDLE, wzWinFamilyName : *u16, cchMaxWinName : s32, szMacFamilyName : *u8, cchMaxMacName : s32) -> s32 #foreign t2embed;
DrawEdge :: (hdc : HDC, qrc : *RECT, edge : DRAWEDGE_FLAGS, grfFlags : DRAW_EDGE_FLAGS) -> BOOL #foreign USER32;
DrawFrameControl :: (param0 : HDC, param1 : *RECT, param2 : DFC_TYPE, param3 : DFCS_STATE) -> BOOL #foreign USER32;
DrawCaption :: (hwnd : HWND, hdc : HDC, lprect : *RECT, flags : DRAW_CAPTION_FLAGS) -> BOOL #foreign USER32;
DrawAnimatedRects :: (hwnd : HWND, idAni : s32, lprcFrom : *RECT, lprcTo : *RECT) -> BOOL #foreign USER32;
DrawTextA :: (hdc : HDC, lpchText : *u8, cchText : s32, lprc : *RECT, format : DRAW_TEXT_FORMAT) -> s32 #foreign USER32;
DrawTextW :: (hdc : HDC, lpchText : *u16, cchText : s32, lprc : *RECT, format : DRAW_TEXT_FORMAT) -> s32 #foreign USER32;
DrawTextExA :: (hdc : HDC, lpchText : *u8, cchText : s32, lprc : *RECT, format : DRAW_TEXT_FORMAT, lpdtp : *DRAWTEXTPARAMS) -> s32 #foreign USER32;
DrawTextExW :: (hdc : HDC, lpchText : *u16, cchText : s32, lprc : *RECT, format : DRAW_TEXT_FORMAT, lpdtp : *DRAWTEXTPARAMS) -> s32 #foreign USER32;
GrayStringA :: (hDC : HDC, hBrush : HBRUSH, lpOutputFunc : GRAYSTRINGPROC, lpData : LPARAM, nCount : s32, X : s32, Y : s32, nWidth : s32, nHeight : s32) -> BOOL #foreign USER32;
GrayStringW :: (hDC : HDC, hBrush : HBRUSH, lpOutputFunc : GRAYSTRINGPROC, lpData : LPARAM, nCount : s32, X : s32, Y : s32, nWidth : s32, nHeight : s32) -> BOOL #foreign USER32;
DrawStateA :: (hdc : HDC, hbrFore : HBRUSH, qfnCallBack : DRAWSTATEPROC, lData : LPARAM, wData : WPARAM, x : s32, y : s32, cx : s32, cy : s32, uFlags : DRAWSTATE_FLAGS) -> BOOL #foreign USER32;
DrawStateW :: (hdc : HDC, hbrFore : HBRUSH, qfnCallBack : DRAWSTATEPROC, lData : LPARAM, wData : WPARAM, x : s32, y : s32, cx : s32, cy : s32, uFlags : DRAWSTATE_FLAGS) -> BOOL #foreign USER32;
TabbedTextOutA :: (hdc : HDC, x : s32, y : s32, lpString : *u8, chCount : s32, nTabPositions : s32, lpnTabStopPositions : *s32, nTabOrigin : s32) -> s32 #foreign USER32;
TabbedTextOutW :: (hdc : HDC, x : s32, y : s32, lpString : *u16, chCount : s32, nTabPositions : s32, lpnTabStopPositions : *s32, nTabOrigin : s32) -> s32 #foreign USER32;
GetTabbedTextExtentA :: (hdc : HDC, lpString : *u8, chCount : s32, nTabPositions : s32, lpnTabStopPositions : *s32) -> u32 #foreign USER32;
GetTabbedTextExtentW :: (hdc : HDC, lpString : *u16, chCount : s32, nTabPositions : s32, lpnTabStopPositions : *s32) -> u32 #foreign USER32;
UpdateWindow :: (hWnd : HWND) -> BOOL #foreign USER32;
PaintDesktop :: (hdc : HDC) -> BOOL #foreign USER32;
WindowFromDC :: (hDC : HDC) -> HWND #foreign USER32;
GetDC :: (hWnd : HWND) -> HDC #foreign USER32;
GetDCEx :: (hWnd : HWND, hrgnClip : HRGN, flags : GET_DCX_FLAGS) -> HDC #foreign USER32;
GetWindowDC :: (hWnd : HWND) -> HDC #foreign USER32;
ReleaseDC :: (hWnd : HWND, hDC : HDC) -> s32 #foreign USER32;
BeginPaint :: (hWnd : HWND, lpPaint : *PAINTSTRUCT) -> HDC #foreign USER32;
EndPaint :: (hWnd : HWND, lpPaint : *PAINTSTRUCT) -> BOOL #foreign USER32;
GetUpdateRect :: (hWnd : HWND, lpRect : *RECT, bErase : BOOL) -> BOOL #foreign USER32;
GetUpdateRgn :: (hWnd : HWND, hRgn : HRGN, bErase : BOOL) -> s32 #foreign USER32;
SetWindowRgn :: (hWnd : HWND, hRgn : HRGN, bRedraw : BOOL) -> s32 #foreign USER32;
GetWindowRgn :: (hWnd : HWND, hRgn : HRGN) -> s32 #foreign USER32;
GetWindowRgnBox :: (hWnd : HWND, lprc : *RECT) -> s32 #foreign USER32;
ExcludeUpdateRgn :: (hDC : HDC, hWnd : HWND) -> s32 #foreign USER32;
InvalidateRect :: (hWnd : HWND, lpRect : *RECT, bErase : BOOL) -> BOOL #foreign USER32;
ValidateRect :: (hWnd : HWND, lpRect : *RECT) -> BOOL #foreign USER32;
InvalidateRgn :: (hWnd : HWND, hRgn : HRGN, bErase : BOOL) -> BOOL #foreign USER32;
ValidateRgn :: (hWnd : HWND, hRgn : HRGN) -> BOOL #foreign USER32;
RedrawWindow :: (hWnd : HWND, lprcUpdate : *RECT, hrgnUpdate : HRGN, flags : REDRAW_WINDOW_FLAGS) -> BOOL #foreign USER32;
LockWindowUpdate :: (hWndLock : HWND) -> BOOL #foreign USER32;
ClientToScreen :: (hWnd : HWND, lpPoint : *POINT) -> BOOL #foreign USER32;
ScreenToClient :: (hWnd : HWND, lpPoint : *POINT) -> BOOL #foreign USER32;
MapWindowPoints :: (hWndFrom : HWND, hWndTo : HWND, lpPoints : *POINT, cPoints : u32) -> s32 #foreign USER32;
GetSysColorBrush :: (nIndex : s32) -> HBRUSH #foreign USER32;
DrawFocusRect :: (hDC : HDC, lprc : *RECT) -> BOOL #foreign USER32;
FillRect :: (hDC : HDC, lprc : *RECT, hbr : HBRUSH) -> s32 #foreign USER32;
FrameRect :: (hDC : HDC, lprc : *RECT, hbr : HBRUSH) -> s32 #foreign USER32;
InvertRect :: (hDC : HDC, lprc : *RECT) -> BOOL #foreign USER32;
SetRect :: (lprc : *RECT, xLeft : s32, yTop : s32, xRight : s32, yBottom : s32) -> BOOL #foreign USER32;
SetRectEmpty :: (lprc : *RECT) -> BOOL #foreign USER32;
CopyRect :: (lprcDst : *RECT, lprcSrc : *RECT) -> BOOL #foreign USER32;
InflateRect :: (lprc : *RECT, dx : s32, dy : s32) -> BOOL #foreign USER32;
IntersectRect :: (lprcDst : *RECT, lprcSrc1 : *RECT, lprcSrc2 : *RECT) -> BOOL #foreign USER32;
UnionRect :: (lprcDst : *RECT, lprcSrc1 : *RECT, lprcSrc2 : *RECT) -> BOOL #foreign USER32;
SubtractRect :: (lprcDst : *RECT, lprcSrc1 : *RECT, lprcSrc2 : *RECT) -> BOOL #foreign USER32;
OffsetRect :: (lprc : *RECT, dx : s32, dy : s32) -> BOOL #foreign USER32;
IsRectEmpty :: (lprc : *RECT) -> BOOL #foreign USER32;
EqualRect :: (lprc1 : *RECT, lprc2 : *RECT) -> BOOL #foreign USER32;
PtInRect :: (lprc : *RECT, pt : POINT) -> BOOL #foreign USER32;
LoadBitmapA :: (hInstance : HINSTANCE, lpBitmapName : PSTR) -> HBITMAP #foreign USER32;
LoadBitmapW :: (hInstance : HINSTANCE, lpBitmapName : PWSTR) -> HBITMAP #foreign USER32;
ChangeDisplaySettingsA :: (lpDevMode : *DEVMODEA, dwFlags : CDS_TYPE) -> DISP_CHANGE #foreign USER32;
ChangeDisplaySettingsW :: (lpDevMode : *DEVMODEW, dwFlags : CDS_TYPE) -> DISP_CHANGE #foreign USER32;
ChangeDisplaySettingsExA :: (lpszDeviceName : PSTR, lpDevMode : *DEVMODEA, hwnd : HWND, dwflags : CDS_TYPE, lParam : *void) -> DISP_CHANGE #foreign USER32;
ChangeDisplaySettingsExW :: (lpszDeviceName : PWSTR, lpDevMode : *DEVMODEW, hwnd : HWND, dwflags : CDS_TYPE, lParam : *void) -> DISP_CHANGE #foreign USER32;
EnumDisplaySettingsA :: (lpszDeviceName : PSTR, iModeNum : ENUM_DISPLAY_SETTINGS_MODE, lpDevMode : *DEVMODEA) -> BOOL #foreign USER32;
EnumDisplaySettingsW :: (lpszDeviceName : PWSTR, iModeNum : ENUM_DISPLAY_SETTINGS_MODE, lpDevMode : *DEVMODEW) -> BOOL #foreign USER32;
EnumDisplaySettingsExA :: (lpszDeviceName : PSTR, iModeNum : ENUM_DISPLAY_SETTINGS_MODE, lpDevMode : *DEVMODEA, dwFlags : u32) -> BOOL #foreign USER32;
EnumDisplaySettingsExW :: (lpszDeviceName : PWSTR, iModeNum : ENUM_DISPLAY_SETTINGS_MODE, lpDevMode : *DEVMODEW, dwFlags : u32) -> BOOL #foreign USER32;
EnumDisplayDevicesA :: (lpDevice : PSTR, iDevNum : u32, lpDisplayDevice : *DISPLAY_DEVICEA, dwFlags : u32) -> BOOL #foreign USER32;
EnumDisplayDevicesW :: (lpDevice : PWSTR, iDevNum : u32, lpDisplayDevice : *DISPLAY_DEVICEW, dwFlags : u32) -> BOOL #foreign USER32;
MonitorFromPoint :: (pt : POINT, dwFlags : MONITOR_FROM_FLAGS) -> HMONITOR #foreign USER32;
MonitorFromRect :: (lprc : *RECT, dwFlags : MONITOR_FROM_FLAGS) -> HMONITOR #foreign USER32;
MonitorFromWindow :: (hwnd : HWND, dwFlags : MONITOR_FROM_FLAGS) -> HMONITOR #foreign USER32;
GetMonitorInfoA :: (hMonitor : HMONITOR, lpmi : *MONITORINFO) -> BOOL #foreign USER32;
GetMonitorInfoW :: (hMonitor : HMONITOR, lpmi : *MONITORINFO) -> BOOL #foreign USER32;
EnumDisplayMonitors :: (hdc : HDC, lprcClip : *RECT, lpfnEnum : MONITORENUMPROC, dwData : LPARAM) -> BOOL #foreign USER32;

// Unicode aliases

#if UNICODE then TEXTMETRIC :: TEXTMETRICW;
else             TEXTMETRIC :: TEXTMETRICA;
#if UNICODE then NEWTEXTMETRIC :: NEWTEXTMETRICW;
else             NEWTEXTMETRIC :: NEWTEXTMETRICA;
#if UNICODE then LOGFONT :: LOGFONTW;
else             LOGFONT :: LOGFONTA;
#if UNICODE then ENUMLOGFONT :: ENUMLOGFONTW;
else             ENUMLOGFONT :: ENUMLOGFONTA;
#if UNICODE then ENUMLOGFONTEX :: ENUMLOGFONTEXW;
else             ENUMLOGFONTEX :: ENUMLOGFONTEXA;
#if UNICODE then EXTLOGFONT :: EXTLOGFONTW;
else             EXTLOGFONT :: EXTLOGFONTA;
#if UNICODE then DEVMODE :: DEVMODEW;
else             DEVMODE :: DEVMODEA;
#if UNICODE then DISPLAY_DEVICE :: DISPLAY_DEVICEW;
else             DISPLAY_DEVICE :: DISPLAY_DEVICEA;
#if UNICODE then OUTLINETEXTMETRIC :: OUTLINETEXTMETRICW;
else             OUTLINETEXTMETRIC :: OUTLINETEXTMETRICA;
#if UNICODE then POLYTEXT :: POLYTEXTW;
else             POLYTEXT :: POLYTEXTA;
#if UNICODE then GCP_RESULTS :: GCP_RESULTSW;
else             GCP_RESULTS :: GCP_RESULTSA;
#if UNICODE then FONTENUMPROC :: FONTENUMPROCW;
else             FONTENUMPROC :: FONTENUMPROCA;
#if UNICODE then AXISINFO :: AXISINFOW;
else             AXISINFO :: AXISINFOA;
#if UNICODE then AXESLIST :: AXESLISTW;
else             AXESLIST :: AXESLISTA;
#if UNICODE then ENUMLOGFONTEXDV :: ENUMLOGFONTEXDVW;
else             ENUMLOGFONTEXDV :: ENUMLOGFONTEXDVA;
#if UNICODE then MONITORINFOEX :: MONITORINFOEXW;
else             MONITORINFOEX :: MONITORINFOEXA;
#if UNICODE then GetObject :: GetObjectW;
else             GetObject :: GetObjectA;
#if UNICODE then AddFontResource :: AddFontResourceW;
else             AddFontResource :: AddFontResourceA;
#if UNICODE then CopyMetaFile :: CopyMetaFileW;
else             CopyMetaFile :: CopyMetaFileA;
#if UNICODE then CreateDC :: CreateDCW;
else             CreateDC :: CreateDCA;
#if UNICODE then CreateFontIndirect :: CreateFontIndirectW;
else             CreateFontIndirect :: CreateFontIndirectA;
#if UNICODE then CreateFont :: CreateFontW;
else             CreateFont :: CreateFontA;
#if UNICODE then CreateIC :: CreateICW;
else             CreateIC :: CreateICA;
#if UNICODE then CreateMetaFile :: CreateMetaFileW;
else             CreateMetaFile :: CreateMetaFileA;
#if UNICODE then CreateScalableFontResource :: CreateScalableFontResourceW;
else             CreateScalableFontResource :: CreateScalableFontResourceA;
#if UNICODE then EnumFontFamiliesEx :: EnumFontFamiliesExW;
else             EnumFontFamiliesEx :: EnumFontFamiliesExA;
#if UNICODE then EnumFontFamilies :: EnumFontFamiliesW;
else             EnumFontFamilies :: EnumFontFamiliesA;
#if UNICODE then EnumFonts :: EnumFontsW;
else             EnumFonts :: EnumFontsA;
#if UNICODE then GetCharWidth :: GetCharWidthW;
else             GetCharWidth :: GetCharWidthA;
#if UNICODE then GetCharWidth32 :: GetCharWidth32W;
else             GetCharWidth32 :: GetCharWidth32A;
#if UNICODE then GetCharWidthFloat :: GetCharWidthFloatW;
else             GetCharWidthFloat :: GetCharWidthFloatA;
#if UNICODE then GetCharABCWidths :: GetCharABCWidthsW;
else             GetCharABCWidths :: GetCharABCWidthsA;
#if UNICODE then GetCharABCWidthsFloat :: GetCharABCWidthsFloatW;
else             GetCharABCWidthsFloat :: GetCharABCWidthsFloatA;
#if UNICODE then GetGlyphOutline :: GetGlyphOutlineW;
else             GetGlyphOutline :: GetGlyphOutlineA;
#if UNICODE then GetMetaFile :: GetMetaFileW;
else             GetMetaFile :: GetMetaFileA;
#if UNICODE then GetOutlineTextMetrics :: GetOutlineTextMetricsW;
else             GetOutlineTextMetrics :: GetOutlineTextMetricsA;
#if UNICODE then GetTextExtentPoint :: GetTextExtentPointW;
else             GetTextExtentPoint :: GetTextExtentPointA;
#if UNICODE then GetTextExtentPoint32 :: GetTextExtentPoint32W;
else             GetTextExtentPoint32 :: GetTextExtentPoint32A;
#if UNICODE then GetTextExtentExPoint :: GetTextExtentExPointW;
else             GetTextExtentExPoint :: GetTextExtentExPointA;
#if UNICODE then GetCharacterPlacement :: GetCharacterPlacementW;
else             GetCharacterPlacement :: GetCharacterPlacementA;
#if UNICODE then GetGlyphIndices :: GetGlyphIndicesW;
else             GetGlyphIndices :: GetGlyphIndicesA;
#if UNICODE then AddFontResourceEx :: AddFontResourceExW;
else             AddFontResourceEx :: AddFontResourceExA;
#if UNICODE then RemoveFontResourceEx :: RemoveFontResourceExW;
else             RemoveFontResourceEx :: RemoveFontResourceExA;
#if UNICODE then CreateFontIndirectEx :: CreateFontIndirectExW;
else             CreateFontIndirectEx :: CreateFontIndirectExA;
#if UNICODE then ResetDC :: ResetDCW;
else             ResetDC :: ResetDCA;
#if UNICODE then RemoveFontResource :: RemoveFontResourceW;
else             RemoveFontResource :: RemoveFontResourceA;
#if UNICODE then CopyEnhMetaFile :: CopyEnhMetaFileW;
else             CopyEnhMetaFile :: CopyEnhMetaFileA;
#if UNICODE then CreateEnhMetaFile :: CreateEnhMetaFileW;
else             CreateEnhMetaFile :: CreateEnhMetaFileA;
#if UNICODE then GetEnhMetaFile :: GetEnhMetaFileW;
else             GetEnhMetaFile :: GetEnhMetaFileA;
#if UNICODE then GetEnhMetaFileDescription :: GetEnhMetaFileDescriptionW;
else             GetEnhMetaFileDescription :: GetEnhMetaFileDescriptionA;
#if UNICODE then GetTextMetrics :: GetTextMetricsW;
else             GetTextMetrics :: GetTextMetricsA;
#if UNICODE then TextOut :: TextOutW;
else             TextOut :: TextOutA;
#if UNICODE then ExtTextOut :: ExtTextOutW;
else             ExtTextOut :: ExtTextOutA;
#if UNICODE then PolyTextOut :: PolyTextOutW;
else             PolyTextOut :: PolyTextOutA;
#if UNICODE then GetTextFace :: GetTextFaceW;
else             GetTextFace :: GetTextFaceA;
#if UNICODE then GetKerningPairs :: GetKerningPairsW;
else             GetKerningPairs :: GetKerningPairsA;
#if UNICODE then DrawText :: DrawTextW;
else             DrawText :: DrawTextA;
#if UNICODE then DrawTextEx :: DrawTextExW;
else             DrawTextEx :: DrawTextExA;
#if UNICODE then GrayString :: GrayStringW;
else             GrayString :: GrayStringA;
#if UNICODE then DrawState :: DrawStateW;
else             DrawState :: DrawStateA;
#if UNICODE then TabbedTextOut :: TabbedTextOutW;
else             TabbedTextOut :: TabbedTextOutA;
#if UNICODE then GetTabbedTextExtent :: GetTabbedTextExtentW;
else             GetTabbedTextExtent :: GetTabbedTextExtentA;
#if UNICODE then LoadBitmap :: LoadBitmapW;
else             LoadBitmap :: LoadBitmapA;
#if UNICODE then ChangeDisplaySettings :: ChangeDisplaySettingsW;
else             ChangeDisplaySettings :: ChangeDisplaySettingsA;
#if UNICODE then ChangeDisplaySettingsEx :: ChangeDisplaySettingsExW;
else             ChangeDisplaySettingsEx :: ChangeDisplaySettingsExA;
#if UNICODE then EnumDisplaySettings :: EnumDisplaySettingsW;
else             EnumDisplaySettings :: EnumDisplaySettingsA;
#if UNICODE then EnumDisplaySettingsEx :: EnumDisplaySettingsExW;
else             EnumDisplaySettingsEx :: EnumDisplaySettingsExA;
#if UNICODE then EnumDisplayDevices :: EnumDisplayDevicesW;
else             EnumDisplayDevices :: EnumDisplayDevicesA;
#if UNICODE then GetMonitorInfo :: GetMonitorInfoW;
else             GetMonitorInfo :: GetMonitorInfoA;

// System libraries

#scope_file

GDI32 :: #system_library "GDI32";
MSIMG32 :: #system_library "MSIMG32";
OPENGL32 :: #system_library "OPENGL32";
FONTSUB :: #system_library "FONTSUB";
t2embed :: #system_library "t2embed";
USER32 :: #system_library "USER32";
