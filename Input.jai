// This file was auto generated

#module_parameters (UNICODE := true);

#import "Win32/Basics" (UNICODE);

// Constants

ACUTE :: 769;
AX_KBD_DESKTOP_TYPE :: 1;
BREVE :: 774;
CAPLOK :: 1;
CAPLOKALTGR :: 4;
CEDILLA :: 807;
CIRCUMFLEX :: 770;
DEC_KBD_ANSI_LAYOUT_TYPE :: 1;
DEC_KBD_JIS_LAYOUT_TYPE :: 2;
DIARESIS :: 776;
DIARESIS_TONOS :: 901;
DKF_DEAD :: 1;
DONTCARE_BIT :: 33554432;
DOT_ABOVE :: 775;
DOUBLE_ACUTE :: 779;
EXTENDED_BIT :: 16777216;
FAKE_KEYSTROKE :: 33554432;
FMR_KBD_JIS_TYPE :: 0;
FMR_KBD_OASYS_TYPE :: 1;
FMV_KBD_OASYS_TYPE :: 2;
GRAVE :: 768;
GRPSELTAP :: 128;
HACEK :: 780;
HOOK_ABOVE :: 777;
KANALOK :: 8;
KBDALT :: 4;
KBDBASE :: 0;
KBDCTRL :: 2;
KBDGRPSELTAP :: 128;
KBDKANA :: 8;
KBDLOYA :: 32;
KBDNLS_ALPHANUM :: 5;
KBDNLS_CODEINPUT :: 10;
KBDNLS_CONV_OR_NONCONV :: 15;
KBDNLS_HELP_OR_END :: 11;
KBDNLS_HIRAGANA :: 6;
KBDNLS_HOME_OR_CLEAR :: 12;
KBDNLS_INDEX_ALT :: 2;
KBDNLS_INDEX_NORMAL :: 1;
KBDNLS_KANAEVENT :: 14;
KBDNLS_KANALOCK :: 4;
KBDNLS_KATAKANA :: 7;
KBDNLS_NOEVENT :: 1;
KBDNLS_NULL :: 0;
KBDNLS_NUMPAD :: 13;
KBDNLS_ROMAN :: 9;
KBDNLS_SBCSDBCS :: 8;
KBDNLS_SEND_BASE_VK :: 2;
KBDNLS_SEND_PARAM_VK :: 3;
KBDNLS_TYPE_NORMAL :: 1;
KBDNLS_TYPE_NULL :: 0;
KBDNLS_TYPE_TOGGLE :: 2;
KBDROYA :: 16;
KBDSHIFT :: 1;
KBDTABLE_MULTI_MAX :: 8;
KBD_TYPE :: 4;
KBD_VERSION :: 1;
KEYBOARD_TYPE_GENERIC_101 :: 4;
KEYBOARD_TYPE_JAPAN :: 7;
KEYBOARD_TYPE_KOREA :: 8;
KEYBOARD_TYPE_UNKNOWN :: 81;
KLLF_ALTGR :: 1;
KLLF_GLOBAL_ATTRS :: 2;
KLLF_LRM_RLM :: 4;
KLLF_SHIFTLOCK :: 2;
MACRON :: 772;
MICROSOFT_KBD_001_TYPE :: 4;
MICROSOFT_KBD_002_TYPE :: 3;
MICROSOFT_KBD_101A_TYPE :: 0;
MICROSOFT_KBD_101B_TYPE :: 4;
MICROSOFT_KBD_101C_TYPE :: 5;
MICROSOFT_KBD_101_TYPE :: 0;
MICROSOFT_KBD_103_TYPE :: 6;
MICROSOFT_KBD_106_TYPE :: 2;
MICROSOFT_KBD_AX_TYPE :: 1;
MICROSOFT_KBD_FUNC :: 12;
MOUSE_ATTRIBUTES_CHANGED :: 4;
MOUSE_BUTTON_1_DOWN :: 1;
MOUSE_BUTTON_1_UP :: 2;
MOUSE_BUTTON_2_DOWN :: 4;
MOUSE_BUTTON_2_UP :: 8;
MOUSE_BUTTON_3_DOWN :: 16;
MOUSE_BUTTON_3_UP :: 32;
MOUSE_BUTTON_4_DOWN :: 64;
MOUSE_BUTTON_4_UP :: 128;
MOUSE_BUTTON_5_DOWN :: 256;
MOUSE_BUTTON_5_UP :: 512;
MOUSE_ERROR_VALUE_BASE :: 20000;
MOUSE_HID_HARDWARE :: 128;
MOUSE_HWHEEL :: 2048;
MOUSE_I8042_HARDWARE :: 2;
MOUSE_INPORT_HARDWARE :: 1;
MOUSE_LEFT_BUTTON_DOWN :: 1;
MOUSE_LEFT_BUTTON_UP :: 2;
MOUSE_MIDDLE_BUTTON_DOWN :: 16;
MOUSE_MIDDLE_BUTTON_UP :: 32;
MOUSE_MOVE_ABSOLUTE :: 1;
MOUSE_MOVE_NOCOALESCE :: 8;
MOUSE_MOVE_RELATIVE :: 0;
MOUSE_RIGHT_BUTTON_DOWN :: 4;
MOUSE_RIGHT_BUTTON_UP :: 8;
MOUSE_SERIAL_HARDWARE :: 4;
MOUSE_TERMSRV_SRC_SHADOW :: 256;
MOUSE_VIRTUAL_DESKTOP :: 2;
MOUSE_WHEEL :: 1024;
NEC_KBD_106_TYPE :: 5;
NEC_KBD_H_MODE_TYPE :: 3;
NEC_KBD_LAPTOP_TYPE :: 4;
NEC_KBD_NORMAL_TYPE :: 1;
NEC_KBD_N_MODE_TYPE :: 2;
NLSKBD_INFO_ACCESSIBILITY_KEYMAP :: 2;
NLSKBD_INFO_EMURATE_101_KEYBOARD :: 16;
NLSKBD_INFO_EMURATE_106_KEYBOARD :: 32;
NLSKBD_INFO_SEND_IME_NOTIFICATION :: 1;
NLSKBD_OEM_AX :: 1;
NLSKBD_OEM_DEC :: 24;
NLSKBD_OEM_EPSON :: 4;
NLSKBD_OEM_FUJITSU :: 5;
NLSKBD_OEM_IBM :: 7;
NLSKBD_OEM_MATSUSHITA :: 10;
NLSKBD_OEM_MICROSOFT :: 0;
NLSKBD_OEM_NEC :: 13;
NLSKBD_OEM_TOSHIBA :: 18;
OGONEK :: 808;
OVERSCORE :: 773;
RING :: 778;
SCANCODE_ALT :: 56;
SCANCODE_CTRL :: 29;
SCANCODE_LSHIFT :: 42;
SCANCODE_LWIN :: 91;
SCANCODE_NUMPAD_FIRST :: 71;
SCANCODE_NUMPAD_LAST :: 82;
SCANCODE_RSHIFT :: 54;
SCANCODE_RWIN :: 92;
SCANCODE_THAI_LAYOUT_TOGGLE :: 41;
SGCAPS :: 2;
SHFT_INVALID :: 15;
TILDE :: 771;
TONOS :: 900;
TOSHIBA_KBD_DESKTOP_TYPE :: 13;
TOSHIBA_KBD_LAPTOP_TYPE :: 15;
UMLAUT :: 776;
VK_ABNT_C1 :: 193;
VK_ABNT_C2 :: 194;
VK_DBE_ALPHANUMERIC :: 240;
VK_DBE_CODEINPUT :: 250;
VK_DBE_DBCSCHAR :: 244;
VK_DBE_DETERMINESTRING :: 252;
VK_DBE_ENTERDLGCONVERSIONMODE :: 253;
VK_DBE_ENTERIMECONFIGMODE :: 248;
VK_DBE_ENTERWORDREGISTERMODE :: 247;
VK_DBE_FLUSHSTRING :: 249;
VK_DBE_HIRAGANA :: 242;
VK_DBE_KATAKANA :: 241;
VK_DBE_NOCODEINPUT :: 251;
VK_DBE_NOROMAN :: 246;
VK_DBE_ROMAN :: 245;
VK_DBE_SBCSCHAR :: 243;
VK__none_ :: 255;
WCH_DEAD :: 61441;
WCH_LGTR :: 61442;
WCH_NONE :: 61440;

// Types

ACTIVATE_KEYBOARD_LAYOUT_FLAGS :: enum u32
{
    KLF_REORDER :: 8;
    KLF_RESET :: 1073741824;
    KLF_SETFORPROCESS :: 256;
    KLF_SHIFTLOCK :: 65536;
    KLF_ACTIVATE :: 1;
    KLF_NOTELLSHELL :: 128;
    KLF_REPLACELANG :: 16;
    KLF_SUBSTITUTE_OK :: 2;
}

KLF_REORDER :: 8;
KLF_RESET :: 1073741824;
KLF_SETFORPROCESS :: 256;
KLF_SHIFTLOCK :: 65536;
KLF_ACTIVATE :: 1;
KLF_NOTELLSHELL :: 128;
KLF_REPLACELANG :: 16;
KLF_SUBSTITUTE_OK :: 2;

DEADKEY :: struct
{
    dwBoth : u32;
    wchComposed : u16;
    uFlags : u16;
}

GET_MOUSE_MOVE_POINTS_EX_RESOLUTION :: enum u32
{
    GMMP_USE_DISPLAY_POINTS :: 1;
    GMMP_USE_HIGH_RESOLUTION_POINTS :: 2;
}

GMMP_USE_DISPLAY_POINTS :: 1;
GMMP_USE_HIGH_RESOLUTION_POINTS :: 2;

HARDWAREINPUT :: struct
{
    uMsg : u32;
    wParamL : u16;
    wParamH : u16;
}

HKL :: *void;

HOT_KEY_MODIFIERS :: enum_flags u32
{
    MOD_ALT :: 1;
    MOD_CONTROL :: 2;
    MOD_NOREPEAT :: 16384;
    MOD_SHIFT :: 4;
    MOD_WIN :: 8;
}

MOD_ALT :: 1;
MOD_CONTROL :: 2;
MOD_NOREPEAT :: 16384;
MOD_SHIFT :: 4;
MOD_WIN :: 8;

HRAWINPUT :: *void;

INPUT :: struct
{
    type : INPUT_TYPE;
    union
    {
        mi : MOUSEINPUT;
        ki : KEYBDINPUT;
        hi : HARDWAREINPUT;
    }; // Anonymous
}

INPUT_MESSAGE_DEVICE_TYPE :: enum s32
{
    IMDT_UNAVAILABLE :: 0;
    IMDT_KEYBOARD :: 1;
    IMDT_MOUSE :: 2;
    IMDT_TOUCH :: 4;
    IMDT_PEN :: 8;
    IMDT_TOUCHPAD :: 16;
}

IMDT_UNAVAILABLE :: 0;
IMDT_KEYBOARD :: 1;
IMDT_MOUSE :: 2;
IMDT_TOUCH :: 4;
IMDT_PEN :: 8;
IMDT_TOUCHPAD :: 16;

INPUT_MESSAGE_ORIGIN_ID :: enum s32
{
    IMO_UNAVAILABLE :: 0;
    IMO_HARDWARE :: 1;
    IMO_INJECTED :: 2;
    IMO_SYSTEM :: 4;
}

IMO_UNAVAILABLE :: 0;
IMO_HARDWARE :: 1;
IMO_INJECTED :: 2;
IMO_SYSTEM :: 4;

INPUT_MESSAGE_SOURCE :: struct
{
    deviceType : INPUT_MESSAGE_DEVICE_TYPE;
    originId : INPUT_MESSAGE_ORIGIN_ID;
}

INPUT_TYPE :: enum u32
{
    INPUT_MOUSE :: 0;
    INPUT_KEYBOARD :: 1;
    INPUT_HARDWARE :: 2;
}

INPUT_MOUSE :: 0;
INPUT_KEYBOARD :: 1;
INPUT_HARDWARE :: 2;

KBDTABLE_DESC :: struct
{
    wszDllName : [32]u16;
    dwType : u32;
    dwSubType : u32;
}

KBDTABLE_MULTI :: struct
{
    nTables : u32;
    aKbdTables : [8]KBDTABLE_DESC;
}

KBD_TYPE_INFO :: struct
{
    dwVersion : u32;
    dwType : u32;
    dwSubType : u32;
}

KEYBDINPUT :: struct
{
    wVk : VIRTUAL_KEY;
    wScan : u16;
    dwFlags : KEYBD_EVENT_FLAGS;
    time : u32;
    dwExtraInfo : u64;
}

KEYBD_EVENT_FLAGS :: enum_flags u32
{
    KEYEVENTF_EXTENDEDKEY :: 1;
    KEYEVENTF_KEYUP :: 2;
    KEYEVENTF_SCANCODE :: 8;
    KEYEVENTF_UNICODE :: 4;
}

KEYEVENTF_EXTENDEDKEY :: 1;
KEYEVENTF_KEYUP :: 2;
KEYEVENTF_SCANCODE :: 8;
KEYEVENTF_UNICODE :: 4;

LASTINPUTINFO :: struct
{
    cbSize : u32;
    dwTime : u32;
}

LIGATURE1 :: struct
{
    VirtualKey : u8;
    ModificationNumber : u16;
    wch : *u16;
}

LIGATURE2 :: struct
{
    VirtualKey : u8;
    ModificationNumber : u16;
    wch : [2]u16;
}

LIGATURE3 :: struct
{
    VirtualKey : u8;
    ModificationNumber : u16;
    wch : [3]u16;
}

LIGATURE4 :: struct
{
    VirtualKey : u8;
    ModificationNumber : u16;
    wch : [4]u16;
}

LIGATURE5 :: struct
{
    VirtualKey : u8;
    ModificationNumber : u16;
    wch : [5]u16;
}

MODIFIERS :: struct
{
    pVkToBit : *VK_TO_BIT;
    wMaxModBits : u16;
    ModNumber : *u8;
}

MOUSEINPUT :: struct
{
    dx : s32;
    dy : s32;
    mouseData : u32;
    dwFlags : MOUSE_EVENT_FLAGS;
    time : u32;
    dwExtraInfo : u64;
}

MOUSEMOVEPOINT :: struct
{
    x : s32;
    y : s32;
    time : u32;
    dwExtraInfo : u64;
}

MOUSE_EVENT_FLAGS :: enum_flags u32
{
    MOUSEEVENTF_ABSOLUTE :: 32768;
    MOUSEEVENTF_LEFTDOWN :: 2;
    MOUSEEVENTF_LEFTUP :: 4;
    MOUSEEVENTF_MIDDLEDOWN :: 32;
    MOUSEEVENTF_MIDDLEUP :: 64;
    MOUSEEVENTF_MOVE :: 1;
    MOUSEEVENTF_RIGHTDOWN :: 8;
    MOUSEEVENTF_RIGHTUP :: 16;
    MOUSEEVENTF_WHEEL :: 2048;
    MOUSEEVENTF_XDOWN :: 128;
    MOUSEEVENTF_XUP :: 256;
    MOUSEEVENTF_HWHEEL :: 4096;
    MOUSEEVENTF_MOVE_NOCOALESCE :: 8192;
    MOUSEEVENTF_VIRTUALDESK :: 16384;
}

MOUSEEVENTF_ABSOLUTE :: 32768;
MOUSEEVENTF_LEFTDOWN :: 2;
MOUSEEVENTF_LEFTUP :: 4;
MOUSEEVENTF_MIDDLEDOWN :: 32;
MOUSEEVENTF_MIDDLEUP :: 64;
MOUSEEVENTF_MOVE :: 1;
MOUSEEVENTF_RIGHTDOWN :: 8;
MOUSEEVENTF_RIGHTUP :: 16;
MOUSEEVENTF_WHEEL :: 2048;
MOUSEEVENTF_XDOWN :: 128;
MOUSEEVENTF_XUP :: 256;
MOUSEEVENTF_HWHEEL :: 4096;
MOUSEEVENTF_MOVE_NOCOALESCE :: 8192;
MOUSEEVENTF_VIRTUALDESK :: 16384;

RAWHID :: struct
{
    dwSizeHid : u32;
    dwCount : u32;
    bRawData : *u8;
}

RAWINPUT :: struct
{
    header : RAWINPUTHEADER;
    data : _data_e__Union;

    _data_e__Union :: union
    {
        mouse : RAWMOUSE;
        keyboard : RAWKEYBOARD;
        hid : RAWHID;
    }
}

RAWINPUTDEVICE :: struct
{
    usUsagePage : u16;
    usUsage : u16;
    dwFlags : RAWINPUTDEVICE_FLAGS;
    hwndTarget : HWND;
}

RAWINPUTDEVICELIST :: struct
{
    hDevice : HANDLE;
    dwType : RID_DEVICE_INFO_TYPE;
}

RAWINPUTDEVICE_FLAGS :: enum u32
{
    RIDEV_REMOVE :: 1;
    RIDEV_EXCLUDE :: 16;
    RIDEV_PAGEONLY :: 32;
    RIDEV_NOLEGACY :: 48;
    RIDEV_INPUTSINK :: 256;
    RIDEV_CAPTUREMOUSE :: 512;
    RIDEV_NOHOTKEYS :: 512;
    RIDEV_APPKEYS :: 1024;
    RIDEV_EXINPUTSINK :: 4096;
    RIDEV_DEVNOTIFY :: 8192;
}

RIDEV_REMOVE :: 1;
RIDEV_EXCLUDE :: 16;
RIDEV_PAGEONLY :: 32;
RIDEV_NOLEGACY :: 48;
RIDEV_INPUTSINK :: 256;
RIDEV_CAPTUREMOUSE :: 512;
RIDEV_NOHOTKEYS :: 512;
RIDEV_APPKEYS :: 1024;
RIDEV_EXINPUTSINK :: 4096;
RIDEV_DEVNOTIFY :: 8192;

RAWINPUTHEADER :: struct
{
    dwType : u32;
    dwSize : u32;
    hDevice : HANDLE;
    wParam : WPARAM;
}

RAWKEYBOARD :: struct
{
    MakeCode : u16;
    Flags : u16;
    Reserved : u16;
    VKey : u16;
    Message : u32;
    ExtraInformation : u32;
}

RAWMOUSE :: struct
{
    usFlags : u16;
    union
    {
        ulButtons : u32;
        struct
        {
            usButtonFlags : u16;
            usButtonData : u16;
        }; // Anonymous
    }; // Anonymous
    ulRawButtons : u32;
    lLastX : s32;
    lLastY : s32;
    ulExtraInformation : u32;
}

RAW_INPUT_DATA_COMMAND_FLAGS :: enum u32
{
    RID_HEADER :: 268435461;
    RID_INPUT :: 268435459;
}

RID_HEADER :: 268435461;
RID_INPUT :: 268435459;

RAW_INPUT_DEVICE_INFO_COMMAND :: enum u32
{
    RIDI_PREPARSEDDATA :: 536870917;
    RIDI_DEVICENAME :: 536870919;
    RIDI_DEVICEINFO :: 536870923;
}

RIDI_PREPARSEDDATA :: 536870917;
RIDI_DEVICENAME :: 536870919;
RIDI_DEVICEINFO :: 536870923;

RID_DEVICE_INFO :: struct
{
    cbSize : u32;
    dwType : RID_DEVICE_INFO_TYPE;
    union
    {
        mouse : RID_DEVICE_INFO_MOUSE;
        keyboard : RID_DEVICE_INFO_KEYBOARD;
        hid : RID_DEVICE_INFO_HID;
    }; // Anonymous
}

RID_DEVICE_INFO_HID :: struct
{
    dwVendorId : u32;
    dwProductId : u32;
    dwVersionNumber : u32;
    usUsagePage : u16;
    usUsage : u16;
}

RID_DEVICE_INFO_KEYBOARD :: struct
{
    dwType : u32;
    dwSubType : u32;
    dwKeyboardMode : u32;
    dwNumberOfFunctionKeys : u32;
    dwNumberOfIndicators : u32;
    dwNumberOfKeysTotal : u32;
}

RID_DEVICE_INFO_MOUSE :: struct
{
    dwId : u32;
    dwNumberOfButtons : u32;
    dwSampleRate : u32;
    fHasHorizontalWheel : BOOL;
}

RID_DEVICE_INFO_TYPE :: enum u32
{
    RIM_TYPEMOUSE :: 0;
    RIM_TYPEKEYBOARD :: 1;
    RIM_TYPEHID :: 2;
}

RIM_TYPEMOUSE :: 0;
RIM_TYPEKEYBOARD :: 1;
RIM_TYPEHID :: 2;

TRACKMOUSEEVENT :: struct
{
    cbSize : u32;
    dwFlags : TRACKMOUSEEVENT_FLAGS;
    hwndTrack : HWND;
    dwHoverTime : u32;
}

TRACKMOUSEEVENT_FLAGS :: enum_flags u32
{
    TME_CANCEL :: 2147483648;
    TME_HOVER :: 1;
    TME_LEAVE :: 2;
    TME_NONCLIENT :: 16;
    TME_QUERY :: 1073741824;
}

TME_CANCEL :: 2147483648;
TME_HOVER :: 1;
TME_LEAVE :: 2;
TME_NONCLIENT :: 16;
TME_QUERY :: 1073741824;

VIRTUAL_KEY :: enum u16
{
    VK_0 :: 48;
    VK_1 :: 49;
    VK_2 :: 50;
    VK_3 :: 51;
    VK_4 :: 52;
    VK_5 :: 53;
    VK_6 :: 54;
    VK_7 :: 55;
    VK_8 :: 56;
    VK_9 :: 57;
    VK_A :: 65;
    VK_B :: 66;
    VK_C :: 67;
    VK_D :: 68;
    VK_E :: 69;
    VK_F :: 70;
    VK_G :: 71;
    VK_H :: 72;
    VK_I :: 73;
    VK_J :: 74;
    VK_K :: 75;
    VK_L :: 76;
    VK_M :: 77;
    VK_N :: 78;
    VK_O :: 79;
    VK_P :: 80;
    VK_Q :: 81;
    VK_R :: 82;
    VK_S :: 83;
    VK_T :: 84;
    VK_U :: 85;
    VK_V :: 86;
    VK_W :: 87;
    VK_X :: 88;
    VK_Y :: 89;
    VK_Z :: 90;
    VK_LBUTTON :: 1;
    VK_RBUTTON :: 2;
    VK_CANCEL :: 3;
    VK_MBUTTON :: 4;
    VK_XBUTTON1 :: 5;
    VK_XBUTTON2 :: 6;
    VK_BACK :: 8;
    VK_TAB :: 9;
    VK_CLEAR :: 12;
    VK_RETURN :: 13;
    VK_SHIFT :: 16;
    VK_CONTROL :: 17;
    VK_MENU :: 18;
    VK_PAUSE :: 19;
    VK_CAPITAL :: 20;
    VK_KANA :: 21;
    VK_HANGEUL :: 21;
    VK_HANGUL :: 21;
    VK_IME_ON :: 22;
    VK_JUNJA :: 23;
    VK_FINAL :: 24;
    VK_HANJA :: 25;
    VK_KANJI :: 25;
    VK_IME_OFF :: 26;
    VK_ESCAPE :: 27;
    VK_CONVERT :: 28;
    VK_NONCONVERT :: 29;
    VK_ACCEPT :: 30;
    VK_MODECHANGE :: 31;
    VK_SPACE :: 32;
    VK_PRIOR :: 33;
    VK_NEXT :: 34;
    VK_END :: 35;
    VK_HOME :: 36;
    VK_LEFT :: 37;
    VK_UP :: 38;
    VK_RIGHT :: 39;
    VK_DOWN :: 40;
    VK_SELECT :: 41;
    VK_PRINT :: 42;
    VK_EXECUTE :: 43;
    VK_SNAPSHOT :: 44;
    VK_INSERT :: 45;
    VK_DELETE :: 46;
    VK_HELP :: 47;
    VK_LWIN :: 91;
    VK_RWIN :: 92;
    VK_APPS :: 93;
    VK_SLEEP :: 95;
    VK_NUMPAD0 :: 96;
    VK_NUMPAD1 :: 97;
    VK_NUMPAD2 :: 98;
    VK_NUMPAD3 :: 99;
    VK_NUMPAD4 :: 100;
    VK_NUMPAD5 :: 101;
    VK_NUMPAD6 :: 102;
    VK_NUMPAD7 :: 103;
    VK_NUMPAD8 :: 104;
    VK_NUMPAD9 :: 105;
    VK_MULTIPLY :: 106;
    VK_ADD :: 107;
    VK_SEPARATOR :: 108;
    VK_SUBTRACT :: 109;
    VK_DECIMAL :: 110;
    VK_DIVIDE :: 111;
    VK_F1 :: 112;
    VK_F2 :: 113;
    VK_F3 :: 114;
    VK_F4 :: 115;
    VK_F5 :: 116;
    VK_F6 :: 117;
    VK_F7 :: 118;
    VK_F8 :: 119;
    VK_F9 :: 120;
    VK_F10 :: 121;
    VK_F11 :: 122;
    VK_F12 :: 123;
    VK_F13 :: 124;
    VK_F14 :: 125;
    VK_F15 :: 126;
    VK_F16 :: 127;
    VK_F17 :: 128;
    VK_F18 :: 129;
    VK_F19 :: 130;
    VK_F20 :: 131;
    VK_F21 :: 132;
    VK_F22 :: 133;
    VK_F23 :: 134;
    VK_F24 :: 135;
    VK_NAVIGATION_VIEW :: 136;
    VK_NAVIGATION_MENU :: 137;
    VK_NAVIGATION_UP :: 138;
    VK_NAVIGATION_DOWN :: 139;
    VK_NAVIGATION_LEFT :: 140;
    VK_NAVIGATION_RIGHT :: 141;
    VK_NAVIGATION_ACCEPT :: 142;
    VK_NAVIGATION_CANCEL :: 143;
    VK_NUMLOCK :: 144;
    VK_SCROLL :: 145;
    VK_OEM_NEC_EQUAL :: 146;
    VK_OEM_FJ_JISHO :: 146;
    VK_OEM_FJ_MASSHOU :: 147;
    VK_OEM_FJ_TOUROKU :: 148;
    VK_OEM_FJ_LOYA :: 149;
    VK_OEM_FJ_ROYA :: 150;
    VK_LSHIFT :: 160;
    VK_RSHIFT :: 161;
    VK_LCONTROL :: 162;
    VK_RCONTROL :: 163;
    VK_LMENU :: 164;
    VK_RMENU :: 165;
    VK_BROWSER_BACK :: 166;
    VK_BROWSER_FORWARD :: 167;
    VK_BROWSER_REFRESH :: 168;
    VK_BROWSER_STOP :: 169;
    VK_BROWSER_SEARCH :: 170;
    VK_BROWSER_FAVORITES :: 171;
    VK_BROWSER_HOME :: 172;
    VK_VOLUME_MUTE :: 173;
    VK_VOLUME_DOWN :: 174;
    VK_VOLUME_UP :: 175;
    VK_MEDIA_NEXT_TRACK :: 176;
    VK_MEDIA_PREV_TRACK :: 177;
    VK_MEDIA_STOP :: 178;
    VK_MEDIA_PLAY_PAUSE :: 179;
    VK_LAUNCH_MAIL :: 180;
    VK_LAUNCH_MEDIA_SELECT :: 181;
    VK_LAUNCH_APP1 :: 182;
    VK_LAUNCH_APP2 :: 183;
    VK_OEM_1 :: 186;
    VK_OEM_PLUS :: 187;
    VK_OEM_COMMA :: 188;
    VK_OEM_MINUS :: 189;
    VK_OEM_PERIOD :: 190;
    VK_OEM_2 :: 191;
    VK_OEM_3 :: 192;
    VK_GAMEPAD_A :: 195;
    VK_GAMEPAD_B :: 196;
    VK_GAMEPAD_X :: 197;
    VK_GAMEPAD_Y :: 198;
    VK_GAMEPAD_RIGHT_SHOULDER :: 199;
    VK_GAMEPAD_LEFT_SHOULDER :: 200;
    VK_GAMEPAD_LEFT_TRIGGER :: 201;
    VK_GAMEPAD_RIGHT_TRIGGER :: 202;
    VK_GAMEPAD_DPAD_UP :: 203;
    VK_GAMEPAD_DPAD_DOWN :: 204;
    VK_GAMEPAD_DPAD_LEFT :: 205;
    VK_GAMEPAD_DPAD_RIGHT :: 206;
    VK_GAMEPAD_MENU :: 207;
    VK_GAMEPAD_VIEW :: 208;
    VK_GAMEPAD_LEFT_THUMBSTICK_BUTTON :: 209;
    VK_GAMEPAD_RIGHT_THUMBSTICK_BUTTON :: 210;
    VK_GAMEPAD_LEFT_THUMBSTICK_UP :: 211;
    VK_GAMEPAD_LEFT_THUMBSTICK_DOWN :: 212;
    VK_GAMEPAD_LEFT_THUMBSTICK_RIGHT :: 213;
    VK_GAMEPAD_LEFT_THUMBSTICK_LEFT :: 214;
    VK_GAMEPAD_RIGHT_THUMBSTICK_UP :: 215;
    VK_GAMEPAD_RIGHT_THUMBSTICK_DOWN :: 216;
    VK_GAMEPAD_RIGHT_THUMBSTICK_RIGHT :: 217;
    VK_GAMEPAD_RIGHT_THUMBSTICK_LEFT :: 218;
    VK_OEM_4 :: 219;
    VK_OEM_5 :: 220;
    VK_OEM_6 :: 221;
    VK_OEM_7 :: 222;
    VK_OEM_8 :: 223;
    VK_OEM_AX :: 225;
    VK_OEM_102 :: 226;
    VK_ICO_HELP :: 227;
    VK_ICO_00 :: 228;
    VK_PROCESSKEY :: 229;
    VK_ICO_CLEAR :: 230;
    VK_PACKET :: 231;
    VK_OEM_RESET :: 233;
    VK_OEM_JUMP :: 234;
    VK_OEM_PA1 :: 235;
    VK_OEM_PA2 :: 236;
    VK_OEM_PA3 :: 237;
    VK_OEM_WSCTRL :: 238;
    VK_OEM_CUSEL :: 239;
    VK_OEM_ATTN :: 240;
    VK_OEM_FINISH :: 241;
    VK_OEM_COPY :: 242;
    VK_OEM_AUTO :: 243;
    VK_OEM_ENLW :: 244;
    VK_OEM_BACKTAB :: 245;
    VK_ATTN :: 246;
    VK_CRSEL :: 247;
    VK_EXSEL :: 248;
    VK_EREOF :: 249;
    VK_PLAY :: 250;
    VK_ZOOM :: 251;
    VK_NONAME :: 252;
    VK_PA1 :: 253;
    VK_OEM_CLEAR :: 254;
}

VK_0 :: 48;
VK_1 :: 49;
VK_2 :: 50;
VK_3 :: 51;
VK_4 :: 52;
VK_5 :: 53;
VK_6 :: 54;
VK_7 :: 55;
VK_8 :: 56;
VK_9 :: 57;
VK_A :: 65;
VK_B :: 66;
VK_C :: 67;
VK_D :: 68;
VK_E :: 69;
VK_F :: 70;
VK_G :: 71;
VK_H :: 72;
VK_I :: 73;
VK_J :: 74;
VK_K :: 75;
VK_L :: 76;
VK_M :: 77;
VK_N :: 78;
VK_O :: 79;
VK_P :: 80;
VK_Q :: 81;
VK_R :: 82;
VK_S :: 83;
VK_T :: 84;
VK_U :: 85;
VK_V :: 86;
VK_W :: 87;
VK_X :: 88;
VK_Y :: 89;
VK_Z :: 90;
VK_LBUTTON :: 1;
VK_RBUTTON :: 2;
VK_CANCEL :: 3;
VK_MBUTTON :: 4;
VK_XBUTTON1 :: 5;
VK_XBUTTON2 :: 6;
VK_BACK :: 8;
VK_TAB :: 9;
VK_CLEAR :: 12;
VK_RETURN :: 13;
VK_SHIFT :: 16;
VK_CONTROL :: 17;
VK_MENU :: 18;
VK_PAUSE :: 19;
VK_CAPITAL :: 20;
VK_KANA :: 21;
VK_HANGEUL :: 21;
VK_HANGUL :: 21;
VK_IME_ON :: 22;
VK_JUNJA :: 23;
VK_FINAL :: 24;
VK_HANJA :: 25;
VK_KANJI :: 25;
VK_IME_OFF :: 26;
VK_ESCAPE :: 27;
VK_CONVERT :: 28;
VK_NONCONVERT :: 29;
VK_ACCEPT :: 30;
VK_MODECHANGE :: 31;
VK_SPACE :: 32;
VK_PRIOR :: 33;
VK_NEXT :: 34;
VK_END :: 35;
VK_HOME :: 36;
VK_LEFT :: 37;
VK_UP :: 38;
VK_RIGHT :: 39;
VK_DOWN :: 40;
VK_SELECT :: 41;
VK_PRINT :: 42;
VK_EXECUTE :: 43;
VK_SNAPSHOT :: 44;
VK_INSERT :: 45;
VK_DELETE :: 46;
VK_HELP :: 47;
VK_LWIN :: 91;
VK_RWIN :: 92;
VK_APPS :: 93;
VK_SLEEP :: 95;
VK_NUMPAD0 :: 96;
VK_NUMPAD1 :: 97;
VK_NUMPAD2 :: 98;
VK_NUMPAD3 :: 99;
VK_NUMPAD4 :: 100;
VK_NUMPAD5 :: 101;
VK_NUMPAD6 :: 102;
VK_NUMPAD7 :: 103;
VK_NUMPAD8 :: 104;
VK_NUMPAD9 :: 105;
VK_MULTIPLY :: 106;
VK_ADD :: 107;
VK_SEPARATOR :: 108;
VK_SUBTRACT :: 109;
VK_DECIMAL :: 110;
VK_DIVIDE :: 111;
VK_F1 :: 112;
VK_F2 :: 113;
VK_F3 :: 114;
VK_F4 :: 115;
VK_F5 :: 116;
VK_F6 :: 117;
VK_F7 :: 118;
VK_F8 :: 119;
VK_F9 :: 120;
VK_F10 :: 121;
VK_F11 :: 122;
VK_F12 :: 123;
VK_F13 :: 124;
VK_F14 :: 125;
VK_F15 :: 126;
VK_F16 :: 127;
VK_F17 :: 128;
VK_F18 :: 129;
VK_F19 :: 130;
VK_F20 :: 131;
VK_F21 :: 132;
VK_F22 :: 133;
VK_F23 :: 134;
VK_F24 :: 135;
VK_NAVIGATION_VIEW :: 136;
VK_NAVIGATION_MENU :: 137;
VK_NAVIGATION_UP :: 138;
VK_NAVIGATION_DOWN :: 139;
VK_NAVIGATION_LEFT :: 140;
VK_NAVIGATION_RIGHT :: 141;
VK_NAVIGATION_ACCEPT :: 142;
VK_NAVIGATION_CANCEL :: 143;
VK_NUMLOCK :: 144;
VK_SCROLL :: 145;
VK_OEM_NEC_EQUAL :: 146;
VK_OEM_FJ_JISHO :: 146;
VK_OEM_FJ_MASSHOU :: 147;
VK_OEM_FJ_TOUROKU :: 148;
VK_OEM_FJ_LOYA :: 149;
VK_OEM_FJ_ROYA :: 150;
VK_LSHIFT :: 160;
VK_RSHIFT :: 161;
VK_LCONTROL :: 162;
VK_RCONTROL :: 163;
VK_LMENU :: 164;
VK_RMENU :: 165;
VK_BROWSER_BACK :: 166;
VK_BROWSER_FORWARD :: 167;
VK_BROWSER_REFRESH :: 168;
VK_BROWSER_STOP :: 169;
VK_BROWSER_SEARCH :: 170;
VK_BROWSER_FAVORITES :: 171;
VK_BROWSER_HOME :: 172;
VK_VOLUME_MUTE :: 173;
VK_VOLUME_DOWN :: 174;
VK_VOLUME_UP :: 175;
VK_MEDIA_NEXT_TRACK :: 176;
VK_MEDIA_PREV_TRACK :: 177;
VK_MEDIA_STOP :: 178;
VK_MEDIA_PLAY_PAUSE :: 179;
VK_LAUNCH_MAIL :: 180;
VK_LAUNCH_MEDIA_SELECT :: 181;
VK_LAUNCH_APP1 :: 182;
VK_LAUNCH_APP2 :: 183;
VK_OEM_1 :: 186;
VK_OEM_PLUS :: 187;
VK_OEM_COMMA :: 188;
VK_OEM_MINUS :: 189;
VK_OEM_PERIOD :: 190;
VK_OEM_2 :: 191;
VK_OEM_3 :: 192;
VK_GAMEPAD_A :: 195;
VK_GAMEPAD_B :: 196;
VK_GAMEPAD_X :: 197;
VK_GAMEPAD_Y :: 198;
VK_GAMEPAD_RIGHT_SHOULDER :: 199;
VK_GAMEPAD_LEFT_SHOULDER :: 200;
VK_GAMEPAD_LEFT_TRIGGER :: 201;
VK_GAMEPAD_RIGHT_TRIGGER :: 202;
VK_GAMEPAD_DPAD_UP :: 203;
VK_GAMEPAD_DPAD_DOWN :: 204;
VK_GAMEPAD_DPAD_LEFT :: 205;
VK_GAMEPAD_DPAD_RIGHT :: 206;
VK_GAMEPAD_MENU :: 207;
VK_GAMEPAD_VIEW :: 208;
VK_GAMEPAD_LEFT_THUMBSTICK_BUTTON :: 209;
VK_GAMEPAD_RIGHT_THUMBSTICK_BUTTON :: 210;
VK_GAMEPAD_LEFT_THUMBSTICK_UP :: 211;
VK_GAMEPAD_LEFT_THUMBSTICK_DOWN :: 212;
VK_GAMEPAD_LEFT_THUMBSTICK_RIGHT :: 213;
VK_GAMEPAD_LEFT_THUMBSTICK_LEFT :: 214;
VK_GAMEPAD_RIGHT_THUMBSTICK_UP :: 215;
VK_GAMEPAD_RIGHT_THUMBSTICK_DOWN :: 216;
VK_GAMEPAD_RIGHT_THUMBSTICK_RIGHT :: 217;
VK_GAMEPAD_RIGHT_THUMBSTICK_LEFT :: 218;
VK_OEM_4 :: 219;
VK_OEM_5 :: 220;
VK_OEM_6 :: 221;
VK_OEM_7 :: 222;
VK_OEM_8 :: 223;
VK_OEM_AX :: 225;
VK_OEM_102 :: 226;
VK_ICO_HELP :: 227;
VK_ICO_00 :: 228;
VK_PROCESSKEY :: 229;
VK_ICO_CLEAR :: 230;
VK_PACKET :: 231;
VK_OEM_RESET :: 233;
VK_OEM_JUMP :: 234;
VK_OEM_PA1 :: 235;
VK_OEM_PA2 :: 236;
VK_OEM_PA3 :: 237;
VK_OEM_WSCTRL :: 238;
VK_OEM_CUSEL :: 239;
VK_OEM_ATTN :: 240;
VK_OEM_FINISH :: 241;
VK_OEM_COPY :: 242;
VK_OEM_AUTO :: 243;
VK_OEM_ENLW :: 244;
VK_OEM_BACKTAB :: 245;
VK_ATTN :: 246;
VK_CRSEL :: 247;
VK_EXSEL :: 248;
VK_EREOF :: 249;
VK_PLAY :: 250;
VK_ZOOM :: 251;
VK_NONAME :: 252;
VK_PA1 :: 253;
VK_OEM_CLEAR :: 254;

VK_TO_BIT :: struct
{
    Vk : u8;
    ModBits : u8;
}

VK_TO_WCHARS1 :: struct
{
    VirtualKey : u8;
    Attributes : u8;
    wch : *u16;
}

VK_TO_WCHARS10 :: struct
{
    VirtualKey : u8;
    Attributes : u8;
    wch : [10]u16;
}

VK_TO_WCHARS2 :: struct
{
    VirtualKey : u8;
    Attributes : u8;
    wch : [2]u16;
}

VK_TO_WCHARS3 :: struct
{
    VirtualKey : u8;
    Attributes : u8;
    wch : [3]u16;
}

VK_TO_WCHARS4 :: struct
{
    VirtualKey : u8;
    Attributes : u8;
    wch : [4]u16;
}

VK_TO_WCHARS5 :: struct
{
    VirtualKey : u8;
    Attributes : u8;
    wch : [5]u16;
}

VK_TO_WCHARS6 :: struct
{
    VirtualKey : u8;
    Attributes : u8;
    wch : [6]u16;
}

VK_TO_WCHARS7 :: struct
{
    VirtualKey : u8;
    Attributes : u8;
    wch : [7]u16;
}

VK_TO_WCHARS8 :: struct
{
    VirtualKey : u8;
    Attributes : u8;
    wch : [8]u16;
}

VK_TO_WCHARS9 :: struct
{
    VirtualKey : u8;
    Attributes : u8;
    wch : [9]u16;
}

VK_TO_WCHAR_TABLE :: struct
{
    pVkToWchars : *VK_TO_WCHARS1;
    nModifications : u8;
    cbSize : u8;
}

VK_VSC :: struct
{
    Vk : u8;
    Vsc : u8;
}

VSC_LPWSTR :: struct
{
    vsc : u8;
    pwsz : PWSTR;
}

VSC_VK :: struct
{
    Vsc : u8;
    Vk : u16;
}

_VK_FUNCTION_PARAM :: struct
{
    NLSFEProcIndex : u8;
    NLSFEProcParam : u32;
}

_VK_TO_FUNCTION_TABLE :: struct
{
    Vk : u8;
    NLSFEProcType : u8;
    NLSFEProcCurrent : u8;
    NLSFEProcSwitch : u8;
    NLSFEProc : [8]_VK_FUNCTION_PARAM;
    NLSFEProcAlt : [8]_VK_FUNCTION_PARAM;
}

tagKbdLayer :: struct
{
    pCharModifiers : *MODIFIERS;
    pVkToWcharTable : *VK_TO_WCHAR_TABLE;
    pDeadKey : *DEADKEY;
    pKeyNames : *VSC_LPWSTR;
    pKeyNamesExt : *VSC_LPWSTR;
    pKeyNamesDead : **u16;
    pusVSCtoVK : *u16;
    bMaxVSCtoVK : u8;
    pVSCtoVK_E0 : *VSC_VK;
    pVSCtoVK_E1 : *VSC_VK;
    fLocaleFlags : u32;
    nLgMax : u8;
    cbLgEntry : u8;
    pLigature : *LIGATURE1;
    dwType : u32;
    dwSubType : u32;
}

tagKbdNlsLayer :: struct
{
    OEMIdentifier : u16;
    LayoutInformation : u16;
    NumOfVkToF : u32;
    pVkToF : *_VK_TO_FUNCTION_TABLE;
    NumOfMouseVKey : s32;
    pusMouseVKey : *u16;
}

// Functions

ActivateKeyboardLayout :: (hkl : HKL, Flags : ACTIVATE_KEYBOARD_LAYOUT_FLAGS) -> HKL #foreign USER32;
BlockInput :: (fBlockIt : BOOL) -> BOOL #foreign USER32;
DefRawInputProc :: (paRawInput : **RAWINPUT, nInput : s32, cbSizeHeader : u32) -> LRESULT #foreign USER32;
DragDetect :: (hwnd : HWND, pt : POINT) -> BOOL #foreign USER32;
EnableWindow :: (hWnd : HWND, bEnable : BOOL) -> BOOL #foreign USER32;
GetActiveWindow :: () -> HWND #foreign USER32;
GetAsyncKeyState :: (vKey : s32) -> s16 #foreign USER32;
GetCIMSSM :: (inputMessageSource : *INPUT_MESSAGE_SOURCE) -> BOOL #foreign USER32;
GetCapture :: () -> HWND #foreign USER32;
GetCurrentInputMessageSource :: (inputMessageSource : *INPUT_MESSAGE_SOURCE) -> BOOL #foreign USER32;
GetDoubleClickTime :: () -> u32 #foreign USER32;
GetFocus :: () -> HWND #foreign USER32;
GetKBCodePage :: () -> u32 #foreign USER32;
GetKeyNameTextA :: (lParam : s32, lpString : *u8, cchSize : s32) -> s32 #foreign USER32;
GetKeyNameTextW :: (lParam : s32, lpString : *u16, cchSize : s32) -> s32 #foreign USER32;
GetKeyState :: (nVirtKey : s32) -> s16 #foreign USER32;
GetKeyboardLayout :: (idThread : u32) -> HKL #foreign USER32;
GetKeyboardLayoutList :: (nBuff : s32, lpList : *HKL) -> s32 #foreign USER32;
GetKeyboardLayoutNameA :: (pwszKLID : *[9]u8) -> BOOL #foreign USER32;
GetKeyboardLayoutNameW :: (pwszKLID : *[9]u16) -> BOOL #foreign USER32;
GetKeyboardState :: (lpKeyState : *[256]u8) -> BOOL #foreign USER32;
GetKeyboardType :: (nTypeFlag : s32) -> s32 #foreign USER32;
GetLastInputInfo :: (plii : *LASTINPUTINFO) -> BOOL #foreign USER32;
GetMouseMovePointsEx :: (cbSize : u32, lppt : *MOUSEMOVEPOINT, lpptBuf : *MOUSEMOVEPOINT, nBufPoints : s32, resolution : GET_MOUSE_MOVE_POINTS_EX_RESOLUTION) -> s32 #foreign USER32;
GetRawInputBuffer :: (pData : *RAWINPUT, pcbSize : *u32, cbSizeHeader : u32) -> u32 #foreign USER32;
GetRawInputData :: (hRawInput : HRAWINPUT, uiCommand : RAW_INPUT_DATA_COMMAND_FLAGS, pData : *void, pcbSize : *u32, cbSizeHeader : u32) -> u32 #foreign USER32;
GetRawInputDeviceInfoA :: (hDevice : HANDLE, uiCommand : RAW_INPUT_DEVICE_INFO_COMMAND, pData : *void, pcbSize : *u32) -> u32 #foreign USER32;
GetRawInputDeviceInfoW :: (hDevice : HANDLE, uiCommand : RAW_INPUT_DEVICE_INFO_COMMAND, pData : *void, pcbSize : *u32) -> u32 #foreign USER32;
GetRawInputDeviceList :: (pRawInputDeviceList : *RAWINPUTDEVICELIST, puiNumDevices : *u32, cbSize : u32) -> u32 #foreign USER32;
GetRegisteredRawInputDevices :: (pRawInputDevices : *RAWINPUTDEVICE, puiNumDevices : *u32, cbSize : u32) -> u32 #foreign USER32;
IsWindowEnabled :: (hWnd : HWND) -> BOOL #foreign USER32;
LoadKeyboardLayoutA :: (pwszKLID : PSTR, Flags : ACTIVATE_KEYBOARD_LAYOUT_FLAGS) -> HKL #foreign USER32;
LoadKeyboardLayoutW :: (pwszKLID : PWSTR, Flags : ACTIVATE_KEYBOARD_LAYOUT_FLAGS) -> HKL #foreign USER32;
MapVirtualKeyA :: (uCode : u32, uMapType : u32) -> u32 #foreign USER32;
MapVirtualKeyExA :: (uCode : u32, uMapType : u32, dwhkl : HKL) -> u32 #foreign USER32;
MapVirtualKeyExW :: (uCode : u32, uMapType : u32, dwhkl : HKL) -> u32 #foreign USER32;
MapVirtualKeyW :: (uCode : u32, uMapType : u32) -> u32 #foreign USER32;
OemKeyScan :: (wOemChar : u16) -> u32 #foreign USER32;
RegisterHotKey :: (hWnd : HWND, id : s32, fsModifiers : HOT_KEY_MODIFIERS, vk : u32) -> BOOL #foreign USER32;
RegisterRawInputDevices :: (pRawInputDevices : *RAWINPUTDEVICE, uiNumDevices : u32, cbSize : u32) -> BOOL #foreign USER32;
ReleaseCapture :: () -> BOOL #foreign USER32;
SendInput :: (cInputs : u32, pInputs : *INPUT, cbSize : s32) -> u32 #foreign USER32;
SetActiveWindow :: (hWnd : HWND) -> HWND #foreign USER32;
SetCapture :: (hWnd : HWND) -> HWND #foreign USER32;
SetDoubleClickTime :: (param0 : u32) -> BOOL #foreign USER32;
SetFocus :: (hWnd : HWND) -> HWND #foreign USER32;
SetKeyboardState :: (lpKeyState : *[256]u8) -> BOOL #foreign USER32;
SwapMouseButton :: (fSwap : BOOL) -> BOOL #foreign USER32;
ToAscii :: (uVirtKey : u32, uScanCode : u32, lpKeyState : *[256]u8, lpChar : *u16, uFlags : u32) -> s32 #foreign USER32;
ToAsciiEx :: (uVirtKey : u32, uScanCode : u32, lpKeyState : *[256]u8, lpChar : *u16, uFlags : u32, dwhkl : HKL) -> s32 #foreign USER32;
ToUnicode :: (wVirtKey : u32, wScanCode : u32, lpKeyState : *[256]u8, pwszBuff : *u16, cchBuff : s32, wFlags : u32) -> s32 #foreign USER32;
ToUnicodeEx :: (wVirtKey : u32, wScanCode : u32, lpKeyState : *[256]u8, pwszBuff : *u16, cchBuff : s32, wFlags : u32, dwhkl : HKL) -> s32 #foreign USER32;
TrackMouseEvent :: (lpEventTrack : *TRACKMOUSEEVENT) -> BOOL #foreign USER32;
UnloadKeyboardLayout :: (hkl : HKL) -> BOOL #foreign USER32;
UnregisterHotKey :: (hWnd : HWND, id : s32) -> BOOL #foreign USER32;
VkKeyScanA :: (ch : CHAR) -> s16 #foreign USER32;
VkKeyScanExA :: (ch : CHAR, dwhkl : HKL) -> s16 #foreign USER32;
VkKeyScanExW :: (ch : u16, dwhkl : HKL) -> s16 #foreign USER32;
VkKeyScanW :: (ch : u16) -> s16 #foreign USER32;
_TrackMouseEvent :: (lpEventTrack : *TRACKMOUSEEVENT) -> BOOL #foreign COMCTL32;
keybd_event :: (bVk : u8, bScan : u8, dwFlags : KEYBD_EVENT_FLAGS, dwExtraInfo : u64)  #foreign USER32;
mouse_event :: (dwFlags : MOUSE_EVENT_FLAGS, dx : s32, dy : s32, dwData : u32, dwExtraInfo : u64)  #foreign USER32;

// Unicode aliases

#if UNICODE then LoadKeyboardLayout :: LoadKeyboardLayoutW;
else             LoadKeyboardLayout :: LoadKeyboardLayoutA;
#if UNICODE then GetKeyboardLayoutName :: GetKeyboardLayoutNameW;
else             GetKeyboardLayoutName :: GetKeyboardLayoutNameA;
#if UNICODE then GetKeyNameText :: GetKeyNameTextW;
else             GetKeyNameText :: GetKeyNameTextA;
#if UNICODE then VkKeyScan :: VkKeyScanW;
else             VkKeyScan :: VkKeyScanA;
#if UNICODE then VkKeyScanEx :: VkKeyScanExW;
else             VkKeyScanEx :: VkKeyScanExA;
#if UNICODE then MapVirtualKey :: MapVirtualKeyW;
else             MapVirtualKey :: MapVirtualKeyA;
#if UNICODE then MapVirtualKeyEx :: MapVirtualKeyExW;
else             MapVirtualKeyEx :: MapVirtualKeyExA;
#if UNICODE then GetRawInputDeviceInfo :: GetRawInputDeviceInfoW;
else             GetRawInputDeviceInfo :: GetRawInputDeviceInfoA;

// System libraries

#scope_file

USER32 :: #system_library "USER32";
COMCTL32 :: #system_library "COMCTL32";

