// This file was auto generated

#import "Win32/Basics";
#import "Win32/DXGI";
#import "Win32/Direct3D";

// Constants

CLSID_D3D12Debug :: GUID.{0xf2352aeb,0xdd84,0x49fe,.[0xb9,0x7b,0xa9,0xdc,0xfd,0xcc,0x1b,0x4f]};
CLSID_D3D12DeviceRemovedExtendedData :: GUID.{0x4a75bbc4,0x9ff4,0x4ad8,.[0x9f,0x18,0xab,0xae,0x84,0xdc,0x5f,0xf2]};
CLSID_D3D12SDKConfiguration :: GUID.{0x7cda6aca,0xa03e,0x49c8,.[0x94,0x58,0x3,0x34,0xd2,0xe,0x7,0xce]};
CLSID_D3D12Tools :: GUID.{0xe38216b1,0x3c8c,0x4833,.[0xaa,0x9,0xa,0x6,0xb6,0x5d,0x96,0xc8]};
D3D12ExperimentalShaderModels :: "76f5573e-f13a-40f5-b297-81ce9e18933f";
D3D12MetaCommand :: "c734c97e-8077-48c8-9fdc-d9d1dd31dd77";
D3D12TiledResourceTier4 :: "c9c4725f-a81a-4f56-8c5b-c51039d694fb";
D3D12_16BIT_INDEX_STRIP_CUT_VALUE :: 65535;
D3D12_32BIT_INDEX_STRIP_CUT_VALUE :: 4294967295;
D3D12_8BIT_INDEX_STRIP_CUT_VALUE :: 255;
D3D12_ANISOTROPIC_FILTERING_BIT :: 64;
D3D12_APPEND_ALIGNED_ELEMENT :: 4294967295;
D3D12_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT :: 9;
D3D12_CLIP_OR_CULL_DISTANCE_COUNT :: 8;
D3D12_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT :: 2;
D3D12_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT :: 14;
D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS :: 4;
D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT :: 32;
D3D12_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT :: 15;
D3D12_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT :: 16;
D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS :: 4;
D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT :: 15;
D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST :: 1;
D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS :: 1;
D3D12_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT :: 64;
D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS :: 4;
D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT :: 1;
D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST :: 1;
D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS :: 1;
D3D12_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT :: 32;
D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS :: 1;
D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT :: 128;
D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST :: 1;
D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS :: 1;
D3D12_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT :: 128;
D3D12_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS :: 1;
D3D12_COMMONSHADER_SAMPLER_REGISTER_COUNT :: 16;
D3D12_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST :: 1;
D3D12_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS :: 1;
D3D12_COMMONSHADER_SAMPLER_SLOT_COUNT :: 16;
D3D12_COMMONSHADER_SUBROUTINE_NESTING_LIMIT :: 32;
D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENTS :: 4;
D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D12_COMMONSHADER_TEMP_REGISTER_COUNT :: 4096;
D3D12_COMMONSHADER_TEMP_REGISTER_READS_PER_INST :: 3;
D3D12_COMMONSHADER_TEMP_REGISTER_READ_PORTS :: 3;
D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX :: 10;
D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN :: -10;
D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE :: -8;
D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE :: 7;
D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT :: 256;
D3D12_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 256;
D3D12_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP :: 64;
D3D12_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 240;
D3D12_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP :: 68;
D3D12_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 224;
D3D12_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP :: 72;
D3D12_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 208;
D3D12_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP :: 76;
D3D12_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 192;
D3D12_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP :: 84;
D3D12_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 176;
D3D12_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP :: 92;
D3D12_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 160;
D3D12_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP :: 100;
D3D12_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 144;
D3D12_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP :: 112;
D3D12_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 128;
D3D12_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP :: 128;
D3D12_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 112;
D3D12_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP :: 144;
D3D12_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 96;
D3D12_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP :: 168;
D3D12_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 80;
D3D12_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP :: 204;
D3D12_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 64;
D3D12_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP :: 256;
D3D12_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 48;
D3D12_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP :: 340;
D3D12_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 32;
D3D12_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP :: 512;
D3D12_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 16;
D3D12_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP :: 768;
D3D12_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION :: 1;
D3D12_CS_4_X_RAW_UAV_BYTE_ALIGNMENT :: 256;
D3D12_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP :: 768;
D3D12_CS_4_X_THREAD_GROUP_MAX_X :: 768;
D3D12_CS_4_X_THREAD_GROUP_MAX_Y :: 768;
D3D12_CS_4_X_UAV_REGISTER_COUNT :: 1;
D3D12_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION :: 65535;
D3D12_CS_TGSM_REGISTER_COUNT :: 8192;
D3D12_CS_TGSM_REGISTER_READS_PER_INST :: 1;
D3D12_CS_TGSM_RESOURCE_REGISTER_COMPONENTS :: 1;
D3D12_CS_TGSM_RESOURCE_REGISTER_READ_PORTS :: 1;
D3D12_CS_THREADGROUPID_REGISTER_COMPONENTS :: 3;
D3D12_CS_THREADGROUPID_REGISTER_COUNT :: 1;
D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS :: 1;
D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT :: 1;
D3D12_CS_THREADIDINGROUP_REGISTER_COMPONENTS :: 3;
D3D12_CS_THREADIDINGROUP_REGISTER_COUNT :: 1;
D3D12_CS_THREADID_REGISTER_COMPONENTS :: 3;
D3D12_CS_THREADID_REGISTER_COUNT :: 1;
D3D12_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP :: 1024;
D3D12_CS_THREAD_GROUP_MAX_X :: 1024;
D3D12_CS_THREAD_GROUP_MAX_Y :: 1024;
D3D12_CS_THREAD_GROUP_MAX_Z :: 64;
D3D12_CS_THREAD_GROUP_MIN_X :: 1;
D3D12_CS_THREAD_GROUP_MIN_Y :: 1;
D3D12_CS_THREAD_GROUP_MIN_Z :: 1;
D3D12_CS_THREAD_LOCAL_TEMP_REGISTER_POOL :: 16384;
D3D12_DEFAULT_BLEND_FACTOR_ALPHA :: 1.0;
D3D12_DEFAULT_BLEND_FACTOR_BLUE :: 1.0;
D3D12_DEFAULT_BLEND_FACTOR_GREEN :: 1.0;
D3D12_DEFAULT_BLEND_FACTOR_RED :: 1.0;
D3D12_DEFAULT_BORDER_COLOR_COMPONENT :: 0.0;
D3D12_DEFAULT_DEPTH_BIAS :: 0;
D3D12_DEFAULT_DEPTH_BIAS_CLAMP :: 0.0;
D3D12_DEFAULT_MAX_ANISOTROPY :: 16;
D3D12_DEFAULT_MIP_LOD_BIAS :: 0.0;
D3D12_DEFAULT_MSAA_RESOURCE_PLACEMENT_ALIGNMENT :: 4194304;
D3D12_DEFAULT_RENDER_TARGET_ARRAY_INDEX :: 0;
D3D12_DEFAULT_RESOURCE_PLACEMENT_ALIGNMENT :: 65536;
D3D12_DEFAULT_SAMPLE_MASK :: 4294967295;
D3D12_DEFAULT_SCISSOR_ENDX :: 0;
D3D12_DEFAULT_SCISSOR_ENDY :: 0;
D3D12_DEFAULT_SCISSOR_STARTX :: 0;
D3D12_DEFAULT_SCISSOR_STARTY :: 0;
D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING :: 5768;
D3D12_DEFAULT_SLOPE_SCALED_DEPTH_BIAS :: 0.0;
D3D12_DEFAULT_STENCIL_READ_MASK :: 255;
D3D12_DEFAULT_STENCIL_REFERENCE :: 0;
D3D12_DEFAULT_STENCIL_WRITE_MASK :: 255;
D3D12_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX :: 0;
D3D12_DEFAULT_VIEWPORT_HEIGHT :: 0;
D3D12_DEFAULT_VIEWPORT_MAX_DEPTH :: 0.0;
D3D12_DEFAULT_VIEWPORT_MIN_DEPTH :: 0.0;
D3D12_DEFAULT_VIEWPORT_TOPLEFTX :: 0;
D3D12_DEFAULT_VIEWPORT_TOPLEFTY :: 0;
D3D12_DEFAULT_VIEWPORT_WIDTH :: 0;
D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND :: 4294967295;
D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_END :: 4294967287;
D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_START :: 4294967280;
D3D12_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS :: 3968;
D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS :: 4;
D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COUNT :: 32;
D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST :: 2;
D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS :: 1;
D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS :: 3;
D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT :: 1;
D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST :: 2;
D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS :: 1;
D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS :: 4;
D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT :: 32;
D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST :: 2;
D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS :: 1;
D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS :: 1;
D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT :: 1;
D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST :: 2;
D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS :: 1;
D3D12_DS_OUTPUT_REGISTER_COMPONENTS :: 4;
D3D12_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D12_DS_OUTPUT_REGISTER_COUNT :: 32;
D3D12_ERROR_ADAPTER_NOT_FOUND :: cast, no_check (HRESULT) -2005008383;
D3D12_ERROR_DRIVER_VERSION_MISMATCH :: cast, no_check (HRESULT) -2005008382;
D3D12_ERROR_INVALID_REDIST :: cast, no_check (HRESULT) -2005008381;
D3D12_FILTER_REDUCTION_TYPE_MASK :: 3;
D3D12_FILTER_REDUCTION_TYPE_SHIFT :: 7;
D3D12_FILTER_TYPE_MASK :: 3;
D3D12_FLOAT16_FUSED_TOLERANCE_IN_ULP :: 0.6;
D3D12_FLOAT32_MAX :: 340282349999999992000000000000000000000.0;
D3D12_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP :: 0.6;
D3D12_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR :: 2.4;
D3D12_FLOAT_TO_SRGB_EXPONENT_NUMERATOR :: 1.0;
D3D12_FLOAT_TO_SRGB_OFFSET :: 0.055;
D3D12_FLOAT_TO_SRGB_SCALE_1 :: 12.92;
D3D12_FLOAT_TO_SRGB_SCALE_2 :: 1.055;
D3D12_FLOAT_TO_SRGB_THRESHOLD :: 0.003131;
D3D12_FTOI_INSTRUCTION_MAX_INPUT :: 2147483600.0;
D3D12_FTOI_INSTRUCTION_MIN_INPUT :: -2147483600.0;
D3D12_FTOU_INSTRUCTION_MAX_INPUT :: 4294967300.0;
D3D12_FTOU_INSTRUCTION_MIN_INPUT :: 0.0;
D3D12_GS_INPUT_INSTANCE_ID_READS_PER_INST :: 2;
D3D12_GS_INPUT_INSTANCE_ID_READ_PORTS :: 1;
D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS :: 1;
D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COUNT :: 1;
D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS :: 1;
D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D12_GS_INPUT_PRIM_CONST_REGISTER_COUNT :: 1;
D3D12_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST :: 2;
D3D12_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS :: 1;
D3D12_GS_INPUT_REGISTER_COMPONENTS :: 4;
D3D12_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D12_GS_INPUT_REGISTER_COUNT :: 32;
D3D12_GS_INPUT_REGISTER_READS_PER_INST :: 2;
D3D12_GS_INPUT_REGISTER_READ_PORTS :: 1;
D3D12_GS_INPUT_REGISTER_VERTICES :: 32;
D3D12_GS_MAX_INSTANCE_COUNT :: 32;
D3D12_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES :: 1024;
D3D12_GS_OUTPUT_ELEMENTS :: 32;
D3D12_GS_OUTPUT_REGISTER_COMPONENTS :: 4;
D3D12_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D12_GS_OUTPUT_REGISTER_COUNT :: 32;
D3D12_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT :: 32;
D3D12_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT :: 32;
D3D12_HS_CONTROL_POINT_REGISTER_COMPONENTS :: 4;
D3D12_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D12_HS_CONTROL_POINT_REGISTER_READS_PER_INST :: 2;
D3D12_HS_CONTROL_POINT_REGISTER_READ_PORTS :: 1;
D3D12_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND :: 4294967295;
D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS :: 1;
D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT :: 1;
D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST :: 2;
D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS :: 1;
D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS :: 1;
D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT :: 1;
D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST :: 2;
D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS :: 1;
D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS :: 1;
D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT :: 1;
D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST :: 2;
D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS :: 1;
D3D12_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND :: 4294967295;
D3D12_HS_MAXTESSFACTOR_LOWER_BOUND :: 1.0;
D3D12_HS_MAXTESSFACTOR_UPPER_BOUND :: 64.0;
D3D12_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS :: 3968;
D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS :: 1;
D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT :: 1;
D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST :: 2;
D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS :: 1;
D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS :: 4;
D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT :: 32;
D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST :: 2;
D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS :: 1;
D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS :: 128;
D3D12_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES :: 0;
D3D12_IA_DEFAULT_PRIMITIVE_TOPOLOGY :: 0;
D3D12_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES :: 0;
D3D12_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT :: 1;
D3D12_IA_INSTANCE_ID_BIT_COUNT :: 32;
D3D12_IA_INTEGER_ARITHMETIC_BIT_COUNT :: 32;
D3D12_IA_PATCH_MAX_CONTROL_POINT_COUNT :: 32;
D3D12_IA_PRIMITIVE_ID_BIT_COUNT :: 32;
D3D12_IA_VERTEX_ID_BIT_COUNT :: 32;
D3D12_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT :: 32;
D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS :: 128;
D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT :: 32;
D3D12_INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT :: 1024;
D3D12_INTEGER_DIVIDE_BY_ZERO_QUOTIENT :: 4294967295;
D3D12_INTEGER_DIVIDE_BY_ZERO_REMAINDER :: 4294967295;
D3D12_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL :: 4294967295;
D3D12_KEEP_UNORDERED_ACCESS_VIEWS :: 4294967295;
D3D12_LINEAR_GAMMA :: 1.0;
D3D12_MAG_FILTER_SHIFT :: 2;
D3D12_MAJOR_VERSION :: 12;
D3D12_MAX_BORDER_COLOR_COMPONENT :: 1.0;
D3D12_MAX_DEPTH :: 1.0;
D3D12_MAX_LIVE_STATIC_SAMPLERS :: 2032;
D3D12_MAX_MAXANISOTROPY :: 16;
D3D12_MAX_MULTISAMPLE_SAMPLE_COUNT :: 32;
D3D12_MAX_POSITION_VALUE :: 34028235999999998700000000000000000.0;
D3D12_MAX_ROOT_COST :: 64;
D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_1 :: 1000000;
D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_2 :: 1000000;
D3D12_MAX_SHADER_VISIBLE_SAMPLER_HEAP_SIZE :: 2048;
D3D12_MAX_TEXTURE_DIMENSION_2_TO_EXP :: 17;
D3D12_MAX_VIEW_INSTANCE_COUNT :: 4;
D3D12_MINOR_VERSION :: 0;
D3D12_MIN_BORDER_COLOR_COMPONENT :: 0.0;
D3D12_MIN_DEPTH :: 0.0;
D3D12_MIN_FILTER_SHIFT :: 4;
D3D12_MIN_MAXANISOTROPY :: 0;
D3D12_MIP_FILTER_SHIFT :: 0;
D3D12_MIP_LOD_BIAS_MAX :: 15.99;
D3D12_MIP_LOD_BIAS_MIN :: -16.0;
D3D12_MIP_LOD_FRACTIONAL_BIT_COUNT :: 8;
D3D12_MIP_LOD_RANGE_BIT_COUNT :: 8;
D3D12_MULTISAMPLE_ANTIALIAS_LINE_WIDTH :: 1.4;
D3D12_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT :: 0;
D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_END :: 4294967295;
D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_START :: 4294967288;
D3D12_PACKED_TILE :: 4294967295;
D3D12_PIXEL_ADDRESS_RANGE_BIT_COUNT :: 15;
D3D12_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT :: 16;
D3D12_PROTECTED_RESOURCES_SESSION_HARDWARE_PROTECTED :: "62b0084e-c70e-4daa-a109-30ff8d5a0482";
D3D12_PS_CS_UAV_REGISTER_COMPONENTS :: 1;
D3D12_PS_CS_UAV_REGISTER_COUNT :: 8;
D3D12_PS_CS_UAV_REGISTER_READS_PER_INST :: 1;
D3D12_PS_CS_UAV_REGISTER_READ_PORTS :: 1;
D3D12_PS_FRONTFACING_DEFAULT_VALUE :: 4294967295;
D3D12_PS_FRONTFACING_FALSE_VALUE :: 0;
D3D12_PS_FRONTFACING_TRUE_VALUE :: 4294967295;
D3D12_PS_INPUT_REGISTER_COMPONENTS :: 4;
D3D12_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D12_PS_INPUT_REGISTER_COUNT :: 32;
D3D12_PS_INPUT_REGISTER_READS_PER_INST :: 2;
D3D12_PS_INPUT_REGISTER_READ_PORTS :: 1;
D3D12_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT :: 0.0;
D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS :: 1;
D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D12_PS_OUTPUT_DEPTH_REGISTER_COUNT :: 1;
D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENTS :: 1;
D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D12_PS_OUTPUT_MASK_REGISTER_COUNT :: 1;
D3D12_PS_OUTPUT_REGISTER_COMPONENTS :: 4;
D3D12_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D12_PS_OUTPUT_REGISTER_COUNT :: 8;
D3D12_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT :: 0.5;
D3D12_RAW_UAV_SRV_BYTE_ALIGNMENT :: 16;
D3D12_RAYTRACING_AABB_BYTE_ALIGNMENT :: 8;
D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BYTE_ALIGNMENT :: 256;
D3D12_RAYTRACING_INSTANCE_DESCS_BYTE_ALIGNMENT :: 16;
D3D12_RAYTRACING_MAX_ATTRIBUTE_SIZE_IN_BYTES :: 32;
D3D12_RAYTRACING_MAX_DECLARABLE_TRACE_RECURSION_DEPTH :: 31;
D3D12_RAYTRACING_MAX_GEOMETRIES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE :: 16777216;
D3D12_RAYTRACING_MAX_INSTANCES_PER_TOP_LEVEL_ACCELERATION_STRUCTURE :: 16777216;
D3D12_RAYTRACING_MAX_PRIMITIVES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE :: 536870912;
D3D12_RAYTRACING_MAX_RAY_GENERATION_SHADER_THREADS :: 1073741824;
D3D12_RAYTRACING_MAX_SHADER_RECORD_STRIDE :: 4096;
D3D12_RAYTRACING_SHADER_RECORD_BYTE_ALIGNMENT :: 32;
D3D12_RAYTRACING_SHADER_TABLE_BYTE_ALIGNMENT :: 64;
D3D12_RAYTRACING_TRANSFORM3X4_BYTE_ALIGNMENT :: 16;
D3D12_REQ_BLEND_OBJECT_COUNT_PER_DEVICE :: 4096;
D3D12_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP :: 27;
D3D12_REQ_CONSTANT_BUFFER_ELEMENT_COUNT :: 4096;
D3D12_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE :: 4096;
D3D12_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP :: 32;
D3D12_REQ_DRAW_VERTEX_COUNT_2_TO_EXP :: 32;
D3D12_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION :: 16384;
D3D12_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT :: 1024;
D3D12_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT :: 4096;
D3D12_REQ_MAXANISOTROPY :: 16;
D3D12_REQ_MIP_LEVELS :: 15;
D3D12_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES :: 2048;
D3D12_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE :: 4096;
D3D12_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH :: 16384;
D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM :: 128;
D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM :: 0.25;
D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM :: 2048;
D3D12_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP :: 20;
D3D12_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE :: 4096;
D3D12_REQ_SUBRESOURCES :: 30720;
D3D12_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION :: 2048;
D3D12_REQ_TEXTURE1D_U_DIMENSION :: 16384;
D3D12_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION :: 2048;
D3D12_REQ_TEXTURE2D_U_OR_V_DIMENSION :: 16384;
D3D12_REQ_TEXTURE3D_U_V_OR_W_DIMENSION :: 2048;
D3D12_REQ_TEXTURECUBE_DIMENSION :: 16384;
D3D12_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL :: 0;
D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES :: 4294967295;
D3D12_RS_SET_SHADING_RATE_COMBINER_COUNT :: 2;
D3D12_SDK_VERSION :: 5;
D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES :: 4096;
D3D12_SHADER_COMPONENT_MAPPING_MASK :: 7;
D3D12_SHADER_COMPONENT_MAPPING_SHIFT :: 3;
D3D12_SHADER_IDENTIFIER_SIZE_IN_BYTES :: 32;
D3D12_SHADER_MAJOR_VERSION :: 5;
D3D12_SHADER_MAX_INSTANCES :: 65535;
D3D12_SHADER_MAX_INTERFACES :: 253;
D3D12_SHADER_MAX_INTERFACE_CALL_SITES :: 4096;
D3D12_SHADER_MAX_TYPES :: 65535;
D3D12_SHADER_MINOR_VERSION :: 1;
D3D12_SHADING_RATE_VALID_MASK :: 3;
D3D12_SHADING_RATE_X_AXIS_SHIFT :: 2;
D3D12_SHIFT_INSTRUCTION_PAD_VALUE :: 0;
D3D12_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT :: 5;
D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT :: 8;
D3D12_SMALL_MSAA_RESOURCE_PLACEMENT_ALIGNMENT :: 65536;
D3D12_SMALL_RESOURCE_PLACEMENT_ALIGNMENT :: 4096;
D3D12_SO_BUFFER_MAX_STRIDE_IN_BYTES :: 2048;
D3D12_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES :: 512;
D3D12_SO_BUFFER_SLOT_COUNT :: 4;
D3D12_SO_DDI_REGISTER_INDEX_DENOTING_GAP :: 4294967295;
D3D12_SO_NO_RASTERIZED_STREAM :: 4294967295;
D3D12_SO_OUTPUT_COMPONENT_COUNT :: 128;
D3D12_SO_STREAM_COUNT :: 4;
D3D12_SPEC_DATE_DAY :: 14;
D3D12_SPEC_DATE_MONTH :: 11;
D3D12_SPEC_DATE_YEAR :: 2014;
D3D12_SPEC_VERSION :: 1.16;
D3D12_SRGB_GAMMA :: 2.2;
D3D12_SRGB_TO_FLOAT_DENOMINATOR_1 :: 12.92;
D3D12_SRGB_TO_FLOAT_DENOMINATOR_2 :: 1.055;
D3D12_SRGB_TO_FLOAT_EXPONENT :: 2.4;
D3D12_SRGB_TO_FLOAT_OFFSET :: 0.055;
D3D12_SRGB_TO_FLOAT_THRESHOLD :: 0.04045;
D3D12_SRGB_TO_FLOAT_TOLERANCE_IN_ULP :: 0.5;
D3D12_STANDARD_COMPONENT_BIT_COUNT :: 32;
D3D12_STANDARD_COMPONENT_BIT_COUNT_DOUBLED :: 64;
D3D12_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE :: 4;
D3D12_STANDARD_PIXEL_COMPONENT_COUNT :: 128;
D3D12_STANDARD_PIXEL_ELEMENT_COUNT :: 32;
D3D12_STANDARD_VECTOR_SIZE :: 4;
D3D12_STANDARD_VERTEX_ELEMENT_COUNT :: 32;
D3D12_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT :: 64;
D3D12_SUBPIXEL_FRACTIONAL_BIT_COUNT :: 8;
D3D12_SUBTEXEL_FRACTIONAL_BIT_COUNT :: 8;
D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_END :: 4294967295;
D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_START :: 4294967280;
D3D12_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR :: 64;
D3D12_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR :: 64;
D3D12_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR :: 63;
D3D12_TESSELLATOR_MAX_TESSELLATION_FACTOR :: 64;
D3D12_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR :: 2;
D3D12_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR :: 1;
D3D12_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR :: 1;
D3D12_TEXEL_ADDRESS_RANGE_BIT_COUNT :: 16;
D3D12_TEXTURE_DATA_PITCH_ALIGNMENT :: 256;
D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT :: 512;
D3D12_TILED_RESOURCE_TILE_SIZE_IN_BYTES :: 65536;
D3D12_TRACKED_WORKLOAD_MAX_INSTANCES :: 32;
D3D12_UAV_COUNTER_PLACEMENT_ALIGNMENT :: 4096;
D3D12_UAV_SLOT_COUNT :: 64;
D3D12_UNBOUND_MEMORY_ACCESS_RESULT :: 0;
D3D12_VIDEO_DECODE_MAX_ARGUMENTS :: 10;
D3D12_VIDEO_DECODE_MAX_HISTOGRAM_COMPONENTS :: 4;
D3D12_VIDEO_DECODE_MIN_BITSTREAM_OFFSET_ALIGNMENT :: 256;
D3D12_VIDEO_DECODE_MIN_HISTOGRAM_OFFSET_ALIGNMENT :: 256;
D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2 :: "17127009-a00f-4ce1-994e-bf4081f6f3f0";
D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2_420 :: "2d80bed6-9cac-4835-9e91-327bbc4f9ee8";
D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE0 :: "b8be4ccb-cf53-46ba-8d59-d6b8a6da5d2a";
D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE1 :: "6936ff0f-45b1-4163-9cc1-646ef6946108";
D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE2 :: "0c5f2aa1-e541-4089-bb7b-98110a19d7c8";
D3D12_VIDEO_DECODE_PROFILE_H264 :: "1b81be68-a0c7-11d3-b984-00c04f2e73c5";
D3D12_VIDEO_DECODE_PROFILE_H264_MULTIVIEW :: "705b9d82-76cf-49d6-b7e6-ac8872db013c";
D3D12_VIDEO_DECODE_PROFILE_H264_STEREO :: "f9aaccbb-c2b6-4cfc-8779-5707b1760552";
D3D12_VIDEO_DECODE_PROFILE_H264_STEREO_PROGRESSIVE :: "d79be8da-0cf1-4c81-b82a-69a4e236f43d";
D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN :: "5b11d51b-2f4c-4452-bcc3-09f2a1160cc0";
D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN10 :: "107af0e0-ef1a-4d19-aba8-67a163073d13";
D3D12_VIDEO_DECODE_PROFILE_MPEG1_AND_MPEG2 :: "86695f12-340e-4f04-9fd3-9253dd327460";
D3D12_VIDEO_DECODE_PROFILE_MPEG2 :: "ee27417f-5e28-4e65-beea-1d26b508adc9";
D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_ADVSIMPLE_NOGMC :: "ed418a9f-010d-4eda-9ae3-9a65358d8d2e";
D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_SIMPLE :: "efd64d74-c9e8-41d7-a5e9-e9b0e39fa319";
D3D12_VIDEO_DECODE_PROFILE_VC1 :: "1b81bea3-a0c7-11d3-b984-00c04f2e73c5";
D3D12_VIDEO_DECODE_PROFILE_VC1_D2010 :: "1b81bea4-a0c7-11d3-b984-00c04f2e73c5";
D3D12_VIDEO_DECODE_PROFILE_VP8 :: "90b899ea-3a62-4705-88b3-8df04b2744e7";
D3D12_VIDEO_DECODE_PROFILE_VP9 :: "463707f8-a1d0-4585-876d-83aa6d60b89e";
D3D12_VIDEO_DECODE_PROFILE_VP9_10BIT_PROFILE2 :: "a4c749ef-6ecf-48aa-8448-50a7a1165ff7";
D3D12_VIDEO_DECODE_STATUS_MACROBLOCKS_AFFECTED_UNKNOWN :: 4294967295;
D3D12_VIDEO_PROCESS_MAX_FILTERS :: 32;
D3D12_VIDEO_PROCESS_STEREO_VIEWS :: 2;
D3D12_VIEWPORT_AND_SCISSORRECT_MAX_INDEX :: 15;
D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE :: 16;
D3D12_VIEWPORT_BOUNDS_MAX :: 32767;
D3D12_VIEWPORT_BOUNDS_MIN :: -32768;
D3D12_VS_INPUT_REGISTER_COMPONENTS :: 4;
D3D12_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D12_VS_INPUT_REGISTER_COUNT :: 32;
D3D12_VS_INPUT_REGISTER_READS_PER_INST :: 2;
D3D12_VS_INPUT_REGISTER_READ_PORTS :: 1;
D3D12_VS_OUTPUT_REGISTER_COMPONENTS :: 4;
D3D12_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;
D3D12_VS_OUTPUT_REGISTER_COUNT :: 32;
D3D12_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT :: 10;
D3D12_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP :: 25;
D3D12_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP :: 25;
LUID_DEFINED :: 1;
WKPDID_D3DAutoDebugObjectNameW :: "d4902e36-757a-4942-9594-b6769afa43cd";

// Types

D3D12MessageFunc :: #type (
    Category : D3D12_MESSAGE_CATEGORY,
    Severity : D3D12_MESSAGE_SEVERITY,
    ID : D3D12_MESSAGE_ID,
    pDescription : PSTR,
    pContext : *void
) -> void #c_call;

D3D12_AUTO_BREADCRUMB_NODE :: struct
{
    pCommandListDebugNameA : *u8; // Const
    pCommandListDebugNameW : PWSTR; // Const
    pCommandQueueDebugNameA : *u8; // Const
    pCommandQueueDebugNameW : PWSTR; // Const
    pCommandList : *ID3D12GraphicsCommandList;
    pCommandQueue : *ID3D12CommandQueue;
    BreadcrumbCount : u32;
    pLastBreadcrumbValue : *u32; // Const
    pCommandHistory : *D3D12_AUTO_BREADCRUMB_OP; // Const
    pNext : *D3D12_AUTO_BREADCRUMB_NODE; // Const
}

D3D12_AUTO_BREADCRUMB_NODE1 :: struct
{
    pCommandListDebugNameA : *u8; // Const
    pCommandListDebugNameW : PWSTR; // Const
    pCommandQueueDebugNameA : *u8; // Const
    pCommandQueueDebugNameW : PWSTR; // Const
    pCommandList : *ID3D12GraphicsCommandList;
    pCommandQueue : *ID3D12CommandQueue;
    BreadcrumbCount : u32;
    pLastBreadcrumbValue : *u32; // Const
    pCommandHistory : *D3D12_AUTO_BREADCRUMB_OP; // Const
    pNext : *D3D12_AUTO_BREADCRUMB_NODE1; // Const
    BreadcrumbContextsCount : u32;
    pBreadcrumbContexts : *D3D12_DRED_BREADCRUMB_CONTEXT;
}

D3D12_AUTO_BREADCRUMB_OP :: enum s32
{
    SETMARKER :: 0;
    BEGINEVENT :: 1;
    ENDEVENT :: 2;
    DRAWINSTANCED :: 3;
    DRAWINDEXEDINSTANCED :: 4;
    EXECUTEINDIRECT :: 5;
    DISPATCH :: 6;
    COPYBUFFERREGION :: 7;
    COPYTEXTUREREGION :: 8;
    COPYRESOURCE :: 9;
    COPYTILES :: 10;
    RESOLVESUBRESOURCE :: 11;
    CLEARRENDERTARGETVIEW :: 12;
    CLEARUNORDEREDACCESSVIEW :: 13;
    CLEARDEPTHSTENCILVIEW :: 14;
    RESOURCEBARRIER :: 15;
    EXECUTEBUNDLE :: 16;
    PRESENT :: 17;
    RESOLVEQUERYDATA :: 18;
    BEGINSUBMISSION :: 19;
    ENDSUBMISSION :: 20;
    DECODEFRAME :: 21;
    PROCESSFRAMES :: 22;
    ATOMICCOPYBUFFERUINT :: 23;
    ATOMICCOPYBUFFERUINT64 :: 24;
    RESOLVESUBRESOURCEREGION :: 25;
    WRITEBUFFERIMMEDIATE :: 26;
    DECODEFRAME1 :: 27;
    SETPROTECTEDRESOURCESESSION :: 28;
    DECODEFRAME2 :: 29;
    PROCESSFRAMES1 :: 30;
    BUILDRAYTRACINGACCELERATIONSTRUCTURE :: 31;
    EMITRAYTRACINGACCELERATIONSTRUCTUREPOSTBUILDINFO :: 32;
    COPYRAYTRACINGACCELERATIONSTRUCTURE :: 33;
    DISPATCHRAYS :: 34;
    INITIALIZEMETACOMMAND :: 35;
    EXECUTEMETACOMMAND :: 36;
    ESTIMATEMOTION :: 37;
    RESOLVEMOTIONVECTORHEAP :: 38;
    SETPIPELINESTATE1 :: 39;
    INITIALIZEEXTENSIONCOMMAND :: 40;
    EXECUTEEXTENSIONCOMMAND :: 41;
    DISPATCHMESH :: 42;
    ENCODEFRAME :: 43;
    RESOLVEENCODEROUTPUTMETADATA :: 44;
}

D3D12_AUTO_BREADCRUMB_OP_SETMARKER :: 0;
D3D12_AUTO_BREADCRUMB_OP_BEGINEVENT :: 1;
D3D12_AUTO_BREADCRUMB_OP_ENDEVENT :: 2;
D3D12_AUTO_BREADCRUMB_OP_DRAWINSTANCED :: 3;
D3D12_AUTO_BREADCRUMB_OP_DRAWINDEXEDINSTANCED :: 4;
D3D12_AUTO_BREADCRUMB_OP_EXECUTEINDIRECT :: 5;
D3D12_AUTO_BREADCRUMB_OP_DISPATCH :: 6;
D3D12_AUTO_BREADCRUMB_OP_COPYBUFFERREGION :: 7;
D3D12_AUTO_BREADCRUMB_OP_COPYTEXTUREREGION :: 8;
D3D12_AUTO_BREADCRUMB_OP_COPYRESOURCE :: 9;
D3D12_AUTO_BREADCRUMB_OP_COPYTILES :: 10;
D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCE :: 11;
D3D12_AUTO_BREADCRUMB_OP_CLEARRENDERTARGETVIEW :: 12;
D3D12_AUTO_BREADCRUMB_OP_CLEARUNORDEREDACCESSVIEW :: 13;
D3D12_AUTO_BREADCRUMB_OP_CLEARDEPTHSTENCILVIEW :: 14;
D3D12_AUTO_BREADCRUMB_OP_RESOURCEBARRIER :: 15;
D3D12_AUTO_BREADCRUMB_OP_EXECUTEBUNDLE :: 16;
D3D12_AUTO_BREADCRUMB_OP_PRESENT :: 17;
D3D12_AUTO_BREADCRUMB_OP_RESOLVEQUERYDATA :: 18;
D3D12_AUTO_BREADCRUMB_OP_BEGINSUBMISSION :: 19;
D3D12_AUTO_BREADCRUMB_OP_ENDSUBMISSION :: 20;
D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME :: 21;
D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES :: 22;
D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT :: 23;
D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT64 :: 24;
D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCEREGION :: 25;
D3D12_AUTO_BREADCRUMB_OP_WRITEBUFFERIMMEDIATE :: 26;
D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME1 :: 27;
D3D12_AUTO_BREADCRUMB_OP_SETPROTECTEDRESOURCESESSION :: 28;
D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME2 :: 29;
D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES1 :: 30;
D3D12_AUTO_BREADCRUMB_OP_BUILDRAYTRACINGACCELERATIONSTRUCTURE :: 31;
D3D12_AUTO_BREADCRUMB_OP_EMITRAYTRACINGACCELERATIONSTRUCTUREPOSTBUILDINFO :: 32;
D3D12_AUTO_BREADCRUMB_OP_COPYRAYTRACINGACCELERATIONSTRUCTURE :: 33;
D3D12_AUTO_BREADCRUMB_OP_DISPATCHRAYS :: 34;
D3D12_AUTO_BREADCRUMB_OP_INITIALIZEMETACOMMAND :: 35;
D3D12_AUTO_BREADCRUMB_OP_EXECUTEMETACOMMAND :: 36;
D3D12_AUTO_BREADCRUMB_OP_ESTIMATEMOTION :: 37;
D3D12_AUTO_BREADCRUMB_OP_RESOLVEMOTIONVECTORHEAP :: 38;
D3D12_AUTO_BREADCRUMB_OP_SETPIPELINESTATE1 :: 39;
D3D12_AUTO_BREADCRUMB_OP_INITIALIZEEXTENSIONCOMMAND :: 40;
D3D12_AUTO_BREADCRUMB_OP_EXECUTEEXTENSIONCOMMAND :: 41;
D3D12_AUTO_BREADCRUMB_OP_DISPATCHMESH :: 42;
D3D12_AUTO_BREADCRUMB_OP_ENCODEFRAME :: 43;
D3D12_AUTO_BREADCRUMB_OP_RESOLVEENCODEROUTPUTMETADATA :: 44;

D3D12_AXIS_SHADING_RATE :: enum s32
{
    _1X :: 0;
    _2X :: 1;
    _4X :: 2;
}

D3D12_AXIS_SHADING_RATE_1X :: 0;
D3D12_AXIS_SHADING_RATE_2X :: 1;
D3D12_AXIS_SHADING_RATE_4X :: 2;

D3D12_BACKGROUND_PROCESSING_MODE :: enum s32
{
    ALLOWED :: 0;
    ALLOW_INTRUSIVE_MEASUREMENTS :: 1;
    DISABLE_BACKGROUND_WORK :: 2;
    DISABLE_PROFILING_BY_SYSTEM :: 3;
}

D3D12_BACKGROUND_PROCESSING_MODE_ALLOWED :: 0;
D3D12_BACKGROUND_PROCESSING_MODE_ALLOW_INTRUSIVE_MEASUREMENTS :: 1;
D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_BACKGROUND_WORK :: 2;
D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_PROFILING_BY_SYSTEM :: 3;

D3D12_BITSTREAM_ENCRYPTION_TYPE :: enum s32
{
    NONE :: 0;
}

D3D12_BITSTREAM_ENCRYPTION_TYPE_NONE :: 0;

D3D12_BLEND :: enum s32
{
    ZERO :: 1;
    ONE :: 2;
    SRC_COLOR :: 3;
    INV_SRC_COLOR :: 4;
    SRC_ALPHA :: 5;
    INV_SRC_ALPHA :: 6;
    DEST_ALPHA :: 7;
    INV_DEST_ALPHA :: 8;
    DEST_COLOR :: 9;
    INV_DEST_COLOR :: 10;
    SRC_ALPHA_SAT :: 11;
    BLEND_FACTOR :: 14;
    INV_BLEND_FACTOR :: 15;
    SRC1_COLOR :: 16;
    INV_SRC1_COLOR :: 17;
    SRC1_ALPHA :: 18;
    INV_SRC1_ALPHA :: 19;
}

D3D12_BLEND_ZERO :: 1;
D3D12_BLEND_ONE :: 2;
D3D12_BLEND_SRC_COLOR :: 3;
D3D12_BLEND_INV_SRC_COLOR :: 4;
D3D12_BLEND_SRC_ALPHA :: 5;
D3D12_BLEND_INV_SRC_ALPHA :: 6;
D3D12_BLEND_DEST_ALPHA :: 7;
D3D12_BLEND_INV_DEST_ALPHA :: 8;
D3D12_BLEND_DEST_COLOR :: 9;
D3D12_BLEND_INV_DEST_COLOR :: 10;
D3D12_BLEND_SRC_ALPHA_SAT :: 11;
D3D12_BLEND_BLEND_FACTOR :: 14;
D3D12_BLEND_INV_BLEND_FACTOR :: 15;
D3D12_BLEND_SRC1_COLOR :: 16;
D3D12_BLEND_INV_SRC1_COLOR :: 17;
D3D12_BLEND_SRC1_ALPHA :: 18;
D3D12_BLEND_INV_SRC1_ALPHA :: 19;

D3D12_BLEND_DESC :: struct
{
    AlphaToCoverageEnable : BOOL;
    IndependentBlendEnable : BOOL;
    RenderTarget : [8]D3D12_RENDER_TARGET_BLEND_DESC;
}

D3D12_BLEND_OP :: enum s32
{
    ADD :: 1;
    SUBTRACT :: 2;
    REV_SUBTRACT :: 3;
    MIN :: 4;
    MAX :: 5;
}

D3D12_BLEND_OP_ADD :: 1;
D3D12_BLEND_OP_SUBTRACT :: 2;
D3D12_BLEND_OP_REV_SUBTRACT :: 3;
D3D12_BLEND_OP_MIN :: 4;
D3D12_BLEND_OP_MAX :: 5;

D3D12_BOX :: struct
{
    left : u32;
    top : u32;
    front : u32;
    right : u32;
    bottom : u32;
    back : u32;
}

D3D12_BUFFER_RTV :: struct
{
    FirstElement : u64;
    NumElements : u32;
}

D3D12_BUFFER_SRV :: struct
{
    FirstElement : u64;
    NumElements : u32;
    StructureByteStride : u32;
    Flags : D3D12_BUFFER_SRV_FLAGS;
}

D3D12_BUFFER_SRV_FLAGS :: enum_flags u32
{
    NONE :: 0;
    RAW :: 1;
}

D3D12_BUFFER_SRV_FLAG_NONE :: 0;
D3D12_BUFFER_SRV_FLAG_RAW :: 1;

D3D12_BUFFER_UAV :: struct
{
    FirstElement : u64;
    NumElements : u32;
    StructureByteStride : u32;
    CounterOffsetInBytes : u64;
    Flags : D3D12_BUFFER_UAV_FLAGS;
}

D3D12_BUFFER_UAV_FLAGS :: enum_flags u32
{
    NONE :: 0;
    RAW :: 1;
}

D3D12_BUFFER_UAV_FLAG_NONE :: 0;
D3D12_BUFFER_UAV_FLAG_RAW :: 1;

D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC :: struct
{
    DestAccelerationStructureData : u64;
    Inputs : D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS;
    SourceAccelerationStructureData : u64;
    ScratchAccelerationStructureData : u64;
}

D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS :: struct
{
    _Type : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE;
    Flags : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS;
    NumDescs : u32;
    DescsLayout : D3D12_ELEMENTS_LAYOUT;
    union
    {
        InstanceDescs : u64;
        pGeometryDescs : *D3D12_RAYTRACING_GEOMETRY_DESC; // Const
        ppGeometryDescs : **D3D12_RAYTRACING_GEOMETRY_DESC; // Const
    }; // Anonymous
}

D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER :: struct
{
    _Type : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE;
    NumDescs : u32;
}

D3D12_CACHED_PIPELINE_STATE :: struct
{
    pCachedBlob : *void; // Const
    CachedBlobSizeInBytes : u64;
}

D3D12_CLEAR_FLAGS :: enum_flags u32
{
    DEPTH :: 1;
    STENCIL :: 2;
}

D3D12_CLEAR_FLAG_DEPTH :: 1;
D3D12_CLEAR_FLAG_STENCIL :: 2;

D3D12_CLEAR_VALUE :: struct
{
    Format : DXGI_FORMAT;
    union
    {
        Color : [4]float;
        DepthStencil : D3D12_DEPTH_STENCIL_VALUE;
    }; // Anonymous
}

D3D12_COLOR_WRITE_ENABLE :: enum s32
{
    RED :: 1;
    GREEN :: 2;
    BLUE :: 4;
    ALPHA :: 8;
    ALL :: 15;
}

D3D12_COLOR_WRITE_ENABLE_RED :: 1;
D3D12_COLOR_WRITE_ENABLE_GREEN :: 2;
D3D12_COLOR_WRITE_ENABLE_BLUE :: 4;
D3D12_COLOR_WRITE_ENABLE_ALPHA :: 8;
D3D12_COLOR_WRITE_ENABLE_ALL :: 15;

D3D12_COMMAND_LIST_FLAGS :: enum_flags u32
{
    NONE :: 0;
}

D3D12_COMMAND_LIST_FLAG_NONE :: 0;

D3D12_COMMAND_LIST_SUPPORT_FLAGS :: enum_flags u32
{
    NONE :: 0;
    DIRECT :: 1;
    BUNDLE :: 2;
    COMPUTE :: 4;
    COPY :: 8;
    VIDEO_DECODE :: 16;
    VIDEO_PROCESS :: 32;
    VIDEO_ENCODE :: 64;
}

D3D12_COMMAND_LIST_SUPPORT_FLAG_NONE :: 0;
D3D12_COMMAND_LIST_SUPPORT_FLAG_DIRECT :: 1;
D3D12_COMMAND_LIST_SUPPORT_FLAG_BUNDLE :: 2;
D3D12_COMMAND_LIST_SUPPORT_FLAG_COMPUTE :: 4;
D3D12_COMMAND_LIST_SUPPORT_FLAG_COPY :: 8;
D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_DECODE :: 16;
D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_PROCESS :: 32;
D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_ENCODE :: 64;

D3D12_COMMAND_LIST_TYPE :: enum s32
{
    DIRECT :: 0;
    BUNDLE :: 1;
    COMPUTE :: 2;
    COPY :: 3;
    VIDEO_DECODE :: 4;
    VIDEO_PROCESS :: 5;
    VIDEO_ENCODE :: 6;
}

D3D12_COMMAND_LIST_TYPE_DIRECT :: 0;
D3D12_COMMAND_LIST_TYPE_BUNDLE :: 1;
D3D12_COMMAND_LIST_TYPE_COMPUTE :: 2;
D3D12_COMMAND_LIST_TYPE_COPY :: 3;
D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE :: 4;
D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS :: 5;
D3D12_COMMAND_LIST_TYPE_VIDEO_ENCODE :: 6;

D3D12_COMMAND_POOL_FLAGS :: enum_flags u32
{
    NONE :: 0;
}

D3D12_COMMAND_POOL_FLAG_NONE :: 0;

D3D12_COMMAND_QUEUE_DESC :: struct
{
    _Type : D3D12_COMMAND_LIST_TYPE;
    Priority : s32;
    Flags : D3D12_COMMAND_QUEUE_FLAGS;
    NodeMask : u32;
}

D3D12_COMMAND_QUEUE_FLAGS :: enum_flags u32
{
    NONE :: 0;
    DISABLE_GPU_TIMEOUT :: 1;
}

D3D12_COMMAND_QUEUE_FLAG_NONE :: 0;
D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT :: 1;

D3D12_COMMAND_QUEUE_PRIORITY :: enum s32
{
    NORMAL :: 0;
    HIGH :: 100;
    GLOBAL_REALTIME :: 10000;
}

D3D12_COMMAND_QUEUE_PRIORITY_NORMAL :: 0;
D3D12_COMMAND_QUEUE_PRIORITY_HIGH :: 100;
D3D12_COMMAND_QUEUE_PRIORITY_GLOBAL_REALTIME :: 10000;

D3D12_COMMAND_RECORDER_FLAGS :: enum_flags u32
{
    NONE :: 0;
}

D3D12_COMMAND_RECORDER_FLAG_NONE :: 0;

D3D12_COMMAND_SIGNATURE_DESC :: struct
{
    ByteStride : u32;
    NumArgumentDescs : u32;
    pArgumentDescs : *D3D12_INDIRECT_ARGUMENT_DESC; // Const
    NodeMask : u32;
}

D3D12_COMPARISON_FUNC :: enum s32
{
    NEVER :: 1;
    LESS :: 2;
    EQUAL :: 3;
    LESS_EQUAL :: 4;
    GREATER :: 5;
    NOT_EQUAL :: 6;
    GREATER_EQUAL :: 7;
    ALWAYS :: 8;
}

D3D12_COMPARISON_FUNC_NEVER :: 1;
D3D12_COMPARISON_FUNC_LESS :: 2;
D3D12_COMPARISON_FUNC_EQUAL :: 3;
D3D12_COMPARISON_FUNC_LESS_EQUAL :: 4;
D3D12_COMPARISON_FUNC_GREATER :: 5;
D3D12_COMPARISON_FUNC_NOT_EQUAL :: 6;
D3D12_COMPARISON_FUNC_GREATER_EQUAL :: 7;
D3D12_COMPARISON_FUNC_ALWAYS :: 8;

D3D12_COMPUTE_PIPELINE_STATE_DESC :: struct
{
    pRootSignature : *ID3D12RootSignature;
    CS : D3D12_SHADER_BYTECODE;
    NodeMask : u32;
    CachedPSO : D3D12_CACHED_PIPELINE_STATE;
    Flags : D3D12_PIPELINE_STATE_FLAGS;
}

D3D12_CONSERVATIVE_RASTERIZATION_MODE :: enum s32
{
    OFF :: 0;
    ON :: 1;
}

D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF :: 0;
D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON :: 1;

D3D12_CONSERVATIVE_RASTERIZATION_TIER :: enum s32
{
    NOT_SUPPORTED :: 0;
    _1 :: 1;
    _2 :: 2;
    _3 :: 3;
}

D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED :: 0;
D3D12_CONSERVATIVE_RASTERIZATION_TIER_1 :: 1;
D3D12_CONSERVATIVE_RASTERIZATION_TIER_2 :: 2;
D3D12_CONSERVATIVE_RASTERIZATION_TIER_3 :: 3;

D3D12_CONSTANT_BUFFER_VIEW_DESC :: struct
{
    BufferLocation : u64;
    SizeInBytes : u32;
}

D3D12_CPU_DESCRIPTOR_HANDLE :: struct
{
    ptr : u64;
}

D3D12_CPU_PAGE_PROPERTY :: enum s32
{
    UNKNOWN :: 0;
    NOT_AVAILABLE :: 1;
    WRITE_COMBINE :: 2;
    WRITE_BACK :: 3;
}

D3D12_CPU_PAGE_PROPERTY_UNKNOWN :: 0;
D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE :: 1;
D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE :: 2;
D3D12_CPU_PAGE_PROPERTY_WRITE_BACK :: 3;

D3D12_CROSS_NODE_SHARING_TIER :: enum s32
{
    NOT_SUPPORTED :: 0;
    _1_EMULATED :: 1;
    _1 :: 2;
    _2 :: 3;
    _3 :: 4;
}

D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED :: 0;
D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED :: 1;
D3D12_CROSS_NODE_SHARING_TIER_1 :: 2;
D3D12_CROSS_NODE_SHARING_TIER_2 :: 3;
D3D12_CROSS_NODE_SHARING_TIER_3 :: 4;

D3D12_CULL_MODE :: enum s32
{
    NONE :: 1;
    FRONT :: 2;
    BACK :: 3;
}

D3D12_CULL_MODE_NONE :: 1;
D3D12_CULL_MODE_FRONT :: 2;
D3D12_CULL_MODE_BACK :: 3;

D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS :: struct
{
    ShaderPatchMode : D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE;
}

D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE :: enum s32
{
    D3D12_DEBUG_COMMAND_LIST_PARAMETER_GPU_BASED_VALIDATION_SETTINGS :: 0;
}

D3D12_DEBUG_COMMAND_LIST_PARAMETER_GPU_BASED_VALIDATION_SETTINGS :: 0;

D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS :: struct
{
    MaxMessagesPerCommandList : u32;
    DefaultShaderPatchMode : D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE;
    PipelineStateCreateFlags : D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS;
}

D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR :: struct
{
    SlowdownFactor : float;
}

D3D12_DEBUG_DEVICE_PARAMETER_TYPE :: enum s32
{
    D3D12_DEBUG_DEVICE_PARAMETER_FEATURE_FLAGS :: 0;
    D3D12_DEBUG_DEVICE_PARAMETER_GPU_BASED_VALIDATION_SETTINGS :: 1;
    D3D12_DEBUG_DEVICE_PARAMETER_GPU_SLOWDOWN_PERFORMANCE_FACTOR :: 2;
}

D3D12_DEBUG_DEVICE_PARAMETER_FEATURE_FLAGS :: 0;
D3D12_DEBUG_DEVICE_PARAMETER_GPU_BASED_VALIDATION_SETTINGS :: 1;
D3D12_DEBUG_DEVICE_PARAMETER_GPU_SLOWDOWN_PERFORMANCE_FACTOR :: 2;

D3D12_DEBUG_FEATURE :: enum s32
{
    NONE :: 0;
    ALLOW_BEHAVIOR_CHANGING_DEBUG_AIDS :: 1;
    CONSERVATIVE_RESOURCE_STATE_TRACKING :: 2;
    DISABLE_VIRTUALIZED_BUNDLES_VALIDATION :: 4;
    EMULATE_WINDOWS7 :: 8;
}

D3D12_DEBUG_FEATURE_NONE :: 0;
D3D12_DEBUG_FEATURE_ALLOW_BEHAVIOR_CHANGING_DEBUG_AIDS :: 1;
D3D12_DEBUG_FEATURE_CONSERVATIVE_RESOURCE_STATE_TRACKING :: 2;
D3D12_DEBUG_FEATURE_DISABLE_VIRTUALIZED_BUNDLES_VALIDATION :: 4;
D3D12_DEBUG_FEATURE_EMULATE_WINDOWS7 :: 8;

D3D12_DEPTH_STENCILOP_DESC :: struct
{
    StencilFailOp : D3D12_STENCIL_OP;
    StencilDepthFailOp : D3D12_STENCIL_OP;
    StencilPassOp : D3D12_STENCIL_OP;
    StencilFunc : D3D12_COMPARISON_FUNC;
}

D3D12_DEPTH_STENCIL_DESC :: struct
{
    DepthEnable : BOOL;
    DepthWriteMask : D3D12_DEPTH_WRITE_MASK;
    DepthFunc : D3D12_COMPARISON_FUNC;
    StencilEnable : BOOL;
    StencilReadMask : u8;
    StencilWriteMask : u8;
    FrontFace : D3D12_DEPTH_STENCILOP_DESC;
    BackFace : D3D12_DEPTH_STENCILOP_DESC;
}

D3D12_DEPTH_STENCIL_DESC1 :: struct
{
    DepthEnable : BOOL;
    DepthWriteMask : D3D12_DEPTH_WRITE_MASK;
    DepthFunc : D3D12_COMPARISON_FUNC;
    StencilEnable : BOOL;
    StencilReadMask : u8;
    StencilWriteMask : u8;
    FrontFace : D3D12_DEPTH_STENCILOP_DESC;
    BackFace : D3D12_DEPTH_STENCILOP_DESC;
    DepthBoundsTestEnable : BOOL;
}

D3D12_DEPTH_STENCIL_VALUE :: struct
{
    Depth : float;
    Stencil : u8;
}

D3D12_DEPTH_STENCIL_VIEW_DESC :: struct
{
    Format : DXGI_FORMAT;
    ViewDimension : D3D12_DSV_DIMENSION;
    Flags : D3D12_DSV_FLAGS;
    union
    {
        Texture1D : D3D12_TEX1D_DSV;
        Texture1DArray : D3D12_TEX1D_ARRAY_DSV;
        Texture2D : D3D12_TEX2D_DSV;
        Texture2DArray : D3D12_TEX2D_ARRAY_DSV;
        Texture2DMS : D3D12_TEX2DMS_DSV;
        Texture2DMSArray : D3D12_TEX2DMS_ARRAY_DSV;
    }; // Anonymous
}

D3D12_DEPTH_WRITE_MASK :: enum s32
{
    ZERO :: 0;
    ALL :: 1;
}

D3D12_DEPTH_WRITE_MASK_ZERO :: 0;
D3D12_DEPTH_WRITE_MASK_ALL :: 1;

D3D12_DESCRIPTOR_HEAP_DESC :: struct
{
    _Type : D3D12_DESCRIPTOR_HEAP_TYPE;
    NumDescriptors : u32;
    Flags : D3D12_DESCRIPTOR_HEAP_FLAGS;
    NodeMask : u32;
}

D3D12_DESCRIPTOR_HEAP_FLAGS :: enum_flags u32
{
    NONE :: 0;
    SHADER_VISIBLE :: 1;
}

D3D12_DESCRIPTOR_HEAP_FLAG_NONE :: 0;
D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE :: 1;

D3D12_DESCRIPTOR_HEAP_TYPE :: enum s32
{
    CBV_SRV_UAV :: 0;
    SAMPLER :: 1;
    RTV :: 2;
    DSV :: 3;
    NUM_TYPES :: 4;
}

D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV :: 0;
D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER :: 1;
D3D12_DESCRIPTOR_HEAP_TYPE_RTV :: 2;
D3D12_DESCRIPTOR_HEAP_TYPE_DSV :: 3;
D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES :: 4;

D3D12_DESCRIPTOR_RANGE :: struct
{
    RangeType : D3D12_DESCRIPTOR_RANGE_TYPE;
    NumDescriptors : u32;
    BaseShaderRegister : u32;
    RegisterSpace : u32;
    OffsetInDescriptorsFromTableStart : u32;
}

D3D12_DESCRIPTOR_RANGE1 :: struct
{
    RangeType : D3D12_DESCRIPTOR_RANGE_TYPE;
    NumDescriptors : u32;
    BaseShaderRegister : u32;
    RegisterSpace : u32;
    Flags : D3D12_DESCRIPTOR_RANGE_FLAGS;
    OffsetInDescriptorsFromTableStart : u32;
}

D3D12_DESCRIPTOR_RANGE_FLAGS :: enum_flags u32
{
    NONE :: 0;
    DESCRIPTORS_VOLATILE :: 1;
    DATA_VOLATILE :: 2;
    DATA_STATIC_WHILE_SET_AT_EXECUTE :: 4;
    DATA_STATIC :: 8;
    DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS :: 65536;
}

D3D12_DESCRIPTOR_RANGE_FLAG_NONE :: 0;
D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE :: 1;
D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE :: 2;
D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE :: 4;
D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC :: 8;
D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS :: 65536;

D3D12_DESCRIPTOR_RANGE_TYPE :: enum s32
{
    SRV :: 0;
    UAV :: 1;
    CBV :: 2;
    SAMPLER :: 3;
}

D3D12_DESCRIPTOR_RANGE_TYPE_SRV :: 0;
D3D12_DESCRIPTOR_RANGE_TYPE_UAV :: 1;
D3D12_DESCRIPTOR_RANGE_TYPE_CBV :: 2;
D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER :: 3;

D3D12_DEVICE_REMOVED_EXTENDED_DATA :: struct
{
    Flags : D3D12_DRED_FLAGS;
    pHeadAutoBreadcrumbNode : *D3D12_AUTO_BREADCRUMB_NODE;
}

D3D12_DEVICE_REMOVED_EXTENDED_DATA1 :: struct
{
    DeviceRemovedReason : HRESULT;
    AutoBreadcrumbsOutput : D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT;
    PageFaultOutput : D3D12_DRED_PAGE_FAULT_OUTPUT;
}

D3D12_DEVICE_REMOVED_EXTENDED_DATA2 :: struct
{
    DeviceRemovedReason : HRESULT;
    AutoBreadcrumbsOutput : D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1;
    PageFaultOutput : D3D12_DRED_PAGE_FAULT_OUTPUT1;
}

D3D12_DEVICE_REMOVED_EXTENDED_DATA3 :: struct
{
    DeviceRemovedReason : HRESULT;
    AutoBreadcrumbsOutput : D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1;
    PageFaultOutput : D3D12_DRED_PAGE_FAULT_OUTPUT2;
    DeviceState : D3D12_DRED_DEVICE_STATE;
}

D3D12_DISCARD_REGION :: struct
{
    NumRects : u32;
    pRects : *RECT; // Const
    FirstSubresource : u32;
    NumSubresources : u32;
}

D3D12_DISPATCH_ARGUMENTS :: struct
{
    ThreadGroupCountX : u32;
    ThreadGroupCountY : u32;
    ThreadGroupCountZ : u32;
}

D3D12_DISPATCH_MESH_ARGUMENTS :: struct
{
    ThreadGroupCountX : u32;
    ThreadGroupCountY : u32;
    ThreadGroupCountZ : u32;
}

D3D12_DISPATCH_RAYS_DESC :: struct
{
    RayGenerationShaderRecord : D3D12_GPU_VIRTUAL_ADDRESS_RANGE;
    MissShaderTable : D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE;
    HitGroupTable : D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE;
    CallableShaderTable : D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE;
    Width : u32;
    Height : u32;
    Depth : u32;
}

D3D12_DRAW_ARGUMENTS :: struct
{
    VertexCountPerInstance : u32;
    InstanceCount : u32;
    StartVertexLocation : u32;
    StartInstanceLocation : u32;
}

D3D12_DRAW_INDEXED_ARGUMENTS :: struct
{
    IndexCountPerInstance : u32;
    InstanceCount : u32;
    StartIndexLocation : u32;
    BaseVertexLocation : s32;
    StartInstanceLocation : u32;
}

D3D12_DRED_ALLOCATION_NODE :: struct
{
    ObjectNameA : *u8; // Const
    ObjectNameW : PWSTR; // Const
    AllocationType : D3D12_DRED_ALLOCATION_TYPE;
    pNext : *D3D12_DRED_ALLOCATION_NODE; // Const
}

D3D12_DRED_ALLOCATION_NODE1 :: struct
{
    ObjectNameA : *u8; // Const
    ObjectNameW : PWSTR; // Const
    AllocationType : D3D12_DRED_ALLOCATION_TYPE;
    pNext : *D3D12_DRED_ALLOCATION_NODE1; // Const
    pObject : *IUnknown; // Const
}

D3D12_DRED_ALLOCATION_TYPE :: enum s32
{
    COMMAND_QUEUE :: 19;
    COMMAND_ALLOCATOR :: 20;
    PIPELINE_STATE :: 21;
    COMMAND_LIST :: 22;
    FENCE :: 23;
    DESCRIPTOR_HEAP :: 24;
    HEAP :: 25;
    QUERY_HEAP :: 27;
    COMMAND_SIGNATURE :: 28;
    PIPELINE_LIBRARY :: 29;
    VIDEO_DECODER :: 30;
    VIDEO_PROCESSOR :: 32;
    RESOURCE :: 34;
    PASS :: 35;
    CRYPTOSESSION :: 36;
    CRYPTOSESSIONPOLICY :: 37;
    PROTECTEDRESOURCESESSION :: 38;
    VIDEO_DECODER_HEAP :: 39;
    COMMAND_POOL :: 40;
    COMMAND_RECORDER :: 41;
    STATE_OBJECT :: 42;
    METACOMMAND :: 43;
    SCHEDULINGGROUP :: 44;
    VIDEO_MOTION_ESTIMATOR :: 45;
    VIDEO_MOTION_VECTOR_HEAP :: 46;
    VIDEO_EXTENSION_COMMAND :: 47;
    VIDEO_ENCODER :: 48;
    VIDEO_ENCODER_HEAP :: 49;
    INVALID :: -1;
}

D3D12_DRED_ALLOCATION_TYPE_COMMAND_QUEUE :: 19;
D3D12_DRED_ALLOCATION_TYPE_COMMAND_ALLOCATOR :: 20;
D3D12_DRED_ALLOCATION_TYPE_PIPELINE_STATE :: 21;
D3D12_DRED_ALLOCATION_TYPE_COMMAND_LIST :: 22;
D3D12_DRED_ALLOCATION_TYPE_FENCE :: 23;
D3D12_DRED_ALLOCATION_TYPE_DESCRIPTOR_HEAP :: 24;
D3D12_DRED_ALLOCATION_TYPE_HEAP :: 25;
D3D12_DRED_ALLOCATION_TYPE_QUERY_HEAP :: 27;
D3D12_DRED_ALLOCATION_TYPE_COMMAND_SIGNATURE :: 28;
D3D12_DRED_ALLOCATION_TYPE_PIPELINE_LIBRARY :: 29;
D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER :: 30;
D3D12_DRED_ALLOCATION_TYPE_VIDEO_PROCESSOR :: 32;
D3D12_DRED_ALLOCATION_TYPE_RESOURCE :: 34;
D3D12_DRED_ALLOCATION_TYPE_PASS :: 35;
D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSION :: 36;
D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSIONPOLICY :: 37;
D3D12_DRED_ALLOCATION_TYPE_PROTECTEDRESOURCESESSION :: 38;
D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER_HEAP :: 39;
D3D12_DRED_ALLOCATION_TYPE_COMMAND_POOL :: 40;
D3D12_DRED_ALLOCATION_TYPE_COMMAND_RECORDER :: 41;
D3D12_DRED_ALLOCATION_TYPE_STATE_OBJECT :: 42;
D3D12_DRED_ALLOCATION_TYPE_METACOMMAND :: 43;
D3D12_DRED_ALLOCATION_TYPE_SCHEDULINGGROUP :: 44;
D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_ESTIMATOR :: 45;
D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_VECTOR_HEAP :: 46;
D3D12_DRED_ALLOCATION_TYPE_VIDEO_EXTENSION_COMMAND :: 47;
D3D12_DRED_ALLOCATION_TYPE_VIDEO_ENCODER :: 48;
D3D12_DRED_ALLOCATION_TYPE_VIDEO_ENCODER_HEAP :: 49;
D3D12_DRED_ALLOCATION_TYPE_INVALID :: -1;

D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT :: struct
{
    pHeadAutoBreadcrumbNode : *D3D12_AUTO_BREADCRUMB_NODE; // Const
}

D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 :: struct
{
    pHeadAutoBreadcrumbNode : *D3D12_AUTO_BREADCRUMB_NODE1; // Const
}

D3D12_DRED_BREADCRUMB_CONTEXT :: struct
{
    BreadcrumbIndex : u32;
    pContextString : PWSTR; // Const
}

D3D12_DRED_DEVICE_STATE :: enum s32
{
    UNKNOWN :: 0;
    HUNG :: 3;
    FAULT :: 6;
    PAGEFAULT :: 7;
}

D3D12_DRED_DEVICE_STATE_UNKNOWN :: 0;
D3D12_DRED_DEVICE_STATE_HUNG :: 3;
D3D12_DRED_DEVICE_STATE_FAULT :: 6;
D3D12_DRED_DEVICE_STATE_PAGEFAULT :: 7;

D3D12_DRED_ENABLEMENT :: enum s32
{
    SYSTEM_CONTROLLED :: 0;
    FORCED_OFF :: 1;
    FORCED_ON :: 2;
}

D3D12_DRED_ENABLEMENT_SYSTEM_CONTROLLED :: 0;
D3D12_DRED_ENABLEMENT_FORCED_OFF :: 1;
D3D12_DRED_ENABLEMENT_FORCED_ON :: 2;

D3D12_DRED_FLAGS :: enum_flags u32
{
    NONE :: 0;
    FORCE_ENABLE :: 1;
    DISABLE_AUTOBREADCRUMBS :: 2;
}

D3D12_DRED_FLAG_NONE :: 0;
D3D12_DRED_FLAG_FORCE_ENABLE :: 1;
D3D12_DRED_FLAG_DISABLE_AUTOBREADCRUMBS :: 2;

D3D12_DRED_PAGE_FAULT_FLAGS :: enum_flags u32
{
    NONE :: 0;
}

D3D12_DRED_PAGE_FAULT_FLAGS_NONE :: 0;

D3D12_DRED_PAGE_FAULT_OUTPUT :: struct
{
    PageFaultVA : u64;
    pHeadExistingAllocationNode : *D3D12_DRED_ALLOCATION_NODE; // Const
    pHeadRecentFreedAllocationNode : *D3D12_DRED_ALLOCATION_NODE; // Const
}

D3D12_DRED_PAGE_FAULT_OUTPUT1 :: struct
{
    PageFaultVA : u64;
    pHeadExistingAllocationNode : *D3D12_DRED_ALLOCATION_NODE1; // Const
    pHeadRecentFreedAllocationNode : *D3D12_DRED_ALLOCATION_NODE1; // Const
}

D3D12_DRED_PAGE_FAULT_OUTPUT2 :: struct
{
    PageFaultVA : u64;
    pHeadExistingAllocationNode : *D3D12_DRED_ALLOCATION_NODE1; // Const
    pHeadRecentFreedAllocationNode : *D3D12_DRED_ALLOCATION_NODE1; // Const
    PageFaultFlags : D3D12_DRED_PAGE_FAULT_FLAGS;
}

D3D12_DRED_VERSION :: enum s32
{
    _1_0 :: 1;
    _1_1 :: 2;
    _1_2 :: 3;
    _1_3 :: 4;
}

D3D12_DRED_VERSION_1_0 :: 1;
D3D12_DRED_VERSION_1_1 :: 2;
D3D12_DRED_VERSION_1_2 :: 3;
D3D12_DRED_VERSION_1_3 :: 4;

D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS :: enum s32
{
    D3D12_DRIVER_MATCHING_IDENTIFIER_COMPATIBLE_WITH_DEVICE :: 0;
    D3D12_DRIVER_MATCHING_IDENTIFIER_UNSUPPORTED_TYPE :: 1;
    D3D12_DRIVER_MATCHING_IDENTIFIER_UNRECOGNIZED :: 2;
    D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_VERSION :: 3;
    D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_TYPE :: 4;
}

D3D12_DRIVER_MATCHING_IDENTIFIER_COMPATIBLE_WITH_DEVICE :: 0;
D3D12_DRIVER_MATCHING_IDENTIFIER_UNSUPPORTED_TYPE :: 1;
D3D12_DRIVER_MATCHING_IDENTIFIER_UNRECOGNIZED :: 2;
D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_VERSION :: 3;
D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_TYPE :: 4;

D3D12_DSV_DIMENSION :: enum s32
{
    UNKNOWN :: 0;
    TEXTURE1D :: 1;
    TEXTURE1DARRAY :: 2;
    TEXTURE2D :: 3;
    TEXTURE2DARRAY :: 4;
    TEXTURE2DMS :: 5;
    TEXTURE2DMSARRAY :: 6;
}

D3D12_DSV_DIMENSION_UNKNOWN :: 0;
D3D12_DSV_DIMENSION_TEXTURE1D :: 1;
D3D12_DSV_DIMENSION_TEXTURE1DARRAY :: 2;
D3D12_DSV_DIMENSION_TEXTURE2D :: 3;
D3D12_DSV_DIMENSION_TEXTURE2DARRAY :: 4;
D3D12_DSV_DIMENSION_TEXTURE2DMS :: 5;
D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY :: 6;

D3D12_DSV_FLAGS :: enum_flags u32
{
    NONE :: 0;
    READ_ONLY_DEPTH :: 1;
    READ_ONLY_STENCIL :: 2;
}

D3D12_DSV_FLAG_NONE :: 0;
D3D12_DSV_FLAG_READ_ONLY_DEPTH :: 1;
D3D12_DSV_FLAG_READ_ONLY_STENCIL :: 2;

D3D12_DXIL_LIBRARY_DESC :: struct
{
    DXILLibrary : D3D12_SHADER_BYTECODE;
    NumExports : u32;
    pExports : *D3D12_EXPORT_DESC;
}

D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION :: struct
{
    SubobjectToAssociate : PWSTR; // Const
    NumExports : u32;
    pExports : *PWSTR;
}

D3D12_ELEMENTS_LAYOUT :: enum s32
{
    ARRAY :: 0;
    ARRAY_OF_POINTERS :: 1;
}

D3D12_ELEMENTS_LAYOUT_ARRAY :: 0;
D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS :: 1;

D3D12_EXISTING_COLLECTION_DESC :: struct
{
    pExistingCollection : *ID3D12StateObject;
    NumExports : u32;
    pExports : *D3D12_EXPORT_DESC;
}

D3D12_EXPORT_DESC :: struct
{
    Name : PWSTR; // Const
    ExportToRename : PWSTR; // Const
    Flags : D3D12_EXPORT_FLAGS;
}

D3D12_EXPORT_FLAGS :: enum_flags u32
{
    NONE :: 0;
}

D3D12_EXPORT_FLAG_NONE :: 0;

D3D12_FEATURE :: enum s32
{
    D3D12_OPTIONS :: 0;
    ARCHITECTURE :: 1;
    FEATURE_LEVELS :: 2;
    FORMAT_SUPPORT :: 3;
    MULTISAMPLE_QUALITY_LEVELS :: 4;
    FORMAT_INFO :: 5;
    GPU_VIRTUAL_ADDRESS_SUPPORT :: 6;
    SHADER_MODEL :: 7;
    D3D12_OPTIONS1 :: 8;
    PROTECTED_RESOURCE_SESSION_SUPPORT :: 10;
    ROOT_SIGNATURE :: 12;
    ARCHITECTURE1 :: 16;
    D3D12_OPTIONS2 :: 18;
    SHADER_CACHE :: 19;
    COMMAND_QUEUE_PRIORITY :: 20;
    D3D12_OPTIONS3 :: 21;
    EXISTING_HEAPS :: 22;
    D3D12_OPTIONS4 :: 23;
    SERIALIZATION :: 24;
    CROSS_NODE :: 25;
    D3D12_OPTIONS5 :: 27;
    DISPLAYABLE :: 28;
    D3D12_OPTIONS6 :: 30;
    QUERY_META_COMMAND :: 31;
    D3D12_OPTIONS7 :: 32;
    PROTECTED_RESOURCE_SESSION_TYPE_COUNT :: 33;
    PROTECTED_RESOURCE_SESSION_TYPES :: 34;
    D3D12_OPTIONS8 :: 36;
    D3D12_OPTIONS9 :: 37;
    D3D12_OPTIONS10 :: 39;
    D3D12_OPTIONS11 :: 40;
}

D3D12_FEATURE_D3D12_OPTIONS :: 0;
D3D12_FEATURE_ARCHITECTURE :: 1;
D3D12_FEATURE_FEATURE_LEVELS :: 2;
D3D12_FEATURE_FORMAT_SUPPORT :: 3;
D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS :: 4;
D3D12_FEATURE_FORMAT_INFO :: 5;
D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT :: 6;
D3D12_FEATURE_SHADER_MODEL :: 7;
D3D12_FEATURE_D3D12_OPTIONS1 :: 8;
D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_SUPPORT :: 10;
D3D12_FEATURE_ROOT_SIGNATURE :: 12;
D3D12_FEATURE_ARCHITECTURE1 :: 16;
D3D12_FEATURE_D3D12_OPTIONS2 :: 18;
D3D12_FEATURE_SHADER_CACHE :: 19;
D3D12_FEATURE_COMMAND_QUEUE_PRIORITY :: 20;
D3D12_FEATURE_D3D12_OPTIONS3 :: 21;
D3D12_FEATURE_EXISTING_HEAPS :: 22;
D3D12_FEATURE_D3D12_OPTIONS4 :: 23;
D3D12_FEATURE_SERIALIZATION :: 24;
D3D12_FEATURE_CROSS_NODE :: 25;
D3D12_FEATURE_D3D12_OPTIONS5 :: 27;
D3D12_FEATURE_DISPLAYABLE :: 28;
D3D12_FEATURE_D3D12_OPTIONS6 :: 30;
D3D12_FEATURE_QUERY_META_COMMAND :: 31;
D3D12_FEATURE_D3D12_OPTIONS7 :: 32;
D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPE_COUNT :: 33;
D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPES :: 34;
D3D12_FEATURE_D3D12_OPTIONS8 :: 36;
D3D12_FEATURE_D3D12_OPTIONS9 :: 37;
D3D12_FEATURE_D3D12_OPTIONS10 :: 39;
D3D12_FEATURE_D3D12_OPTIONS11 :: 40;

D3D12_FEATURE_DATA_ARCHITECTURE :: struct
{
    NodeIndex : u32;
    TileBasedRenderer : BOOL;
    UMA : BOOL;
    CacheCoherentUMA : BOOL;
}

D3D12_FEATURE_DATA_ARCHITECTURE1 :: struct
{
    NodeIndex : u32;
    TileBasedRenderer : BOOL;
    UMA : BOOL;
    CacheCoherentUMA : BOOL;
    IsolatedMMU : BOOL;
}

D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY :: struct
{
    CommandListType : D3D12_COMMAND_LIST_TYPE;
    Priority : u32;
    PriorityForTypeIsSupported : BOOL;
}

D3D12_FEATURE_DATA_CROSS_NODE :: struct
{
    SharingTier : D3D12_CROSS_NODE_SHARING_TIER;
    AtomicShaderInstructions : BOOL;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS :: struct
{
    DoublePrecisionFloatShaderOps : BOOL;
    OutputMergerLogicOp : BOOL;
    MinPrecisionSupport : D3D12_SHADER_MIN_PRECISION_SUPPORT;
    TiledResourcesTier : D3D12_TILED_RESOURCES_TIER;
    ResourceBindingTier : D3D12_RESOURCE_BINDING_TIER;
    PSSpecifiedStencilRefSupported : BOOL;
    TypedUAVLoadAdditionalFormats : BOOL;
    ROVsSupported : BOOL;
    ConservativeRasterizationTier : D3D12_CONSERVATIVE_RASTERIZATION_TIER;
    MaxGPUVirtualAddressBitsPerResource : u32;
    StandardSwizzle64KBSupported : BOOL;
    CrossNodeSharingTier : D3D12_CROSS_NODE_SHARING_TIER;
    CrossAdapterRowMajorTextureSupported : BOOL;
    VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation : BOOL;
    ResourceHeapTier : D3D12_RESOURCE_HEAP_TIER;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS1 :: struct
{
    WaveOps : BOOL;
    WaveLaneCountMin : u32;
    WaveLaneCountMax : u32;
    TotalLaneCount : u32;
    ExpandedComputeResourceStates : BOOL;
    Int64ShaderOps : BOOL;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS10 :: struct
{
    VariableRateShadingSumCombinerSupported : BOOL;
    MeshShaderPerPrimitiveShadingRateSupported : BOOL;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS11 :: struct
{
    AtomicInt64OnDescriptorHeapResourceSupported : BOOL;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS2 :: struct
{
    DepthBoundsTestSupported : BOOL;
    ProgrammableSamplePositionsTier : D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS3 :: struct
{
    CopyQueueTimestampQueriesSupported : BOOL;
    CastingFullyTypedFormatSupported : BOOL;
    WriteBufferImmediateSupportFlags : D3D12_COMMAND_LIST_SUPPORT_FLAGS;
    ViewInstancingTier : D3D12_VIEW_INSTANCING_TIER;
    BarycentricsSupported : BOOL;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS4 :: struct
{
    MSAA64KBAlignedTextureSupported : BOOL;
    SharedResourceCompatibilityTier : D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER;
    Native16BitShaderOpsSupported : BOOL;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS5 :: struct
{
    SRVOnlyTiledResourceTier3 : BOOL;
    RenderPassesTier : D3D12_RENDER_PASS_TIER;
    RaytracingTier : D3D12_RAYTRACING_TIER;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS6 :: struct
{
    AdditionalShadingRatesSupported : BOOL;
    PerPrimitiveShadingRateSupportedWithViewportIndexing : BOOL;
    VariableShadingRateTier : D3D12_VARIABLE_SHADING_RATE_TIER;
    ShadingRateImageTileSize : u32;
    BackgroundProcessingSupported : BOOL;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS7 :: struct
{
    MeshShaderTier : D3D12_MESH_SHADER_TIER;
    SamplerFeedbackTier : D3D12_SAMPLER_FEEDBACK_TIER;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS8 :: struct
{
    UnalignedBlockTexturesSupported : BOOL;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS9 :: struct
{
    MeshShaderPipelineStatsSupported : BOOL;
    MeshShaderSupportsFullRangeRenderTargetArrayIndex : BOOL;
    AtomicInt64OnTypedResourceSupported : BOOL;
    AtomicInt64OnGroupSharedSupported : BOOL;
    DerivativesInMeshAndAmplificationShadersSupported : BOOL;
    WaveMMATier : D3D12_WAVE_MMA_TIER;
}

D3D12_FEATURE_DATA_DISPLAYABLE :: struct
{
    DisplayableTexture : BOOL;
    SharedResourceCompatibilityTier : D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER;
}

D3D12_FEATURE_DATA_EXISTING_HEAPS :: struct
{
    Supported : BOOL;
}

D3D12_FEATURE_DATA_FEATURE_LEVELS :: struct
{
    NumFeatureLevels : u32;
    pFeatureLevelsRequested : *D3D_FEATURE_LEVEL; // Const
    MaxSupportedFeatureLevel : D3D_FEATURE_LEVEL;
}

D3D12_FEATURE_DATA_FORMAT_INFO :: struct
{
    Format : DXGI_FORMAT;
    PlaneCount : u8;
}

D3D12_FEATURE_DATA_FORMAT_SUPPORT :: struct
{
    Format : DXGI_FORMAT;
    Support1 : D3D12_FORMAT_SUPPORT1;
    Support2 : D3D12_FORMAT_SUPPORT2;
}

D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT :: struct
{
    MaxGPUVirtualAddressBitsPerResource : u32;
    MaxGPUVirtualAddressBitsPerProcess : u32;
}

D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS :: struct
{
    Format : DXGI_FORMAT;
    SampleCount : u32;
    Flags : D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS;
    NumQualityLevels : u32;
}

D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT :: struct
{
    NodeIndex : u32;
    Support : D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS;
}

D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES :: struct
{
    NodeIndex : u32;
    Count : u32;
    pTypes : *GUID;
}

D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT :: struct
{
    NodeIndex : u32;
    Count : u32;
}

D3D12_FEATURE_DATA_QUERY_META_COMMAND :: struct
{
    CommandId : GUID;
    NodeMask : u32;
    pQueryInputData : *void; // Const
    QueryInputDataSizeInBytes : u64;
    pQueryOutputData : *void;
    QueryOutputDataSizeInBytes : u64;
}

D3D12_FEATURE_DATA_ROOT_SIGNATURE :: struct
{
    HighestVersion : D3D_ROOT_SIGNATURE_VERSION;
}

D3D12_FEATURE_DATA_SERIALIZATION :: struct
{
    NodeIndex : u32;
    HeapSerializationTier : D3D12_HEAP_SERIALIZATION_TIER;
}

D3D12_FEATURE_DATA_SHADER_CACHE :: struct
{
    SupportFlags : D3D12_SHADER_CACHE_SUPPORT_FLAGS;
}

D3D12_FEATURE_DATA_SHADER_MODEL :: struct
{
    HighestShaderModel : D3D_SHADER_MODEL;
}

D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE :: struct
{
    IOCoherent : BOOL;
}

D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE :: struct
{
    VideoDecoderHeapDesc : D3D12_VIDEO_DECODER_HEAP_DESC;
    MemoryPoolL0Size : u64;
    MemoryPoolL1Size : u64;
}

D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1 :: struct
{
    VideoDecoderHeapDesc : D3D12_VIDEO_DECODER_HEAP_DESC;
    Protected : BOOL;
    MemoryPoolL0Size : u64;
    MemoryPoolL1Size : u64;
}

D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT :: struct
{
    NodeIndex : u32;
    Configuration : D3D12_VIDEO_DECODE_CONFIGURATION;
    DecodeSample : D3D12_VIDEO_SAMPLE;
    OutputFormat : D3D12_VIDEO_FORMAT;
    FrameRate : DXGI_RATIONAL;
    BitRate : u32;
    SupportFlags : D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS;
    ScaleSupport : D3D12_VIDEO_SCALE_SUPPORT;
}

D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS :: struct
{
    NodeIndex : u32;
    Configuration : D3D12_VIDEO_DECODE_CONFIGURATION;
    FormatCount : u32;
    pOutputFormats : *DXGI_FORMAT;
}

D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT :: struct
{
    NodeIndex : u32;
    Configuration : D3D12_VIDEO_DECODE_CONFIGURATION;
    FormatCount : u32;
}

D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM :: struct
{
    NodeIndex : u32;
    DecodeProfile : GUID;
    Width : u32;
    Height : u32;
    DecodeFormat : DXGI_FORMAT;
    Components : D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS;
    BinCount : u32;
    CounterBitDepth : u32;
}

D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES :: struct
{
    NodeIndex : u32;
    ProfileCount : u32;
    pProfiles : *GUID;
}

D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT :: struct
{
    NodeIndex : u32;
    ProfileCount : u32;
}

D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES :: struct
{
    NodeIndex : u32;
    Configuration : D3D12_VIDEO_DECODE_CONFIGURATION;
    SupportFlags : D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS;
}

D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT :: struct
{
    NodeIndex : u32;
    Configuration : D3D12_VIDEO_DECODE_CONFIGURATION;
    Width : u32;
    Height : u32;
    DecodeFormat : DXGI_FORMAT;
    FrameRate : DXGI_RATIONAL;
    BitRate : u32;
    SupportFlags : D3D12_VIDEO_DECODE_SUPPORT_FLAGS;
    ConfigurationFlags : D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS;
    DecodeTier : D3D12_VIDEO_DECODE_TIER;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC :: struct
{
    NodeIndex : u32;
    Codec : D3D12_VIDEO_ENCODER_CODEC;
    IsSupported : BOOL;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT :: struct
{
    NodeIndex : u32;
    Codec : D3D12_VIDEO_ENCODER_CODEC;
    Profile : D3D12_VIDEO_ENCODER_PROFILE_DESC;
    IsSupported : BOOL;
    CodecSupportLimits : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT :: struct
{
    NodeIndex : u32;
    Codec : D3D12_VIDEO_ENCODER_CODEC;
    Profile : D3D12_VIDEO_ENCODER_PROFILE_DESC;
    IsSupported : BOOL;
    PictureSupport : D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE :: struct
{
    NodeIndex : u32;
    Codec : D3D12_VIDEO_ENCODER_CODEC;
    Profile : D3D12_VIDEO_ENCODER_PROFILE_DESC;
    Level : D3D12_VIDEO_ENCODER_LEVEL_SETTING;
    SubregionMode : D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE;
    IsSupported : BOOL;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE :: struct
{
    HeapDesc : D3D12_VIDEO_ENCODER_HEAP_DESC;
    IsSupported : BOOL;
    MemoryPoolL0Size : u64;
    MemoryPoolL1Size : u64;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT :: struct
{
    NodeIndex : u32;
    Codec : D3D12_VIDEO_ENCODER_CODEC;
    Profile : D3D12_VIDEO_ENCODER_PROFILE_DESC;
    Format : DXGI_FORMAT;
    IsSupported : BOOL;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE :: struct
{
    NodeIndex : u32;
    Codec : D3D12_VIDEO_ENCODER_CODEC;
    Profile : D3D12_VIDEO_ENCODER_PROFILE_DESC;
    Level : D3D12_VIDEO_ENCODER_LEVEL_SETTING;
    IntraRefreshMode : D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE;
    IsSupported : BOOL;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION :: struct
{
    NodeIndex : u32;
    Codec : D3D12_VIDEO_ENCODER_CODEC;
    ResolutionRatiosCount : u32;
    IsSupported : BOOL;
    MinResolutionSupported : D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC;
    MaxResolutionSupported : D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC;
    ResolutionWidthMultipleRequirement : u32;
    ResolutionHeightMultipleRequirement : u32;
    pResolutionRatios : *D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT :: struct
{
    NodeIndex : u32;
    Codec : D3D12_VIDEO_ENCODER_CODEC;
    ResolutionRatiosCount : u32;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL :: struct
{
    NodeIndex : u32;
    Codec : D3D12_VIDEO_ENCODER_CODEC;
    Profile : D3D12_VIDEO_ENCODER_PROFILE_DESC;
    IsSupported : BOOL;
    MinSupportedLevel : D3D12_VIDEO_ENCODER_LEVEL_SETTING;
    MaxSupportedLevel : D3D12_VIDEO_ENCODER_LEVEL_SETTING;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE :: struct
{
    NodeIndex : u32;
    Codec : D3D12_VIDEO_ENCODER_CODEC;
    RateControlMode : D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE;
    IsSupported : BOOL;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS :: struct
{
    MaxSubregionsNumber : u32;
    MaxIntraRefreshFrameDuration : u32;
    SubregionBlockPixelsSize : u32;
    QPMapRegionPixelsSize : u32;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS :: struct
{
    NodeIndex : u32;
    Codec : D3D12_VIDEO_ENCODER_CODEC;
    Profile : D3D12_VIDEO_ENCODER_PROFILE_DESC;
    InputFormat : DXGI_FORMAT;
    PictureTargetResolution : D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC;
    IsSupported : BOOL;
    CompressedBitstreamBufferAccessAlignment : u32;
    EncoderMetadataBufferAccessAlignment : u32;
    MaxEncoderOutputMetadataBufferSize : u32;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT :: struct
{
    NodeIndex : u32;
    Codec : D3D12_VIDEO_ENCODER_CODEC;
    InputFormat : DXGI_FORMAT;
    CodecConfiguration : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION;
    CodecGopSequence : D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE;
    RateControl : D3D12_VIDEO_ENCODER_RATE_CONTROL;
    IntraRefresh : D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE;
    SubregionFrameEncoding : D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE;
    ResolutionsListCount : u32;
    pResolutionList : *D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC; // Const
    MaxReferenceFramesInDPB : u32;
    ValidationFlags : D3D12_VIDEO_ENCODER_VALIDATION_FLAGS;
    SupportFlags : D3D12_VIDEO_ENCODER_SUPPORT_FLAGS;
    SuggestedProfile : D3D12_VIDEO_ENCODER_PROFILE_DESC;
    SuggestedLevel : D3D12_VIDEO_ENCODER_LEVEL_SETTING;
    pResolutionDependentSupport : *D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS;
}

D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS :: struct
{
    NodeIndex : u32;
    CommandCount : u32;
    pCommandInfos : *D3D12_VIDEO_EXTENSION_COMMAND_INFO;
}

D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT :: struct
{
    NodeIndex : u32;
    CommandCount : u32;
}

D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS :: struct
{
    CommandId : GUID;
    Stage : D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE;
    ParameterCount : u32;
    pParameterInfos : *D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO;
}

D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT :: struct
{
    CommandId : GUID;
    Stage : D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE;
    ParameterCount : u32;
    ParameterPacking : u32;
}

D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE :: struct
{
    NodeIndex : u32;
    CommandId : GUID;
    pCreationParameters : *void; // Const
    CreationParametersSizeInBytes : u64;
    MemoryPoolL0Size : u64;
    MemoryPoolL1Size : u64;
}

D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT :: struct
{
    NodeIndex : u32;
    CommandId : GUID;
    pInputData : *void; // Const
    InputDataSizeInBytes : u64;
    pOutputData : *void;
    OutputDataSizeInBytes : u64;
}

D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT :: struct
{
    NodeIndex : u32;
    VideoDecodeSupport : BOOL;
    VideoProcessSupport : BOOL;
    VideoEncodeSupport : BOOL;
}

D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR :: struct
{
    NodeIndex : u32;
    InputFormat : DXGI_FORMAT;
    BlockSizeFlags : D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS;
    PrecisionFlags : D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS;
    SizeRange : D3D12_VIDEO_SIZE_RANGE;
}

D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES :: struct
{
    NodeIndex : u32;
    SupportFlags : D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS;
}

D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE :: struct
{
    NodeIndex : u32;
    InputFormat : DXGI_FORMAT;
    BlockSize : D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE;
    Precision : D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION;
    SizeRange : D3D12_VIDEO_SIZE_RANGE;
    Protected : BOOL;
    MotionVectorHeapMemoryPoolL0Size : u64;
    MotionVectorHeapMemoryPoolL1Size : u64;
    MotionEstimatorMemoryPoolL0Size : u64;
    MotionEstimatorMemoryPoolL1Size : u64;
}

D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE :: struct
{
    NodeMask : u32;
    pOutputStreamDesc : *D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC; // Const
    NumInputStreamDescs : u32;
    pInputStreamDescs : *D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC; // Const
    MemoryPoolL0Size : u64;
    MemoryPoolL1Size : u64;
}

D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1 :: struct
{
    NodeMask : u32;
    pOutputStreamDesc : *D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC; // Const
    NumInputStreamDescs : u32;
    pInputStreamDescs : *D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC; // Const
    Protected : BOOL;
    MemoryPoolL0Size : u64;
    MemoryPoolL1Size : u64;
}

D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS :: struct
{
    NodeIndex : u32;
    MaxInputStreams : u32;
}

D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES :: struct
{
    NodeIndex : u32;
    SupportFlags : D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS;
}

D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO :: struct
{
    NodeIndex : u32;
    DeinterlaceMode : D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS;
    Filters : D3D12_VIDEO_PROCESS_FILTER_FLAGS;
    FeatureSupport : D3D12_VIDEO_PROCESS_FEATURE_FLAGS;
    InputFrameRate : DXGI_RATIONAL;
    OutputFrameRate : DXGI_RATIONAL;
    EnableAutoProcessing : BOOL;
    PastFrames : u32;
    FutureFrames : u32;
}

D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT :: struct
{
    NodeIndex : u32;
    InputSample : D3D12_VIDEO_SAMPLE;
    InputFieldType : D3D12_VIDEO_FIELD_TYPE;
    InputStereoFormat : D3D12_VIDEO_FRAME_STEREO_FORMAT;
    InputFrameRate : DXGI_RATIONAL;
    OutputFormat : D3D12_VIDEO_FORMAT;
    OutputStereoFormat : D3D12_VIDEO_FRAME_STEREO_FORMAT;
    OutputFrameRate : DXGI_RATIONAL;
    SupportFlags : D3D12_VIDEO_PROCESS_SUPPORT_FLAGS;
    ScaleSupport : D3D12_VIDEO_SCALE_SUPPORT;
    FeatureSupport : D3D12_VIDEO_PROCESS_FEATURE_FLAGS;
    DeinterlaceSupport : D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS;
    AutoProcessingSupport : D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS;
    FilterSupport : D3D12_VIDEO_PROCESS_FILTER_FLAGS;
    FilterRangeSupport : [32]D3D12_VIDEO_PROCESS_FILTER_RANGE;
}

D3D12_FEATURE_VIDEO :: enum s32
{
    DECODE_SUPPORT :: 0;
    DECODE_PROFILES :: 1;
    DECODE_FORMATS :: 2;
    DECODE_CONVERSION_SUPPORT :: 3;
    PROCESS_SUPPORT :: 5;
    PROCESS_MAX_INPUT_STREAMS :: 6;
    PROCESS_REFERENCE_INFO :: 7;
    DECODER_HEAP_SIZE :: 8;
    PROCESSOR_SIZE :: 9;
    DECODE_PROFILE_COUNT :: 10;
    DECODE_FORMAT_COUNT :: 11;
    ARCHITECTURE :: 17;
    DECODE_HISTOGRAM :: 18;
    FEATURE_AREA_SUPPORT :: 19;
    MOTION_ESTIMATOR :: 20;
    MOTION_ESTIMATOR_SIZE :: 21;
    EXTENSION_COMMAND_COUNT :: 22;
    EXTENSION_COMMANDS :: 23;
    EXTENSION_COMMAND_PARAMETER_COUNT :: 24;
    EXTENSION_COMMAND_PARAMETERS :: 25;
    EXTENSION_COMMAND_SUPPORT :: 26;
    EXTENSION_COMMAND_SIZE :: 27;
    DECODE_PROTECTED_RESOURCES :: 28;
    PROCESS_PROTECTED_RESOURCES :: 29;
    MOTION_ESTIMATOR_PROTECTED_RESOURCES :: 30;
    DECODER_HEAP_SIZE1 :: 31;
    PROCESSOR_SIZE1 :: 32;
}

D3D12_FEATURE_VIDEO_DECODE_SUPPORT :: 0;
D3D12_FEATURE_VIDEO_DECODE_PROFILES :: 1;
D3D12_FEATURE_VIDEO_DECODE_FORMATS :: 2;
D3D12_FEATURE_VIDEO_DECODE_CONVERSION_SUPPORT :: 3;
D3D12_FEATURE_VIDEO_PROCESS_SUPPORT :: 5;
D3D12_FEATURE_VIDEO_PROCESS_MAX_INPUT_STREAMS :: 6;
D3D12_FEATURE_VIDEO_PROCESS_REFERENCE_INFO :: 7;
D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE :: 8;
D3D12_FEATURE_VIDEO_PROCESSOR_SIZE :: 9;
D3D12_FEATURE_VIDEO_DECODE_PROFILE_COUNT :: 10;
D3D12_FEATURE_VIDEO_DECODE_FORMAT_COUNT :: 11;
D3D12_FEATURE_VIDEO_ARCHITECTURE :: 17;
D3D12_FEATURE_VIDEO_DECODE_HISTOGRAM :: 18;
D3D12_FEATURE_VIDEO_FEATURE_AREA_SUPPORT :: 19;
D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR :: 20;
D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_SIZE :: 21;
D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_COUNT :: 22;
D3D12_FEATURE_VIDEO_EXTENSION_COMMANDS :: 23;
D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT :: 24;
D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETERS :: 25;
D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SUPPORT :: 26;
D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SIZE :: 27;
D3D12_FEATURE_VIDEO_DECODE_PROTECTED_RESOURCES :: 28;
D3D12_FEATURE_VIDEO_PROCESS_PROTECTED_RESOURCES :: 29;
D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES :: 30;
D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE1 :: 31;
D3D12_FEATURE_VIDEO_PROCESSOR_SIZE1 :: 32;

D3D12_FENCE_FLAGS :: enum_flags u32
{
    NONE :: 0;
    SHARED :: 1;
    SHARED_CROSS_ADAPTER :: 2;
    NON_MONITORED :: 4;
}

D3D12_FENCE_FLAG_NONE :: 0;
D3D12_FENCE_FLAG_SHARED :: 1;
D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER :: 2;
D3D12_FENCE_FLAG_NON_MONITORED :: 4;

D3D12_FILL_MODE :: enum s32
{
    WIREFRAME :: 2;
    SOLID :: 3;
}

D3D12_FILL_MODE_WIREFRAME :: 2;
D3D12_FILL_MODE_SOLID :: 3;

D3D12_FILTER :: enum s32
{
    MIN_MAG_MIP_POINT :: 0;
    MIN_MAG_POINT_MIP_LINEAR :: 1;
    MIN_POINT_MAG_LINEAR_MIP_POINT :: 4;
    MIN_POINT_MAG_MIP_LINEAR :: 5;
    MIN_LINEAR_MAG_MIP_POINT :: 16;
    MIN_LINEAR_MAG_POINT_MIP_LINEAR :: 17;
    MIN_MAG_LINEAR_MIP_POINT :: 20;
    MIN_MAG_MIP_LINEAR :: 21;
    ANISOTROPIC :: 85;
    COMPARISON_MIN_MAG_MIP_POINT :: 128;
    COMPARISON_MIN_MAG_POINT_MIP_LINEAR :: 129;
    COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT :: 132;
    COMPARISON_MIN_POINT_MAG_MIP_LINEAR :: 133;
    COMPARISON_MIN_LINEAR_MAG_MIP_POINT :: 144;
    COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR :: 145;
    COMPARISON_MIN_MAG_LINEAR_MIP_POINT :: 148;
    COMPARISON_MIN_MAG_MIP_LINEAR :: 149;
    COMPARISON_ANISOTROPIC :: 213;
    MINIMUM_MIN_MAG_MIP_POINT :: 256;
    MINIMUM_MIN_MAG_POINT_MIP_LINEAR :: 257;
    MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT :: 260;
    MINIMUM_MIN_POINT_MAG_MIP_LINEAR :: 261;
    MINIMUM_MIN_LINEAR_MAG_MIP_POINT :: 272;
    MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR :: 273;
    MINIMUM_MIN_MAG_LINEAR_MIP_POINT :: 276;
    MINIMUM_MIN_MAG_MIP_LINEAR :: 277;
    MINIMUM_ANISOTROPIC :: 341;
    MAXIMUM_MIN_MAG_MIP_POINT :: 384;
    MAXIMUM_MIN_MAG_POINT_MIP_LINEAR :: 385;
    MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT :: 388;
    MAXIMUM_MIN_POINT_MAG_MIP_LINEAR :: 389;
    MAXIMUM_MIN_LINEAR_MAG_MIP_POINT :: 400;
    MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR :: 401;
    MAXIMUM_MIN_MAG_LINEAR_MIP_POINT :: 404;
    MAXIMUM_MIN_MAG_MIP_LINEAR :: 405;
    MAXIMUM_ANISOTROPIC :: 469;
}

D3D12_FILTER_MIN_MAG_MIP_POINT :: 0;
D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR :: 1;
D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT :: 4;
D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR :: 5;
D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT :: 16;
D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR :: 17;
D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT :: 20;
D3D12_FILTER_MIN_MAG_MIP_LINEAR :: 21;
D3D12_FILTER_ANISOTROPIC :: 85;
D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT :: 128;
D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR :: 129;
D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT :: 132;
D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR :: 133;
D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT :: 144;
D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR :: 145;
D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT :: 148;
D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR :: 149;
D3D12_FILTER_COMPARISON_ANISOTROPIC :: 213;
D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT :: 256;
D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR :: 257;
D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT :: 260;
D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR :: 261;
D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT :: 272;
D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR :: 273;
D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT :: 276;
D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR :: 277;
D3D12_FILTER_MINIMUM_ANISOTROPIC :: 341;
D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT :: 384;
D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR :: 385;
D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT :: 388;
D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR :: 389;
D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT :: 400;
D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR :: 401;
D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT :: 404;
D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR :: 405;
D3D12_FILTER_MAXIMUM_ANISOTROPIC :: 469;

D3D12_FILTER_REDUCTION_TYPE :: enum s32
{
    STANDARD :: 0;
    COMPARISON :: 1;
    MINIMUM :: 2;
    MAXIMUM :: 3;
}

D3D12_FILTER_REDUCTION_TYPE_STANDARD :: 0;
D3D12_FILTER_REDUCTION_TYPE_COMPARISON :: 1;
D3D12_FILTER_REDUCTION_TYPE_MINIMUM :: 2;
D3D12_FILTER_REDUCTION_TYPE_MAXIMUM :: 3;

D3D12_FILTER_TYPE :: enum s32
{
    POINT :: 0;
    LINEAR :: 1;
}

D3D12_FILTER_TYPE_POINT :: 0;
D3D12_FILTER_TYPE_LINEAR :: 1;

D3D12_FORMAT_SUPPORT1 :: enum_flags u32
{
    NONE :: 0;
    BUFFER :: 1;
    IA_VERTEX_BUFFER :: 2;
    IA_INDEX_BUFFER :: 4;
    SO_BUFFER :: 8;
    TEXTURE1D :: 16;
    TEXTURE2D :: 32;
    TEXTURE3D :: 64;
    TEXTURECUBE :: 128;
    SHADER_LOAD :: 256;
    SHADER_SAMPLE :: 512;
    SHADER_SAMPLE_COMPARISON :: 1024;
    SHADER_SAMPLE_MONO_TEXT :: 2048;
    MIP :: 4096;
    RENDER_TARGET :: 16384;
    BLENDABLE :: 32768;
    DEPTH_STENCIL :: 65536;
    MULTISAMPLE_RESOLVE :: 262144;
    DISPLAY :: 524288;
    CAST_WITHIN_BIT_LAYOUT :: 1048576;
    MULTISAMPLE_RENDERTARGET :: 2097152;
    MULTISAMPLE_LOAD :: 4194304;
    SHADER_GATHER :: 8388608;
    BACK_BUFFER_CAST :: 16777216;
    TYPED_UNORDERED_ACCESS_VIEW :: 33554432;
    SHADER_GATHER_COMPARISON :: 67108864;
    DECODER_OUTPUT :: 134217728;
    VIDEO_PROCESSOR_OUTPUT :: 268435456;
    VIDEO_PROCESSOR_INPUT :: 536870912;
    VIDEO_ENCODER :: 1073741824;
}

D3D12_FORMAT_SUPPORT1_NONE :: 0;
D3D12_FORMAT_SUPPORT1_BUFFER :: 1;
D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER :: 2;
D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER :: 4;
D3D12_FORMAT_SUPPORT1_SO_BUFFER :: 8;
D3D12_FORMAT_SUPPORT1_TEXTURE1D :: 16;
D3D12_FORMAT_SUPPORT1_TEXTURE2D :: 32;
D3D12_FORMAT_SUPPORT1_TEXTURE3D :: 64;
D3D12_FORMAT_SUPPORT1_TEXTURECUBE :: 128;
D3D12_FORMAT_SUPPORT1_SHADER_LOAD :: 256;
D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE :: 512;
D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON :: 1024;
D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT :: 2048;
D3D12_FORMAT_SUPPORT1_MIP :: 4096;
D3D12_FORMAT_SUPPORT1_RENDER_TARGET :: 16384;
D3D12_FORMAT_SUPPORT1_BLENDABLE :: 32768;
D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL :: 65536;
D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE :: 262144;
D3D12_FORMAT_SUPPORT1_DISPLAY :: 524288;
D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT :: 1048576;
D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET :: 2097152;
D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD :: 4194304;
D3D12_FORMAT_SUPPORT1_SHADER_GATHER :: 8388608;
D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST :: 16777216;
D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW :: 33554432;
D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON :: 67108864;
D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT :: 134217728;
D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT :: 268435456;
D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT :: 536870912;
D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER :: 1073741824;

D3D12_FORMAT_SUPPORT2 :: enum_flags u32
{
    NONE :: 0;
    UAV_ATOMIC_ADD :: 1;
    UAV_ATOMIC_BITWISE_OPS :: 2;
    UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE :: 4;
    UAV_ATOMIC_EXCHANGE :: 8;
    UAV_ATOMIC_SIGNED_MIN_OR_MAX :: 16;
    UAV_ATOMIC_UNSIGNED_MIN_OR_MAX :: 32;
    UAV_TYPED_LOAD :: 64;
    UAV_TYPED_STORE :: 128;
    OUTPUT_MERGER_LOGIC_OP :: 256;
    TILED :: 512;
    MULTIPLANE_OVERLAY :: 16384;
    SAMPLER_FEEDBACK :: 32768;
}

D3D12_FORMAT_SUPPORT2_NONE :: 0;
D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD :: 1;
D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS :: 2;
D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE :: 4;
D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE :: 8;
D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX :: 16;
D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX :: 32;
D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD :: 64;
D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE :: 128;
D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP :: 256;
D3D12_FORMAT_SUPPORT2_TILED :: 512;
D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY :: 16384;
D3D12_FORMAT_SUPPORT2_SAMPLER_FEEDBACK :: 32768;

D3D12_FUNCTION_DESC :: struct
{
    Version : u32;
    Creator : PSTR; // Const
    Flags : u32;
    ConstantBuffers : u32;
    BoundResources : u32;
    InstructionCount : u32;
    TempRegisterCount : u32;
    TempArrayCount : u32;
    DefCount : u32;
    DclCount : u32;
    TextureNormalInstructions : u32;
    TextureLoadInstructions : u32;
    TextureCompInstructions : u32;
    TextureBiasInstructions : u32;
    TextureGradientInstructions : u32;
    FloatInstructionCount : u32;
    IntInstructionCount : u32;
    UintInstructionCount : u32;
    StaticFlowControlCount : u32;
    DynamicFlowControlCount : u32;
    MacroInstructionCount : u32;
    ArrayInstructionCount : u32;
    MovInstructionCount : u32;
    MovcInstructionCount : u32;
    ConversionInstructionCount : u32;
    BitwiseInstructionCount : u32;
    MinFeatureLevel : D3D_FEATURE_LEVEL;
    RequiredFeatureFlags : u64;
    Name : PSTR; // Const
    FunctionParameterCount : s32;
    HasReturn : BOOL;
    Has10Level9VertexShader : BOOL;
    Has10Level9PixelShader : BOOL;
}

D3D12_GLOBAL_ROOT_SIGNATURE :: struct
{
    pGlobalRootSignature : *ID3D12RootSignature;
}

D3D12_GPU_BASED_VALIDATION_FLAGS :: enum s32
{
    NONE :: 0;
    DISABLE_STATE_TRACKING :: 1;
}

D3D12_GPU_BASED_VALIDATION_FLAGS_NONE :: 0;
D3D12_GPU_BASED_VALIDATION_FLAGS_DISABLE_STATE_TRACKING :: 1;

D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS :: enum s32
{
    NONE :: 0;
    FRONT_LOAD_CREATE_TRACKING_ONLY_SHADERS :: 1;
    FRONT_LOAD_CREATE_UNGUARDED_VALIDATION_SHADERS :: 2;
    FRONT_LOAD_CREATE_GUARDED_VALIDATION_SHADERS :: 4;
    VALID_MASK :: 7;
}

D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_NONE :: 0;
D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_TRACKING_ONLY_SHADERS :: 1;
D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_UNGUARDED_VALIDATION_SHADERS :: 2;
D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_GUARDED_VALIDATION_SHADERS :: 4;
D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS_VALID_MASK :: 7;

D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE :: enum s32
{
    NONE :: 0;
    STATE_TRACKING_ONLY :: 1;
    UNGUARDED_VALIDATION :: 2;
    GUARDED_VALIDATION :: 3;
    NUM_D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODES :: 4;
}

D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_NONE :: 0;
D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_STATE_TRACKING_ONLY :: 1;
D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_UNGUARDED_VALIDATION :: 2;
D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_GUARDED_VALIDATION :: 3;
NUM_D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODES :: 4;

D3D12_GPU_DESCRIPTOR_HANDLE :: struct
{
    ptr : u64;
}

D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE :: struct
{
    StartAddress : u64;
    StrideInBytes : u64;
}

D3D12_GPU_VIRTUAL_ADDRESS_RANGE :: struct
{
    StartAddress : u64;
    SizeInBytes : u64;
}

D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE :: struct
{
    StartAddress : u64;
    SizeInBytes : u64;
    StrideInBytes : u64;
}

D3D12_GRAPHICS_PIPELINE_STATE_DESC :: struct
{
    pRootSignature : *ID3D12RootSignature;
    VS : D3D12_SHADER_BYTECODE;
    PS : D3D12_SHADER_BYTECODE;
    DS : D3D12_SHADER_BYTECODE;
    HS : D3D12_SHADER_BYTECODE;
    GS : D3D12_SHADER_BYTECODE;
    StreamOutput : D3D12_STREAM_OUTPUT_DESC;
    BlendState : D3D12_BLEND_DESC;
    SampleMask : u32;
    RasterizerState : D3D12_RASTERIZER_DESC;
    DepthStencilState : D3D12_DEPTH_STENCIL_DESC;
    InputLayout : D3D12_INPUT_LAYOUT_DESC;
    IBStripCutValue : D3D12_INDEX_BUFFER_STRIP_CUT_VALUE;
    PrimitiveTopologyType : D3D12_PRIMITIVE_TOPOLOGY_TYPE;
    NumRenderTargets : u32;
    RTVFormats : [8]DXGI_FORMAT;
    DSVFormat : DXGI_FORMAT;
    SampleDesc : DXGI_SAMPLE_DESC;
    NodeMask : u32;
    CachedPSO : D3D12_CACHED_PIPELINE_STATE;
    Flags : D3D12_PIPELINE_STATE_FLAGS;
}

D3D12_GRAPHICS_STATES :: enum_flags u32
{
    NONE :: 0;
    IA_VERTEX_BUFFERS :: 1;
    IA_INDEX_BUFFER :: 2;
    IA_PRIMITIVE_TOPOLOGY :: 4;
    DESCRIPTOR_HEAP :: 8;
    GRAPHICS_ROOT_SIGNATURE :: 16;
    COMPUTE_ROOT_SIGNATURE :: 32;
    RS_VIEWPORTS :: 64;
    RS_SCISSOR_RECTS :: 128;
    PREDICATION :: 256;
    OM_RENDER_TARGETS :: 512;
    OM_STENCIL_REF :: 1024;
    OM_BLEND_FACTOR :: 2048;
    PIPELINE_STATE :: 4096;
    SO_TARGETS :: 8192;
    OM_DEPTH_BOUNDS :: 16384;
    SAMPLE_POSITIONS :: 32768;
    VIEW_INSTANCE_MASK :: 65536;
}

D3D12_GRAPHICS_STATE_NONE :: 0;
D3D12_GRAPHICS_STATE_IA_VERTEX_BUFFERS :: 1;
D3D12_GRAPHICS_STATE_IA_INDEX_BUFFER :: 2;
D3D12_GRAPHICS_STATE_IA_PRIMITIVE_TOPOLOGY :: 4;
D3D12_GRAPHICS_STATE_DESCRIPTOR_HEAP :: 8;
D3D12_GRAPHICS_STATE_GRAPHICS_ROOT_SIGNATURE :: 16;
D3D12_GRAPHICS_STATE_COMPUTE_ROOT_SIGNATURE :: 32;
D3D12_GRAPHICS_STATE_RS_VIEWPORTS :: 64;
D3D12_GRAPHICS_STATE_RS_SCISSOR_RECTS :: 128;
D3D12_GRAPHICS_STATE_PREDICATION :: 256;
D3D12_GRAPHICS_STATE_OM_RENDER_TARGETS :: 512;
D3D12_GRAPHICS_STATE_OM_STENCIL_REF :: 1024;
D3D12_GRAPHICS_STATE_OM_BLEND_FACTOR :: 2048;
D3D12_GRAPHICS_STATE_PIPELINE_STATE :: 4096;
D3D12_GRAPHICS_STATE_SO_TARGETS :: 8192;
D3D12_GRAPHICS_STATE_OM_DEPTH_BOUNDS :: 16384;
D3D12_GRAPHICS_STATE_SAMPLE_POSITIONS :: 32768;
D3D12_GRAPHICS_STATE_VIEW_INSTANCE_MASK :: 65536;

D3D12_HEAP_DESC :: struct
{
    SizeInBytes : u64;
    Properties : D3D12_HEAP_PROPERTIES;
    Alignment : u64;
    Flags : D3D12_HEAP_FLAGS;
}

D3D12_HEAP_FLAGS :: enum_flags u32
{
    NONE :: 0;
    SHARED :: 1;
    DENY_BUFFERS :: 4;
    ALLOW_DISPLAY :: 8;
    SHARED_CROSS_ADAPTER :: 32;
    DENY_RT_DS_TEXTURES :: 64;
    DENY_NON_RT_DS_TEXTURES :: 128;
    HARDWARE_PROTECTED :: 256;
    ALLOW_WRITE_WATCH :: 512;
    ALLOW_SHADER_ATOMICS :: 1024;
    CREATE_NOT_RESIDENT :: 2048;
    CREATE_NOT_ZEROED :: 4096;
    ALLOW_ALL_BUFFERS_AND_TEXTURES :: 0;
    ALLOW_ONLY_BUFFERS :: 192;
    ALLOW_ONLY_NON_RT_DS_TEXTURES :: 68;
    ALLOW_ONLY_RT_DS_TEXTURES :: 132;
}

D3D12_HEAP_FLAG_NONE :: 0;
D3D12_HEAP_FLAG_SHARED :: 1;
D3D12_HEAP_FLAG_DENY_BUFFERS :: 4;
D3D12_HEAP_FLAG_ALLOW_DISPLAY :: 8;
D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER :: 32;
D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES :: 64;
D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES :: 128;
D3D12_HEAP_FLAG_HARDWARE_PROTECTED :: 256;
D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH :: 512;
D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS :: 1024;
D3D12_HEAP_FLAG_CREATE_NOT_RESIDENT :: 2048;
D3D12_HEAP_FLAG_CREATE_NOT_ZEROED :: 4096;
D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES :: 0;
D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS :: 192;
D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES :: 68;
D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES :: 132;

D3D12_HEAP_PROPERTIES :: struct
{
    _Type : D3D12_HEAP_TYPE;
    CPUPageProperty : D3D12_CPU_PAGE_PROPERTY;
    MemoryPoolPreference : D3D12_MEMORY_POOL;
    CreationNodeMask : u32;
    VisibleNodeMask : u32;
}

D3D12_HEAP_SERIALIZATION_TIER :: enum s32
{
    _0 :: 0;
    _10 :: 10;
}

D3D12_HEAP_SERIALIZATION_TIER_0 :: 0;
D3D12_HEAP_SERIALIZATION_TIER_10 :: 10;

D3D12_HEAP_TYPE :: enum s32
{
    DEFAULT :: 1;
    UPLOAD :: 2;
    READBACK :: 3;
    CUSTOM :: 4;
}

D3D12_HEAP_TYPE_DEFAULT :: 1;
D3D12_HEAP_TYPE_UPLOAD :: 2;
D3D12_HEAP_TYPE_READBACK :: 3;
D3D12_HEAP_TYPE_CUSTOM :: 4;

D3D12_HIT_GROUP_DESC :: struct
{
    HitGroupExport : PWSTR; // Const
    _Type : D3D12_HIT_GROUP_TYPE;
    AnyHitShaderImport : PWSTR; // Const
    ClosestHitShaderImport : PWSTR; // Const
    IntersectionShaderImport : PWSTR; // Const
}

D3D12_HIT_GROUP_TYPE :: enum s32
{
    TRIANGLES :: 0;
    PROCEDURAL_PRIMITIVE :: 1;
}

D3D12_HIT_GROUP_TYPE_TRIANGLES :: 0;
D3D12_HIT_GROUP_TYPE_PROCEDURAL_PRIMITIVE :: 1;

D3D12_HIT_KIND :: enum s32
{
    TRIANGLE_FRONT_FACE :: 254;
    TRIANGLE_BACK_FACE :: 255;
}

D3D12_HIT_KIND_TRIANGLE_FRONT_FACE :: 254;
D3D12_HIT_KIND_TRIANGLE_BACK_FACE :: 255;

D3D12_INDEX_BUFFER_STRIP_CUT_VALUE :: enum s32
{
    DISABLED :: 0;
    _0xFFFF :: 1;
    _0xFFFFFFFF :: 2;
}

D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED :: 0;
D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF :: 1;
D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF :: 2;

D3D12_INDEX_BUFFER_VIEW :: struct
{
    BufferLocation : u64;
    SizeInBytes : u32;
    Format : DXGI_FORMAT;
}

D3D12_INDIRECT_ARGUMENT_DESC :: struct
{
    _Type : D3D12_INDIRECT_ARGUMENT_TYPE;
    union
    {
        VertexBuffer : _VertexBuffer_e__Struct;
        Constant : _Constant_e__Struct;
        ConstantBufferView : _ConstantBufferView_e__Struct;
        ShaderResourceView : _ShaderResourceView_e__Struct;
        UnorderedAccessView : _UnorderedAccessView_e__Struct;

        _ShaderResourceView_e__Struct :: struct
        {
            RootParameterIndex : u32;
        }

        _Constant_e__Struct :: struct
        {
            RootParameterIndex : u32;
            DestOffsetIn32BitValues : u32;
            Num32BitValuesToSet : u32;
        }

        _UnorderedAccessView_e__Struct :: struct
        {
            RootParameterIndex : u32;
        }

        _VertexBuffer_e__Struct :: struct
        {
            Slot : u32;
        }

        _ConstantBufferView_e__Struct :: struct
        {
            RootParameterIndex : u32;
        }
    }; // Anonymous
}

D3D12_INDIRECT_ARGUMENT_TYPE :: enum s32
{
    DRAW :: 0;
    DRAW_INDEXED :: 1;
    DISPATCH :: 2;
    VERTEX_BUFFER_VIEW :: 3;
    INDEX_BUFFER_VIEW :: 4;
    CONSTANT :: 5;
    CONSTANT_BUFFER_VIEW :: 6;
    SHADER_RESOURCE_VIEW :: 7;
    UNORDERED_ACCESS_VIEW :: 8;
    DISPATCH_RAYS :: 9;
    DISPATCH_MESH :: 10;
}

D3D12_INDIRECT_ARGUMENT_TYPE_DRAW :: 0;
D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED :: 1;
D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH :: 2;
D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW :: 3;
D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW :: 4;
D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT :: 5;
D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW :: 6;
D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW :: 7;
D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW :: 8;
D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_RAYS :: 9;
D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_MESH :: 10;

D3D12_INFO_QUEUE_FILTER :: struct
{
    AllowList : D3D12_INFO_QUEUE_FILTER_DESC;
    DenyList : D3D12_INFO_QUEUE_FILTER_DESC;
}

D3D12_INFO_QUEUE_FILTER_DESC :: struct
{
    NumCategories : u32;
    pCategoryList : *D3D12_MESSAGE_CATEGORY;
    NumSeverities : u32;
    pSeverityList : *D3D12_MESSAGE_SEVERITY;
    NumIDs : u32;
    pIDList : *D3D12_MESSAGE_ID;
}

D3D12_INPUT_CLASSIFICATION :: enum s32
{
    PER_VERTEX_DATA :: 0;
    PER_INSTANCE_DATA :: 1;
}

D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA :: 0;
D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA :: 1;

D3D12_INPUT_ELEMENT_DESC :: struct
{
    SemanticName : PSTR; // Const
    SemanticIndex : u32;
    Format : DXGI_FORMAT;
    InputSlot : u32;
    AlignedByteOffset : u32;
    InputSlotClass : D3D12_INPUT_CLASSIFICATION;
    InstanceDataStepRate : u32;
}

D3D12_INPUT_LAYOUT_DESC :: struct
{
    pInputElementDescs : *D3D12_INPUT_ELEMENT_DESC; // Const
    NumElements : u32;
}

D3D12_LIBRARY_DESC :: struct
{
    Creator : PSTR; // Const
    Flags : u32;
    FunctionCount : u32;
}

D3D12_LIFETIME_STATE :: enum s32
{
    IN_USE :: 0;
    NOT_IN_USE :: 1;
}

D3D12_LIFETIME_STATE_IN_USE :: 0;
D3D12_LIFETIME_STATE_NOT_IN_USE :: 1;

D3D12_LOCAL_ROOT_SIGNATURE :: struct
{
    pLocalRootSignature : *ID3D12RootSignature;
}

D3D12_LOGIC_OP :: enum s32
{
    CLEAR :: 0;
    SET :: 1;
    COPY :: 2;
    COPY_INVERTED :: 3;
    NOOP :: 4;
    INVERT :: 5;
    AND :: 6;
    NAND :: 7;
    OR :: 8;
    NOR :: 9;
    XOR :: 10;
    EQUIV :: 11;
    AND_REVERSE :: 12;
    AND_INVERTED :: 13;
    OR_REVERSE :: 14;
    OR_INVERTED :: 15;
}

D3D12_LOGIC_OP_CLEAR :: 0;
D3D12_LOGIC_OP_SET :: 1;
D3D12_LOGIC_OP_COPY :: 2;
D3D12_LOGIC_OP_COPY_INVERTED :: 3;
D3D12_LOGIC_OP_NOOP :: 4;
D3D12_LOGIC_OP_INVERT :: 5;
D3D12_LOGIC_OP_AND :: 6;
D3D12_LOGIC_OP_NAND :: 7;
D3D12_LOGIC_OP_OR :: 8;
D3D12_LOGIC_OP_NOR :: 9;
D3D12_LOGIC_OP_XOR :: 10;
D3D12_LOGIC_OP_EQUIV :: 11;
D3D12_LOGIC_OP_AND_REVERSE :: 12;
D3D12_LOGIC_OP_AND_INVERTED :: 13;
D3D12_LOGIC_OP_OR_REVERSE :: 14;
D3D12_LOGIC_OP_OR_INVERTED :: 15;

D3D12_MEASUREMENTS_ACTION :: enum s32
{
    KEEP_ALL :: 0;
    COMMIT_RESULTS :: 1;
    COMMIT_RESULTS_HIGH_PRIORITY :: 2;
    DISCARD_PREVIOUS :: 3;
}

D3D12_MEASUREMENTS_ACTION_KEEP_ALL :: 0;
D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS :: 1;
D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS_HIGH_PRIORITY :: 2;
D3D12_MEASUREMENTS_ACTION_DISCARD_PREVIOUS :: 3;

D3D12_MEMCPY_DEST :: struct
{
    pData : *void;
    RowPitch : u64;
    SlicePitch : u64;
}

D3D12_MEMORY_POOL :: enum s32
{
    UNKNOWN :: 0;
    L0 :: 1;
    L1 :: 2;
}

D3D12_MEMORY_POOL_UNKNOWN :: 0;
D3D12_MEMORY_POOL_L0 :: 1;
D3D12_MEMORY_POOL_L1 :: 2;

D3D12_MESH_SHADER_TIER :: enum s32
{
    NOT_SUPPORTED :: 0;
    _1 :: 10;
}

D3D12_MESH_SHADER_TIER_NOT_SUPPORTED :: 0;
D3D12_MESH_SHADER_TIER_1 :: 10;

D3D12_MESSAGE :: struct
{
    Category : D3D12_MESSAGE_CATEGORY;
    Severity : D3D12_MESSAGE_SEVERITY;
    ID : D3D12_MESSAGE_ID;
    pDescription : *u8; // Const
    DescriptionByteLength : u64;
}

D3D12_MESSAGE_CALLBACK_FLAGS :: enum s32
{
    NONE :: 0;
    IGNORE_FILTERS :: 1;
}

D3D12_MESSAGE_CALLBACK_FLAG_NONE :: 0;
D3D12_MESSAGE_CALLBACK_IGNORE_FILTERS :: 1;

D3D12_MESSAGE_CATEGORY :: enum s32
{
    APPLICATION_DEFINED :: 0;
    MISCELLANEOUS :: 1;
    INITIALIZATION :: 2;
    CLEANUP :: 3;
    COMPILATION :: 4;
    STATE_CREATION :: 5;
    STATE_SETTING :: 6;
    STATE_GETTING :: 7;
    RESOURCE_MANIPULATION :: 8;
    EXECUTION :: 9;
    SHADER :: 10;
}

D3D12_MESSAGE_CATEGORY_APPLICATION_DEFINED :: 0;
D3D12_MESSAGE_CATEGORY_MISCELLANEOUS :: 1;
D3D12_MESSAGE_CATEGORY_INITIALIZATION :: 2;
D3D12_MESSAGE_CATEGORY_CLEANUP :: 3;
D3D12_MESSAGE_CATEGORY_COMPILATION :: 4;
D3D12_MESSAGE_CATEGORY_STATE_CREATION :: 5;
D3D12_MESSAGE_CATEGORY_STATE_SETTING :: 6;
D3D12_MESSAGE_CATEGORY_STATE_GETTING :: 7;
D3D12_MESSAGE_CATEGORY_RESOURCE_MANIPULATION :: 8;
D3D12_MESSAGE_CATEGORY_EXECUTION :: 9;
D3D12_MESSAGE_CATEGORY_SHADER :: 10;

D3D12_MESSAGE_ID :: enum s32
{
    UNKNOWN :: 0;
    STRING_FROM_APPLICATION :: 1;
    CORRUPTED_THIS :: 2;
    CORRUPTED_PARAMETER1 :: 3;
    CORRUPTED_PARAMETER2 :: 4;
    CORRUPTED_PARAMETER3 :: 5;
    CORRUPTED_PARAMETER4 :: 6;
    CORRUPTED_PARAMETER5 :: 7;
    CORRUPTED_PARAMETER6 :: 8;
    CORRUPTED_PARAMETER7 :: 9;
    CORRUPTED_PARAMETER8 :: 10;
    CORRUPTED_PARAMETER9 :: 11;
    CORRUPTED_PARAMETER10 :: 12;
    CORRUPTED_PARAMETER11 :: 13;
    CORRUPTED_PARAMETER12 :: 14;
    CORRUPTED_PARAMETER13 :: 15;
    CORRUPTED_PARAMETER14 :: 16;
    CORRUPTED_PARAMETER15 :: 17;
    CORRUPTED_MULTITHREADING :: 18;
    MESSAGE_REPORTING_OUTOFMEMORY :: 19;
    GETPRIVATEDATA_MOREDATA :: 20;
    SETPRIVATEDATA_INVALIDFREEDATA :: 21;
    SETPRIVATEDATA_CHANGINGPARAMS :: 24;
    SETPRIVATEDATA_OUTOFMEMORY :: 25;
    CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT :: 26;
    CREATESHADERRESOURCEVIEW_INVALIDDESC :: 27;
    CREATESHADERRESOURCEVIEW_INVALIDFORMAT :: 28;
    CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANESLICE :: 29;
    CREATESHADERRESOURCEVIEW_INVALIDPLANESLICE :: 30;
    CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS :: 31;
    CREATESHADERRESOURCEVIEW_INVALIDRESOURCE :: 32;
    CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT :: 35;
    CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT :: 36;
    CREATERENDERTARGETVIEW_INVALIDDESC :: 37;
    CREATERENDERTARGETVIEW_INVALIDFORMAT :: 38;
    CREATERENDERTARGETVIEW_INVALIDVIDEOPLANESLICE :: 39;
    CREATERENDERTARGETVIEW_INVALIDPLANESLICE :: 40;
    CREATERENDERTARGETVIEW_INVALIDDIMENSIONS :: 41;
    CREATERENDERTARGETVIEW_INVALIDRESOURCE :: 42;
    CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT :: 45;
    CREATEDEPTHSTENCILVIEW_INVALIDDESC :: 46;
    CREATEDEPTHSTENCILVIEW_INVALIDFORMAT :: 47;
    CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS :: 48;
    CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE :: 49;
    CREATEINPUTLAYOUT_OUTOFMEMORY :: 52;
    CREATEINPUTLAYOUT_TOOMANYELEMENTS :: 53;
    CREATEINPUTLAYOUT_INVALIDFORMAT :: 54;
    CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT :: 55;
    CREATEINPUTLAYOUT_INVALIDSLOT :: 56;
    CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS :: 57;
    CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH :: 58;
    CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE :: 59;
    CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE :: 60;
    CREATEINPUTLAYOUT_INVALIDALIGNMENT :: 61;
    CREATEINPUTLAYOUT_DUPLICATESEMANTIC :: 62;
    CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE :: 63;
    CREATEINPUTLAYOUT_NULLSEMANTIC :: 64;
    CREATEINPUTLAYOUT_MISSINGELEMENT :: 65;
    CREATEVERTEXSHADER_OUTOFMEMORY :: 66;
    CREATEVERTEXSHADER_INVALIDSHADERBYTECODE :: 67;
    CREATEVERTEXSHADER_INVALIDSHADERTYPE :: 68;
    CREATEGEOMETRYSHADER_OUTOFMEMORY :: 69;
    CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE :: 70;
    CREATEGEOMETRYSHADER_INVALIDSHADERTYPE :: 71;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY :: 72;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE :: 73;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE :: 74;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES :: 75;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED :: 76;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED :: 79;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT :: 80;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT :: 81;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT :: 82;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT :: 83;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION :: 84;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT :: 85;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE :: 86;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC :: 87;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH :: 88;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS :: 89;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX :: 90;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE :: 91;
    CREATEPIXELSHADER_OUTOFMEMORY :: 92;
    CREATEPIXELSHADER_INVALIDSHADERBYTECODE :: 93;
    CREATEPIXELSHADER_INVALIDSHADERTYPE :: 94;
    CREATERASTERIZERSTATE_INVALIDFILLMODE :: 95;
    CREATERASTERIZERSTATE_INVALIDCULLMODE :: 96;
    CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP :: 97;
    CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS :: 98;
    CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK :: 100;
    CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC :: 101;
    CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP :: 102;
    CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP :: 103;
    CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP :: 104;
    CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC :: 105;
    CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP :: 106;
    CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP :: 107;
    CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP :: 108;
    CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC :: 109;
    CREATEBLENDSTATE_INVALIDSRCBLEND :: 111;
    CREATEBLENDSTATE_INVALIDDESTBLEND :: 112;
    CREATEBLENDSTATE_INVALIDBLENDOP :: 113;
    CREATEBLENDSTATE_INVALIDSRCBLENDALPHA :: 114;
    CREATEBLENDSTATE_INVALIDDESTBLENDALPHA :: 115;
    CREATEBLENDSTATE_INVALIDBLENDOPALPHA :: 116;
    CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK :: 117;
    CLEARDEPTHSTENCILVIEW_INVALID :: 135;
    COMMAND_LIST_DRAW_ROOT_SIGNATURE_NOT_SET :: 200;
    COMMAND_LIST_DRAW_ROOT_SIGNATURE_MISMATCH :: 201;
    COMMAND_LIST_DRAW_VERTEX_BUFFER_NOT_SET :: 202;
    COMMAND_LIST_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL :: 209;
    COMMAND_LIST_DRAW_VERTEX_BUFFER_TOO_SMALL :: 210;
    COMMAND_LIST_DRAW_INDEX_BUFFER_NOT_SET :: 211;
    COMMAND_LIST_DRAW_INDEX_BUFFER_FORMAT_INVALID :: 212;
    COMMAND_LIST_DRAW_INDEX_BUFFER_TOO_SMALL :: 213;
    COMMAND_LIST_DRAW_INVALID_PRIMITIVETOPOLOGY :: 219;
    COMMAND_LIST_DRAW_VERTEX_STRIDE_UNALIGNED :: 221;
    COMMAND_LIST_DRAW_INDEX_OFFSET_UNALIGNED :: 222;
    DEVICE_REMOVAL_PROCESS_AT_FAULT :: 232;
    DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT :: 233;
    DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT :: 234;
    CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC :: 239;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC :: 240;
    CREATEINPUTLAYOUT_TYPE_MISMATCH :: 245;
    CREATEINPUTLAYOUT_EMPTY_LAYOUT :: 253;
    LIVE_OBJECT_SUMMARY :: 255;
    LIVE_DEVICE :: 274;
    LIVE_SWAPCHAIN :: 275;
    CREATEDEPTHSTENCILVIEW_INVALIDFLAGS :: 276;
    CREATEVERTEXSHADER_INVALIDCLASSLINKAGE :: 277;
    CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE :: 278;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER :: 280;
    CREATEPIXELSHADER_INVALIDCLASSLINKAGE :: 283;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM :: 284;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES :: 285;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES :: 286;
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES :: 287;
    CREATEHULLSHADER_OUTOFMEMORY :: 289;
    CREATEHULLSHADER_INVALIDSHADERBYTECODE :: 290;
    CREATEHULLSHADER_INVALIDSHADERTYPE :: 291;
    CREATEHULLSHADER_INVALIDCLASSLINKAGE :: 292;
    CREATEDOMAINSHADER_OUTOFMEMORY :: 294;
    CREATEDOMAINSHADER_INVALIDSHADERBYTECODE :: 295;
    CREATEDOMAINSHADER_INVALIDSHADERTYPE :: 296;
    CREATEDOMAINSHADER_INVALIDCLASSLINKAGE :: 297;
    RESOURCE_UNMAP_NOTMAPPED :: 310;
    DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE :: 318;
    CREATECOMPUTESHADER_OUTOFMEMORY :: 321;
    CREATECOMPUTESHADER_INVALIDSHADERBYTECODE :: 322;
    CREATECOMPUTESHADER_INVALIDCLASSLINKAGE :: 323;
    DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 331;
    DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 332;
    DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 333;
    DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 334;
    DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED :: 335;
    DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 336;
    DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 337;
    CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE :: 340;
    CREATEUNORDEREDACCESSVIEW_INVALIDDESC :: 341;
    CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT :: 342;
    CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANESLICE :: 343;
    CREATEUNORDEREDACCESSVIEW_INVALIDPLANESLICE :: 344;
    CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS :: 345;
    CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT :: 346;
    CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS :: 354;
    CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT :: 401;
    CREATEBLENDSTATE_INVALIDLOGICOPS :: 403;
    DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 410;
    DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 412;
    DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 414;
    DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 416;
    DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED :: 418;
    DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 420;
    DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 422;
    DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED :: 425;
    DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED :: 426;
    DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED :: 427;
    DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED :: 428;
    DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED :: 429;
    DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED :: 430;
    DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED :: 431;
    DEVICE_CLEARVIEW_INVALIDSOURCERECT :: 447;
    DEVICE_CLEARVIEW_EMPTYRECT :: 448;
    UPDATETILEMAPPINGS_INVALID_PARAMETER :: 493;
    COPYTILEMAPPINGS_INVALID_PARAMETER :: 494;
    CREATEDEVICE_INVALIDARGS :: 506;
    CREATEDEVICE_WARNING :: 507;
    RESOURCE_BARRIER_INVALID_TYPE :: 519;
    RESOURCE_BARRIER_NULL_POINTER :: 520;
    RESOURCE_BARRIER_INVALID_SUBRESOURCE :: 521;
    RESOURCE_BARRIER_RESERVED_BITS :: 522;
    RESOURCE_BARRIER_MISSING_BIND_FLAGS :: 523;
    RESOURCE_BARRIER_MISMATCHING_MISC_FLAGS :: 524;
    RESOURCE_BARRIER_MATCHING_STATES :: 525;
    RESOURCE_BARRIER_INVALID_COMBINATION :: 526;
    RESOURCE_BARRIER_BEFORE_AFTER_MISMATCH :: 527;
    RESOURCE_BARRIER_INVALID_RESOURCE :: 528;
    RESOURCE_BARRIER_SAMPLE_COUNT :: 529;
    RESOURCE_BARRIER_INVALID_FLAGS :: 530;
    RESOURCE_BARRIER_INVALID_COMBINED_FLAGS :: 531;
    RESOURCE_BARRIER_INVALID_FLAGS_FOR_FORMAT :: 532;
    RESOURCE_BARRIER_INVALID_SPLIT_BARRIER :: 533;
    RESOURCE_BARRIER_UNMATCHED_END :: 534;
    RESOURCE_BARRIER_UNMATCHED_BEGIN :: 535;
    RESOURCE_BARRIER_INVALID_FLAG :: 536;
    RESOURCE_BARRIER_INVALID_COMMAND_LIST_TYPE :: 537;
    INVALID_SUBRESOURCE_STATE :: 538;
    COMMAND_ALLOCATOR_CONTENTION :: 540;
    COMMAND_ALLOCATOR_RESET :: 541;
    COMMAND_ALLOCATOR_RESET_BUNDLE :: 542;
    COMMAND_ALLOCATOR_CANNOT_RESET :: 543;
    COMMAND_LIST_OPEN :: 544;
    INVALID_BUNDLE_API :: 546;
    COMMAND_LIST_CLOSED :: 547;
    WRONG_COMMAND_ALLOCATOR_TYPE :: 549;
    COMMAND_ALLOCATOR_SYNC :: 552;
    COMMAND_LIST_SYNC :: 553;
    SET_DESCRIPTOR_HEAP_INVALID :: 554;
    CREATE_COMMANDQUEUE :: 557;
    CREATE_COMMANDALLOCATOR :: 558;
    CREATE_PIPELINESTATE :: 559;
    CREATE_COMMANDLIST12 :: 560;
    CREATE_RESOURCE :: 562;
    CREATE_DESCRIPTORHEAP :: 563;
    CREATE_ROOTSIGNATURE :: 564;
    CREATE_LIBRARY :: 565;
    CREATE_HEAP :: 566;
    CREATE_MONITOREDFENCE :: 567;
    CREATE_QUERYHEAP :: 568;
    CREATE_COMMANDSIGNATURE :: 569;
    LIVE_COMMANDQUEUE :: 570;
    LIVE_COMMANDALLOCATOR :: 571;
    LIVE_PIPELINESTATE :: 572;
    LIVE_COMMANDLIST12 :: 573;
    LIVE_RESOURCE :: 575;
    LIVE_DESCRIPTORHEAP :: 576;
    LIVE_ROOTSIGNATURE :: 577;
    LIVE_LIBRARY :: 578;
    LIVE_HEAP :: 579;
    LIVE_MONITOREDFENCE :: 580;
    LIVE_QUERYHEAP :: 581;
    LIVE_COMMANDSIGNATURE :: 582;
    DESTROY_COMMANDQUEUE :: 583;
    DESTROY_COMMANDALLOCATOR :: 584;
    DESTROY_PIPELINESTATE :: 585;
    DESTROY_COMMANDLIST12 :: 586;
    DESTROY_RESOURCE :: 588;
    DESTROY_DESCRIPTORHEAP :: 589;
    DESTROY_ROOTSIGNATURE :: 590;
    DESTROY_LIBRARY :: 591;
    DESTROY_HEAP :: 592;
    DESTROY_MONITOREDFENCE :: 593;
    DESTROY_QUERYHEAP :: 594;
    DESTROY_COMMANDSIGNATURE :: 595;
    CREATERESOURCE_INVALIDDIMENSIONS :: 597;
    CREATERESOURCE_INVALIDMISCFLAGS :: 599;
    CREATERESOURCE_INVALIDARG_RETURN :: 602;
    CREATERESOURCE_OUTOFMEMORY_RETURN :: 603;
    CREATERESOURCE_INVALIDDESC :: 604;
    POSSIBLY_INVALID_SUBRESOURCE_STATE :: 607;
    INVALID_USE_OF_NON_RESIDENT_RESOURCE :: 608;
    POSSIBLE_INVALID_USE_OF_NON_RESIDENT_RESOURCE :: 609;
    BUNDLE_PIPELINE_STATE_MISMATCH :: 610;
    PRIMITIVE_TOPOLOGY_MISMATCH_PIPELINE_STATE :: 611;
    RENDER_TARGET_FORMAT_MISMATCH_PIPELINE_STATE :: 613;
    RENDER_TARGET_SAMPLE_DESC_MISMATCH_PIPELINE_STATE :: 614;
    DEPTH_STENCIL_FORMAT_MISMATCH_PIPELINE_STATE :: 615;
    DEPTH_STENCIL_SAMPLE_DESC_MISMATCH_PIPELINE_STATE :: 616;
    CREATESHADER_INVALIDBYTECODE :: 622;
    CREATEHEAP_NULLDESC :: 623;
    CREATEHEAP_INVALIDSIZE :: 624;
    CREATEHEAP_UNRECOGNIZEDHEAPTYPE :: 625;
    CREATEHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES :: 626;
    CREATEHEAP_UNRECOGNIZEDMEMORYPOOL :: 627;
    CREATEHEAP_INVALIDPROPERTIES :: 628;
    CREATEHEAP_INVALIDALIGNMENT :: 629;
    CREATEHEAP_UNRECOGNIZEDMISCFLAGS :: 630;
    CREATEHEAP_INVALIDMISCFLAGS :: 631;
    CREATEHEAP_INVALIDARG_RETURN :: 632;
    CREATEHEAP_OUTOFMEMORY_RETURN :: 633;
    CREATERESOURCEANDHEAP_NULLHEAPPROPERTIES :: 634;
    CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPTYPE :: 635;
    CREATERESOURCEANDHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES :: 636;
    CREATERESOURCEANDHEAP_UNRECOGNIZEDMEMORYPOOL :: 637;
    CREATERESOURCEANDHEAP_INVALIDHEAPPROPERTIES :: 638;
    CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPMISCFLAGS :: 639;
    CREATERESOURCEANDHEAP_INVALIDHEAPMISCFLAGS :: 640;
    CREATERESOURCEANDHEAP_INVALIDARG_RETURN :: 641;
    CREATERESOURCEANDHEAP_OUTOFMEMORY_RETURN :: 642;
    GETCUSTOMHEAPPROPERTIES_UNRECOGNIZEDHEAPTYPE :: 643;
    GETCUSTOMHEAPPROPERTIES_INVALIDHEAPTYPE :: 644;
    CREATE_DESCRIPTOR_HEAP_INVALID_DESC :: 645;
    INVALID_DESCRIPTOR_HANDLE :: 646;
    CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE :: 647;
    CREATE_CONSTANT_BUFFER_VIEW_INVALID_RESOURCE :: 649;
    CREATE_CONSTANT_BUFFER_VIEW_INVALID_DESC :: 650;
    CREATE_UNORDEREDACCESS_VIEW_INVALID_COUNTER_USAGE :: 652;
    COPY_DESCRIPTORS_INVALID_RANGES :: 653;
    COPY_DESCRIPTORS_WRITE_ONLY_DESCRIPTOR :: 654;
    CREATEGRAPHICSPIPELINESTATE_RTV_FORMAT_NOT_UNKNOWN :: 655;
    CREATEGRAPHICSPIPELINESTATE_INVALID_RENDER_TARGET_COUNT :: 656;
    CREATEGRAPHICSPIPELINESTATE_VERTEX_SHADER_NOT_SET :: 657;
    CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_NOT_SET :: 658;
    CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_HS_DS_SIGNATURE_MISMATCH :: 659;
    CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERINDEX :: 660;
    CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_COMPONENTTYPE :: 661;
    CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERMASK :: 662;
    CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SYSTEMVALUE :: 663;
    CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS :: 664;
    CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_MINPRECISION :: 665;
    CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND :: 666;
    CREATEGRAPHICSPIPELINESTATE_HS_XOR_DS_MISMATCH :: 667;
    CREATEGRAPHICSPIPELINESTATE_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH :: 668;
    CREATEGRAPHICSPIPELINESTATE_HS_DS_CONTROL_POINT_COUNT_MISMATCH :: 669;
    CREATEGRAPHICSPIPELINESTATE_HS_DS_TESSELLATOR_DOMAIN_MISMATCH :: 670;
    CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN :: 671;
    CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_FORCED_SAMPLE_COUNT :: 672;
    CREATEGRAPHICSPIPELINESTATE_INVALID_PRIMITIVETOPOLOGY :: 673;
    CREATEGRAPHICSPIPELINESTATE_INVALID_SYSTEMVALUE :: 674;
    CREATEGRAPHICSPIPELINESTATE_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 :: 675;
    CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING :: 676;
    CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_TYPE_MISMATCH :: 677;
    CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS :: 678;
    CREATEGRAPHICSPIPELINESTATE_RENDERTARGETVIEW_NOT_SET :: 679;
    CREATEGRAPHICSPIPELINESTATE_DEPTHSTENCILVIEW_NOT_SET :: 680;
    CREATEGRAPHICSPIPELINESTATE_GS_INPUT_PRIMITIVE_MISMATCH :: 681;
    CREATEGRAPHICSPIPELINESTATE_POSITION_NOT_PRESENT :: 682;
    CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE_FLAGS :: 683;
    CREATEGRAPHICSPIPELINESTATE_INVALID_INDEX_BUFFER_PROPERTIES :: 684;
    CREATEGRAPHICSPIPELINESTATE_INVALID_SAMPLE_DESC :: 685;
    CREATEGRAPHICSPIPELINESTATE_HS_ROOT_SIGNATURE_MISMATCH :: 686;
    CREATEGRAPHICSPIPELINESTATE_DS_ROOT_SIGNATURE_MISMATCH :: 687;
    CREATEGRAPHICSPIPELINESTATE_VS_ROOT_SIGNATURE_MISMATCH :: 688;
    CREATEGRAPHICSPIPELINESTATE_GS_ROOT_SIGNATURE_MISMATCH :: 689;
    CREATEGRAPHICSPIPELINESTATE_PS_ROOT_SIGNATURE_MISMATCH :: 690;
    CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE :: 691;
    EXECUTE_BUNDLE_OPEN_BUNDLE :: 692;
    EXECUTE_BUNDLE_DESCRIPTOR_HEAP_MISMATCH :: 693;
    EXECUTE_BUNDLE_TYPE :: 694;
    DRAW_EMPTY_SCISSOR_RECTANGLE :: 695;
    CREATE_ROOT_SIGNATURE_BLOB_NOT_FOUND :: 696;
    CREATE_ROOT_SIGNATURE_DESERIALIZE_FAILED :: 697;
    CREATE_ROOT_SIGNATURE_INVALID_CONFIGURATION :: 698;
    CREATE_ROOT_SIGNATURE_NOT_SUPPORTED_ON_DEVICE :: 699;
    CREATERESOURCEANDHEAP_NULLRESOURCEPROPERTIES :: 700;
    CREATERESOURCEANDHEAP_NULLHEAP :: 701;
    GETRESOURCEALLOCATIONINFO_INVALIDRDESCS :: 702;
    MAKERESIDENT_NULLOBJECTARRAY :: 703;
    EVICT_NULLOBJECTARRAY :: 705;
    SET_DESCRIPTOR_TABLE_INVALID :: 708;
    SET_ROOT_CONSTANT_INVALID :: 709;
    SET_ROOT_CONSTANT_BUFFER_VIEW_INVALID :: 710;
    SET_ROOT_SHADER_RESOURCE_VIEW_INVALID :: 711;
    SET_ROOT_UNORDERED_ACCESS_VIEW_INVALID :: 712;
    SET_VERTEX_BUFFERS_INVALID_DESC :: 713;
    SET_INDEX_BUFFER_INVALID_DESC :: 715;
    SET_STREAM_OUTPUT_BUFFERS_INVALID_DESC :: 717;
    CREATERESOURCE_UNRECOGNIZEDDIMENSIONALITY :: 718;
    CREATERESOURCE_UNRECOGNIZEDLAYOUT :: 719;
    CREATERESOURCE_INVALIDDIMENSIONALITY :: 720;
    CREATERESOURCE_INVALIDALIGNMENT :: 721;
    CREATERESOURCE_INVALIDMIPLEVELS :: 722;
    CREATERESOURCE_INVALIDSAMPLEDESC :: 723;
    CREATERESOURCE_INVALIDLAYOUT :: 724;
    SET_INDEX_BUFFER_INVALID :: 725;
    SET_VERTEX_BUFFERS_INVALID :: 726;
    SET_STREAM_OUTPUT_BUFFERS_INVALID :: 727;
    SET_RENDER_TARGETS_INVALID :: 728;
    CREATEQUERY_HEAP_INVALID_PARAMETERS :: 729;
    BEGIN_END_QUERY_INVALID_PARAMETERS :: 731;
    CLOSE_COMMAND_LIST_OPEN_QUERY :: 732;
    RESOLVE_QUERY_DATA_INVALID_PARAMETERS :: 733;
    SET_PREDICATION_INVALID_PARAMETERS :: 734;
    TIMESTAMPS_NOT_SUPPORTED :: 735;
    CREATERESOURCE_UNRECOGNIZEDFORMAT :: 737;
    CREATERESOURCE_INVALIDFORMAT :: 738;
    GETCOPYABLEFOOTPRINTS_INVALIDSUBRESOURCERANGE :: 739;
    GETCOPYABLEFOOTPRINTS_INVALIDBASEOFFSET :: 740;
    GETCOPYABLELAYOUT_INVALIDSUBRESOURCERANGE :: 739;
    GETCOPYABLELAYOUT_INVALIDBASEOFFSET :: 740;
    RESOURCE_BARRIER_INVALID_HEAP :: 741;
    CREATE_SAMPLER_INVALID :: 742;
    CREATECOMMANDSIGNATURE_INVALID :: 743;
    EXECUTE_INDIRECT_INVALID_PARAMETERS :: 744;
    GETGPUVIRTUALADDRESS_INVALID_RESOURCE_DIMENSION :: 745;
    CREATERESOURCE_INVALIDCLEARVALUE :: 815;
    CREATERESOURCE_UNRECOGNIZEDCLEARVALUEFORMAT :: 816;
    CREATERESOURCE_INVALIDCLEARVALUEFORMAT :: 817;
    CREATERESOURCE_CLEARVALUEDENORMFLUSH :: 818;
    CLEARRENDERTARGETVIEW_MISMATCHINGCLEARVALUE :: 820;
    CLEARDEPTHSTENCILVIEW_MISMATCHINGCLEARVALUE :: 821;
    MAP_INVALIDHEAP :: 822;
    UNMAP_INVALIDHEAP :: 823;
    MAP_INVALIDRESOURCE :: 824;
    UNMAP_INVALIDRESOURCE :: 825;
    MAP_INVALIDSUBRESOURCE :: 826;
    UNMAP_INVALIDSUBRESOURCE :: 827;
    MAP_INVALIDRANGE :: 828;
    UNMAP_INVALIDRANGE :: 829;
    MAP_INVALIDDATAPOINTER :: 832;
    MAP_INVALIDARG_RETURN :: 833;
    MAP_OUTOFMEMORY_RETURN :: 834;
    EXECUTECOMMANDLISTS_BUNDLENOTSUPPORTED :: 835;
    EXECUTECOMMANDLISTS_COMMANDLISTMISMATCH :: 836;
    EXECUTECOMMANDLISTS_OPENCOMMANDLIST :: 837;
    EXECUTECOMMANDLISTS_FAILEDCOMMANDLIST :: 838;
    COPYBUFFERREGION_NULLDST :: 839;
    COPYBUFFERREGION_INVALIDDSTRESOURCEDIMENSION :: 840;
    COPYBUFFERREGION_DSTRANGEOUTOFBOUNDS :: 841;
    COPYBUFFERREGION_NULLSRC :: 842;
    COPYBUFFERREGION_INVALIDSRCRESOURCEDIMENSION :: 843;
    COPYBUFFERREGION_SRCRANGEOUTOFBOUNDS :: 844;
    COPYBUFFERREGION_INVALIDCOPYFLAGS :: 845;
    COPYTEXTUREREGION_NULLDST :: 846;
    COPYTEXTUREREGION_UNRECOGNIZEDDSTTYPE :: 847;
    COPYTEXTUREREGION_INVALIDDSTRESOURCEDIMENSION :: 848;
    COPYTEXTUREREGION_INVALIDDSTRESOURCE :: 849;
    COPYTEXTUREREGION_INVALIDDSTSUBRESOURCE :: 850;
    COPYTEXTUREREGION_INVALIDDSTOFFSET :: 851;
    COPYTEXTUREREGION_UNRECOGNIZEDDSTFORMAT :: 852;
    COPYTEXTUREREGION_INVALIDDSTFORMAT :: 853;
    COPYTEXTUREREGION_INVALIDDSTDIMENSIONS :: 854;
    COPYTEXTUREREGION_INVALIDDSTROWPITCH :: 855;
    COPYTEXTUREREGION_INVALIDDSTPLACEMENT :: 856;
    COPYTEXTUREREGION_INVALIDDSTDSPLACEDFOOTPRINTFORMAT :: 857;
    COPYTEXTUREREGION_DSTREGIONOUTOFBOUNDS :: 858;
    COPYTEXTUREREGION_NULLSRC :: 859;
    COPYTEXTUREREGION_UNRECOGNIZEDSRCTYPE :: 860;
    COPYTEXTUREREGION_INVALIDSRCRESOURCEDIMENSION :: 861;
    COPYTEXTUREREGION_INVALIDSRCRESOURCE :: 862;
    COPYTEXTUREREGION_INVALIDSRCSUBRESOURCE :: 863;
    COPYTEXTUREREGION_INVALIDSRCOFFSET :: 864;
    COPYTEXTUREREGION_UNRECOGNIZEDSRCFORMAT :: 865;
    COPYTEXTUREREGION_INVALIDSRCFORMAT :: 866;
    COPYTEXTUREREGION_INVALIDSRCDIMENSIONS :: 867;
    COPYTEXTUREREGION_INVALIDSRCROWPITCH :: 868;
    COPYTEXTUREREGION_INVALIDSRCPLACEMENT :: 869;
    COPYTEXTUREREGION_INVALIDSRCDSPLACEDFOOTPRINTFORMAT :: 870;
    COPYTEXTUREREGION_SRCREGIONOUTOFBOUNDS :: 871;
    COPYTEXTUREREGION_INVALIDDSTCOORDINATES :: 872;
    COPYTEXTUREREGION_INVALIDSRCBOX :: 873;
    COPYTEXTUREREGION_FORMATMISMATCH :: 874;
    COPYTEXTUREREGION_EMPTYBOX :: 875;
    COPYTEXTUREREGION_INVALIDCOPYFLAGS :: 876;
    RESOLVESUBRESOURCE_INVALID_SUBRESOURCE_INDEX :: 877;
    RESOLVESUBRESOURCE_INVALID_FORMAT :: 878;
    RESOLVESUBRESOURCE_RESOURCE_MISMATCH :: 879;
    RESOLVESUBRESOURCE_INVALID_SAMPLE_COUNT :: 880;
    CREATECOMPUTEPIPELINESTATE_INVALID_SHADER :: 881;
    CREATECOMPUTEPIPELINESTATE_CS_ROOT_SIGNATURE_MISMATCH :: 882;
    CREATECOMPUTEPIPELINESTATE_MISSING_ROOT_SIGNATURE :: 883;
    CREATEPIPELINESTATE_INVALIDCACHEDBLOB :: 884;
    CREATEPIPELINESTATE_CACHEDBLOBADAPTERMISMATCH :: 885;
    CREATEPIPELINESTATE_CACHEDBLOBDRIVERVERSIONMISMATCH :: 886;
    CREATEPIPELINESTATE_CACHEDBLOBDESCMISMATCH :: 887;
    CREATEPIPELINESTATE_CACHEDBLOBIGNORED :: 888;
    WRITETOSUBRESOURCE_INVALIDHEAP :: 889;
    WRITETOSUBRESOURCE_INVALIDRESOURCE :: 890;
    WRITETOSUBRESOURCE_INVALIDBOX :: 891;
    WRITETOSUBRESOURCE_INVALIDSUBRESOURCE :: 892;
    WRITETOSUBRESOURCE_EMPTYBOX :: 893;
    READFROMSUBRESOURCE_INVALIDHEAP :: 894;
    READFROMSUBRESOURCE_INVALIDRESOURCE :: 895;
    READFROMSUBRESOURCE_INVALIDBOX :: 896;
    READFROMSUBRESOURCE_INVALIDSUBRESOURCE :: 897;
    READFROMSUBRESOURCE_EMPTYBOX :: 898;
    TOO_MANY_NODES_SPECIFIED :: 899;
    INVALID_NODE_INDEX :: 900;
    GETHEAPPROPERTIES_INVALIDRESOURCE :: 901;
    NODE_MASK_MISMATCH :: 902;
    COMMAND_LIST_OUTOFMEMORY :: 903;
    COMMAND_LIST_MULTIPLE_SWAPCHAIN_BUFFER_REFERENCES :: 904;
    COMMAND_LIST_TOO_MANY_SWAPCHAIN_REFERENCES :: 905;
    COMMAND_QUEUE_TOO_MANY_SWAPCHAIN_REFERENCES :: 906;
    EXECUTECOMMANDLISTS_WRONGSWAPCHAINBUFFERREFERENCE :: 907;
    COMMAND_LIST_SETRENDERTARGETS_INVALIDNUMRENDERTARGETS :: 908;
    CREATE_QUEUE_INVALID_TYPE :: 909;
    CREATE_QUEUE_INVALID_FLAGS :: 910;
    CREATESHAREDRESOURCE_INVALIDFLAGS :: 911;
    CREATESHAREDRESOURCE_INVALIDFORMAT :: 912;
    CREATESHAREDHEAP_INVALIDFLAGS :: 913;
    REFLECTSHAREDPROPERTIES_UNRECOGNIZEDPROPERTIES :: 914;
    REFLECTSHAREDPROPERTIES_INVALIDSIZE :: 915;
    REFLECTSHAREDPROPERTIES_INVALIDOBJECT :: 916;
    KEYEDMUTEX_INVALIDOBJECT :: 917;
    KEYEDMUTEX_INVALIDKEY :: 918;
    KEYEDMUTEX_WRONGSTATE :: 919;
    CREATE_QUEUE_INVALID_PRIORITY :: 920;
    OBJECT_DELETED_WHILE_STILL_IN_USE :: 921;
    CREATEPIPELINESTATE_INVALID_FLAGS :: 922;
    HEAP_ADDRESS_RANGE_HAS_NO_RESOURCE :: 923;
    COMMAND_LIST_DRAW_RENDER_TARGET_DELETED :: 924;
    CREATEGRAPHICSPIPELINESTATE_ALL_RENDER_TARGETS_HAVE_UNKNOWN_FORMAT :: 925;
    HEAP_ADDRESS_RANGE_INTERSECTS_MULTIPLE_BUFFERS :: 926;
    EXECUTECOMMANDLISTS_GPU_WRITTEN_READBACK_RESOURCE_MAPPED :: 927;
    UNMAP_RANGE_NOT_EMPTY :: 929;
    MAP_INVALID_NULLRANGE :: 930;
    UNMAP_INVALID_NULLRANGE :: 931;
    NO_GRAPHICS_API_SUPPORT :: 932;
    NO_COMPUTE_API_SUPPORT :: 933;
    RESOLVESUBRESOURCE_RESOURCE_FLAGS_NOT_SUPPORTED :: 934;
    GPU_BASED_VALIDATION_ROOT_ARGUMENT_UNINITIALIZED :: 935;
    GPU_BASED_VALIDATION_DESCRIPTOR_HEAP_INDEX_OUT_OF_BOUNDS :: 936;
    GPU_BASED_VALIDATION_DESCRIPTOR_TABLE_REGISTER_INDEX_OUT_OF_BOUNDS :: 937;
    GPU_BASED_VALIDATION_DESCRIPTOR_UNINITIALIZED :: 938;
    GPU_BASED_VALIDATION_DESCRIPTOR_TYPE_MISMATCH :: 939;
    GPU_BASED_VALIDATION_SRV_RESOURCE_DIMENSION_MISMATCH :: 940;
    GPU_BASED_VALIDATION_UAV_RESOURCE_DIMENSION_MISMATCH :: 941;
    GPU_BASED_VALIDATION_INCOMPATIBLE_RESOURCE_STATE :: 942;
    COPYRESOURCE_NULLDST :: 943;
    COPYRESOURCE_INVALIDDSTRESOURCE :: 944;
    COPYRESOURCE_NULLSRC :: 945;
    COPYRESOURCE_INVALIDSRCRESOURCE :: 946;
    RESOLVESUBRESOURCE_NULLDST :: 947;
    RESOLVESUBRESOURCE_INVALIDDSTRESOURCE :: 948;
    RESOLVESUBRESOURCE_NULLSRC :: 949;
    RESOLVESUBRESOURCE_INVALIDSRCRESOURCE :: 950;
    PIPELINE_STATE_TYPE_MISMATCH :: 951;
    COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_NOT_SET :: 952;
    COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_MISMATCH :: 953;
    RESOURCE_BARRIER_ZERO_BARRIERS :: 954;
    BEGIN_END_EVENT_MISMATCH :: 955;
    RESOURCE_BARRIER_POSSIBLE_BEFORE_AFTER_MISMATCH :: 956;
    RESOURCE_BARRIER_MISMATCHING_BEGIN_END :: 957;
    GPU_BASED_VALIDATION_INVALID_RESOURCE :: 958;
    USE_OF_ZERO_REFCOUNT_OBJECT :: 959;
    OBJECT_EVICTED_WHILE_STILL_IN_USE :: 960;
    GPU_BASED_VALIDATION_ROOT_DESCRIPTOR_ACCESS_OUT_OF_BOUNDS :: 961;
    CREATEPIPELINELIBRARY_INVALIDLIBRARYBLOB :: 962;
    CREATEPIPELINELIBRARY_DRIVERVERSIONMISMATCH :: 963;
    CREATEPIPELINELIBRARY_ADAPTERVERSIONMISMATCH :: 964;
    CREATEPIPELINELIBRARY_UNSUPPORTED :: 965;
    CREATE_PIPELINELIBRARY :: 966;
    LIVE_PIPELINELIBRARY :: 967;
    DESTROY_PIPELINELIBRARY :: 968;
    STOREPIPELINE_NONAME :: 969;
    STOREPIPELINE_DUPLICATENAME :: 970;
    LOADPIPELINE_NAMENOTFOUND :: 971;
    LOADPIPELINE_INVALIDDESC :: 972;
    PIPELINELIBRARY_SERIALIZE_NOTENOUGHMEMORY :: 973;
    CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_RT_OUTPUT_MISMATCH :: 974;
    SETEVENTONMULTIPLEFENCECOMPLETION_INVALIDFLAGS :: 975;
    CREATE_QUEUE_VIDEO_NOT_SUPPORTED :: 976;
    CREATE_COMMAND_ALLOCATOR_VIDEO_NOT_SUPPORTED :: 977;
    CREATEQUERY_HEAP_VIDEO_DECODE_STATISTICS_NOT_SUPPORTED :: 978;
    CREATE_VIDEODECODECOMMANDLIST :: 979;
    CREATE_VIDEODECODER :: 980;
    CREATE_VIDEODECODESTREAM :: 981;
    LIVE_VIDEODECODECOMMANDLIST :: 982;
    LIVE_VIDEODECODER :: 983;
    LIVE_VIDEODECODESTREAM :: 984;
    DESTROY_VIDEODECODECOMMANDLIST :: 985;
    DESTROY_VIDEODECODER :: 986;
    DESTROY_VIDEODECODESTREAM :: 987;
    DECODE_FRAME_INVALID_PARAMETERS :: 988;
    DEPRECATED_API :: 989;
    RESOURCE_BARRIER_MISMATCHING_COMMAND_LIST_TYPE :: 990;
    COMMAND_LIST_DESCRIPTOR_TABLE_NOT_SET :: 991;
    COMMAND_LIST_ROOT_CONSTANT_BUFFER_VIEW_NOT_SET :: 992;
    COMMAND_LIST_ROOT_SHADER_RESOURCE_VIEW_NOT_SET :: 993;
    COMMAND_LIST_ROOT_UNORDERED_ACCESS_VIEW_NOT_SET :: 994;
    DISCARD_INVALID_SUBRESOURCE_RANGE :: 995;
    DISCARD_ONE_SUBRESOURCE_FOR_MIPS_WITH_RECTS :: 996;
    DISCARD_NO_RECTS_FOR_NON_TEXTURE2D :: 997;
    COPY_ON_SAME_SUBRESOURCE :: 998;
    SETRESIDENCYPRIORITY_INVALID_PAGEABLE :: 999;
    GPU_BASED_VALIDATION_UNSUPPORTED :: 1000;
    STATIC_DESCRIPTOR_INVALID_DESCRIPTOR_CHANGE :: 1001;
    DATA_STATIC_DESCRIPTOR_INVALID_DATA_CHANGE :: 1002;
    DATA_STATIC_WHILE_SET_AT_EXECUTE_DESCRIPTOR_INVALID_DATA_CHANGE :: 1003;
    EXECUTE_BUNDLE_STATIC_DESCRIPTOR_DATA_STATIC_NOT_SET :: 1004;
    GPU_BASED_VALIDATION_RESOURCE_ACCESS_OUT_OF_BOUNDS :: 1005;
    GPU_BASED_VALIDATION_SAMPLER_MODE_MISMATCH :: 1006;
    CREATE_FENCE_INVALID_FLAGS :: 1007;
    RESOURCE_BARRIER_DUPLICATE_SUBRESOURCE_TRANSITIONS :: 1008;
    SETRESIDENCYPRIORITY_INVALID_PRIORITY :: 1009;
    CREATE_DESCRIPTOR_HEAP_LARGE_NUM_DESCRIPTORS :: 1013;
    BEGIN_EVENT :: 1014;
    END_EVENT :: 1015;
    CREATEDEVICE_DEBUG_LAYER_STARTUP_OPTIONS :: 1016;
    CREATEDEPTHSTENCILSTATE_DEPTHBOUNDSTEST_UNSUPPORTED :: 1017;
    CREATEPIPELINESTATE_DUPLICATE_SUBOBJECT :: 1018;
    CREATEPIPELINESTATE_UNKNOWN_SUBOBJECT :: 1019;
    CREATEPIPELINESTATE_ZERO_SIZE_STREAM :: 1020;
    CREATEPIPELINESTATE_INVALID_STREAM :: 1021;
    CREATEPIPELINESTATE_CANNOT_DEDUCE_TYPE :: 1022;
    COMMAND_LIST_STATIC_DESCRIPTOR_RESOURCE_DIMENSION_MISMATCH :: 1023;
    CREATE_COMMAND_QUEUE_INSUFFICIENT_PRIVILEGE_FOR_GLOBAL_REALTIME :: 1024;
    CREATE_COMMAND_QUEUE_INSUFFICIENT_HARDWARE_SUPPORT_FOR_GLOBAL_REALTIME :: 1025;
    ATOMICCOPYBUFFER_INVALID_ARCHITECTURE :: 1026;
    ATOMICCOPYBUFFER_NULL_DST :: 1027;
    ATOMICCOPYBUFFER_INVALID_DST_RESOURCE_DIMENSION :: 1028;
    ATOMICCOPYBUFFER_DST_RANGE_OUT_OF_BOUNDS :: 1029;
    ATOMICCOPYBUFFER_NULL_SRC :: 1030;
    ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE_DIMENSION :: 1031;
    ATOMICCOPYBUFFER_SRC_RANGE_OUT_OF_BOUNDS :: 1032;
    ATOMICCOPYBUFFER_INVALID_OFFSET_ALIGNMENT :: 1033;
    ATOMICCOPYBUFFER_NULL_DEPENDENT_RESOURCES :: 1034;
    ATOMICCOPYBUFFER_NULL_DEPENDENT_SUBRESOURCE_RANGES :: 1035;
    ATOMICCOPYBUFFER_INVALID_DEPENDENT_RESOURCE :: 1036;
    ATOMICCOPYBUFFER_INVALID_DEPENDENT_SUBRESOURCE_RANGE :: 1037;
    ATOMICCOPYBUFFER_DEPENDENT_SUBRESOURCE_OUT_OF_BOUNDS :: 1038;
    ATOMICCOPYBUFFER_DEPENDENT_RANGE_OUT_OF_BOUNDS :: 1039;
    ATOMICCOPYBUFFER_ZERO_DEPENDENCIES :: 1040;
    DEVICE_CREATE_SHARED_HANDLE_INVALIDARG :: 1041;
    DESCRIPTOR_HANDLE_WITH_INVALID_RESOURCE :: 1042;
    SETDEPTHBOUNDS_INVALIDARGS :: 1043;
    GPU_BASED_VALIDATION_RESOURCE_STATE_IMPRECISE :: 1044;
    COMMAND_LIST_PIPELINE_STATE_NOT_SET :: 1045;
    CREATEGRAPHICSPIPELINESTATE_SHADER_MODEL_MISMATCH :: 1046;
    OBJECT_ACCESSED_WHILE_STILL_IN_USE :: 1047;
    PROGRAMMABLE_MSAA_UNSUPPORTED :: 1048;
    SETSAMPLEPOSITIONS_INVALIDARGS :: 1049;
    RESOLVESUBRESOURCEREGION_INVALID_RECT :: 1050;
    CREATE_VIDEODECODECOMMANDQUEUE :: 1051;
    CREATE_VIDEOPROCESSCOMMANDLIST :: 1052;
    CREATE_VIDEOPROCESSCOMMANDQUEUE :: 1053;
    LIVE_VIDEODECODECOMMANDQUEUE :: 1054;
    LIVE_VIDEOPROCESSCOMMANDLIST :: 1055;
    LIVE_VIDEOPROCESSCOMMANDQUEUE :: 1056;
    DESTROY_VIDEODECODECOMMANDQUEUE :: 1057;
    DESTROY_VIDEOPROCESSCOMMANDLIST :: 1058;
    DESTROY_VIDEOPROCESSCOMMANDQUEUE :: 1059;
    CREATE_VIDEOPROCESSOR :: 1060;
    CREATE_VIDEOPROCESSSTREAM :: 1061;
    LIVE_VIDEOPROCESSOR :: 1062;
    LIVE_VIDEOPROCESSSTREAM :: 1063;
    DESTROY_VIDEOPROCESSOR :: 1064;
    DESTROY_VIDEOPROCESSSTREAM :: 1065;
    PROCESS_FRAME_INVALID_PARAMETERS :: 1066;
    COPY_INVALIDLAYOUT :: 1067;
    CREATE_CRYPTO_SESSION :: 1068;
    CREATE_CRYPTO_SESSION_POLICY :: 1069;
    CREATE_PROTECTED_RESOURCE_SESSION :: 1070;
    LIVE_CRYPTO_SESSION :: 1071;
    LIVE_CRYPTO_SESSION_POLICY :: 1072;
    LIVE_PROTECTED_RESOURCE_SESSION :: 1073;
    DESTROY_CRYPTO_SESSION :: 1074;
    DESTROY_CRYPTO_SESSION_POLICY :: 1075;
    DESTROY_PROTECTED_RESOURCE_SESSION :: 1076;
    PROTECTED_RESOURCE_SESSION_UNSUPPORTED :: 1077;
    FENCE_INVALIDOPERATION :: 1078;
    CREATEQUERY_HEAP_COPY_QUEUE_TIMESTAMPS_NOT_SUPPORTED :: 1079;
    SAMPLEPOSITIONS_MISMATCH_DEFERRED :: 1080;
    SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMFIRSTUSE :: 1081;
    SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMCLEAR :: 1082;
    CREATE_VIDEODECODERHEAP :: 1083;
    LIVE_VIDEODECODERHEAP :: 1084;
    DESTROY_VIDEODECODERHEAP :: 1085;
    OPENEXISTINGHEAP_INVALIDARG_RETURN :: 1086;
    OPENEXISTINGHEAP_OUTOFMEMORY_RETURN :: 1087;
    OPENEXISTINGHEAP_INVALIDADDRESS :: 1088;
    OPENEXISTINGHEAP_INVALIDHANDLE :: 1089;
    WRITEBUFFERIMMEDIATE_INVALID_DEST :: 1090;
    WRITEBUFFERIMMEDIATE_INVALID_MODE :: 1091;
    WRITEBUFFERIMMEDIATE_INVALID_ALIGNMENT :: 1092;
    WRITEBUFFERIMMEDIATE_NOT_SUPPORTED :: 1093;
    SETVIEWINSTANCEMASK_INVALIDARGS :: 1094;
    VIEW_INSTANCING_UNSUPPORTED :: 1095;
    VIEW_INSTANCING_INVALIDARGS :: 1096;
    COPYTEXTUREREGION_MISMATCH_DECODE_REFERENCE_ONLY_FLAG :: 1097;
    COPYRESOURCE_MISMATCH_DECODE_REFERENCE_ONLY_FLAG :: 1098;
    CREATE_VIDEO_DECODE_HEAP_CAPS_FAILURE :: 1099;
    CREATE_VIDEO_DECODE_HEAP_CAPS_UNSUPPORTED :: 1100;
    VIDEO_DECODE_SUPPORT_INVALID_INPUT :: 1101;
    CREATE_VIDEO_DECODER_UNSUPPORTED :: 1102;
    CREATEGRAPHICSPIPELINESTATE_METADATA_ERROR :: 1103;
    CREATEGRAPHICSPIPELINESTATE_VIEW_INSTANCING_VERTEX_SIZE_EXCEEDED :: 1104;
    CREATEGRAPHICSPIPELINESTATE_RUNTIME_INTERNAL_ERROR :: 1105;
    NO_VIDEO_API_SUPPORT :: 1106;
    VIDEO_PROCESS_SUPPORT_INVALID_INPUT :: 1107;
    CREATE_VIDEO_PROCESSOR_CAPS_FAILURE :: 1108;
    VIDEO_PROCESS_SUPPORT_UNSUPPORTED_FORMAT :: 1109;
    VIDEO_DECODE_FRAME_INVALID_ARGUMENT :: 1110;
    ENQUEUE_MAKE_RESIDENT_INVALID_FLAGS :: 1111;
    OPENEXISTINGHEAP_UNSUPPORTED :: 1112;
    VIDEO_PROCESS_FRAMES_INVALID_ARGUMENT :: 1113;
    VIDEO_DECODE_SUPPORT_UNSUPPORTED :: 1114;
    CREATE_COMMANDRECORDER :: 1115;
    LIVE_COMMANDRECORDER :: 1116;
    DESTROY_COMMANDRECORDER :: 1117;
    CREATE_COMMAND_RECORDER_VIDEO_NOT_SUPPORTED :: 1118;
    CREATE_COMMAND_RECORDER_INVALID_SUPPORT_FLAGS :: 1119;
    CREATE_COMMAND_RECORDER_INVALID_FLAGS :: 1120;
    CREATE_COMMAND_RECORDER_MORE_RECORDERS_THAN_LOGICAL_PROCESSORS :: 1121;
    CREATE_COMMANDPOOL :: 1122;
    LIVE_COMMANDPOOL :: 1123;
    DESTROY_COMMANDPOOL :: 1124;
    CREATE_COMMAND_POOL_INVALID_FLAGS :: 1125;
    CREATE_COMMAND_LIST_VIDEO_NOT_SUPPORTED :: 1126;
    COMMAND_RECORDER_SUPPORT_FLAGS_MISMATCH :: 1127;
    COMMAND_RECORDER_CONTENTION :: 1128;
    COMMAND_RECORDER_USAGE_WITH_CREATECOMMANDLIST_COMMAND_LIST :: 1129;
    COMMAND_ALLOCATOR_USAGE_WITH_CREATECOMMANDLIST1_COMMAND_LIST :: 1130;
    CANNOT_EXECUTE_EMPTY_COMMAND_LIST :: 1131;
    CANNOT_RESET_COMMAND_POOL_WITH_OPEN_COMMAND_LISTS :: 1132;
    CANNOT_USE_COMMAND_RECORDER_WITHOUT_CURRENT_TARGET :: 1133;
    CANNOT_CHANGE_COMMAND_RECORDER_TARGET_WHILE_RECORDING :: 1134;
    COMMAND_POOL_SYNC :: 1135;
    EVICT_UNDERFLOW :: 1136;
    CREATE_META_COMMAND :: 1137;
    LIVE_META_COMMAND :: 1138;
    DESTROY_META_COMMAND :: 1139;
    COPYBUFFERREGION_INVALID_DST_RESOURCE :: 1140;
    COPYBUFFERREGION_INVALID_SRC_RESOURCE :: 1141;
    ATOMICCOPYBUFFER_INVALID_DST_RESOURCE :: 1142;
    ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE :: 1143;
    CREATEPLACEDRESOURCEONBUFFER_NULL_BUFFER :: 1144;
    CREATEPLACEDRESOURCEONBUFFER_NULL_RESOURCE_DESC :: 1145;
    CREATEPLACEDRESOURCEONBUFFER_UNSUPPORTED :: 1146;
    CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_DIMENSION :: 1147;
    CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_FLAGS :: 1148;
    CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_OFFSET :: 1149;
    CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_DIMENSION :: 1150;
    CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_FLAGS :: 1151;
    CREATEPLACEDRESOURCEONBUFFER_OUTOFMEMORY_RETURN :: 1152;
    CANNOT_CREATE_GRAPHICS_AND_VIDEO_COMMAND_RECORDER :: 1153;
    UPDATETILEMAPPINGS_POSSIBLY_MISMATCHING_PROPERTIES :: 1154;
    CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE :: 1155;
    CLEARUNORDEREDACCESSVIEW_INCOMPATIBLE_WITH_STRUCTURED_BUFFERS :: 1156;
    COMPUTE_ONLY_DEVICE_OPERATION_UNSUPPORTED :: 1157;
    BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INVALID :: 1158;
    EMIT_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_INVALID :: 1159;
    COPY_RAYTRACING_ACCELERATION_STRUCTURE_INVALID :: 1160;
    DISPATCH_RAYS_INVALID :: 1161;
    GET_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO_INVALID :: 1162;
    CREATE_LIFETIMETRACKER :: 1163;
    LIVE_LIFETIMETRACKER :: 1164;
    DESTROY_LIFETIMETRACKER :: 1165;
    DESTROYOWNEDOBJECT_OBJECTNOTOWNED :: 1166;
    CREATE_TRACKEDWORKLOAD :: 1167;
    LIVE_TRACKEDWORKLOAD :: 1168;
    DESTROY_TRACKEDWORKLOAD :: 1169;
    RENDER_PASS_ERROR :: 1170;
    META_COMMAND_ID_INVALID :: 1171;
    META_COMMAND_UNSUPPORTED_PARAMS :: 1172;
    META_COMMAND_FAILED_ENUMERATION :: 1173;
    META_COMMAND_PARAMETER_SIZE_MISMATCH :: 1174;
    UNINITIALIZED_META_COMMAND :: 1175;
    META_COMMAND_INVALID_GPU_VIRTUAL_ADDRESS :: 1176;
    CREATE_VIDEOENCODECOMMANDLIST :: 1177;
    LIVE_VIDEOENCODECOMMANDLIST :: 1178;
    DESTROY_VIDEOENCODECOMMANDLIST :: 1179;
    CREATE_VIDEOENCODECOMMANDQUEUE :: 1180;
    LIVE_VIDEOENCODECOMMANDQUEUE :: 1181;
    DESTROY_VIDEOENCODECOMMANDQUEUE :: 1182;
    CREATE_VIDEOMOTIONESTIMATOR :: 1183;
    LIVE_VIDEOMOTIONESTIMATOR :: 1184;
    DESTROY_VIDEOMOTIONESTIMATOR :: 1185;
    CREATE_VIDEOMOTIONVECTORHEAP :: 1186;
    LIVE_VIDEOMOTIONVECTORHEAP :: 1187;
    DESTROY_VIDEOMOTIONVECTORHEAP :: 1188;
    MULTIPLE_TRACKED_WORKLOADS :: 1189;
    MULTIPLE_TRACKED_WORKLOAD_PAIRS :: 1190;
    OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR :: 1191;
    CANNOT_ADD_TRACKED_WORKLOAD :: 1192;
    INCOMPLETE_TRACKED_WORKLOAD_PAIR :: 1193;
    CREATE_STATE_OBJECT_ERROR :: 1194;
    GET_SHADER_IDENTIFIER_ERROR :: 1195;
    GET_SHADER_STACK_SIZE_ERROR :: 1196;
    GET_PIPELINE_STACK_SIZE_ERROR :: 1197;
    SET_PIPELINE_STACK_SIZE_ERROR :: 1198;
    GET_SHADER_IDENTIFIER_SIZE_INVALID :: 1199;
    CHECK_DRIVER_MATCHING_IDENTIFIER_INVALID :: 1200;
    CHECK_DRIVER_MATCHING_IDENTIFIER_DRIVER_REPORTED_ISSUE :: 1201;
    RENDER_PASS_INVALID_RESOURCE_BARRIER :: 1202;
    RENDER_PASS_DISALLOWED_API_CALLED :: 1203;
    RENDER_PASS_CANNOT_NEST_RENDER_PASSES :: 1204;
    RENDER_PASS_CANNOT_END_WITHOUT_BEGIN :: 1205;
    RENDER_PASS_CANNOT_CLOSE_COMMAND_LIST :: 1206;
    RENDER_PASS_GPU_WORK_WHILE_SUSPENDED :: 1207;
    RENDER_PASS_MISMATCHING_SUSPEND_RESUME :: 1208;
    RENDER_PASS_NO_PRIOR_SUSPEND_WITHIN_EXECUTECOMMANDLISTS :: 1209;
    RENDER_PASS_NO_SUBSEQUENT_RESUME_WITHIN_EXECUTECOMMANDLISTS :: 1210;
    TRACKED_WORKLOAD_COMMAND_QUEUE_MISMATCH :: 1211;
    TRACKED_WORKLOAD_NOT_SUPPORTED :: 1212;
    RENDER_PASS_MISMATCHING_NO_ACCESS :: 1213;
    RENDER_PASS_UNSUPPORTED_RESOLVE :: 1214;
    CLEARUNORDEREDACCESSVIEW_INVALID_RESOURCE_PTR :: 1215;
    WINDOWS7_FENCE_OUTOFORDER_SIGNAL :: 1216;
    WINDOWS7_FENCE_OUTOFORDER_WAIT :: 1217;
    VIDEO_CREATE_MOTION_ESTIMATOR_INVALID_ARGUMENT :: 1218;
    VIDEO_CREATE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT :: 1219;
    ESTIMATE_MOTION_INVALID_ARGUMENT :: 1220;
    RESOLVE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT :: 1221;
    GETGPUVIRTUALADDRESS_INVALID_HEAP_TYPE :: 1222;
    SET_BACKGROUND_PROCESSING_MODE_INVALID_ARGUMENT :: 1223;
    CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE_FOR_FEATURE_LEVEL :: 1224;
    CREATE_VIDEOEXTENSIONCOMMAND :: 1225;
    LIVE_VIDEOEXTENSIONCOMMAND :: 1226;
    DESTROY_VIDEOEXTENSIONCOMMAND :: 1227;
    INVALID_VIDEO_EXTENSION_COMMAND_ID :: 1228;
    VIDEO_EXTENSION_COMMAND_INVALID_ARGUMENT :: 1229;
    CREATE_ROOT_SIGNATURE_NOT_UNIQUE_IN_DXIL_LIBRARY :: 1230;
    VARIABLE_SHADING_RATE_NOT_ALLOWED_WITH_TIR :: 1231;
    GEOMETRY_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE :: 1232;
    RSSETSHADING_RATE_INVALID_SHADING_RATE :: 1233;
    RSSETSHADING_RATE_SHADING_RATE_NOT_PERMITTED_BY_CAP :: 1234;
    RSSETSHADING_RATE_INVALID_COMBINER :: 1235;
    RSSETSHADINGRATEIMAGE_REQUIRES_TIER_2 :: 1236;
    RSSETSHADINGRATE_REQUIRES_TIER_1 :: 1237;
    SHADING_RATE_IMAGE_INCORRECT_FORMAT :: 1238;
    SHADING_RATE_IMAGE_INCORRECT_ARRAY_SIZE :: 1239;
    SHADING_RATE_IMAGE_INCORRECT_MIP_LEVEL :: 1240;
    SHADING_RATE_IMAGE_INCORRECT_SAMPLE_COUNT :: 1241;
    SHADING_RATE_IMAGE_INCORRECT_SAMPLE_QUALITY :: 1242;
    NON_RETAIL_SHADER_MODEL_WONT_VALIDATE :: 1243;
    CREATEGRAPHICSPIPELINESTATE_AS_ROOT_SIGNATURE_MISMATCH :: 1244;
    CREATEGRAPHICSPIPELINESTATE_MS_ROOT_SIGNATURE_MISMATCH :: 1245;
    ADD_TO_STATE_OBJECT_ERROR :: 1246;
    CREATE_PROTECTED_RESOURCE_SESSION_INVALID_ARGUMENT :: 1247;
    CREATEGRAPHICSPIPELINESTATE_MS_PSO_DESC_MISMATCH :: 1248;
    CREATEPIPELINESTATE_MS_INCOMPLETE_TYPE :: 1249;
    CREATEGRAPHICSPIPELINESTATE_AS_NOT_MS_MISMATCH :: 1250;
    CREATEGRAPHICSPIPELINESTATE_MS_NOT_PS_MISMATCH :: 1251;
    NONZERO_SAMPLER_FEEDBACK_MIP_REGION_WITH_INCOMPATIBLE_FORMAT :: 1252;
    CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_SHADER_MISMATCH :: 1253;
    EMPTY_DISPATCH :: 1254;
    RESOURCE_FORMAT_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY :: 1255;
    SAMPLER_FEEDBACK_MAP_INVALID_MIP_REGION :: 1256;
    SAMPLER_FEEDBACK_MAP_INVALID_DIMENSION :: 1257;
    SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_COUNT :: 1258;
    SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_QUALITY :: 1259;
    SAMPLER_FEEDBACK_MAP_INVALID_LAYOUT :: 1260;
    SAMPLER_FEEDBACK_MAP_REQUIRES_UNORDERED_ACCESS_FLAG :: 1261;
    SAMPLER_FEEDBACK_CREATE_UAV_NULL_ARGUMENTS :: 1262;
    SAMPLER_FEEDBACK_UAV_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY :: 1263;
    SAMPLER_FEEDBACK_CREATE_UAV_REQUIRES_FEEDBACK_MAP_FORMAT :: 1264;
    CREATEMESHSHADER_INVALIDSHADERBYTECODE :: 1265;
    CREATEMESHSHADER_OUTOFMEMORY :: 1266;
    CREATEMESHSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE :: 1267;
    RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_INVALID_FORMAT :: 1268;
    RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_INVALID_MIP_LEVEL_COUNT :: 1269;
    RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_ARRAY_SIZE_MISMATCH :: 1270;
    SAMPLER_FEEDBACK_CREATE_UAV_MISMATCHING_TARGETED_RESOURCE :: 1271;
    CREATEMESHSHADER_OUTPUTEXCEEDSMAXSIZE :: 1272;
    CREATEMESHSHADER_GROUPSHAREDEXCEEDSMAXSIZE :: 1273;
    VERTEX_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE :: 1274;
    MESH_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE :: 1275;
    CREATEMESHSHADER_MISMATCHEDASMSPAYLOADSIZE :: 1276;
    CREATE_ROOT_SIGNATURE_UNBOUNDED_STATIC_DESCRIPTORS :: 1277;
    CREATEAMPLIFICATIONSHADER_INVALIDSHADERBYTECODE :: 1278;
    CREATEAMPLIFICATIONSHADER_OUTOFMEMORY :: 1279;
    CREATE_SHADERCACHESESSION :: 1280;
    LIVE_SHADERCACHESESSION :: 1281;
    DESTROY_SHADERCACHESESSION :: 1282;
    CREATESHADERCACHESESSION_INVALIDARGS :: 1283;
    CREATESHADERCACHESESSION_DISABLED :: 1284;
    CREATESHADERCACHESESSION_ALREADYOPEN :: 1285;
    SHADERCACHECONTROL_DEVELOPERMODE :: 1286;
    SHADERCACHECONTROL_INVALIDFLAGS :: 1287;
    SHADERCACHECONTROL_STATEALREADYSET :: 1288;
    SHADERCACHECONTROL_IGNOREDFLAG :: 1289;
    SHADERCACHESESSION_STOREVALUE_ALREADYPRESENT :: 1290;
    SHADERCACHESESSION_STOREVALUE_HASHCOLLISION :: 1291;
    SHADERCACHESESSION_STOREVALUE_CACHEFULL :: 1292;
    SHADERCACHESESSION_FINDVALUE_NOTFOUND :: 1293;
    SHADERCACHESESSION_CORRUPT :: 1294;
    SHADERCACHESESSION_DISABLED :: 1295;
    OVERSIZED_DISPATCH :: 1296;
    CREATE_VIDEOENCODER :: 1297;
    LIVE_VIDEOENCODER :: 1298;
    DESTROY_VIDEOENCODER :: 1299;
    CREATE_VIDEOENCODERHEAP :: 1300;
    LIVE_VIDEOENCODERHEAP :: 1301;
    DESTROY_VIDEOENCODERHEAP :: 1302;
    COPYTEXTUREREGION_MISMATCH_ENCODE_REFERENCE_ONLY_FLAG :: 1303;
    COPYRESOURCE_MISMATCH_ENCODE_REFERENCE_ONLY_FLAG :: 1304;
    ENCODE_FRAME_INVALID_PARAMETERS :: 1305;
    ENCODE_FRAME_UNSUPPORTED_PARAMETERS :: 1306;
    RESOLVE_ENCODER_OUTPUT_METADATA_INVALID_PARAMETERS :: 1307;
    RESOLVE_ENCODER_OUTPUT_METADATA_UNSUPPORTED_PARAMETERS :: 1308;
    CREATE_VIDEO_ENCODER_INVALID_PARAMETERS :: 1309;
    CREATE_VIDEO_ENCODER_UNSUPPORTED_PARAMETERS :: 1310;
    CREATE_VIDEO_ENCODER_HEAP_INVALID_PARAMETERS :: 1311;
    CREATE_VIDEO_ENCODER_HEAP_UNSUPPORTED_PARAMETERS :: 1312;
    CREATECOMMANDLIST_NULL_COMMANDALLOCATOR :: 1313;
    CLEAR_UNORDERED_ACCESS_VIEW_INVALID_DESCRIPTOR_HANDLE :: 1314;
    DESCRIPTOR_HEAP_NOT_SHADER_VISIBLE :: 1315;
    CREATEBLENDSTATE_BLENDOP_WARNING :: 1316;
    CREATEBLENDSTATE_BLENDOPALPHA_WARNING :: 1317;
    WRITE_COMBINE_PERFORMANCE_WARNING :: 1318;
    RESOLVE_QUERY_INVALID_QUERY_STATE :: 1319;
    SETPRIVATEDATA_NO_ACCESS :: 1320;
    COMMAND_LIST_STATIC_DESCRIPTOR_SAMPLER_MODE_MISMATCH :: 1321;
    GETCOPYABLEFOOTPRINTS_UNSUPPORTED_BUFFER_WIDTH :: 1322;
    CREATEMESHSHADER_TOPOLOGY_MISMATCH :: 1323;
    VRS_SUM_COMBINER_REQUIRES_CAPABILITY :: 1324;
    SETTING_SHADING_RATE_FROM_MS_REQUIRES_CAPABILITY :: 1325;
    SHADERCACHESESSION_SHADERCACHEDELETE_NOTSUPPORTED :: 1326;
    SHADERCACHECONTROL_SHADERCACHECLEAR_NOTSUPPORTED :: 1327;
    D3D12_MESSAGES_END :: 1328;
}

D3D12_MESSAGE_ID_UNKNOWN :: 0;
D3D12_MESSAGE_ID_STRING_FROM_APPLICATION :: 1;
D3D12_MESSAGE_ID_CORRUPTED_THIS :: 2;
D3D12_MESSAGE_ID_CORRUPTED_PARAMETER1 :: 3;
D3D12_MESSAGE_ID_CORRUPTED_PARAMETER2 :: 4;
D3D12_MESSAGE_ID_CORRUPTED_PARAMETER3 :: 5;
D3D12_MESSAGE_ID_CORRUPTED_PARAMETER4 :: 6;
D3D12_MESSAGE_ID_CORRUPTED_PARAMETER5 :: 7;
D3D12_MESSAGE_ID_CORRUPTED_PARAMETER6 :: 8;
D3D12_MESSAGE_ID_CORRUPTED_PARAMETER7 :: 9;
D3D12_MESSAGE_ID_CORRUPTED_PARAMETER8 :: 10;
D3D12_MESSAGE_ID_CORRUPTED_PARAMETER9 :: 11;
D3D12_MESSAGE_ID_CORRUPTED_PARAMETER10 :: 12;
D3D12_MESSAGE_ID_CORRUPTED_PARAMETER11 :: 13;
D3D12_MESSAGE_ID_CORRUPTED_PARAMETER12 :: 14;
D3D12_MESSAGE_ID_CORRUPTED_PARAMETER13 :: 15;
D3D12_MESSAGE_ID_CORRUPTED_PARAMETER14 :: 16;
D3D12_MESSAGE_ID_CORRUPTED_PARAMETER15 :: 17;
D3D12_MESSAGE_ID_CORRUPTED_MULTITHREADING :: 18;
D3D12_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY :: 19;
D3D12_MESSAGE_ID_GETPRIVATEDATA_MOREDATA :: 20;
D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA :: 21;
D3D12_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS :: 24;
D3D12_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY :: 25;
D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT :: 26;
D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC :: 27;
D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT :: 28;
D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANESLICE :: 29;
D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANESLICE :: 30;
D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS :: 31;
D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE :: 32;
D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT :: 35;
D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT :: 36;
D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC :: 37;
D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT :: 38;
D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANESLICE :: 39;
D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANESLICE :: 40;
D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS :: 41;
D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE :: 42;
D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT :: 45;
D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC :: 46;
D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT :: 47;
D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS :: 48;
D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE :: 49;
D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY :: 52;
D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS :: 53;
D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT :: 54;
D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT :: 55;
D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT :: 56;
D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS :: 57;
D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH :: 58;
D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE :: 59;
D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE :: 60;
D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT :: 61;
D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC :: 62;
D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE :: 63;
D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC :: 64;
D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT :: 65;
D3D12_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY :: 66;
D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE :: 67;
D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE :: 68;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY :: 69;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE :: 70;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE :: 71;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY :: 72;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE :: 73;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE :: 74;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES :: 75;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED :: 76;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED :: 79;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT :: 80;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT :: 81;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT :: 82;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT :: 83;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION :: 84;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT :: 85;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE :: 86;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC :: 87;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH :: 88;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS :: 89;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX :: 90;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE :: 91;
D3D12_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY :: 92;
D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE :: 93;
D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE :: 94;
D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE :: 95;
D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE :: 96;
D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP :: 97;
D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS :: 98;
D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK :: 100;
D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC :: 101;
D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP :: 102;
D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP :: 103;
D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP :: 104;
D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC :: 105;
D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP :: 106;
D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP :: 107;
D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP :: 108;
D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC :: 109;
D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND :: 111;
D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND :: 112;
D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP :: 113;
D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA :: 114;
D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA :: 115;
D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA :: 116;
D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK :: 117;
D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID :: 135;
D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_NOT_SET :: 200;
D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_MISMATCH :: 201;
D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_NOT_SET :: 202;
D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL :: 209;
D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_TOO_SMALL :: 210;
D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_NOT_SET :: 211;
D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_FORMAT_INVALID :: 212;
D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_TOO_SMALL :: 213;
D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INVALID_PRIMITIVETOPOLOGY :: 219;
D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_STRIDE_UNALIGNED :: 221;
D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_OFFSET_UNALIGNED :: 222;
D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT :: 232;
D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT :: 233;
D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT :: 234;
D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC :: 239;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC :: 240;
D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH :: 245;
D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT :: 253;
D3D12_MESSAGE_ID_LIVE_OBJECT_SUMMARY :: 255;
D3D12_MESSAGE_ID_LIVE_DEVICE :: 274;
D3D12_MESSAGE_ID_LIVE_SWAPCHAIN :: 275;
D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS :: 276;
D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE :: 277;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE :: 278;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER :: 280;
D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE :: 283;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM :: 284;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES :: 285;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES :: 286;
D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES :: 287;
D3D12_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY :: 289;
D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE :: 290;
D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE :: 291;
D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE :: 292;
D3D12_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY :: 294;
D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE :: 295;
D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE :: 296;
D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE :: 297;
D3D12_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED :: 310;
D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE :: 318;
D3D12_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY :: 321;
D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE :: 322;
D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE :: 323;
D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 331;
D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 332;
D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 333;
D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 334;
D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED :: 335;
D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 336;
D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED :: 337;
D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE :: 340;
D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC :: 341;
D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT :: 342;
D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANESLICE :: 343;
D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANESLICE :: 344;
D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS :: 345;
D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT :: 346;
D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS :: 354;
D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT :: 401;
D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS :: 403;
D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 410;
D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 412;
D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 414;
D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 416;
D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED :: 418;
D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 420;
D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED :: 422;
D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED :: 425;
D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED :: 426;
D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED :: 427;
D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED :: 428;
D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED :: 429;
D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED :: 430;
D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED :: 431;
D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT :: 447;
D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT :: 448;
D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER :: 493;
D3D12_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER :: 494;
D3D12_MESSAGE_ID_CREATEDEVICE_INVALIDARGS :: 506;
D3D12_MESSAGE_ID_CREATEDEVICE_WARNING :: 507;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_TYPE :: 519;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_NULL_POINTER :: 520;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SUBRESOURCE :: 521;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_RESERVED_BITS :: 522;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISSING_BIND_FLAGS :: 523;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_MISC_FLAGS :: 524;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_MATCHING_STATES :: 525;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINATION :: 526;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_BEFORE_AFTER_MISMATCH :: 527;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_RESOURCE :: 528;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_SAMPLE_COUNT :: 529;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS :: 530;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINED_FLAGS :: 531;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS_FOR_FORMAT :: 532;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SPLIT_BARRIER :: 533;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_END :: 534;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_BEGIN :: 535;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAG :: 536;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMMAND_LIST_TYPE :: 537;
D3D12_MESSAGE_ID_INVALID_SUBRESOURCE_STATE :: 538;
D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CONTENTION :: 540;
D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET :: 541;
D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET_BUNDLE :: 542;
D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CANNOT_RESET :: 543;
D3D12_MESSAGE_ID_COMMAND_LIST_OPEN :: 544;
D3D12_MESSAGE_ID_INVALID_BUNDLE_API :: 546;
D3D12_MESSAGE_ID_COMMAND_LIST_CLOSED :: 547;
D3D12_MESSAGE_ID_WRONG_COMMAND_ALLOCATOR_TYPE :: 549;
D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_SYNC :: 552;
D3D12_MESSAGE_ID_COMMAND_LIST_SYNC :: 553;
D3D12_MESSAGE_ID_SET_DESCRIPTOR_HEAP_INVALID :: 554;
D3D12_MESSAGE_ID_CREATE_COMMANDQUEUE :: 557;
D3D12_MESSAGE_ID_CREATE_COMMANDALLOCATOR :: 558;
D3D12_MESSAGE_ID_CREATE_PIPELINESTATE :: 559;
D3D12_MESSAGE_ID_CREATE_COMMANDLIST12 :: 560;
D3D12_MESSAGE_ID_CREATE_RESOURCE :: 562;
D3D12_MESSAGE_ID_CREATE_DESCRIPTORHEAP :: 563;
D3D12_MESSAGE_ID_CREATE_ROOTSIGNATURE :: 564;
D3D12_MESSAGE_ID_CREATE_LIBRARY :: 565;
D3D12_MESSAGE_ID_CREATE_HEAP :: 566;
D3D12_MESSAGE_ID_CREATE_MONITOREDFENCE :: 567;
D3D12_MESSAGE_ID_CREATE_QUERYHEAP :: 568;
D3D12_MESSAGE_ID_CREATE_COMMANDSIGNATURE :: 569;
D3D12_MESSAGE_ID_LIVE_COMMANDQUEUE :: 570;
D3D12_MESSAGE_ID_LIVE_COMMANDALLOCATOR :: 571;
D3D12_MESSAGE_ID_LIVE_PIPELINESTATE :: 572;
D3D12_MESSAGE_ID_LIVE_COMMANDLIST12 :: 573;
D3D12_MESSAGE_ID_LIVE_RESOURCE :: 575;
D3D12_MESSAGE_ID_LIVE_DESCRIPTORHEAP :: 576;
D3D12_MESSAGE_ID_LIVE_ROOTSIGNATURE :: 577;
D3D12_MESSAGE_ID_LIVE_LIBRARY :: 578;
D3D12_MESSAGE_ID_LIVE_HEAP :: 579;
D3D12_MESSAGE_ID_LIVE_MONITOREDFENCE :: 580;
D3D12_MESSAGE_ID_LIVE_QUERYHEAP :: 581;
D3D12_MESSAGE_ID_LIVE_COMMANDSIGNATURE :: 582;
D3D12_MESSAGE_ID_DESTROY_COMMANDQUEUE :: 583;
D3D12_MESSAGE_ID_DESTROY_COMMANDALLOCATOR :: 584;
D3D12_MESSAGE_ID_DESTROY_PIPELINESTATE :: 585;
D3D12_MESSAGE_ID_DESTROY_COMMANDLIST12 :: 586;
D3D12_MESSAGE_ID_DESTROY_RESOURCE :: 588;
D3D12_MESSAGE_ID_DESTROY_DESCRIPTORHEAP :: 589;
D3D12_MESSAGE_ID_DESTROY_ROOTSIGNATURE :: 590;
D3D12_MESSAGE_ID_DESTROY_LIBRARY :: 591;
D3D12_MESSAGE_ID_DESTROY_HEAP :: 592;
D3D12_MESSAGE_ID_DESTROY_MONITOREDFENCE :: 593;
D3D12_MESSAGE_ID_DESTROY_QUERYHEAP :: 594;
D3D12_MESSAGE_ID_DESTROY_COMMANDSIGNATURE :: 595;
D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONS :: 597;
D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMISCFLAGS :: 599;
D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDARG_RETURN :: 602;
D3D12_MESSAGE_ID_CREATERESOURCE_OUTOFMEMORY_RETURN :: 603;
D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDESC :: 604;
D3D12_MESSAGE_ID_POSSIBLY_INVALID_SUBRESOURCE_STATE :: 607;
D3D12_MESSAGE_ID_INVALID_USE_OF_NON_RESIDENT_RESOURCE :: 608;
D3D12_MESSAGE_ID_POSSIBLE_INVALID_USE_OF_NON_RESIDENT_RESOURCE :: 609;
D3D12_MESSAGE_ID_BUNDLE_PIPELINE_STATE_MISMATCH :: 610;
D3D12_MESSAGE_ID_PRIMITIVE_TOPOLOGY_MISMATCH_PIPELINE_STATE :: 611;
D3D12_MESSAGE_ID_RENDER_TARGET_FORMAT_MISMATCH_PIPELINE_STATE :: 613;
D3D12_MESSAGE_ID_RENDER_TARGET_SAMPLE_DESC_MISMATCH_PIPELINE_STATE :: 614;
D3D12_MESSAGE_ID_DEPTH_STENCIL_FORMAT_MISMATCH_PIPELINE_STATE :: 615;
D3D12_MESSAGE_ID_DEPTH_STENCIL_SAMPLE_DESC_MISMATCH_PIPELINE_STATE :: 616;
D3D12_MESSAGE_ID_CREATESHADER_INVALIDBYTECODE :: 622;
D3D12_MESSAGE_ID_CREATEHEAP_NULLDESC :: 623;
D3D12_MESSAGE_ID_CREATEHEAP_INVALIDSIZE :: 624;
D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDHEAPTYPE :: 625;
D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES :: 626;
D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMEMORYPOOL :: 627;
D3D12_MESSAGE_ID_CREATEHEAP_INVALIDPROPERTIES :: 628;
D3D12_MESSAGE_ID_CREATEHEAP_INVALIDALIGNMENT :: 629;
D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMISCFLAGS :: 630;
D3D12_MESSAGE_ID_CREATEHEAP_INVALIDMISCFLAGS :: 631;
D3D12_MESSAGE_ID_CREATEHEAP_INVALIDARG_RETURN :: 632;
D3D12_MESSAGE_ID_CREATEHEAP_OUTOFMEMORY_RETURN :: 633;
D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAPPROPERTIES :: 634;
D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPTYPE :: 635;
D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES :: 636;
D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDMEMORYPOOL :: 637;
D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPPROPERTIES :: 638;
D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPMISCFLAGS :: 639;
D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPMISCFLAGS :: 640;
D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDARG_RETURN :: 641;
D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_OUTOFMEMORY_RETURN :: 642;
D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_UNRECOGNIZEDHEAPTYPE :: 643;
D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_INVALIDHEAPTYPE :: 644;
D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_INVALID_DESC :: 645;
D3D12_MESSAGE_ID_INVALID_DESCRIPTOR_HANDLE :: 646;
D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE :: 647;
D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_RESOURCE :: 649;
D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_DESC :: 650;
D3D12_MESSAGE_ID_CREATE_UNORDEREDACCESS_VIEW_INVALID_COUNTER_USAGE :: 652;
D3D12_MESSAGE_ID_COPY_DESCRIPTORS_INVALID_RANGES :: 653;
D3D12_MESSAGE_ID_COPY_DESCRIPTORS_WRITE_ONLY_DESCRIPTOR :: 654;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RTV_FORMAT_NOT_UNKNOWN :: 655;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_RENDER_TARGET_COUNT :: 656;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VERTEX_SHADER_NOT_SET :: 657;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_NOT_SET :: 658;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_HS_DS_SIGNATURE_MISMATCH :: 659;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERINDEX :: 660;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_COMPONENTTYPE :: 661;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERMASK :: 662;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SYSTEMVALUE :: 663;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS :: 664;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_MINPRECISION :: 665;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND :: 666;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_XOR_DS_MISMATCH :: 667;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH :: 668;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_CONTROL_POINT_COUNT_MISMATCH :: 669;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_TESSELLATOR_DOMAIN_MISMATCH :: 670;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN :: 671;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_FORCED_SAMPLE_COUNT :: 672;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_PRIMITIVETOPOLOGY :: 673;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SYSTEMVALUE :: 674;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 :: 675;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING :: 676;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_TYPE_MISMATCH :: 677;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS :: 678;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RENDERTARGETVIEW_NOT_SET :: 679;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DEPTHSTENCILVIEW_NOT_SET :: 680;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_INPUT_PRIMITIVE_MISMATCH :: 681;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_POSITION_NOT_PRESENT :: 682;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE_FLAGS :: 683;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_INDEX_BUFFER_PROPERTIES :: 684;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SAMPLE_DESC :: 685;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_ROOT_SIGNATURE_MISMATCH :: 686;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DS_ROOT_SIGNATURE_MISMATCH :: 687;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VS_ROOT_SIGNATURE_MISMATCH :: 688;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_ROOT_SIGNATURE_MISMATCH :: 689;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_ROOT_SIGNATURE_MISMATCH :: 690;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE :: 691;
D3D12_MESSAGE_ID_EXECUTE_BUNDLE_OPEN_BUNDLE :: 692;
D3D12_MESSAGE_ID_EXECUTE_BUNDLE_DESCRIPTOR_HEAP_MISMATCH :: 693;
D3D12_MESSAGE_ID_EXECUTE_BUNDLE_TYPE :: 694;
D3D12_MESSAGE_ID_DRAW_EMPTY_SCISSOR_RECTANGLE :: 695;
D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_BLOB_NOT_FOUND :: 696;
D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_DESERIALIZE_FAILED :: 697;
D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_INVALID_CONFIGURATION :: 698;
D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_SUPPORTED_ON_DEVICE :: 699;
D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLRESOURCEPROPERTIES :: 700;
D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAP :: 701;
D3D12_MESSAGE_ID_GETRESOURCEALLOCATIONINFO_INVALIDRDESCS :: 702;
D3D12_MESSAGE_ID_MAKERESIDENT_NULLOBJECTARRAY :: 703;
D3D12_MESSAGE_ID_EVICT_NULLOBJECTARRAY :: 705;
D3D12_MESSAGE_ID_SET_DESCRIPTOR_TABLE_INVALID :: 708;
D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_INVALID :: 709;
D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_BUFFER_VIEW_INVALID :: 710;
D3D12_MESSAGE_ID_SET_ROOT_SHADER_RESOURCE_VIEW_INVALID :: 711;
D3D12_MESSAGE_ID_SET_ROOT_UNORDERED_ACCESS_VIEW_INVALID :: 712;
D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID_DESC :: 713;
D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID_DESC :: 715;
D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID_DESC :: 717;
D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDDIMENSIONALITY :: 718;
D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDLAYOUT :: 719;
D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONALITY :: 720;
D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDALIGNMENT :: 721;
D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMIPLEVELS :: 722;
D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDSAMPLEDESC :: 723;
D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDLAYOUT :: 724;
D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID :: 725;
D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID :: 726;
D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID :: 727;
D3D12_MESSAGE_ID_SET_RENDER_TARGETS_INVALID :: 728;
D3D12_MESSAGE_ID_CREATEQUERY_HEAP_INVALID_PARAMETERS :: 729;
D3D12_MESSAGE_ID_BEGIN_END_QUERY_INVALID_PARAMETERS :: 731;
D3D12_MESSAGE_ID_CLOSE_COMMAND_LIST_OPEN_QUERY :: 732;
D3D12_MESSAGE_ID_RESOLVE_QUERY_DATA_INVALID_PARAMETERS :: 733;
D3D12_MESSAGE_ID_SET_PREDICATION_INVALID_PARAMETERS :: 734;
D3D12_MESSAGE_ID_TIMESTAMPS_NOT_SUPPORTED :: 735;
D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDFORMAT :: 737;
D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDFORMAT :: 738;
D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_INVALIDSUBRESOURCERANGE :: 739;
D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_INVALIDBASEOFFSET :: 740;
D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDSUBRESOURCERANGE :: 739;
D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDBASEOFFSET :: 740;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_HEAP :: 741;
D3D12_MESSAGE_ID_CREATE_SAMPLER_INVALID :: 742;
D3D12_MESSAGE_ID_CREATECOMMANDSIGNATURE_INVALID :: 743;
D3D12_MESSAGE_ID_EXECUTE_INDIRECT_INVALID_PARAMETERS :: 744;
D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_RESOURCE_DIMENSION :: 745;
D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUE :: 815;
D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDCLEARVALUEFORMAT :: 816;
D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUEFORMAT :: 817;
D3D12_MESSAGE_ID_CREATERESOURCE_CLEARVALUEDENORMFLUSH :: 818;
D3D12_MESSAGE_ID_CLEARRENDERTARGETVIEW_MISMATCHINGCLEARVALUE :: 820;
D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_MISMATCHINGCLEARVALUE :: 821;
D3D12_MESSAGE_ID_MAP_INVALIDHEAP :: 822;
D3D12_MESSAGE_ID_UNMAP_INVALIDHEAP :: 823;
D3D12_MESSAGE_ID_MAP_INVALIDRESOURCE :: 824;
D3D12_MESSAGE_ID_UNMAP_INVALIDRESOURCE :: 825;
D3D12_MESSAGE_ID_MAP_INVALIDSUBRESOURCE :: 826;
D3D12_MESSAGE_ID_UNMAP_INVALIDSUBRESOURCE :: 827;
D3D12_MESSAGE_ID_MAP_INVALIDRANGE :: 828;
D3D12_MESSAGE_ID_UNMAP_INVALIDRANGE :: 829;
D3D12_MESSAGE_ID_MAP_INVALIDDATAPOINTER :: 832;
D3D12_MESSAGE_ID_MAP_INVALIDARG_RETURN :: 833;
D3D12_MESSAGE_ID_MAP_OUTOFMEMORY_RETURN :: 834;
D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_BUNDLENOTSUPPORTED :: 835;
D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_COMMANDLISTMISMATCH :: 836;
D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_OPENCOMMANDLIST :: 837;
D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_FAILEDCOMMANDLIST :: 838;
D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLDST :: 839;
D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDDSTRESOURCEDIMENSION :: 840;
D3D12_MESSAGE_ID_COPYBUFFERREGION_DSTRANGEOUTOFBOUNDS :: 841;
D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLSRC :: 842;
D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDSRCRESOURCEDIMENSION :: 843;
D3D12_MESSAGE_ID_COPYBUFFERREGION_SRCRANGEOUTOFBOUNDS :: 844;
D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDCOPYFLAGS :: 845;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLDST :: 846;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTTYPE :: 847;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCEDIMENSION :: 848;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCE :: 849;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTSUBRESOURCE :: 850;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTOFFSET :: 851;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTFORMAT :: 852;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTFORMAT :: 853;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDIMENSIONS :: 854;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTROWPITCH :: 855;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTPLACEMENT :: 856;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDSPLACEDFOOTPRINTFORMAT :: 857;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_DSTREGIONOUTOFBOUNDS :: 858;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLSRC :: 859;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCTYPE :: 860;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCEDIMENSION :: 861;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCE :: 862;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCSUBRESOURCE :: 863;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCOFFSET :: 864;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCFORMAT :: 865;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCFORMAT :: 866;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDIMENSIONS :: 867;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCROWPITCH :: 868;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCPLACEMENT :: 869;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDSPLACEDFOOTPRINTFORMAT :: 870;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_SRCREGIONOUTOFBOUNDS :: 871;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTCOORDINATES :: 872;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCBOX :: 873;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_FORMATMISMATCH :: 874;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_EMPTYBOX :: 875;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDCOPYFLAGS :: 876;
D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SUBRESOURCE_INDEX :: 877;
D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_FORMAT :: 878;
D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_MISMATCH :: 879;
D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SAMPLE_COUNT :: 880;
D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_INVALID_SHADER :: 881;
D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_CS_ROOT_SIGNATURE_MISMATCH :: 882;
D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_MISSING_ROOT_SIGNATURE :: 883;
D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALIDCACHEDBLOB :: 884;
D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBADAPTERMISMATCH :: 885;
D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDRIVERVERSIONMISMATCH :: 886;
D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDESCMISMATCH :: 887;
D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBIGNORED :: 888;
D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDHEAP :: 889;
D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDRESOURCE :: 890;
D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDBOX :: 891;
D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDSUBRESOURCE :: 892;
D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_EMPTYBOX :: 893;
D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDHEAP :: 894;
D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDRESOURCE :: 895;
D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDBOX :: 896;
D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDSUBRESOURCE :: 897;
D3D12_MESSAGE_ID_READFROMSUBRESOURCE_EMPTYBOX :: 898;
D3D12_MESSAGE_ID_TOO_MANY_NODES_SPECIFIED :: 899;
D3D12_MESSAGE_ID_INVALID_NODE_INDEX :: 900;
D3D12_MESSAGE_ID_GETHEAPPROPERTIES_INVALIDRESOURCE :: 901;
D3D12_MESSAGE_ID_NODE_MASK_MISMATCH :: 902;
D3D12_MESSAGE_ID_COMMAND_LIST_OUTOFMEMORY :: 903;
D3D12_MESSAGE_ID_COMMAND_LIST_MULTIPLE_SWAPCHAIN_BUFFER_REFERENCES :: 904;
D3D12_MESSAGE_ID_COMMAND_LIST_TOO_MANY_SWAPCHAIN_REFERENCES :: 905;
D3D12_MESSAGE_ID_COMMAND_QUEUE_TOO_MANY_SWAPCHAIN_REFERENCES :: 906;
D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_WRONGSWAPCHAINBUFFERREFERENCE :: 907;
D3D12_MESSAGE_ID_COMMAND_LIST_SETRENDERTARGETS_INVALIDNUMRENDERTARGETS :: 908;
D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_TYPE :: 909;
D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_FLAGS :: 910;
D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFLAGS :: 911;
D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFORMAT :: 912;
D3D12_MESSAGE_ID_CREATESHAREDHEAP_INVALIDFLAGS :: 913;
D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_UNRECOGNIZEDPROPERTIES :: 914;
D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDSIZE :: 915;
D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDOBJECT :: 916;
D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDOBJECT :: 917;
D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDKEY :: 918;
D3D12_MESSAGE_ID_KEYEDMUTEX_WRONGSTATE :: 919;
D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_PRIORITY :: 920;
D3D12_MESSAGE_ID_OBJECT_DELETED_WHILE_STILL_IN_USE :: 921;
D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_FLAGS :: 922;
D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_HAS_NO_RESOURCE :: 923;
D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RENDER_TARGET_DELETED :: 924;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_ALL_RENDER_TARGETS_HAVE_UNKNOWN_FORMAT :: 925;
D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_INTERSECTS_MULTIPLE_BUFFERS :: 926;
D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_GPU_WRITTEN_READBACK_RESOURCE_MAPPED :: 927;
D3D12_MESSAGE_ID_UNMAP_RANGE_NOT_EMPTY :: 929;
D3D12_MESSAGE_ID_MAP_INVALID_NULLRANGE :: 930;
D3D12_MESSAGE_ID_UNMAP_INVALID_NULLRANGE :: 931;
D3D12_MESSAGE_ID_NO_GRAPHICS_API_SUPPORT :: 932;
D3D12_MESSAGE_ID_NO_COMPUTE_API_SUPPORT :: 933;
D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_FLAGS_NOT_SUPPORTED :: 934;
D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_ARGUMENT_UNINITIALIZED :: 935;
D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_HEAP_INDEX_OUT_OF_BOUNDS :: 936;
D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TABLE_REGISTER_INDEX_OUT_OF_BOUNDS :: 937;
D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_UNINITIALIZED :: 938;
D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TYPE_MISMATCH :: 939;
D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SRV_RESOURCE_DIMENSION_MISMATCH :: 940;
D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UAV_RESOURCE_DIMENSION_MISMATCH :: 941;
D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INCOMPATIBLE_RESOURCE_STATE :: 942;
D3D12_MESSAGE_ID_COPYRESOURCE_NULLDST :: 943;
D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDDSTRESOURCE :: 944;
D3D12_MESSAGE_ID_COPYRESOURCE_NULLSRC :: 945;
D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDSRCRESOURCE :: 946;
D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLDST :: 947;
D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDDSTRESOURCE :: 948;
D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLSRC :: 949;
D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDSRCRESOURCE :: 950;
D3D12_MESSAGE_ID_PIPELINE_STATE_TYPE_MISMATCH :: 951;
D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_NOT_SET :: 952;
D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_MISMATCH :: 953;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_ZERO_BARRIERS :: 954;
D3D12_MESSAGE_ID_BEGIN_END_EVENT_MISMATCH :: 955;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_POSSIBLE_BEFORE_AFTER_MISMATCH :: 956;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_BEGIN_END :: 957;
D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INVALID_RESOURCE :: 958;
D3D12_MESSAGE_ID_USE_OF_ZERO_REFCOUNT_OBJECT :: 959;
D3D12_MESSAGE_ID_OBJECT_EVICTED_WHILE_STILL_IN_USE :: 960;
D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_DESCRIPTOR_ACCESS_OUT_OF_BOUNDS :: 961;
D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_INVALIDLIBRARYBLOB :: 962;
D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_DRIVERVERSIONMISMATCH :: 963;
D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_ADAPTERVERSIONMISMATCH :: 964;
D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_UNSUPPORTED :: 965;
D3D12_MESSAGE_ID_CREATE_PIPELINELIBRARY :: 966;
D3D12_MESSAGE_ID_LIVE_PIPELINELIBRARY :: 967;
D3D12_MESSAGE_ID_DESTROY_PIPELINELIBRARY :: 968;
D3D12_MESSAGE_ID_STOREPIPELINE_NONAME :: 969;
D3D12_MESSAGE_ID_STOREPIPELINE_DUPLICATENAME :: 970;
D3D12_MESSAGE_ID_LOADPIPELINE_NAMENOTFOUND :: 971;
D3D12_MESSAGE_ID_LOADPIPELINE_INVALIDDESC :: 972;
D3D12_MESSAGE_ID_PIPELINELIBRARY_SERIALIZE_NOTENOUGHMEMORY :: 973;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_RT_OUTPUT_MISMATCH :: 974;
D3D12_MESSAGE_ID_SETEVENTONMULTIPLEFENCECOMPLETION_INVALIDFLAGS :: 975;
D3D12_MESSAGE_ID_CREATE_QUEUE_VIDEO_NOT_SUPPORTED :: 976;
D3D12_MESSAGE_ID_CREATE_COMMAND_ALLOCATOR_VIDEO_NOT_SUPPORTED :: 977;
D3D12_MESSAGE_ID_CREATEQUERY_HEAP_VIDEO_DECODE_STATISTICS_NOT_SUPPORTED :: 978;
D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDLIST :: 979;
D3D12_MESSAGE_ID_CREATE_VIDEODECODER :: 980;
D3D12_MESSAGE_ID_CREATE_VIDEODECODESTREAM :: 981;
D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDLIST :: 982;
D3D12_MESSAGE_ID_LIVE_VIDEODECODER :: 983;
D3D12_MESSAGE_ID_LIVE_VIDEODECODESTREAM :: 984;
D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDLIST :: 985;
D3D12_MESSAGE_ID_DESTROY_VIDEODECODER :: 986;
D3D12_MESSAGE_ID_DESTROY_VIDEODECODESTREAM :: 987;
D3D12_MESSAGE_ID_DECODE_FRAME_INVALID_PARAMETERS :: 988;
D3D12_MESSAGE_ID_DEPRECATED_API :: 989;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_COMMAND_LIST_TYPE :: 990;
D3D12_MESSAGE_ID_COMMAND_LIST_DESCRIPTOR_TABLE_NOT_SET :: 991;
D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_CONSTANT_BUFFER_VIEW_NOT_SET :: 992;
D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_SHADER_RESOURCE_VIEW_NOT_SET :: 993;
D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_UNORDERED_ACCESS_VIEW_NOT_SET :: 994;
D3D12_MESSAGE_ID_DISCARD_INVALID_SUBRESOURCE_RANGE :: 995;
D3D12_MESSAGE_ID_DISCARD_ONE_SUBRESOURCE_FOR_MIPS_WITH_RECTS :: 996;
D3D12_MESSAGE_ID_DISCARD_NO_RECTS_FOR_NON_TEXTURE2D :: 997;
D3D12_MESSAGE_ID_COPY_ON_SAME_SUBRESOURCE :: 998;
D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PAGEABLE :: 999;
D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UNSUPPORTED :: 1000;
D3D12_MESSAGE_ID_STATIC_DESCRIPTOR_INVALID_DESCRIPTOR_CHANGE :: 1001;
D3D12_MESSAGE_ID_DATA_STATIC_DESCRIPTOR_INVALID_DATA_CHANGE :: 1002;
D3D12_MESSAGE_ID_DATA_STATIC_WHILE_SET_AT_EXECUTE_DESCRIPTOR_INVALID_DATA_CHANGE :: 1003;
D3D12_MESSAGE_ID_EXECUTE_BUNDLE_STATIC_DESCRIPTOR_DATA_STATIC_NOT_SET :: 1004;
D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_ACCESS_OUT_OF_BOUNDS :: 1005;
D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SAMPLER_MODE_MISMATCH :: 1006;
D3D12_MESSAGE_ID_CREATE_FENCE_INVALID_FLAGS :: 1007;
D3D12_MESSAGE_ID_RESOURCE_BARRIER_DUPLICATE_SUBRESOURCE_TRANSITIONS :: 1008;
D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PRIORITY :: 1009;
D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_LARGE_NUM_DESCRIPTORS :: 1013;
D3D12_MESSAGE_ID_BEGIN_EVENT :: 1014;
D3D12_MESSAGE_ID_END_EVENT :: 1015;
D3D12_MESSAGE_ID_CREATEDEVICE_DEBUG_LAYER_STARTUP_OPTIONS :: 1016;
D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_DEPTHBOUNDSTEST_UNSUPPORTED :: 1017;
D3D12_MESSAGE_ID_CREATEPIPELINESTATE_DUPLICATE_SUBOBJECT :: 1018;
D3D12_MESSAGE_ID_CREATEPIPELINESTATE_UNKNOWN_SUBOBJECT :: 1019;
D3D12_MESSAGE_ID_CREATEPIPELINESTATE_ZERO_SIZE_STREAM :: 1020;
D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_STREAM :: 1021;
D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CANNOT_DEDUCE_TYPE :: 1022;
D3D12_MESSAGE_ID_COMMAND_LIST_STATIC_DESCRIPTOR_RESOURCE_DIMENSION_MISMATCH :: 1023;
D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_PRIVILEGE_FOR_GLOBAL_REALTIME :: 1024;
D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_HARDWARE_SUPPORT_FOR_GLOBAL_REALTIME :: 1025;
D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_ARCHITECTURE :: 1026;
D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DST :: 1027;
D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE_DIMENSION :: 1028;
D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DST_RANGE_OUT_OF_BOUNDS :: 1029;
D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_SRC :: 1030;
D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE_DIMENSION :: 1031;
D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_SRC_RANGE_OUT_OF_BOUNDS :: 1032;
D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_OFFSET_ALIGNMENT :: 1033;
D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_RESOURCES :: 1034;
D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_SUBRESOURCE_RANGES :: 1035;
D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_RESOURCE :: 1036;
D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_SUBRESOURCE_RANGE :: 1037;
D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_SUBRESOURCE_OUT_OF_BOUNDS :: 1038;
D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_RANGE_OUT_OF_BOUNDS :: 1039;
D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_ZERO_DEPENDENCIES :: 1040;
D3D12_MESSAGE_ID_DEVICE_CREATE_SHARED_HANDLE_INVALIDARG :: 1041;
D3D12_MESSAGE_ID_DESCRIPTOR_HANDLE_WITH_INVALID_RESOURCE :: 1042;
D3D12_MESSAGE_ID_SETDEPTHBOUNDS_INVALIDARGS :: 1043;
D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_STATE_IMPRECISE :: 1044;
D3D12_MESSAGE_ID_COMMAND_LIST_PIPELINE_STATE_NOT_SET :: 1045;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_MODEL_MISMATCH :: 1046;
D3D12_MESSAGE_ID_OBJECT_ACCESSED_WHILE_STILL_IN_USE :: 1047;
D3D12_MESSAGE_ID_PROGRAMMABLE_MSAA_UNSUPPORTED :: 1048;
D3D12_MESSAGE_ID_SETSAMPLEPOSITIONS_INVALIDARGS :: 1049;
D3D12_MESSAGE_ID_RESOLVESUBRESOURCEREGION_INVALID_RECT :: 1050;
D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDQUEUE :: 1051;
D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDLIST :: 1052;
D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDQUEUE :: 1053;
D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDQUEUE :: 1054;
D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDLIST :: 1055;
D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDQUEUE :: 1056;
D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDQUEUE :: 1057;
D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDLIST :: 1058;
D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDQUEUE :: 1059;
D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSOR :: 1060;
D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSSTREAM :: 1061;
D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSOR :: 1062;
D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSSTREAM :: 1063;
D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSOR :: 1064;
D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSSTREAM :: 1065;
D3D12_MESSAGE_ID_PROCESS_FRAME_INVALID_PARAMETERS :: 1066;
D3D12_MESSAGE_ID_COPY_INVALIDLAYOUT :: 1067;
D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION :: 1068;
D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION_POLICY :: 1069;
D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION :: 1070;
D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION :: 1071;
D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION_POLICY :: 1072;
D3D12_MESSAGE_ID_LIVE_PROTECTED_RESOURCE_SESSION :: 1073;
D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION :: 1074;
D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION_POLICY :: 1075;
D3D12_MESSAGE_ID_DESTROY_PROTECTED_RESOURCE_SESSION :: 1076;
D3D12_MESSAGE_ID_PROTECTED_RESOURCE_SESSION_UNSUPPORTED :: 1077;
D3D12_MESSAGE_ID_FENCE_INVALIDOPERATION :: 1078;
D3D12_MESSAGE_ID_CREATEQUERY_HEAP_COPY_QUEUE_TIMESTAMPS_NOT_SUPPORTED :: 1079;
D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_DEFERRED :: 1080;
D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMFIRSTUSE :: 1081;
D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMCLEAR :: 1082;
D3D12_MESSAGE_ID_CREATE_VIDEODECODERHEAP :: 1083;
D3D12_MESSAGE_ID_LIVE_VIDEODECODERHEAP :: 1084;
D3D12_MESSAGE_ID_DESTROY_VIDEODECODERHEAP :: 1085;
D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDARG_RETURN :: 1086;
D3D12_MESSAGE_ID_OPENEXISTINGHEAP_OUTOFMEMORY_RETURN :: 1087;
D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDADDRESS :: 1088;
D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDHANDLE :: 1089;
D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_DEST :: 1090;
D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_MODE :: 1091;
D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_ALIGNMENT :: 1092;
D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_NOT_SUPPORTED :: 1093;
D3D12_MESSAGE_ID_SETVIEWINSTANCEMASK_INVALIDARGS :: 1094;
D3D12_MESSAGE_ID_VIEW_INSTANCING_UNSUPPORTED :: 1095;
D3D12_MESSAGE_ID_VIEW_INSTANCING_INVALIDARGS :: 1096;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_MISMATCH_DECODE_REFERENCE_ONLY_FLAG :: 1097;
D3D12_MESSAGE_ID_COPYRESOURCE_MISMATCH_DECODE_REFERENCE_ONLY_FLAG :: 1098;
D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_FAILURE :: 1099;
D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_UNSUPPORTED :: 1100;
D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_INVALID_INPUT :: 1101;
D3D12_MESSAGE_ID_CREATE_VIDEO_DECODER_UNSUPPORTED :: 1102;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_METADATA_ERROR :: 1103;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VIEW_INSTANCING_VERTEX_SIZE_EXCEEDED :: 1104;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RUNTIME_INTERNAL_ERROR :: 1105;
D3D12_MESSAGE_ID_NO_VIDEO_API_SUPPORT :: 1106;
D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_INVALID_INPUT :: 1107;
D3D12_MESSAGE_ID_CREATE_VIDEO_PROCESSOR_CAPS_FAILURE :: 1108;
D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_UNSUPPORTED_FORMAT :: 1109;
D3D12_MESSAGE_ID_VIDEO_DECODE_FRAME_INVALID_ARGUMENT :: 1110;
D3D12_MESSAGE_ID_ENQUEUE_MAKE_RESIDENT_INVALID_FLAGS :: 1111;
D3D12_MESSAGE_ID_OPENEXISTINGHEAP_UNSUPPORTED :: 1112;
D3D12_MESSAGE_ID_VIDEO_PROCESS_FRAMES_INVALID_ARGUMENT :: 1113;
D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_UNSUPPORTED :: 1114;
D3D12_MESSAGE_ID_CREATE_COMMANDRECORDER :: 1115;
D3D12_MESSAGE_ID_LIVE_COMMANDRECORDER :: 1116;
D3D12_MESSAGE_ID_DESTROY_COMMANDRECORDER :: 1117;
D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_VIDEO_NOT_SUPPORTED :: 1118;
D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_SUPPORT_FLAGS :: 1119;
D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_FLAGS :: 1120;
D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_MORE_RECORDERS_THAN_LOGICAL_PROCESSORS :: 1121;
D3D12_MESSAGE_ID_CREATE_COMMANDPOOL :: 1122;
D3D12_MESSAGE_ID_LIVE_COMMANDPOOL :: 1123;
D3D12_MESSAGE_ID_DESTROY_COMMANDPOOL :: 1124;
D3D12_MESSAGE_ID_CREATE_COMMAND_POOL_INVALID_FLAGS :: 1125;
D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_VIDEO_NOT_SUPPORTED :: 1126;
D3D12_MESSAGE_ID_COMMAND_RECORDER_SUPPORT_FLAGS_MISMATCH :: 1127;
D3D12_MESSAGE_ID_COMMAND_RECORDER_CONTENTION :: 1128;
D3D12_MESSAGE_ID_COMMAND_RECORDER_USAGE_WITH_CREATECOMMANDLIST_COMMAND_LIST :: 1129;
D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_USAGE_WITH_CREATECOMMANDLIST1_COMMAND_LIST :: 1130;
D3D12_MESSAGE_ID_CANNOT_EXECUTE_EMPTY_COMMAND_LIST :: 1131;
D3D12_MESSAGE_ID_CANNOT_RESET_COMMAND_POOL_WITH_OPEN_COMMAND_LISTS :: 1132;
D3D12_MESSAGE_ID_CANNOT_USE_COMMAND_RECORDER_WITHOUT_CURRENT_TARGET :: 1133;
D3D12_MESSAGE_ID_CANNOT_CHANGE_COMMAND_RECORDER_TARGET_WHILE_RECORDING :: 1134;
D3D12_MESSAGE_ID_COMMAND_POOL_SYNC :: 1135;
D3D12_MESSAGE_ID_EVICT_UNDERFLOW :: 1136;
D3D12_MESSAGE_ID_CREATE_META_COMMAND :: 1137;
D3D12_MESSAGE_ID_LIVE_META_COMMAND :: 1138;
D3D12_MESSAGE_ID_DESTROY_META_COMMAND :: 1139;
D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_DST_RESOURCE :: 1140;
D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_SRC_RESOURCE :: 1141;
D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE :: 1142;
D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE :: 1143;
D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_BUFFER :: 1144;
D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_RESOURCE_DESC :: 1145;
D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_UNSUPPORTED :: 1146;
D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_DIMENSION :: 1147;
D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_FLAGS :: 1148;
D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_OFFSET :: 1149;
D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_DIMENSION :: 1150;
D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_FLAGS :: 1151;
D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_OUTOFMEMORY_RETURN :: 1152;
D3D12_MESSAGE_ID_CANNOT_CREATE_GRAPHICS_AND_VIDEO_COMMAND_RECORDER :: 1153;
D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_POSSIBLY_MISMATCHING_PROPERTIES :: 1154;
D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE :: 1155;
D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INCOMPATIBLE_WITH_STRUCTURED_BUFFERS :: 1156;
D3D12_MESSAGE_ID_COMPUTE_ONLY_DEVICE_OPERATION_UNSUPPORTED :: 1157;
D3D12_MESSAGE_ID_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INVALID :: 1158;
D3D12_MESSAGE_ID_EMIT_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_INVALID :: 1159;
D3D12_MESSAGE_ID_COPY_RAYTRACING_ACCELERATION_STRUCTURE_INVALID :: 1160;
D3D12_MESSAGE_ID_DISPATCH_RAYS_INVALID :: 1161;
D3D12_MESSAGE_ID_GET_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO_INVALID :: 1162;
D3D12_MESSAGE_ID_CREATE_LIFETIMETRACKER :: 1163;
D3D12_MESSAGE_ID_LIVE_LIFETIMETRACKER :: 1164;
D3D12_MESSAGE_ID_DESTROY_LIFETIMETRACKER :: 1165;
D3D12_MESSAGE_ID_DESTROYOWNEDOBJECT_OBJECTNOTOWNED :: 1166;
D3D12_MESSAGE_ID_CREATE_TRACKEDWORKLOAD :: 1167;
D3D12_MESSAGE_ID_LIVE_TRACKEDWORKLOAD :: 1168;
D3D12_MESSAGE_ID_DESTROY_TRACKEDWORKLOAD :: 1169;
D3D12_MESSAGE_ID_RENDER_PASS_ERROR :: 1170;
D3D12_MESSAGE_ID_META_COMMAND_ID_INVALID :: 1171;
D3D12_MESSAGE_ID_META_COMMAND_UNSUPPORTED_PARAMS :: 1172;
D3D12_MESSAGE_ID_META_COMMAND_FAILED_ENUMERATION :: 1173;
D3D12_MESSAGE_ID_META_COMMAND_PARAMETER_SIZE_MISMATCH :: 1174;
D3D12_MESSAGE_ID_UNINITIALIZED_META_COMMAND :: 1175;
D3D12_MESSAGE_ID_META_COMMAND_INVALID_GPU_VIRTUAL_ADDRESS :: 1176;
D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDLIST :: 1177;
D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDLIST :: 1178;
D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDLIST :: 1179;
D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDQUEUE :: 1180;
D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDQUEUE :: 1181;
D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDQUEUE :: 1182;
D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONESTIMATOR :: 1183;
D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONESTIMATOR :: 1184;
D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONESTIMATOR :: 1185;
D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONVECTORHEAP :: 1186;
D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONVECTORHEAP :: 1187;
D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONVECTORHEAP :: 1188;
D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOADS :: 1189;
D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOAD_PAIRS :: 1190;
D3D12_MESSAGE_ID_OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR :: 1191;
D3D12_MESSAGE_ID_CANNOT_ADD_TRACKED_WORKLOAD :: 1192;
D3D12_MESSAGE_ID_INCOMPLETE_TRACKED_WORKLOAD_PAIR :: 1193;
D3D12_MESSAGE_ID_CREATE_STATE_OBJECT_ERROR :: 1194;
D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_ERROR :: 1195;
D3D12_MESSAGE_ID_GET_SHADER_STACK_SIZE_ERROR :: 1196;
D3D12_MESSAGE_ID_GET_PIPELINE_STACK_SIZE_ERROR :: 1197;
D3D12_MESSAGE_ID_SET_PIPELINE_STACK_SIZE_ERROR :: 1198;
D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_SIZE_INVALID :: 1199;
D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_INVALID :: 1200;
D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_DRIVER_REPORTED_ISSUE :: 1201;
D3D12_MESSAGE_ID_RENDER_PASS_INVALID_RESOURCE_BARRIER :: 1202;
D3D12_MESSAGE_ID_RENDER_PASS_DISALLOWED_API_CALLED :: 1203;
D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_NEST_RENDER_PASSES :: 1204;
D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_END_WITHOUT_BEGIN :: 1205;
D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_CLOSE_COMMAND_LIST :: 1206;
D3D12_MESSAGE_ID_RENDER_PASS_GPU_WORK_WHILE_SUSPENDED :: 1207;
D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_SUSPEND_RESUME :: 1208;
D3D12_MESSAGE_ID_RENDER_PASS_NO_PRIOR_SUSPEND_WITHIN_EXECUTECOMMANDLISTS :: 1209;
D3D12_MESSAGE_ID_RENDER_PASS_NO_SUBSEQUENT_RESUME_WITHIN_EXECUTECOMMANDLISTS :: 1210;
D3D12_MESSAGE_ID_TRACKED_WORKLOAD_COMMAND_QUEUE_MISMATCH :: 1211;
D3D12_MESSAGE_ID_TRACKED_WORKLOAD_NOT_SUPPORTED :: 1212;
D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_NO_ACCESS :: 1213;
D3D12_MESSAGE_ID_RENDER_PASS_UNSUPPORTED_RESOLVE :: 1214;
D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INVALID_RESOURCE_PTR :: 1215;
D3D12_MESSAGE_ID_WINDOWS7_FENCE_OUTOFORDER_SIGNAL :: 1216;
D3D12_MESSAGE_ID_WINDOWS7_FENCE_OUTOFORDER_WAIT :: 1217;
D3D12_MESSAGE_ID_VIDEO_CREATE_MOTION_ESTIMATOR_INVALID_ARGUMENT :: 1218;
D3D12_MESSAGE_ID_VIDEO_CREATE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT :: 1219;
D3D12_MESSAGE_ID_ESTIMATE_MOTION_INVALID_ARGUMENT :: 1220;
D3D12_MESSAGE_ID_RESOLVE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT :: 1221;
D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_HEAP_TYPE :: 1222;
D3D12_MESSAGE_ID_SET_BACKGROUND_PROCESSING_MODE_INVALID_ARGUMENT :: 1223;
D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE_FOR_FEATURE_LEVEL :: 1224;
D3D12_MESSAGE_ID_CREATE_VIDEOEXTENSIONCOMMAND :: 1225;
D3D12_MESSAGE_ID_LIVE_VIDEOEXTENSIONCOMMAND :: 1226;
D3D12_MESSAGE_ID_DESTROY_VIDEOEXTENSIONCOMMAND :: 1227;
D3D12_MESSAGE_ID_INVALID_VIDEO_EXTENSION_COMMAND_ID :: 1228;
D3D12_MESSAGE_ID_VIDEO_EXTENSION_COMMAND_INVALID_ARGUMENT :: 1229;
D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_UNIQUE_IN_DXIL_LIBRARY :: 1230;
D3D12_MESSAGE_ID_VARIABLE_SHADING_RATE_NOT_ALLOWED_WITH_TIR :: 1231;
D3D12_MESSAGE_ID_GEOMETRY_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE :: 1232;
D3D12_MESSAGE_ID_RSSETSHADING_RATE_INVALID_SHADING_RATE :: 1233;
D3D12_MESSAGE_ID_RSSETSHADING_RATE_SHADING_RATE_NOT_PERMITTED_BY_CAP :: 1234;
D3D12_MESSAGE_ID_RSSETSHADING_RATE_INVALID_COMBINER :: 1235;
D3D12_MESSAGE_ID_RSSETSHADINGRATEIMAGE_REQUIRES_TIER_2 :: 1236;
D3D12_MESSAGE_ID_RSSETSHADINGRATE_REQUIRES_TIER_1 :: 1237;
D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_FORMAT :: 1238;
D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_ARRAY_SIZE :: 1239;
D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_MIP_LEVEL :: 1240;
D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_SAMPLE_COUNT :: 1241;
D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_SAMPLE_QUALITY :: 1242;
D3D12_MESSAGE_ID_NON_RETAIL_SHADER_MODEL_WONT_VALIDATE :: 1243;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_AS_ROOT_SIGNATURE_MISMATCH :: 1244;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_ROOT_SIGNATURE_MISMATCH :: 1245;
D3D12_MESSAGE_ID_ADD_TO_STATE_OBJECT_ERROR :: 1246;
D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION_INVALID_ARGUMENT :: 1247;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_PSO_DESC_MISMATCH :: 1248;
D3D12_MESSAGE_ID_CREATEPIPELINESTATE_MS_INCOMPLETE_TYPE :: 1249;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_AS_NOT_MS_MISMATCH :: 1250;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_NOT_PS_MISMATCH :: 1251;
D3D12_MESSAGE_ID_NONZERO_SAMPLER_FEEDBACK_MIP_REGION_WITH_INCOMPATIBLE_FORMAT :: 1252;
D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_SHADER_MISMATCH :: 1253;
D3D12_MESSAGE_ID_EMPTY_DISPATCH :: 1254;
D3D12_MESSAGE_ID_RESOURCE_FORMAT_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY :: 1255;
D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_MIP_REGION :: 1256;
D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_DIMENSION :: 1257;
D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_COUNT :: 1258;
D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_QUALITY :: 1259;
D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_LAYOUT :: 1260;
D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_REQUIRES_UNORDERED_ACCESS_FLAG :: 1261;
D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_NULL_ARGUMENTS :: 1262;
D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_UAV_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY :: 1263;
D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_REQUIRES_FEEDBACK_MAP_FORMAT :: 1264;
D3D12_MESSAGE_ID_CREATEMESHSHADER_INVALIDSHADERBYTECODE :: 1265;
D3D12_MESSAGE_ID_CREATEMESHSHADER_OUTOFMEMORY :: 1266;
D3D12_MESSAGE_ID_CREATEMESHSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE :: 1267;
D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_INVALID_FORMAT :: 1268;
D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_INVALID_MIP_LEVEL_COUNT :: 1269;
D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_ARRAY_SIZE_MISMATCH :: 1270;
D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_MISMATCHING_TARGETED_RESOURCE :: 1271;
D3D12_MESSAGE_ID_CREATEMESHSHADER_OUTPUTEXCEEDSMAXSIZE :: 1272;
D3D12_MESSAGE_ID_CREATEMESHSHADER_GROUPSHAREDEXCEEDSMAXSIZE :: 1273;
D3D12_MESSAGE_ID_VERTEX_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE :: 1274;
D3D12_MESSAGE_ID_MESH_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE :: 1275;
D3D12_MESSAGE_ID_CREATEMESHSHADER_MISMATCHEDASMSPAYLOADSIZE :: 1276;
D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_UNBOUNDED_STATIC_DESCRIPTORS :: 1277;
D3D12_MESSAGE_ID_CREATEAMPLIFICATIONSHADER_INVALIDSHADERBYTECODE :: 1278;
D3D12_MESSAGE_ID_CREATEAMPLIFICATIONSHADER_OUTOFMEMORY :: 1279;
D3D12_MESSAGE_ID_CREATE_SHADERCACHESESSION :: 1280;
D3D12_MESSAGE_ID_LIVE_SHADERCACHESESSION :: 1281;
D3D12_MESSAGE_ID_DESTROY_SHADERCACHESESSION :: 1282;
D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_INVALIDARGS :: 1283;
D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_DISABLED :: 1284;
D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_ALREADYOPEN :: 1285;
D3D12_MESSAGE_ID_SHADERCACHECONTROL_DEVELOPERMODE :: 1286;
D3D12_MESSAGE_ID_SHADERCACHECONTROL_INVALIDFLAGS :: 1287;
D3D12_MESSAGE_ID_SHADERCACHECONTROL_STATEALREADYSET :: 1288;
D3D12_MESSAGE_ID_SHADERCACHECONTROL_IGNOREDFLAG :: 1289;
D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_ALREADYPRESENT :: 1290;
D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_HASHCOLLISION :: 1291;
D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_CACHEFULL :: 1292;
D3D12_MESSAGE_ID_SHADERCACHESESSION_FINDVALUE_NOTFOUND :: 1293;
D3D12_MESSAGE_ID_SHADERCACHESESSION_CORRUPT :: 1294;
D3D12_MESSAGE_ID_SHADERCACHESESSION_DISABLED :: 1295;
D3D12_MESSAGE_ID_OVERSIZED_DISPATCH :: 1296;
D3D12_MESSAGE_ID_CREATE_VIDEOENCODER :: 1297;
D3D12_MESSAGE_ID_LIVE_VIDEOENCODER :: 1298;
D3D12_MESSAGE_ID_DESTROY_VIDEOENCODER :: 1299;
D3D12_MESSAGE_ID_CREATE_VIDEOENCODERHEAP :: 1300;
D3D12_MESSAGE_ID_LIVE_VIDEOENCODERHEAP :: 1301;
D3D12_MESSAGE_ID_DESTROY_VIDEOENCODERHEAP :: 1302;
D3D12_MESSAGE_ID_COPYTEXTUREREGION_MISMATCH_ENCODE_REFERENCE_ONLY_FLAG :: 1303;
D3D12_MESSAGE_ID_COPYRESOURCE_MISMATCH_ENCODE_REFERENCE_ONLY_FLAG :: 1304;
D3D12_MESSAGE_ID_ENCODE_FRAME_INVALID_PARAMETERS :: 1305;
D3D12_MESSAGE_ID_ENCODE_FRAME_UNSUPPORTED_PARAMETERS :: 1306;
D3D12_MESSAGE_ID_RESOLVE_ENCODER_OUTPUT_METADATA_INVALID_PARAMETERS :: 1307;
D3D12_MESSAGE_ID_RESOLVE_ENCODER_OUTPUT_METADATA_UNSUPPORTED_PARAMETERS :: 1308;
D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_INVALID_PARAMETERS :: 1309;
D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_UNSUPPORTED_PARAMETERS :: 1310;
D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_HEAP_INVALID_PARAMETERS :: 1311;
D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_HEAP_UNSUPPORTED_PARAMETERS :: 1312;
D3D12_MESSAGE_ID_CREATECOMMANDLIST_NULL_COMMANDALLOCATOR :: 1313;
D3D12_MESSAGE_ID_CLEAR_UNORDERED_ACCESS_VIEW_INVALID_DESCRIPTOR_HANDLE :: 1314;
D3D12_MESSAGE_ID_DESCRIPTOR_HEAP_NOT_SHADER_VISIBLE :: 1315;
D3D12_MESSAGE_ID_CREATEBLENDSTATE_BLENDOP_WARNING :: 1316;
D3D12_MESSAGE_ID_CREATEBLENDSTATE_BLENDOPALPHA_WARNING :: 1317;
D3D12_MESSAGE_ID_WRITE_COMBINE_PERFORMANCE_WARNING :: 1318;
D3D12_MESSAGE_ID_RESOLVE_QUERY_INVALID_QUERY_STATE :: 1319;
D3D12_MESSAGE_ID_SETPRIVATEDATA_NO_ACCESS :: 1320;
D3D12_MESSAGE_ID_COMMAND_LIST_STATIC_DESCRIPTOR_SAMPLER_MODE_MISMATCH :: 1321;
D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_UNSUPPORTED_BUFFER_WIDTH :: 1322;
D3D12_MESSAGE_ID_CREATEMESHSHADER_TOPOLOGY_MISMATCH :: 1323;
D3D12_MESSAGE_ID_VRS_SUM_COMBINER_REQUIRES_CAPABILITY :: 1324;
D3D12_MESSAGE_ID_SETTING_SHADING_RATE_FROM_MS_REQUIRES_CAPABILITY :: 1325;
D3D12_MESSAGE_ID_SHADERCACHESESSION_SHADERCACHEDELETE_NOTSUPPORTED :: 1326;
D3D12_MESSAGE_ID_SHADERCACHECONTROL_SHADERCACHECLEAR_NOTSUPPORTED :: 1327;
D3D12_MESSAGE_ID_D3D12_MESSAGES_END :: 1328;

D3D12_MESSAGE_SEVERITY :: enum s32
{
    CORRUPTION :: 0;
    ERROR :: 1;
    WARNING :: 2;
    INFO :: 3;
    MESSAGE :: 4;
}

D3D12_MESSAGE_SEVERITY_CORRUPTION :: 0;
D3D12_MESSAGE_SEVERITY_ERROR :: 1;
D3D12_MESSAGE_SEVERITY_WARNING :: 2;
D3D12_MESSAGE_SEVERITY_INFO :: 3;
D3D12_MESSAGE_SEVERITY_MESSAGE :: 4;

D3D12_META_COMMAND_DESC :: struct
{
    Id : GUID;
    Name : PWSTR; // Const
    InitializationDirtyState : D3D12_GRAPHICS_STATES;
    ExecutionDirtyState : D3D12_GRAPHICS_STATES;
}

D3D12_META_COMMAND_PARAMETER_DESC :: struct
{
    Name : PWSTR; // Const
    _Type : D3D12_META_COMMAND_PARAMETER_TYPE;
    Flags : D3D12_META_COMMAND_PARAMETER_FLAGS;
    RequiredResourceState : D3D12_RESOURCE_STATES;
    StructureOffset : u32;
}

D3D12_META_COMMAND_PARAMETER_FLAGS :: enum_flags u32
{
    INPUT :: 1;
    OUTPUT :: 2;
}

D3D12_META_COMMAND_PARAMETER_FLAG_INPUT :: 1;
D3D12_META_COMMAND_PARAMETER_FLAG_OUTPUT :: 2;

D3D12_META_COMMAND_PARAMETER_STAGE :: enum s32
{
    CREATION :: 0;
    INITIALIZATION :: 1;
    EXECUTION :: 2;
}

D3D12_META_COMMAND_PARAMETER_STAGE_CREATION :: 0;
D3D12_META_COMMAND_PARAMETER_STAGE_INITIALIZATION :: 1;
D3D12_META_COMMAND_PARAMETER_STAGE_EXECUTION :: 2;

D3D12_META_COMMAND_PARAMETER_TYPE :: enum s32
{
    FLOAT :: 0;
    UINT64 :: 1;
    GPU_VIRTUAL_ADDRESS :: 2;
    CPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV :: 3;
    GPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV :: 4;
}

D3D12_META_COMMAND_PARAMETER_TYPE_FLOAT :: 0;
D3D12_META_COMMAND_PARAMETER_TYPE_UINT64 :: 1;
D3D12_META_COMMAND_PARAMETER_TYPE_GPU_VIRTUAL_ADDRESS :: 2;
D3D12_META_COMMAND_PARAMETER_TYPE_CPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV :: 3;
D3D12_META_COMMAND_PARAMETER_TYPE_GPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV :: 4;

D3D12_MIP_REGION :: struct
{
    Width : u32;
    Height : u32;
    Depth : u32;
}

D3D12_MULTIPLE_FENCE_WAIT_FLAGS :: enum_flags u32
{
    NONE :: 0;
    ANY :: 1;
    ALL :: 0;
}

D3D12_MULTIPLE_FENCE_WAIT_FLAG_NONE :: 0;
D3D12_MULTIPLE_FENCE_WAIT_FLAG_ANY :: 1;
D3D12_MULTIPLE_FENCE_WAIT_FLAG_ALL :: 0;

D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS :: enum_flags u32
{
    D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE :: 0;
    D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE :: 1;
}

D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE :: 0;
D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE :: 1;

D3D12_NODE_MASK :: struct
{
    NodeMask : u32;
}

D3D12_PACKED_MIP_INFO :: struct
{
    NumStandardMips : u8;
    NumPackedMips : u8;
    NumTilesForPackedMips : u32;
    StartTileIndexInOverallResource : u32;
}

D3D12_PARAMETER_DESC :: struct
{
    Name : PSTR; // Const
    SemanticName : PSTR; // Const
    _Type : D3D_SHADER_VARIABLE_TYPE;
    Class : D3D_SHADER_VARIABLE_CLASS;
    Rows : u32;
    Columns : u32;
    InterpolationMode : D3D_INTERPOLATION_MODE;
    Flags : D3D_PARAMETER_FLAGS;
    FirstInRegister : u32;
    FirstInComponent : u32;
    FirstOutRegister : u32;
    FirstOutComponent : u32;
}

D3D12_PIPELINE_STATE_FLAGS :: enum_flags u32
{
    NONE :: 0;
    TOOL_DEBUG :: 1;
}

D3D12_PIPELINE_STATE_FLAG_NONE :: 0;
D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG :: 1;

D3D12_PIPELINE_STATE_STREAM_DESC :: struct
{
    SizeInBytes : u64;
    pPipelineStateSubobjectStream : *void;
}

D3D12_PIPELINE_STATE_SUBOBJECT_TYPE :: enum s32
{
    ROOT_SIGNATURE :: 0;
    VS :: 1;
    PS :: 2;
    DS :: 3;
    HS :: 4;
    GS :: 5;
    CS :: 6;
    STREAM_OUTPUT :: 7;
    BLEND :: 8;
    SAMPLE_MASK :: 9;
    RASTERIZER :: 10;
    DEPTH_STENCIL :: 11;
    INPUT_LAYOUT :: 12;
    IB_STRIP_CUT_VALUE :: 13;
    PRIMITIVE_TOPOLOGY :: 14;
    RENDER_TARGET_FORMATS :: 15;
    DEPTH_STENCIL_FORMAT :: 16;
    SAMPLE_DESC :: 17;
    NODE_MASK :: 18;
    CACHED_PSO :: 19;
    FLAGS :: 20;
    DEPTH_STENCIL1 :: 21;
    VIEW_INSTANCING :: 22;
    AS :: 24;
    MS :: 25;
    MAX_VALID :: 26;
}

D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE :: 0;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS :: 1;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS :: 2;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS :: 3;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS :: 4;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS :: 5;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS :: 6;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT :: 7;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND :: 8;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK :: 9;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER :: 10;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL :: 11;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT :: 12;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE :: 13;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY :: 14;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS :: 15;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT :: 16;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC :: 17;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK :: 18;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO :: 19;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS :: 20;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1 :: 21;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING :: 22;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_AS :: 24;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MS :: 25;
D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID :: 26;

D3D12_PLACED_SUBRESOURCE_FOOTPRINT :: struct
{
    Offset : u64;
    Footprint : D3D12_SUBRESOURCE_FOOTPRINT;
}

D3D12_PREDICATION_OP :: enum s32
{
    EQUAL_ZERO :: 0;
    NOT_EQUAL_ZERO :: 1;
}

D3D12_PREDICATION_OP_EQUAL_ZERO :: 0;
D3D12_PREDICATION_OP_NOT_EQUAL_ZERO :: 1;

D3D12_PRIMITIVE_TOPOLOGY_TYPE :: enum s32
{
    UNDEFINED :: 0;
    POINT :: 1;
    LINE :: 2;
    TRIANGLE :: 3;
    PATCH :: 4;
}

D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED :: 0;
D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT :: 1;
D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE :: 2;
D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE :: 3;
D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH :: 4;

D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER :: enum s32
{
    NOT_SUPPORTED :: 0;
    _1 :: 1;
    _2 :: 2;
}

D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_NOT_SUPPORTED :: 0;
D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_1 :: 1;
D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_2 :: 2;

D3D12_PROTECTED_RESOURCE_SESSION_DESC :: struct
{
    NodeMask : u32;
    Flags : D3D12_PROTECTED_RESOURCE_SESSION_FLAGS;
}

D3D12_PROTECTED_RESOURCE_SESSION_DESC1 :: struct
{
    NodeMask : u32;
    Flags : D3D12_PROTECTED_RESOURCE_SESSION_FLAGS;
    ProtectionType : GUID;
}

D3D12_PROTECTED_RESOURCE_SESSION_FLAGS :: enum_flags u32
{
    NONE :: 0;
}

D3D12_PROTECTED_RESOURCE_SESSION_FLAG_NONE :: 0;

D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS :: enum_flags u32
{
    NONE :: 0;
    SUPPORTED :: 1;
}

D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_NONE :: 0;
D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_SUPPORTED :: 1;

D3D12_PROTECTED_SESSION_STATUS :: enum s32
{
    OK :: 0;
    INVALID :: 1;
}

D3D12_PROTECTED_SESSION_STATUS_OK :: 0;
D3D12_PROTECTED_SESSION_STATUS_INVALID :: 1;

D3D12_QUERY_DATA_PIPELINE_STATISTICS :: struct
{
    IAVertices : u64;
    IAPrimitives : u64;
    VSInvocations : u64;
    GSInvocations : u64;
    GSPrimitives : u64;
    CInvocations : u64;
    CPrimitives : u64;
    PSInvocations : u64;
    HSInvocations : u64;
    DSInvocations : u64;
    CSInvocations : u64;
}

D3D12_QUERY_DATA_PIPELINE_STATISTICS1 :: struct
{
    IAVertices : u64;
    IAPrimitives : u64;
    VSInvocations : u64;
    GSInvocations : u64;
    GSPrimitives : u64;
    CInvocations : u64;
    CPrimitives : u64;
    PSInvocations : u64;
    HSInvocations : u64;
    DSInvocations : u64;
    CSInvocations : u64;
    ASInvocations : u64;
    MSInvocations : u64;
    MSPrimitives : u64;
}

D3D12_QUERY_DATA_SO_STATISTICS :: struct
{
    NumPrimitivesWritten : u64;
    PrimitivesStorageNeeded : u64;
}

D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS :: struct
{
    Status : u64;
    NumMacroblocksAffected : u64;
    FrameRate : DXGI_RATIONAL;
    BitRate : u32;
}

D3D12_QUERY_HEAP_DESC :: struct
{
    _Type : D3D12_QUERY_HEAP_TYPE;
    Count : u32;
    NodeMask : u32;
}

D3D12_QUERY_HEAP_TYPE :: enum s32
{
    OCCLUSION :: 0;
    TIMESTAMP :: 1;
    PIPELINE_STATISTICS :: 2;
    SO_STATISTICS :: 3;
    VIDEO_DECODE_STATISTICS :: 4;
    COPY_QUEUE_TIMESTAMP :: 5;
    PIPELINE_STATISTICS1 :: 7;
}

D3D12_QUERY_HEAP_TYPE_OCCLUSION :: 0;
D3D12_QUERY_HEAP_TYPE_TIMESTAMP :: 1;
D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS :: 2;
D3D12_QUERY_HEAP_TYPE_SO_STATISTICS :: 3;
D3D12_QUERY_HEAP_TYPE_VIDEO_DECODE_STATISTICS :: 4;
D3D12_QUERY_HEAP_TYPE_COPY_QUEUE_TIMESTAMP :: 5;
D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS1 :: 7;

D3D12_QUERY_TYPE :: enum s32
{
    OCCLUSION :: 0;
    BINARY_OCCLUSION :: 1;
    TIMESTAMP :: 2;
    PIPELINE_STATISTICS :: 3;
    SO_STATISTICS_STREAM0 :: 4;
    SO_STATISTICS_STREAM1 :: 5;
    SO_STATISTICS_STREAM2 :: 6;
    SO_STATISTICS_STREAM3 :: 7;
    VIDEO_DECODE_STATISTICS :: 8;
    PIPELINE_STATISTICS1 :: 10;
}

D3D12_QUERY_TYPE_OCCLUSION :: 0;
D3D12_QUERY_TYPE_BINARY_OCCLUSION :: 1;
D3D12_QUERY_TYPE_TIMESTAMP :: 2;
D3D12_QUERY_TYPE_PIPELINE_STATISTICS :: 3;
D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0 :: 4;
D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1 :: 5;
D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2 :: 6;
D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3 :: 7;
D3D12_QUERY_TYPE_VIDEO_DECODE_STATISTICS :: 8;
D3D12_QUERY_TYPE_PIPELINE_STATISTICS1 :: 10;

D3D12_RANGE :: struct
{
    Begin : u64;
    End : u64;
}

D3D12_RANGE_UINT64 :: struct
{
    Begin : u64;
    End : u64;
}

D3D12_RASTERIZER_DESC :: struct
{
    FillMode : D3D12_FILL_MODE;
    CullMode : D3D12_CULL_MODE;
    FrontCounterClockwise : BOOL;
    DepthBias : s32;
    DepthBiasClamp : float;
    SlopeScaledDepthBias : float;
    DepthClipEnable : BOOL;
    MultisampleEnable : BOOL;
    AntialiasedLineEnable : BOOL;
    ForcedSampleCount : u32;
    ConservativeRaster : D3D12_CONSERVATIVE_RASTERIZATION_MODE;
}

D3D12_RAYTRACING_AABB :: struct
{
    MinX : float;
    MinY : float;
    MinZ : float;
    MaxX : float;
    MaxY : float;
    MaxZ : float;
}

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS :: enum_flags u32
{
    NONE :: 0;
    ALLOW_UPDATE :: 1;
    ALLOW_COMPACTION :: 2;
    PREFER_FAST_TRACE :: 4;
    PREFER_FAST_BUILD :: 8;
    MINIMIZE_MEMORY :: 16;
    PERFORM_UPDATE :: 32;
}

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_NONE :: 0;
D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE :: 1;
D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION :: 2;
D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_TRACE :: 4;
D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD :: 8;
D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_MINIMIZE_MEMORY :: 16;
D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE :: 32;

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE :: enum s32
{
    CLONE :: 0;
    COMPACT :: 1;
    VISUALIZATION_DECODE_FOR_TOOLS :: 2;
    SERIALIZE :: 3;
    DESERIALIZE :: 4;
}

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_CLONE :: 0;
D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_COMPACT :: 1;
D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_VISUALIZATION_DECODE_FOR_TOOLS :: 2;
D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_SERIALIZE :: 3;
D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_DESERIALIZE :: 4;

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC :: struct
{
    CompactedSizeInBytes : u64;
}

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC :: struct
{
    CurrentSizeInBytes : u64;
}

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC :: struct
{
    DestBuffer : u64;
    InfoType : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE;
}

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC :: struct
{
    SerializedSizeInBytes : u64;
    NumBottomLevelAccelerationStructurePointers : u64;
}

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC :: struct
{
    DecodedSizeInBytes : u64;
}

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE :: enum s32
{
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE :: 0;
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION :: 1;
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION :: 2;
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE :: 3;
}

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE :: 0;
D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION :: 1;
D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION :: 2;
D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE :: 3;

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO :: struct
{
    ResultDataMaxSizeInBytes : u64;
    ScratchDataSizeInBytes : u64;
    UpdateScratchDataSizeInBytes : u64;
}

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV :: struct
{
    Location : u64;
}

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE :: enum s32
{
    TOP_LEVEL :: 0;
    BOTTOM_LEVEL :: 1;
}

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL :: 0;
D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL :: 1;

D3D12_RAYTRACING_GEOMETRY_AABBS_DESC :: struct
{
    AABBCount : u64;
    AABBs : D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE;
}

D3D12_RAYTRACING_GEOMETRY_DESC :: struct
{
    _Type : D3D12_RAYTRACING_GEOMETRY_TYPE;
    Flags : D3D12_RAYTRACING_GEOMETRY_FLAGS;
    union
    {
        Triangles : D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC;
        AABBs : D3D12_RAYTRACING_GEOMETRY_AABBS_DESC;
    }; // Anonymous
}

D3D12_RAYTRACING_GEOMETRY_FLAGS :: enum_flags u32
{
    NONE :: 0;
    OPAQUE :: 1;
    NO_DUPLICATE_ANYHIT_INVOCATION :: 2;
}

D3D12_RAYTRACING_GEOMETRY_FLAG_NONE :: 0;
D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE :: 1;
D3D12_RAYTRACING_GEOMETRY_FLAG_NO_DUPLICATE_ANYHIT_INVOCATION :: 2;

D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC :: struct
{
    Transform3x4 : u64;
    IndexFormat : DXGI_FORMAT;
    VertexFormat : DXGI_FORMAT;
    IndexCount : u32;
    VertexCount : u32;
    IndexBuffer : u64;
    VertexBuffer : D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE;
}

D3D12_RAYTRACING_GEOMETRY_TYPE :: enum s32
{
    TRIANGLES :: 0;
    PROCEDURAL_PRIMITIVE_AABBS :: 1;
}

D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES :: 0;
D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS :: 1;

D3D12_RAYTRACING_INSTANCE_DESC :: struct
{
    Transform : [12]float;
    _bitfield1 : u32;
    _bitfield2 : u32;
    AccelerationStructure : u64;
}

D3D12_RAYTRACING_INSTANCE_FLAGS :: enum_flags u32
{
    NONE :: 0;
    TRIANGLE_CULL_DISABLE :: 1;
    TRIANGLE_FRONT_COUNTERCLOCKWISE :: 2;
    FORCE_OPAQUE :: 4;
    FORCE_NON_OPAQUE :: 8;
}

D3D12_RAYTRACING_INSTANCE_FLAG_NONE :: 0;
D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE :: 1;
D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE :: 2;
D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE :: 4;
D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE :: 8;

D3D12_RAYTRACING_PIPELINE_CONFIG :: struct
{
    MaxTraceRecursionDepth : u32;
}

D3D12_RAYTRACING_PIPELINE_CONFIG1 :: struct
{
    MaxTraceRecursionDepth : u32;
    Flags : D3D12_RAYTRACING_PIPELINE_FLAGS;
}

D3D12_RAYTRACING_PIPELINE_FLAGS :: enum_flags u32
{
    NONE :: 0;
    SKIP_TRIANGLES :: 256;
    SKIP_PROCEDURAL_PRIMITIVES :: 512;
}

D3D12_RAYTRACING_PIPELINE_FLAG_NONE :: 0;
D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_TRIANGLES :: 256;
D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_PROCEDURAL_PRIMITIVES :: 512;

D3D12_RAYTRACING_SHADER_CONFIG :: struct
{
    MaxPayloadSizeInBytes : u32;
    MaxAttributeSizeInBytes : u32;
}

D3D12_RAYTRACING_TIER :: enum s32
{
    NOT_SUPPORTED :: 0;
    _1_0 :: 10;
    _1_1 :: 11;
}

D3D12_RAYTRACING_TIER_NOT_SUPPORTED :: 0;
D3D12_RAYTRACING_TIER_1_0 :: 10;
D3D12_RAYTRACING_TIER_1_1 :: 11;

D3D12_RAY_FLAGS :: enum_flags u32
{
    NONE :: 0;
    FORCE_OPAQUE :: 1;
    FORCE_NON_OPAQUE :: 2;
    ACCEPT_FIRST_HIT_AND_END_SEARCH :: 4;
    SKIP_CLOSEST_HIT_SHADER :: 8;
    CULL_BACK_FACING_TRIANGLES :: 16;
    CULL_FRONT_FACING_TRIANGLES :: 32;
    CULL_OPAQUE :: 64;
    CULL_NON_OPAQUE :: 128;
    SKIP_TRIANGLES :: 256;
    SKIP_PROCEDURAL_PRIMITIVES :: 512;
}

D3D12_RAY_FLAG_NONE :: 0;
D3D12_RAY_FLAG_FORCE_OPAQUE :: 1;
D3D12_RAY_FLAG_FORCE_NON_OPAQUE :: 2;
D3D12_RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH :: 4;
D3D12_RAY_FLAG_SKIP_CLOSEST_HIT_SHADER :: 8;
D3D12_RAY_FLAG_CULL_BACK_FACING_TRIANGLES :: 16;
D3D12_RAY_FLAG_CULL_FRONT_FACING_TRIANGLES :: 32;
D3D12_RAY_FLAG_CULL_OPAQUE :: 64;
D3D12_RAY_FLAG_CULL_NON_OPAQUE :: 128;
D3D12_RAY_FLAG_SKIP_TRIANGLES :: 256;
D3D12_RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES :: 512;

D3D12_RENDER_PASS_BEGINNING_ACCESS :: struct
{
    _Type : D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE;
    union
    {
        Clear : D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS;
    }; // Anonymous
}

D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS :: struct
{
    ClearValue : D3D12_CLEAR_VALUE;
}

D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE :: enum s32
{
    DISCARD :: 0;
    PRESERVE :: 1;
    CLEAR :: 2;
    NO_ACCESS :: 3;
}

D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD :: 0;
D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE :: 1;
D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR :: 2;
D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_NO_ACCESS :: 3;

D3D12_RENDER_PASS_DEPTH_STENCIL_DESC :: struct
{
    cpuDescriptor : D3D12_CPU_DESCRIPTOR_HANDLE;
    DepthBeginningAccess : D3D12_RENDER_PASS_BEGINNING_ACCESS;
    StencilBeginningAccess : D3D12_RENDER_PASS_BEGINNING_ACCESS;
    DepthEndingAccess : D3D12_RENDER_PASS_ENDING_ACCESS;
    StencilEndingAccess : D3D12_RENDER_PASS_ENDING_ACCESS;
}

D3D12_RENDER_PASS_ENDING_ACCESS :: struct
{
    _Type : D3D12_RENDER_PASS_ENDING_ACCESS_TYPE;
    union
    {
        Resolve : D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS;
    }; // Anonymous
}

D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS :: struct
{
    pSrcResource : *ID3D12Resource;
    pDstResource : *ID3D12Resource;
    SubresourceCount : u32;
    pSubresourceParameters : *D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS; // Const
    Format : DXGI_FORMAT;
    ResolveMode : D3D12_RESOLVE_MODE;
    PreserveResolveSource : BOOL;
}

D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS :: struct
{
    SrcSubresource : u32;
    DstSubresource : u32;
    DstX : u32;
    DstY : u32;
    SrcRect : RECT;
}

D3D12_RENDER_PASS_ENDING_ACCESS_TYPE :: enum s32
{
    DISCARD :: 0;
    PRESERVE :: 1;
    RESOLVE :: 2;
    NO_ACCESS :: 3;
}

D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD :: 0;
D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE :: 1;
D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE :: 2;
D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_NO_ACCESS :: 3;

D3D12_RENDER_PASS_FLAGS :: enum_flags u32
{
    NONE :: 0;
    ALLOW_UAV_WRITES :: 1;
    SUSPENDING_PASS :: 2;
    RESUMING_PASS :: 4;
}

D3D12_RENDER_PASS_FLAG_NONE :: 0;
D3D12_RENDER_PASS_FLAG_ALLOW_UAV_WRITES :: 1;
D3D12_RENDER_PASS_FLAG_SUSPENDING_PASS :: 2;
D3D12_RENDER_PASS_FLAG_RESUMING_PASS :: 4;

D3D12_RENDER_PASS_RENDER_TARGET_DESC :: struct
{
    cpuDescriptor : D3D12_CPU_DESCRIPTOR_HANDLE;
    BeginningAccess : D3D12_RENDER_PASS_BEGINNING_ACCESS;
    EndingAccess : D3D12_RENDER_PASS_ENDING_ACCESS;
}

D3D12_RENDER_PASS_TIER :: enum s32
{
    _0 :: 0;
    _1 :: 1;
    _2 :: 2;
}

D3D12_RENDER_PASS_TIER_0 :: 0;
D3D12_RENDER_PASS_TIER_1 :: 1;
D3D12_RENDER_PASS_TIER_2 :: 2;

D3D12_RENDER_TARGET_BLEND_DESC :: struct
{
    BlendEnable : BOOL;
    LogicOpEnable : BOOL;
    SrcBlend : D3D12_BLEND;
    DestBlend : D3D12_BLEND;
    BlendOp : D3D12_BLEND_OP;
    SrcBlendAlpha : D3D12_BLEND;
    DestBlendAlpha : D3D12_BLEND;
    BlendOpAlpha : D3D12_BLEND_OP;
    LogicOp : D3D12_LOGIC_OP;
    RenderTargetWriteMask : u8;
}

D3D12_RENDER_TARGET_VIEW_DESC :: struct
{
    Format : DXGI_FORMAT;
    ViewDimension : D3D12_RTV_DIMENSION;
    union
    {
        Buffer : D3D12_BUFFER_RTV;
        Texture1D : D3D12_TEX1D_RTV;
        Texture1DArray : D3D12_TEX1D_ARRAY_RTV;
        Texture2D : D3D12_TEX2D_RTV;
        Texture2DArray : D3D12_TEX2D_ARRAY_RTV;
        Texture2DMS : D3D12_TEX2DMS_RTV;
        Texture2DMSArray : D3D12_TEX2DMS_ARRAY_RTV;
        Texture3D : D3D12_TEX3D_RTV;
    }; // Anonymous
}

D3D12_RESIDENCY_FLAGS :: enum_flags u32
{
    NONE :: 0;
    DENY_OVERBUDGET :: 1;
}

D3D12_RESIDENCY_FLAG_NONE :: 0;
D3D12_RESIDENCY_FLAG_DENY_OVERBUDGET :: 1;

D3D12_RESIDENCY_PRIORITY :: enum s32
{
    MINIMUM :: 671088640;
    LOW :: 1342177280;
    NORMAL :: 2013265920;
    HIGH :: -1610547200;
    MAXIMUM :: -939524096;
}

D3D12_RESIDENCY_PRIORITY_MINIMUM :: 671088640;
D3D12_RESIDENCY_PRIORITY_LOW :: 1342177280;
D3D12_RESIDENCY_PRIORITY_NORMAL :: 2013265920;
D3D12_RESIDENCY_PRIORITY_HIGH :: -1610547200;
D3D12_RESIDENCY_PRIORITY_MAXIMUM :: -939524096;

D3D12_RESOLVE_MODE :: enum s32
{
    DECOMPRESS :: 0;
    MIN :: 1;
    MAX :: 2;
    AVERAGE :: 3;
    ENCODE_SAMPLER_FEEDBACK :: 4;
    DECODE_SAMPLER_FEEDBACK :: 5;
}

D3D12_RESOLVE_MODE_DECOMPRESS :: 0;
D3D12_RESOLVE_MODE_MIN :: 1;
D3D12_RESOLVE_MODE_MAX :: 2;
D3D12_RESOLVE_MODE_AVERAGE :: 3;
D3D12_RESOLVE_MODE_ENCODE_SAMPLER_FEEDBACK :: 4;
D3D12_RESOLVE_MODE_DECODE_SAMPLER_FEEDBACK :: 5;

D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT :: struct
{
    pMotionVectorHeap : *ID3D12VideoMotionVectorHeap;
    PixelWidth : u32;
    PixelHeight : u32;
}

D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT :: struct
{
    pMotionVectorTexture2D : *ID3D12Resource;
    MotionVectorCoordinate : D3D12_RESOURCE_COORDINATE;
}

D3D12_RESOURCE_ALIASING_BARRIER :: struct
{
    pResourceBefore : *ID3D12Resource;
    pResourceAfter : *ID3D12Resource;
}

D3D12_RESOURCE_ALLOCATION_INFO :: struct
{
    SizeInBytes : u64;
    Alignment : u64;
}

D3D12_RESOURCE_ALLOCATION_INFO1 :: struct
{
    Offset : u64;
    Alignment : u64;
    SizeInBytes : u64;
}

D3D12_RESOURCE_BARRIER :: struct
{
    _Type : D3D12_RESOURCE_BARRIER_TYPE;
    Flags : D3D12_RESOURCE_BARRIER_FLAGS;
    union
    {
        Transition : D3D12_RESOURCE_TRANSITION_BARRIER;
        Aliasing : D3D12_RESOURCE_ALIASING_BARRIER;
        UAV : D3D12_RESOURCE_UAV_BARRIER;
    }; // Anonymous
}

D3D12_RESOURCE_BARRIER_FLAGS :: enum_flags u32
{
    NONE :: 0;
    BEGIN_ONLY :: 1;
    END_ONLY :: 2;
}

D3D12_RESOURCE_BARRIER_FLAG_NONE :: 0;
D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY :: 1;
D3D12_RESOURCE_BARRIER_FLAG_END_ONLY :: 2;

D3D12_RESOURCE_BARRIER_TYPE :: enum s32
{
    TRANSITION :: 0;
    ALIASING :: 1;
    UAV :: 2;
}

D3D12_RESOURCE_BARRIER_TYPE_TRANSITION :: 0;
D3D12_RESOURCE_BARRIER_TYPE_ALIASING :: 1;
D3D12_RESOURCE_BARRIER_TYPE_UAV :: 2;

D3D12_RESOURCE_BINDING_TIER :: enum s32
{
    _1 :: 1;
    _2 :: 2;
    _3 :: 3;
}

D3D12_RESOURCE_BINDING_TIER_1 :: 1;
D3D12_RESOURCE_BINDING_TIER_2 :: 2;
D3D12_RESOURCE_BINDING_TIER_3 :: 3;

D3D12_RESOURCE_COORDINATE :: struct
{
    X : u64;
    Y : u32;
    Z : u32;
    SubresourceIndex : u32;
}

D3D12_RESOURCE_DESC :: struct
{
    Dimension : D3D12_RESOURCE_DIMENSION;
    Alignment : u64;
    Width : u64;
    Height : u32;
    DepthOrArraySize : u16;
    MipLevels : u16;
    Format : DXGI_FORMAT;
    SampleDesc : DXGI_SAMPLE_DESC;
    Layout : D3D12_TEXTURE_LAYOUT;
    Flags : D3D12_RESOURCE_FLAGS;
}

D3D12_RESOURCE_DESC1 :: struct
{
    Dimension : D3D12_RESOURCE_DIMENSION;
    Alignment : u64;
    Width : u64;
    Height : u32;
    DepthOrArraySize : u16;
    MipLevels : u16;
    Format : DXGI_FORMAT;
    SampleDesc : DXGI_SAMPLE_DESC;
    Layout : D3D12_TEXTURE_LAYOUT;
    Flags : D3D12_RESOURCE_FLAGS;
    SamplerFeedbackMipRegion : D3D12_MIP_REGION;
}

D3D12_RESOURCE_DIMENSION :: enum s32
{
    UNKNOWN :: 0;
    BUFFER :: 1;
    TEXTURE1D :: 2;
    TEXTURE2D :: 3;
    TEXTURE3D :: 4;
}

D3D12_RESOURCE_DIMENSION_UNKNOWN :: 0;
D3D12_RESOURCE_DIMENSION_BUFFER :: 1;
D3D12_RESOURCE_DIMENSION_TEXTURE1D :: 2;
D3D12_RESOURCE_DIMENSION_TEXTURE2D :: 3;
D3D12_RESOURCE_DIMENSION_TEXTURE3D :: 4;

D3D12_RESOURCE_FLAGS :: enum_flags u32
{
    NONE :: 0;
    ALLOW_RENDER_TARGET :: 1;
    ALLOW_DEPTH_STENCIL :: 2;
    ALLOW_UNORDERED_ACCESS :: 4;
    DENY_SHADER_RESOURCE :: 8;
    ALLOW_CROSS_ADAPTER :: 16;
    ALLOW_SIMULTANEOUS_ACCESS :: 32;
    VIDEO_DECODE_REFERENCE_ONLY :: 64;
    VIDEO_ENCODE_REFERENCE_ONLY :: 128;
}

D3D12_RESOURCE_FLAG_NONE :: 0;
D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET :: 1;
D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL :: 2;
D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS :: 4;
D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE :: 8;
D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER :: 16;
D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS :: 32;
D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY :: 64;
D3D12_RESOURCE_FLAG_VIDEO_ENCODE_REFERENCE_ONLY :: 128;

D3D12_RESOURCE_HEAP_TIER :: enum s32
{
    _1 :: 1;
    _2 :: 2;
}

D3D12_RESOURCE_HEAP_TIER_1 :: 1;
D3D12_RESOURCE_HEAP_TIER_2 :: 2;

D3D12_RESOURCE_STATES :: enum_flags u32
{
    COMMON :: 0;
    VERTEX_AND_CONSTANT_BUFFER :: 1;
    INDEX_BUFFER :: 2;
    RENDER_TARGET :: 4;
    UNORDERED_ACCESS :: 8;
    DEPTH_WRITE :: 16;
    DEPTH_READ :: 32;
    NON_PIXEL_SHADER_RESOURCE :: 64;
    PIXEL_SHADER_RESOURCE :: 128;
    STREAM_OUT :: 256;
    INDIRECT_ARGUMENT :: 512;
    COPY_DEST :: 1024;
    COPY_SOURCE :: 2048;
    RESOLVE_DEST :: 4096;
    RESOLVE_SOURCE :: 8192;
    RAYTRACING_ACCELERATION_STRUCTURE :: 4194304;
    SHADING_RATE_SOURCE :: 16777216;
    GENERIC_READ :: 2755;
    ALL_SHADER_RESOURCE :: 192;
    PRESENT :: 0;
    PREDICATION :: 512;
    VIDEO_DECODE_READ :: 65536;
    VIDEO_DECODE_WRITE :: 131072;
    VIDEO_PROCESS_READ :: 262144;
    VIDEO_PROCESS_WRITE :: 524288;
    VIDEO_ENCODE_READ :: 2097152;
    VIDEO_ENCODE_WRITE :: 8388608;
}

D3D12_RESOURCE_STATE_COMMON :: 0;
D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER :: 1;
D3D12_RESOURCE_STATE_INDEX_BUFFER :: 2;
D3D12_RESOURCE_STATE_RENDER_TARGET :: 4;
D3D12_RESOURCE_STATE_UNORDERED_ACCESS :: 8;
D3D12_RESOURCE_STATE_DEPTH_WRITE :: 16;
D3D12_RESOURCE_STATE_DEPTH_READ :: 32;
D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE :: 64;
D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE :: 128;
D3D12_RESOURCE_STATE_STREAM_OUT :: 256;
D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT :: 512;
D3D12_RESOURCE_STATE_COPY_DEST :: 1024;
D3D12_RESOURCE_STATE_COPY_SOURCE :: 2048;
D3D12_RESOURCE_STATE_RESOLVE_DEST :: 4096;
D3D12_RESOURCE_STATE_RESOLVE_SOURCE :: 8192;
D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE :: 4194304;
D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE :: 16777216;
D3D12_RESOURCE_STATE_GENERIC_READ :: 2755;
D3D12_RESOURCE_STATE_ALL_SHADER_RESOURCE :: 192;
D3D12_RESOURCE_STATE_PRESENT :: 0;
D3D12_RESOURCE_STATE_PREDICATION :: 512;
D3D12_RESOURCE_STATE_VIDEO_DECODE_READ :: 65536;
D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE :: 131072;
D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ :: 262144;
D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE :: 524288;
D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ :: 2097152;
D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE :: 8388608;

D3D12_RESOURCE_TRANSITION_BARRIER :: struct
{
    pResource : *ID3D12Resource;
    Subresource : u32;
    StateBefore : D3D12_RESOURCE_STATES;
    StateAfter : D3D12_RESOURCE_STATES;
}

D3D12_RESOURCE_UAV_BARRIER :: struct
{
    pResource : *ID3D12Resource;
}

D3D12_RLDO_FLAGS :: enum s32
{
    NONE :: 0;
    SUMMARY :: 1;
    DETAIL :: 2;
    IGNORE_INTERNAL :: 4;
}

D3D12_RLDO_NONE :: 0;
D3D12_RLDO_SUMMARY :: 1;
D3D12_RLDO_DETAIL :: 2;
D3D12_RLDO_IGNORE_INTERNAL :: 4;

D3D12_ROOT_CONSTANTS :: struct
{
    ShaderRegister : u32;
    RegisterSpace : u32;
    Num32BitValues : u32;
}

D3D12_ROOT_DESCRIPTOR :: struct
{
    ShaderRegister : u32;
    RegisterSpace : u32;
}

D3D12_ROOT_DESCRIPTOR1 :: struct
{
    ShaderRegister : u32;
    RegisterSpace : u32;
    Flags : D3D12_ROOT_DESCRIPTOR_FLAGS;
}

D3D12_ROOT_DESCRIPTOR_FLAGS :: enum_flags u32
{
    NONE :: 0;
    DATA_VOLATILE :: 2;
    DATA_STATIC_WHILE_SET_AT_EXECUTE :: 4;
    DATA_STATIC :: 8;
}

D3D12_ROOT_DESCRIPTOR_FLAG_NONE :: 0;
D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE :: 2;
D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE :: 4;
D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC :: 8;

D3D12_ROOT_DESCRIPTOR_TABLE :: struct
{
    NumDescriptorRanges : u32;
    pDescriptorRanges : *D3D12_DESCRIPTOR_RANGE; // Const
}

D3D12_ROOT_DESCRIPTOR_TABLE1 :: struct
{
    NumDescriptorRanges : u32;
    pDescriptorRanges : *D3D12_DESCRIPTOR_RANGE1; // Const
}

D3D12_ROOT_PARAMETER :: struct
{
    ParameterType : D3D12_ROOT_PARAMETER_TYPE;
    union
    {
        DescriptorTable : D3D12_ROOT_DESCRIPTOR_TABLE;
        Constants : D3D12_ROOT_CONSTANTS;
        Descriptor : D3D12_ROOT_DESCRIPTOR;
    }; // Anonymous
    ShaderVisibility : D3D12_SHADER_VISIBILITY;
}

D3D12_ROOT_PARAMETER1 :: struct
{
    ParameterType : D3D12_ROOT_PARAMETER_TYPE;
    union
    {
        DescriptorTable : D3D12_ROOT_DESCRIPTOR_TABLE1;
        Constants : D3D12_ROOT_CONSTANTS;
        Descriptor : D3D12_ROOT_DESCRIPTOR1;
    }; // Anonymous
    ShaderVisibility : D3D12_SHADER_VISIBILITY;
}

D3D12_ROOT_PARAMETER_TYPE :: enum s32
{
    DESCRIPTOR_TABLE :: 0;
    _32BIT_CONSTANTS :: 1;
    CBV :: 2;
    SRV :: 3;
    UAV :: 4;
}

D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE :: 0;
D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS :: 1;
D3D12_ROOT_PARAMETER_TYPE_CBV :: 2;
D3D12_ROOT_PARAMETER_TYPE_SRV :: 3;
D3D12_ROOT_PARAMETER_TYPE_UAV :: 4;

D3D12_ROOT_SIGNATURE_DESC :: struct
{
    NumParameters : u32;
    pParameters : *D3D12_ROOT_PARAMETER; // Const
    NumStaticSamplers : u32;
    pStaticSamplers : *D3D12_STATIC_SAMPLER_DESC; // Const
    Flags : D3D12_ROOT_SIGNATURE_FLAGS;
}

D3D12_ROOT_SIGNATURE_DESC1 :: struct
{
    NumParameters : u32;
    pParameters : *D3D12_ROOT_PARAMETER1; // Const
    NumStaticSamplers : u32;
    pStaticSamplers : *D3D12_STATIC_SAMPLER_DESC; // Const
    Flags : D3D12_ROOT_SIGNATURE_FLAGS;
}

D3D12_ROOT_SIGNATURE_FLAGS :: enum_flags u32
{
    NONE :: 0;
    ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT :: 1;
    DENY_VERTEX_SHADER_ROOT_ACCESS :: 2;
    DENY_HULL_SHADER_ROOT_ACCESS :: 4;
    DENY_DOMAIN_SHADER_ROOT_ACCESS :: 8;
    DENY_GEOMETRY_SHADER_ROOT_ACCESS :: 16;
    DENY_PIXEL_SHADER_ROOT_ACCESS :: 32;
    ALLOW_STREAM_OUTPUT :: 64;
    LOCAL_ROOT_SIGNATURE :: 128;
    DENY_AMPLIFICATION_SHADER_ROOT_ACCESS :: 256;
    DENY_MESH_SHADER_ROOT_ACCESS :: 512;
    CBV_SRV_UAV_HEAP_DIRECTLY_INDEXED :: 1024;
    SAMPLER_HEAP_DIRECTLY_INDEXED :: 2048;
}

D3D12_ROOT_SIGNATURE_FLAG_NONE :: 0;
D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT :: 1;
D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS :: 2;
D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS :: 4;
D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS :: 8;
D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS :: 16;
D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS :: 32;
D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT :: 64;
D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE :: 128;
D3D12_ROOT_SIGNATURE_FLAG_DENY_AMPLIFICATION_SHADER_ROOT_ACCESS :: 256;
D3D12_ROOT_SIGNATURE_FLAG_DENY_MESH_SHADER_ROOT_ACCESS :: 512;
D3D12_ROOT_SIGNATURE_FLAG_CBV_SRV_UAV_HEAP_DIRECTLY_INDEXED :: 1024;
D3D12_ROOT_SIGNATURE_FLAG_SAMPLER_HEAP_DIRECTLY_INDEXED :: 2048;

D3D12_RTV_DIMENSION :: enum s32
{
    UNKNOWN :: 0;
    BUFFER :: 1;
    TEXTURE1D :: 2;
    TEXTURE1DARRAY :: 3;
    TEXTURE2D :: 4;
    TEXTURE2DARRAY :: 5;
    TEXTURE2DMS :: 6;
    TEXTURE2DMSARRAY :: 7;
    TEXTURE3D :: 8;
}

D3D12_RTV_DIMENSION_UNKNOWN :: 0;
D3D12_RTV_DIMENSION_BUFFER :: 1;
D3D12_RTV_DIMENSION_TEXTURE1D :: 2;
D3D12_RTV_DIMENSION_TEXTURE1DARRAY :: 3;
D3D12_RTV_DIMENSION_TEXTURE2D :: 4;
D3D12_RTV_DIMENSION_TEXTURE2DARRAY :: 5;
D3D12_RTV_DIMENSION_TEXTURE2DMS :: 6;
D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY :: 7;
D3D12_RTV_DIMENSION_TEXTURE3D :: 8;

D3D12_RT_FORMAT_ARRAY :: struct
{
    RTFormats : [8]DXGI_FORMAT;
    NumRenderTargets : u32;
}

D3D12_SAMPLER_DESC :: struct
{
    Filter : D3D12_FILTER;
    AddressU : D3D12_TEXTURE_ADDRESS_MODE;
    AddressV : D3D12_TEXTURE_ADDRESS_MODE;
    AddressW : D3D12_TEXTURE_ADDRESS_MODE;
    MipLODBias : float;
    MaxAnisotropy : u32;
    ComparisonFunc : D3D12_COMPARISON_FUNC;
    BorderColor : [4]float;
    MinLOD : float;
    MaxLOD : float;
}

D3D12_SAMPLER_FEEDBACK_TIER :: enum s32
{
    NOT_SUPPORTED :: 0;
    _0_9 :: 90;
    _1_0 :: 100;
}

D3D12_SAMPLER_FEEDBACK_TIER_NOT_SUPPORTED :: 0;
D3D12_SAMPLER_FEEDBACK_TIER_0_9 :: 90;
D3D12_SAMPLER_FEEDBACK_TIER_1_0 :: 100;

D3D12_SAMPLE_POSITION :: struct
{
    X : s8;
    Y : s8;
}

D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER :: struct
{
    DriverOpaqueGUID : GUID;
    DriverOpaqueVersioningData : [16]u8;
}

D3D12_SERIALIZED_DATA_TYPE :: enum s32
{
    D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE :: 0;
}

D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE :: 0;

D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER :: struct
{
    DriverMatchingIdentifier : D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER;
    SerializedSizeInBytesIncludingHeader : u64;
    DeserializedSizeInBytes : u64;
    NumBottomLevelAccelerationStructurePointersAfterHeader : u64;
}

D3D12_SHADER_BUFFER_DESC :: struct
{
    Name : PSTR; // Const
    _Type : D3D_CBUFFER_TYPE;
    Variables : u32;
    Size : u32;
    uFlags : u32;
}

D3D12_SHADER_BYTECODE :: struct
{
    pShaderBytecode : *void; // Const
    BytecodeLength : u64;
}

D3D12_SHADER_CACHE_CONTROL_FLAGS :: enum_flags u32
{
    DISABLE :: 1;
    ENABLE :: 2;
    CLEAR :: 4;
}

D3D12_SHADER_CACHE_CONTROL_FLAG_DISABLE :: 1;
D3D12_SHADER_CACHE_CONTROL_FLAG_ENABLE :: 2;
D3D12_SHADER_CACHE_CONTROL_FLAG_CLEAR :: 4;

D3D12_SHADER_CACHE_FLAGS :: enum_flags u32
{
    NONE :: 0;
    DRIVER_VERSIONED :: 1;
    USE_WORKING_DIR :: 2;
}

D3D12_SHADER_CACHE_FLAG_NONE :: 0;
D3D12_SHADER_CACHE_FLAG_DRIVER_VERSIONED :: 1;
D3D12_SHADER_CACHE_FLAG_USE_WORKING_DIR :: 2;

D3D12_SHADER_CACHE_KIND_FLAGS :: enum_flags u32
{
    IMPLICIT_D3D_CACHE_FOR_DRIVER :: 1;
    IMPLICIT_D3D_CONVERSIONS :: 2;
    IMPLICIT_DRIVER_MANAGED :: 4;
    APPLICATION_MANAGED :: 8;
}

D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_D3D_CACHE_FOR_DRIVER :: 1;
D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_D3D_CONVERSIONS :: 2;
D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_DRIVER_MANAGED :: 4;
D3D12_SHADER_CACHE_KIND_FLAG_APPLICATION_MANAGED :: 8;

D3D12_SHADER_CACHE_MODE :: enum s32
{
    MEMORY :: 0;
    DISK :: 1;
}

D3D12_SHADER_CACHE_MODE_MEMORY :: 0;
D3D12_SHADER_CACHE_MODE_DISK :: 1;

D3D12_SHADER_CACHE_SESSION_DESC :: struct
{
    Identifier : GUID;
    Mode : D3D12_SHADER_CACHE_MODE;
    Flags : D3D12_SHADER_CACHE_FLAGS;
    MaximumInMemoryCacheSizeBytes : u32;
    MaximumInMemoryCacheEntries : u32;
    MaximumValueFileSizeBytes : u32;
    Version : u64;
}

D3D12_SHADER_CACHE_SUPPORT_FLAGS :: enum_flags u32
{
    NONE :: 0;
    SINGLE_PSO :: 1;
    LIBRARY :: 2;
    AUTOMATIC_INPROC_CACHE :: 4;
    AUTOMATIC_DISK_CACHE :: 8;
    DRIVER_MANAGED_CACHE :: 16;
    SHADER_CONTROL_CLEAR :: 32;
    SHADER_SESSION_DELETE :: 64;
}

D3D12_SHADER_CACHE_SUPPORT_NONE :: 0;
D3D12_SHADER_CACHE_SUPPORT_SINGLE_PSO :: 1;
D3D12_SHADER_CACHE_SUPPORT_LIBRARY :: 2;
D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE :: 4;
D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE :: 8;
D3D12_SHADER_CACHE_SUPPORT_DRIVER_MANAGED_CACHE :: 16;
D3D12_SHADER_CACHE_SUPPORT_SHADER_CONTROL_CLEAR :: 32;
D3D12_SHADER_CACHE_SUPPORT_SHADER_SESSION_DELETE :: 64;

D3D12_SHADER_COMPONENT_MAPPING :: enum s32
{
    FROM_MEMORY_COMPONENT_0 :: 0;
    FROM_MEMORY_COMPONENT_1 :: 1;
    FROM_MEMORY_COMPONENT_2 :: 2;
    FROM_MEMORY_COMPONENT_3 :: 3;
    FORCE_VALUE_0 :: 4;
    FORCE_VALUE_1 :: 5;
}

D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0 :: 0;
D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1 :: 1;
D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2 :: 2;
D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3 :: 3;
D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0 :: 4;
D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1 :: 5;

D3D12_SHADER_DESC :: struct
{
    Version : u32;
    Creator : PSTR; // Const
    Flags : u32;
    ConstantBuffers : u32;
    BoundResources : u32;
    InputParameters : u32;
    OutputParameters : u32;
    InstructionCount : u32;
    TempRegisterCount : u32;
    TempArrayCount : u32;
    DefCount : u32;
    DclCount : u32;
    TextureNormalInstructions : u32;
    TextureLoadInstructions : u32;
    TextureCompInstructions : u32;
    TextureBiasInstructions : u32;
    TextureGradientInstructions : u32;
    FloatInstructionCount : u32;
    IntInstructionCount : u32;
    UintInstructionCount : u32;
    StaticFlowControlCount : u32;
    DynamicFlowControlCount : u32;
    MacroInstructionCount : u32;
    ArrayInstructionCount : u32;
    CutInstructionCount : u32;
    EmitInstructionCount : u32;
    GSOutputTopology : D3D_PRIMITIVE_TOPOLOGY;
    GSMaxOutputVertexCount : u32;
    InputPrimitive : D3D_PRIMITIVE;
    PatchConstantParameters : u32;
    cGSInstanceCount : u32;
    cControlPoints : u32;
    HSOutputPrimitive : D3D_TESSELLATOR_OUTPUT_PRIMITIVE;
    HSPartitioning : D3D_TESSELLATOR_PARTITIONING;
    TessellatorDomain : D3D_TESSELLATOR_DOMAIN;
    cBarrierInstructions : u32;
    cInterlockedInstructions : u32;
    cTextureStoreInstructions : u32;
}

D3D12_SHADER_INPUT_BIND_DESC :: struct
{
    Name : PSTR; // Const
    _Type : D3D_SHADER_INPUT_TYPE;
    BindPoint : u32;
    BindCount : u32;
    uFlags : u32;
    ReturnType : D3D_RESOURCE_RETURN_TYPE;
    Dimension : D3D_SRV_DIMENSION;
    NumSamples : u32;
    Space : u32;
    uID : u32;
}

D3D12_SHADER_MIN_PRECISION_SUPPORT :: enum_flags u32
{
    NONE :: 0;
    _10_BIT :: 1;
    _16_BIT :: 2;
}

D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE :: 0;
D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT :: 1;
D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT :: 2;

D3D12_SHADER_RESOURCE_VIEW_DESC :: struct
{
    Format : DXGI_FORMAT;
    ViewDimension : D3D12_SRV_DIMENSION;
    Shader4ComponentMapping : u32;
    union
    {
        Buffer : D3D12_BUFFER_SRV;
        Texture1D : D3D12_TEX1D_SRV;
        Texture1DArray : D3D12_TEX1D_ARRAY_SRV;
        Texture2D : D3D12_TEX2D_SRV;
        Texture2DArray : D3D12_TEX2D_ARRAY_SRV;
        Texture2DMS : D3D12_TEX2DMS_SRV;
        Texture2DMSArray : D3D12_TEX2DMS_ARRAY_SRV;
        Texture3D : D3D12_TEX3D_SRV;
        TextureCube : D3D12_TEXCUBE_SRV;
        TextureCubeArray : D3D12_TEXCUBE_ARRAY_SRV;
        RaytracingAccelerationStructure : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV;
    }; // Anonymous
}

D3D12_SHADER_TYPE_DESC :: struct
{
    Class : D3D_SHADER_VARIABLE_CLASS;
    _Type : D3D_SHADER_VARIABLE_TYPE;
    Rows : u32;
    Columns : u32;
    Elements : u32;
    Members : u32;
    Offset : u32;
    Name : PSTR; // Const
}

D3D12_SHADER_VARIABLE_DESC :: struct
{
    Name : PSTR; // Const
    StartOffset : u32;
    Size : u32;
    uFlags : u32;
    DefaultValue : *void;
    StartTexture : u32;
    TextureSize : u32;
    StartSampler : u32;
    SamplerSize : u32;
}

D3D12_SHADER_VERSION_TYPE :: enum s32
{
    D3D12_SHVER_PIXEL_SHADER :: 0;
    D3D12_SHVER_VERTEX_SHADER :: 1;
    D3D12_SHVER_GEOMETRY_SHADER :: 2;
    D3D12_SHVER_HULL_SHADER :: 3;
    D3D12_SHVER_DOMAIN_SHADER :: 4;
    D3D12_SHVER_COMPUTE_SHADER :: 5;
    D3D12_SHVER_RESERVED0 :: 65520;
}

D3D12_SHVER_PIXEL_SHADER :: 0;
D3D12_SHVER_VERTEX_SHADER :: 1;
D3D12_SHVER_GEOMETRY_SHADER :: 2;
D3D12_SHVER_HULL_SHADER :: 3;
D3D12_SHVER_DOMAIN_SHADER :: 4;
D3D12_SHVER_COMPUTE_SHADER :: 5;
D3D12_SHVER_RESERVED0 :: 65520;

D3D12_SHADER_VISIBILITY :: enum s32
{
    ALL :: 0;
    VERTEX :: 1;
    HULL :: 2;
    DOMAIN :: 3;
    GEOMETRY :: 4;
    PIXEL :: 5;
    AMPLIFICATION :: 6;
    MESH :: 7;
}

D3D12_SHADER_VISIBILITY_ALL :: 0;
D3D12_SHADER_VISIBILITY_VERTEX :: 1;
D3D12_SHADER_VISIBILITY_HULL :: 2;
D3D12_SHADER_VISIBILITY_DOMAIN :: 3;
D3D12_SHADER_VISIBILITY_GEOMETRY :: 4;
D3D12_SHADER_VISIBILITY_PIXEL :: 5;
D3D12_SHADER_VISIBILITY_AMPLIFICATION :: 6;
D3D12_SHADER_VISIBILITY_MESH :: 7;

D3D12_SHADING_RATE :: enum s32
{
    _1X1 :: 0;
    _1X2 :: 1;
    _2X1 :: 4;
    _2X2 :: 5;
    _2X4 :: 6;
    _4X2 :: 9;
    _4X4 :: 10;
}

D3D12_SHADING_RATE_1X1 :: 0;
D3D12_SHADING_RATE_1X2 :: 1;
D3D12_SHADING_RATE_2X1 :: 4;
D3D12_SHADING_RATE_2X2 :: 5;
D3D12_SHADING_RATE_2X4 :: 6;
D3D12_SHADING_RATE_4X2 :: 9;
D3D12_SHADING_RATE_4X4 :: 10;

D3D12_SHADING_RATE_COMBINER :: enum s32
{
    PASSTHROUGH :: 0;
    OVERRIDE :: 1;
    MIN :: 2;
    MAX :: 3;
    SUM :: 4;
}

D3D12_SHADING_RATE_COMBINER_PASSTHROUGH :: 0;
D3D12_SHADING_RATE_COMBINER_OVERRIDE :: 1;
D3D12_SHADING_RATE_COMBINER_MIN :: 2;
D3D12_SHADING_RATE_COMBINER_MAX :: 3;
D3D12_SHADING_RATE_COMBINER_SUM :: 4;

D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER :: enum s32
{
    _0 :: 0;
    _1 :: 1;
    _2 :: 2;
}

D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_0 :: 0;
D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_1 :: 1;
D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_2 :: 2;

D3D12_SIGNATURE_PARAMETER_DESC :: struct
{
    SemanticName : PSTR; // Const
    SemanticIndex : u32;
    Register : u32;
    SystemValueType : D3D_NAME;
    ComponentType : D3D_REGISTER_COMPONENT_TYPE;
    Mask : u8;
    ReadWriteMask : u8;
    Stream : u32;
    MinPrecision : D3D_MIN_PRECISION;
}

D3D12_SO_DECLARATION_ENTRY :: struct
{
    Stream : u32;
    SemanticName : PSTR; // Const
    SemanticIndex : u32;
    StartComponent : u8;
    ComponentCount : u8;
    OutputSlot : u8;
}

D3D12_SRV_DIMENSION :: enum s32
{
    UNKNOWN :: 0;
    BUFFER :: 1;
    TEXTURE1D :: 2;
    TEXTURE1DARRAY :: 3;
    TEXTURE2D :: 4;
    TEXTURE2DARRAY :: 5;
    TEXTURE2DMS :: 6;
    TEXTURE2DMSARRAY :: 7;
    TEXTURE3D :: 8;
    TEXTURECUBE :: 9;
    TEXTURECUBEARRAY :: 10;
    RAYTRACING_ACCELERATION_STRUCTURE :: 11;
}

D3D12_SRV_DIMENSION_UNKNOWN :: 0;
D3D12_SRV_DIMENSION_BUFFER :: 1;
D3D12_SRV_DIMENSION_TEXTURE1D :: 2;
D3D12_SRV_DIMENSION_TEXTURE1DARRAY :: 3;
D3D12_SRV_DIMENSION_TEXTURE2D :: 4;
D3D12_SRV_DIMENSION_TEXTURE2DARRAY :: 5;
D3D12_SRV_DIMENSION_TEXTURE2DMS :: 6;
D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY :: 7;
D3D12_SRV_DIMENSION_TEXTURE3D :: 8;
D3D12_SRV_DIMENSION_TEXTURECUBE :: 9;
D3D12_SRV_DIMENSION_TEXTURECUBEARRAY :: 10;
D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE :: 11;

D3D12_STATE_OBJECT_CONFIG :: struct
{
    Flags : D3D12_STATE_OBJECT_FLAGS;
}

D3D12_STATE_OBJECT_DESC :: struct
{
    _Type : D3D12_STATE_OBJECT_TYPE;
    NumSubobjects : u32;
    pSubobjects : *D3D12_STATE_SUBOBJECT; // Const
}

D3D12_STATE_OBJECT_FLAGS :: enum_flags u32
{
    NONE :: 0;
    ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS :: 1;
    ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS :: 2;
    ALLOW_STATE_OBJECT_ADDITIONS :: 4;
}

D3D12_STATE_OBJECT_FLAG_NONE :: 0;
D3D12_STATE_OBJECT_FLAG_ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS :: 1;
D3D12_STATE_OBJECT_FLAG_ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS :: 2;
D3D12_STATE_OBJECT_FLAG_ALLOW_STATE_OBJECT_ADDITIONS :: 4;

D3D12_STATE_OBJECT_TYPE :: enum s32
{
    COLLECTION :: 0;
    RAYTRACING_PIPELINE :: 3;
}

D3D12_STATE_OBJECT_TYPE_COLLECTION :: 0;
D3D12_STATE_OBJECT_TYPE_RAYTRACING_PIPELINE :: 3;

D3D12_STATE_SUBOBJECT :: struct
{
    _Type : D3D12_STATE_SUBOBJECT_TYPE;
    pDesc : *void; // Const
}

D3D12_STATE_SUBOBJECT_TYPE :: enum s32
{
    STATE_OBJECT_CONFIG :: 0;
    GLOBAL_ROOT_SIGNATURE :: 1;
    LOCAL_ROOT_SIGNATURE :: 2;
    NODE_MASK :: 3;
    DXIL_LIBRARY :: 5;
    EXISTING_COLLECTION :: 6;
    SUBOBJECT_TO_EXPORTS_ASSOCIATION :: 7;
    DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION :: 8;
    RAYTRACING_SHADER_CONFIG :: 9;
    RAYTRACING_PIPELINE_CONFIG :: 10;
    HIT_GROUP :: 11;
    RAYTRACING_PIPELINE_CONFIG1 :: 12;
    MAX_VALID :: 13;
}

D3D12_STATE_SUBOBJECT_TYPE_STATE_OBJECT_CONFIG :: 0;
D3D12_STATE_SUBOBJECT_TYPE_GLOBAL_ROOT_SIGNATURE :: 1;
D3D12_STATE_SUBOBJECT_TYPE_LOCAL_ROOT_SIGNATURE :: 2;
D3D12_STATE_SUBOBJECT_TYPE_NODE_MASK :: 3;
D3D12_STATE_SUBOBJECT_TYPE_DXIL_LIBRARY :: 5;
D3D12_STATE_SUBOBJECT_TYPE_EXISTING_COLLECTION :: 6;
D3D12_STATE_SUBOBJECT_TYPE_SUBOBJECT_TO_EXPORTS_ASSOCIATION :: 7;
D3D12_STATE_SUBOBJECT_TYPE_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION :: 8;
D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_SHADER_CONFIG :: 9;
D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG :: 10;
D3D12_STATE_SUBOBJECT_TYPE_HIT_GROUP :: 11;
D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG1 :: 12;
D3D12_STATE_SUBOBJECT_TYPE_MAX_VALID :: 13;

D3D12_STATIC_BORDER_COLOR :: enum s32
{
    TRANSPARENT_BLACK :: 0;
    OPAQUE_BLACK :: 1;
    OPAQUE_WHITE :: 2;
}

D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK :: 0;
D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK :: 1;
D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE :: 2;

D3D12_STATIC_SAMPLER_DESC :: struct
{
    Filter : D3D12_FILTER;
    AddressU : D3D12_TEXTURE_ADDRESS_MODE;
    AddressV : D3D12_TEXTURE_ADDRESS_MODE;
    AddressW : D3D12_TEXTURE_ADDRESS_MODE;
    MipLODBias : float;
    MaxAnisotropy : u32;
    ComparisonFunc : D3D12_COMPARISON_FUNC;
    BorderColor : D3D12_STATIC_BORDER_COLOR;
    MinLOD : float;
    MaxLOD : float;
    ShaderRegister : u32;
    RegisterSpace : u32;
    ShaderVisibility : D3D12_SHADER_VISIBILITY;
}

D3D12_STENCIL_OP :: enum s32
{
    KEEP :: 1;
    ZERO :: 2;
    REPLACE :: 3;
    INCR_SAT :: 4;
    DECR_SAT :: 5;
    INVERT :: 6;
    INCR :: 7;
    DECR :: 8;
}

D3D12_STENCIL_OP_KEEP :: 1;
D3D12_STENCIL_OP_ZERO :: 2;
D3D12_STENCIL_OP_REPLACE :: 3;
D3D12_STENCIL_OP_INCR_SAT :: 4;
D3D12_STENCIL_OP_DECR_SAT :: 5;
D3D12_STENCIL_OP_INVERT :: 6;
D3D12_STENCIL_OP_INCR :: 7;
D3D12_STENCIL_OP_DECR :: 8;

D3D12_STREAM_OUTPUT_BUFFER_VIEW :: struct
{
    BufferLocation : u64;
    SizeInBytes : u64;
    BufferFilledSizeLocation : u64;
}

D3D12_STREAM_OUTPUT_DESC :: struct
{
    pSODeclaration : *D3D12_SO_DECLARATION_ENTRY; // Const
    NumEntries : u32;
    pBufferStrides : *u32; // Const
    NumStrides : u32;
    RasterizedStream : u32;
}

D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION :: struct
{
    pSubobjectToAssociate : *D3D12_STATE_SUBOBJECT; // Const
    NumExports : u32;
    pExports : *PWSTR;
}

D3D12_SUBRESOURCE_DATA :: struct
{
    pData : *void; // Const
    RowPitch : s64;
    SlicePitch : s64;
}

D3D12_SUBRESOURCE_FOOTPRINT :: struct
{
    Format : DXGI_FORMAT;
    Width : u32;
    Height : u32;
    Depth : u32;
    RowPitch : u32;
}

D3D12_SUBRESOURCE_INFO :: struct
{
    Offset : u64;
    RowPitch : u32;
    DepthPitch : u32;
}

D3D12_SUBRESOURCE_RANGE_UINT64 :: struct
{
    Subresource : u32;
    Range : D3D12_RANGE_UINT64;
}

D3D12_SUBRESOURCE_TILING :: struct
{
    WidthInTiles : u32;
    HeightInTiles : u16;
    DepthInTiles : u16;
    StartTileIndexInOverallResource : u32;
}

D3D12_TEX1D_ARRAY_DSV :: struct
{
    MipSlice : u32;
    FirstArraySlice : u32;
    ArraySize : u32;
}

D3D12_TEX1D_ARRAY_RTV :: struct
{
    MipSlice : u32;
    FirstArraySlice : u32;
    ArraySize : u32;
}

D3D12_TEX1D_ARRAY_SRV :: struct
{
    MostDetailedMip : u32;
    MipLevels : u32;
    FirstArraySlice : u32;
    ArraySize : u32;
    ResourceMinLODClamp : float;
}

D3D12_TEX1D_ARRAY_UAV :: struct
{
    MipSlice : u32;
    FirstArraySlice : u32;
    ArraySize : u32;
}

D3D12_TEX1D_DSV :: struct
{
    MipSlice : u32;
}

D3D12_TEX1D_RTV :: struct
{
    MipSlice : u32;
}

D3D12_TEX1D_SRV :: struct
{
    MostDetailedMip : u32;
    MipLevels : u32;
    ResourceMinLODClamp : float;
}

D3D12_TEX1D_UAV :: struct
{
    MipSlice : u32;
}

D3D12_TEX2DMS_ARRAY_DSV :: struct
{
    FirstArraySlice : u32;
    ArraySize : u32;
}

D3D12_TEX2DMS_ARRAY_RTV :: struct
{
    FirstArraySlice : u32;
    ArraySize : u32;
}

D3D12_TEX2DMS_ARRAY_SRV :: struct
{
    FirstArraySlice : u32;
    ArraySize : u32;
}

D3D12_TEX2DMS_DSV :: struct
{
    UnusedField_NothingToDefine : u32;
}

D3D12_TEX2DMS_RTV :: struct
{
    UnusedField_NothingToDefine : u32;
}

D3D12_TEX2DMS_SRV :: struct
{
    UnusedField_NothingToDefine : u32;
}

D3D12_TEX2D_ARRAY_DSV :: struct
{
    MipSlice : u32;
    FirstArraySlice : u32;
    ArraySize : u32;
}

D3D12_TEX2D_ARRAY_RTV :: struct
{
    MipSlice : u32;
    FirstArraySlice : u32;
    ArraySize : u32;
    PlaneSlice : u32;
}

D3D12_TEX2D_ARRAY_SRV :: struct
{
    MostDetailedMip : u32;
    MipLevels : u32;
    FirstArraySlice : u32;
    ArraySize : u32;
    PlaneSlice : u32;
    ResourceMinLODClamp : float;
}

D3D12_TEX2D_ARRAY_UAV :: struct
{
    MipSlice : u32;
    FirstArraySlice : u32;
    ArraySize : u32;
    PlaneSlice : u32;
}

D3D12_TEX2D_DSV :: struct
{
    MipSlice : u32;
}

D3D12_TEX2D_RTV :: struct
{
    MipSlice : u32;
    PlaneSlice : u32;
}

D3D12_TEX2D_SRV :: struct
{
    MostDetailedMip : u32;
    MipLevels : u32;
    PlaneSlice : u32;
    ResourceMinLODClamp : float;
}

D3D12_TEX2D_UAV :: struct
{
    MipSlice : u32;
    PlaneSlice : u32;
}

D3D12_TEX3D_RTV :: struct
{
    MipSlice : u32;
    FirstWSlice : u32;
    WSize : u32;
}

D3D12_TEX3D_SRV :: struct
{
    MostDetailedMip : u32;
    MipLevels : u32;
    ResourceMinLODClamp : float;
}

D3D12_TEX3D_UAV :: struct
{
    MipSlice : u32;
    FirstWSlice : u32;
    WSize : u32;
}

D3D12_TEXCUBE_ARRAY_SRV :: struct
{
    MostDetailedMip : u32;
    MipLevels : u32;
    First2DArrayFace : u32;
    NumCubes : u32;
    ResourceMinLODClamp : float;
}

D3D12_TEXCUBE_SRV :: struct
{
    MostDetailedMip : u32;
    MipLevels : u32;
    ResourceMinLODClamp : float;
}

D3D12_TEXTURE_ADDRESS_MODE :: enum s32
{
    WRAP :: 1;
    MIRROR :: 2;
    CLAMP :: 3;
    BORDER :: 4;
    MIRROR_ONCE :: 5;
}

D3D12_TEXTURE_ADDRESS_MODE_WRAP :: 1;
D3D12_TEXTURE_ADDRESS_MODE_MIRROR :: 2;
D3D12_TEXTURE_ADDRESS_MODE_CLAMP :: 3;
D3D12_TEXTURE_ADDRESS_MODE_BORDER :: 4;
D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE :: 5;

D3D12_TEXTURE_COPY_LOCATION :: struct
{
    pResource : *ID3D12Resource;
    _Type : D3D12_TEXTURE_COPY_TYPE;
    union
    {
        PlacedFootprint : D3D12_PLACED_SUBRESOURCE_FOOTPRINT;
        SubresourceIndex : u32;
    }; // Anonymous
}

D3D12_TEXTURE_COPY_TYPE :: enum s32
{
    SUBRESOURCE_INDEX :: 0;
    PLACED_FOOTPRINT :: 1;
}

D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX :: 0;
D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT :: 1;

D3D12_TEXTURE_LAYOUT :: enum s32
{
    UNKNOWN :: 0;
    ROW_MAJOR :: 1;
    _64KB_UNDEFINED_SWIZZLE :: 2;
    _64KB_STANDARD_SWIZZLE :: 3;
}

D3D12_TEXTURE_LAYOUT_UNKNOWN :: 0;
D3D12_TEXTURE_LAYOUT_ROW_MAJOR :: 1;
D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE :: 2;
D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE :: 3;

D3D12_TILED_RESOURCES_TIER :: enum s32
{
    NOT_SUPPORTED :: 0;
    _1 :: 1;
    _2 :: 2;
    _3 :: 3;
    _4 :: 4;
}

D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED :: 0;
D3D12_TILED_RESOURCES_TIER_1 :: 1;
D3D12_TILED_RESOURCES_TIER_2 :: 2;
D3D12_TILED_RESOURCES_TIER_3 :: 3;
D3D12_TILED_RESOURCES_TIER_4 :: 4;

D3D12_TILED_RESOURCE_COORDINATE :: struct
{
    X : u32;
    Y : u32;
    Z : u32;
    Subresource : u32;
}

D3D12_TILE_COPY_FLAGS :: enum_flags u32
{
    NONE :: 0;
    NO_HAZARD :: 1;
    LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE :: 2;
    SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER :: 4;
}

D3D12_TILE_COPY_FLAG_NONE :: 0;
D3D12_TILE_COPY_FLAG_NO_HAZARD :: 1;
D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE :: 2;
D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER :: 4;

D3D12_TILE_MAPPING_FLAGS :: enum_flags u32
{
    NONE :: 0;
    NO_HAZARD :: 1;
}

D3D12_TILE_MAPPING_FLAG_NONE :: 0;
D3D12_TILE_MAPPING_FLAG_NO_HAZARD :: 1;

D3D12_TILE_RANGE_FLAGS :: enum s32
{
    NONE :: 0;
    NULL :: 1;
    SKIP :: 2;
    REUSE_SINGLE_TILE :: 4;
}

D3D12_TILE_RANGE_FLAG_NONE :: 0;
D3D12_TILE_RANGE_FLAG_NULL :: 1;
D3D12_TILE_RANGE_FLAG_SKIP :: 2;
D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE :: 4;

D3D12_TILE_REGION_SIZE :: struct
{
    NumTiles : u32;
    UseBox : BOOL;
    Width : u32;
    Height : u16;
    Depth : u16;
}

D3D12_TILE_SHAPE :: struct
{
    WidthInTexels : u32;
    HeightInTexels : u32;
    DepthInTexels : u32;
}

D3D12_UAV_DIMENSION :: enum s32
{
    UNKNOWN :: 0;
    BUFFER :: 1;
    TEXTURE1D :: 2;
    TEXTURE1DARRAY :: 3;
    TEXTURE2D :: 4;
    TEXTURE2DARRAY :: 5;
    TEXTURE3D :: 8;
}

D3D12_UAV_DIMENSION_UNKNOWN :: 0;
D3D12_UAV_DIMENSION_BUFFER :: 1;
D3D12_UAV_DIMENSION_TEXTURE1D :: 2;
D3D12_UAV_DIMENSION_TEXTURE1DARRAY :: 3;
D3D12_UAV_DIMENSION_TEXTURE2D :: 4;
D3D12_UAV_DIMENSION_TEXTURE2DARRAY :: 5;
D3D12_UAV_DIMENSION_TEXTURE3D :: 8;

D3D12_UNORDERED_ACCESS_VIEW_DESC :: struct
{
    Format : DXGI_FORMAT;
    ViewDimension : D3D12_UAV_DIMENSION;
    union
    {
        Buffer : D3D12_BUFFER_UAV;
        Texture1D : D3D12_TEX1D_UAV;
        Texture1DArray : D3D12_TEX1D_ARRAY_UAV;
        Texture2D : D3D12_TEX2D_UAV;
        Texture2DArray : D3D12_TEX2D_ARRAY_UAV;
        Texture3D : D3D12_TEX3D_UAV;
    }; // Anonymous
}

D3D12_VARIABLE_SHADING_RATE_TIER :: enum s32
{
    NOT_SUPPORTED :: 0;
    _1 :: 1;
    _2 :: 2;
}

D3D12_VARIABLE_SHADING_RATE_TIER_NOT_SUPPORTED :: 0;
D3D12_VARIABLE_SHADING_RATE_TIER_1 :: 1;
D3D12_VARIABLE_SHADING_RATE_TIER_2 :: 2;

D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA :: struct
{
    Version : D3D12_DRED_VERSION;
    union
    {
        Dred_1_0 : D3D12_DEVICE_REMOVED_EXTENDED_DATA;
        Dred_1_1 : D3D12_DEVICE_REMOVED_EXTENDED_DATA1;
        Dred_1_2 : D3D12_DEVICE_REMOVED_EXTENDED_DATA2;
        Dred_1_3 : D3D12_DEVICE_REMOVED_EXTENDED_DATA3;
    }; // Anonymous
}

D3D12_VERSIONED_ROOT_SIGNATURE_DESC :: struct
{
    Version : D3D_ROOT_SIGNATURE_VERSION;
    union
    {
        Desc_1_0 : D3D12_ROOT_SIGNATURE_DESC;
        Desc_1_1 : D3D12_ROOT_SIGNATURE_DESC1;
    }; // Anonymous
}

D3D12_VERTEX_BUFFER_VIEW :: struct
{
    BufferLocation : u64;
    SizeInBytes : u32;
    StrideInBytes : u32;
}

D3D12_VIDEO_DECODER_DESC :: struct
{
    NodeMask : u32;
    Configuration : D3D12_VIDEO_DECODE_CONFIGURATION;
}

D3D12_VIDEO_DECODER_HEAP_DESC :: struct
{
    NodeMask : u32;
    Configuration : D3D12_VIDEO_DECODE_CONFIGURATION;
    DecodeWidth : u32;
    DecodeHeight : u32;
    Format : DXGI_FORMAT;
    FrameRate : DXGI_RATIONAL;
    BitRate : u32;
    MaxDecodePictureBufferCount : u32;
}

D3D12_VIDEO_DECODE_ARGUMENT_TYPE :: enum s32
{
    PICTURE_PARAMETERS :: 0;
    INVERSE_QUANTIZATION_MATRIX :: 1;
    SLICE_CONTROL :: 2;
    MAX_VALID :: 3;
}

D3D12_VIDEO_DECODE_ARGUMENT_TYPE_PICTURE_PARAMETERS :: 0;
D3D12_VIDEO_DECODE_ARGUMENT_TYPE_INVERSE_QUANTIZATION_MATRIX :: 1;
D3D12_VIDEO_DECODE_ARGUMENT_TYPE_SLICE_CONTROL :: 2;
D3D12_VIDEO_DECODE_ARGUMENT_TYPE_MAX_VALID :: 3;

D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM :: struct
{
    pBuffer : *ID3D12Resource;
    Offset : u64;
    Size : u64;
}

D3D12_VIDEO_DECODE_CONFIGURATION :: struct
{
    DecodeProfile : GUID;
    BitstreamEncryption : D3D12_BITSTREAM_ENCRYPTION_TYPE;
    InterlaceType : D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE;
}

D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS :: enum_flags u32
{
    NONE :: 0;
    HEIGHT_ALIGNMENT_MULTIPLE_32_REQUIRED :: 1;
    POST_PROCESSING_SUPPORTED :: 2;
    REFERENCE_ONLY_ALLOCATIONS_REQUIRED :: 4;
    ALLOW_RESOLUTION_CHANGE_ON_NON_KEY_FRAME :: 8;
}

D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_NONE :: 0;
D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_HEIGHT_ALIGNMENT_MULTIPLE_32_REQUIRED :: 1;
D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_POST_PROCESSING_SUPPORTED :: 2;
D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_REFERENCE_ONLY_ALLOCATIONS_REQUIRED :: 4;
D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_ALLOW_RESOLUTION_CHANGE_ON_NON_KEY_FRAME :: 8;

D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS :: struct
{
    Enable : BOOL;
    pReferenceTexture2D : *ID3D12Resource;
    ReferenceSubresource : u32;
    OutputColorSpace : DXGI_COLOR_SPACE_TYPE;
    DecodeColorSpace : DXGI_COLOR_SPACE_TYPE;
}

D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 :: struct
{
    Enable : BOOL;
    pReferenceTexture2D : *ID3D12Resource;
    ReferenceSubresource : u32;
    OutputColorSpace : DXGI_COLOR_SPACE_TYPE;
    DecodeColorSpace : DXGI_COLOR_SPACE_TYPE;
    OutputWidth : u32;
    OutputHeight : u32;
}

D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS :: enum_flags u32
{
    NONE :: 0;
    SUPPORTED :: 1;
}

D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_NONE :: 0;
D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_SUPPORTED :: 1;

D3D12_VIDEO_DECODE_FRAME_ARGUMENT :: struct
{
    _Type : D3D12_VIDEO_DECODE_ARGUMENT_TYPE;
    Size : u32;
    pData : *void;
}

D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT :: enum s32
{
    Y :: 0;
    U :: 1;
    V :: 2;
    R :: 0;
    G :: 1;
    B :: 2;
    A :: 3;
}

D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_Y :: 0;
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_U :: 1;
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_V :: 2;
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_R :: 0;
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_G :: 1;
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_B :: 2;
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_A :: 3;

D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS :: enum_flags u32
{
    NONE :: 0;
    Y :: 1;
    U :: 2;
    V :: 4;
    R :: 1;
    G :: 2;
    B :: 4;
    A :: 8;
}

D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_NONE :: 0;
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_Y :: 1;
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_U :: 2;
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_V :: 4;
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_R :: 1;
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_G :: 2;
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_B :: 4;
D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_A :: 8;

D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS :: struct
{
    NumFrameArguments : u32;
    FrameArguments : [10]D3D12_VIDEO_DECODE_FRAME_ARGUMENT;
    ReferenceFrames : D3D12_VIDEO_DECODE_REFERENCE_FRAMES;
    CompressedBitstream : D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM;
    pHeap : *ID3D12VideoDecoderHeap;
}

D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM :: struct
{
    Offset : u64;
    pBuffer : *ID3D12Resource;
}

D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS :: struct
{
    pOutputTexture2D : *ID3D12Resource;
    OutputSubresource : u32;
    ConversionArguments : D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS;
}

D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1 :: struct
{
    pOutputTexture2D : *ID3D12Resource;
    OutputSubresource : u32;
    ConversionArguments : D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1;
    Histograms : [4]D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM;
}

D3D12_VIDEO_DECODE_REFERENCE_FRAMES :: struct
{
    NumTexture2Ds : u32;
    ppTexture2Ds : **ID3D12Resource;
    pSubresources : *u32;
    ppHeaps : **ID3D12VideoDecoderHeap;
}

D3D12_VIDEO_DECODE_STATUS :: enum s32
{
    OK :: 0;
    CONTINUE :: 1;
    CONTINUE_SKIP_DISPLAY :: 2;
    RESTART :: 3;
    RATE_EXCEEDED :: 4;
}

D3D12_VIDEO_DECODE_STATUS_OK :: 0;
D3D12_VIDEO_DECODE_STATUS_CONTINUE :: 1;
D3D12_VIDEO_DECODE_STATUS_CONTINUE_SKIP_DISPLAY :: 2;
D3D12_VIDEO_DECODE_STATUS_RESTART :: 3;
D3D12_VIDEO_DECODE_STATUS_RATE_EXCEEDED :: 4;

D3D12_VIDEO_DECODE_SUPPORT_FLAGS :: enum_flags u32
{
    NONE :: 0;
    SUPPORTED :: 1;
}

D3D12_VIDEO_DECODE_SUPPORT_FLAG_NONE :: 0;
D3D12_VIDEO_DECODE_SUPPORT_FLAG_SUPPORTED :: 1;

D3D12_VIDEO_DECODE_TIER :: enum s32
{
    NOT_SUPPORTED :: 0;
    _1 :: 1;
    _2 :: 2;
    _3 :: 3;
}

D3D12_VIDEO_DECODE_TIER_NOT_SUPPORTED :: 0;
D3D12_VIDEO_DECODE_TIER_1 :: 1;
D3D12_VIDEO_DECODE_TIER_2 :: 2;
D3D12_VIDEO_DECODE_TIER_3 :: 3;

D3D12_VIDEO_ENCODER_CODEC :: enum s32
{
    H264 :: 0;
    HEVC :: 1;
}

D3D12_VIDEO_ENCODER_CODEC_H264 :: 0;
D3D12_VIDEO_ENCODER_CODEC_HEVC :: 1;

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION :: struct
{
    DataSize : u32;
    union
    {
        pH264Config : *D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264;
        pHEVCConfig : *D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC;
    }; // Anonymous
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264 :: struct
{
    ConfigurationFlags : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS;
    DirectModeConfig : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES;
    DisableDeblockingFilterConfig : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES :: enum s32
{
    DISABLED :: 0;
    TEMPORAL :: 1;
    SPATIAL :: 2;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_DISABLED :: 0;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_TEMPORAL :: 1;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_SPATIAL :: 2;

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS :: enum_flags u32
{
    NONE :: 0;
    USE_CONSTRAINED_INTRAPREDICTION :: 1;
    USE_ADAPTIVE_8x8_TRANSFORM :: 2;
    ENABLE_CABAC_ENCODING :: 4;
    ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES :: 8;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_NONE :: 0;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_CONSTRAINED_INTRAPREDICTION :: 1;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_ADAPTIVE_8x8_TRANSFORM :: 2;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ENABLE_CABAC_ENCODING :: 4;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES :: 8;

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES :: enum s32
{
    _0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED :: 0;
    _1_DISABLE_ALL_SLICE_BLOCK_EDGES :: 1;
    _2_DISABLE_SLICE_BOUNDARIES_BLOCKS :: 2;
    _3_USE_TWO_STAGE_DEBLOCKING :: 3;
    _4_DISABLE_CHROMA_BLOCK_EDGES :: 4;
    _5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES :: 5;
    _6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING :: 6;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED :: 0;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_1_DISABLE_ALL_SLICE_BLOCK_EDGES :: 1;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_2_DISABLE_SLICE_BOUNDARIES_BLOCKS :: 2;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_3_USE_TWO_STAGE_DEBLOCKING :: 3;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_4_DISABLE_CHROMA_BLOCK_EDGES :: 4;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES :: 5;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING :: 6;

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS :: enum_flags u32
{
    NONE :: 0;
    _0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED :: 1;
    _1_DISABLE_ALL_SLICE_BLOCK_EDGES :: 2;
    _2_DISABLE_SLICE_BOUNDARIES_BLOCKS :: 4;
    _3_USE_TWO_STAGE_DEBLOCKING :: 8;
    _4_DISABLE_CHROMA_BLOCK_EDGES :: 16;
    _5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES :: 32;
    _6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING :: 64;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_NONE :: 0;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED :: 1;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_1_DISABLE_ALL_SLICE_BLOCK_EDGES :: 2;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_2_DISABLE_SLICE_BOUNDARIES_BLOCKS :: 4;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_3_USE_TWO_STAGE_DEBLOCKING :: 8;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_4_DISABLE_CHROMA_BLOCK_EDGES :: 16;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES :: 32;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING :: 64;

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC :: struct
{
    ConfigurationFlags : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS;
    MinLumaCodingUnitSize : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE;
    MaxLumaCodingUnitSize : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE;
    MinLumaTransformUnitSize : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE;
    MaxLumaTransformUnitSize : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE;
    max_transform_hierarchy_depth_inter : u8;
    max_transform_hierarchy_depth_intra : u8;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE :: enum s32
{
    _8x8 :: 0;
    _16x16 :: 1;
    _32x32 :: 2;
    _64x64 :: 3;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_8x8 :: 0;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_16x16 :: 1;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_32x32 :: 2;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_64x64 :: 3;

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS :: enum_flags u32
{
    NONE :: 0;
    DISABLE_LOOP_FILTER_ACROSS_SLICES :: 1;
    ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES :: 2;
    ENABLE_SAO_FILTER :: 4;
    ENABLE_LONG_TERM_REFERENCES :: 8;
    USE_ASYMETRIC_MOTION_PARTITION :: 16;
    ENABLE_TRANSFORM_SKIPPING :: 32;
    USE_CONSTRAINED_INTRAPREDICTION :: 64;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_NONE :: 0;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_DISABLE_LOOP_FILTER_ACROSS_SLICES :: 1;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES :: 2;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_SAO_FILTER :: 4;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_LONG_TERM_REFERENCES :: 8;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_ASYMETRIC_MOTION_PARTITION :: 16;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_TRANSFORM_SKIPPING :: 32;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_CONSTRAINED_INTRAPREDICTION :: 64;

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE :: enum s32
{
    _4x4 :: 0;
    _8x8 :: 1;
    _16x16 :: 2;
    _32x32 :: 3;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_4x4 :: 0;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_8x8 :: 1;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_16x16 :: 2;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_32x32 :: 3;

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT :: struct
{
    DataSize : u32;
    union
    {
        pH264Support : *D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264;
        pHEVCSupport : *D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC;
    }; // Anonymous
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264 :: struct
{
    SupportFlags : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS;
    DisableDeblockingFilterSupportedModes : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS :: enum_flags u32
{
    NONE :: 0;
    CABAC_ENCODING_SUPPORT :: 1;
    INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT :: 2;
    BFRAME_LTR_COMBINED_SUPPORT :: 4;
    ADAPTIVE_8x8_TRANSFORM_ENCODING_SUPPORT :: 8;
    DIRECT_SPATIAL_ENCODING_SUPPORT :: 16;
    DIRECT_TEMPORAL_ENCODING_SUPPORT :: 32;
    CONSTRAINED_INTRAPREDICTION_SUPPORT :: 64;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_NONE :: 0;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CABAC_ENCODING_SUPPORT :: 1;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT :: 2;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_BFRAME_LTR_COMBINED_SUPPORT :: 4;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_ADAPTIVE_8x8_TRANSFORM_ENCODING_SUPPORT :: 8;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_SPATIAL_ENCODING_SUPPORT :: 16;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_TEMPORAL_ENCODING_SUPPORT :: 32;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT :: 64;

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC :: struct
{
    SupportFlags : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS;
    MinLumaCodingUnitSize : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE;
    MaxLumaCodingUnitSize : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE;
    MinLumaTransformUnitSize : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE;
    MaxLumaTransformUnitSize : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE;
    max_transform_hierarchy_depth_inter : u8;
    max_transform_hierarchy_depth_intra : u8;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS :: enum_flags u32
{
    NONE :: 0;
    BFRAME_LTR_COMBINED_SUPPORT :: 1;
    INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT :: 2;
    CONSTRAINED_INTRAPREDICTION_SUPPORT :: 4;
    SAO_FILTER_SUPPORT :: 8;
    ASYMETRIC_MOTION_PARTITION_SUPPORT :: 16;
    ASYMETRIC_MOTION_PARTITION_REQUIRED :: 32;
    TRANSFORM_SKIP_SUPPORT :: 64;
    DISABLING_LOOP_FILTER_ACROSS_SLICES_SUPPORT :: 128;
    P_FRAMES_IMPLEMENTED_AS_LOW_DELAY_B_FRAMES :: 256;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_NONE :: 0;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_BFRAME_LTR_COMBINED_SUPPORT :: 1;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT :: 2;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT :: 4;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_SAO_FILTER_SUPPORT :: 8;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_SUPPORT :: 16;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_REQUIRED :: 32;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_TRANSFORM_SKIP_SUPPORT :: 64;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_DISABLING_LOOP_FILTER_ACROSS_SLICES_SUPPORT :: 128;
D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_P_FRAMES_IMPLEMENTED_AS_LOW_DELAY_B_FRAMES :: 256;

D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT :: struct
{
    DataSize : u32;
    union
    {
        pH264Support : *D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264;
        pHEVCSupport : *D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC;
    }; // Anonymous
}

D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264 :: struct
{
    MaxL0ReferencesForP : u32;
    MaxL0ReferencesForB : u32;
    MaxL1ReferencesForB : u32;
    MaxLongTermReferences : u32;
    MaxDPBCapacity : u32;
}

D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC :: struct
{
    MaxL0ReferencesForP : u32;
    MaxL0ReferencesForB : u32;
    MaxL1ReferencesForB : u32;
    MaxLongTermReferences : u32;
    MaxDPBCapacity : u32;
}

D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM :: struct
{
    pBuffer : *ID3D12Resource;
    FrameStartOffset : u64;
}

D3D12_VIDEO_ENCODER_DESC :: struct
{
    NodeMask : u32;
    Flags : D3D12_VIDEO_ENCODER_FLAGS;
    EncodeCodec : D3D12_VIDEO_ENCODER_CODEC;
    EncodeProfile : D3D12_VIDEO_ENCODER_PROFILE_DESC;
    InputFormat : DXGI_FORMAT;
    CodecConfiguration : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION;
    MaxMotionEstimationPrecision : D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE;
}

D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS :: struct
{
    SequenceControlDesc : D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC;
    PictureControlDesc : D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC;
    pInputFrame : *ID3D12Resource;
    InputFrameSubresource : u32;
    CurrentFrameBitstreamMetadataSize : u32;
}

D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS :: struct
{
    Bitstream : D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM;
    ReconstructedPicture : D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE;
    EncoderOutputMetadata : D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER;
}

D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS :: enum_flags u32
{
    NO_ERROR :: 0;
    CODEC_PICTURE_CONTROL_NOT_SUPPORTED :: 1;
    SUBREGION_LAYOUT_CONFIGURATION_NOT_SUPPORTED :: 2;
    INVALID_REFERENCE_PICTURES :: 4;
    RECONFIGURATION_REQUEST_NOT_SUPPORTED :: 8;
    INVALID_METADATA_BUFFER_SOURCE :: 16;
}

D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_NO_ERROR :: 0;
D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_CODEC_PICTURE_CONTROL_NOT_SUPPORTED :: 1;
D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_SUBREGION_LAYOUT_CONFIGURATION_NOT_SUPPORTED :: 2;
D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_REFERENCE_PICTURES :: 4;
D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_RECONFIGURATION_REQUEST_NOT_SUPPORTED :: 8;
D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_METADATA_BUFFER_SOURCE :: 16;

D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER :: struct
{
    pBuffer : *ID3D12Resource;
    Offset : u64;
}

D3D12_VIDEO_ENCODER_FLAGS :: enum_flags u32
{
    NONE :: 0;
}

D3D12_VIDEO_ENCODER_FLAG_NONE :: 0;

D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE :: enum s32
{
    FULL_FRAME :: 0;
    BYTES_PER_SUBREGION :: 1;
    SQUARE_UNITS_PER_SUBREGION_ROW_UNALIGNED :: 2;
    UNIFORM_PARTITIONING_ROWS_PER_SUBREGION :: 3;
    UNIFORM_PARTITIONING_SUBREGIONS_PER_FRAME :: 4;
}

D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_FULL_FRAME :: 0;
D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_BYTES_PER_SUBREGION :: 1;
D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_SQUARE_UNITS_PER_SUBREGION_ROW_UNALIGNED :: 2;
D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_ROWS_PER_SUBREGION :: 3;
D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_SUBREGIONS_PER_FRAME :: 4;

D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA :: struct
{
    bSize : u64;
    bStartOffset : u64;
    bHeaderSize : u64;
}

D3D12_VIDEO_ENCODER_FRAME_TYPE_H264 :: enum s32
{
    I_FRAME :: 0;
    P_FRAME :: 1;
    B_FRAME :: 2;
    IDR_FRAME :: 3;
}

D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_I_FRAME :: 0;
D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_P_FRAME :: 1;
D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_B_FRAME :: 2;
D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_IDR_FRAME :: 3;

D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC :: enum s32
{
    I_FRAME :: 0;
    P_FRAME :: 1;
    B_FRAME :: 2;
    IDR_FRAME :: 3;
}

D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_I_FRAME :: 0;
D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_P_FRAME :: 1;
D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_B_FRAME :: 2;
D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_IDR_FRAME :: 3;

D3D12_VIDEO_ENCODER_HEAP_DESC :: struct
{
    NodeMask : u32;
    Flags : D3D12_VIDEO_ENCODER_HEAP_FLAGS;
    EncodeCodec : D3D12_VIDEO_ENCODER_CODEC;
    EncodeProfile : D3D12_VIDEO_ENCODER_PROFILE_DESC;
    EncodeLevel : D3D12_VIDEO_ENCODER_LEVEL_SETTING;
    ResolutionsListCount : u32;
    pResolutionList : *D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC; // Const
}

D3D12_VIDEO_ENCODER_HEAP_FLAGS :: enum_flags u32
{
    NONE :: 0;
}

D3D12_VIDEO_ENCODER_HEAP_FLAG_NONE :: 0;

D3D12_VIDEO_ENCODER_INTRA_REFRESH :: struct
{
    Mode : D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE;
    IntraRefreshDuration : u32;
}

D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE :: enum s32
{
    NONE :: 0;
    ROW_BASED :: 1;
}

D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_NONE :: 0;
D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_ROW_BASED :: 1;

D3D12_VIDEO_ENCODER_LEVELS_H264 :: enum s32
{
    _1 :: 0;
    _1b :: 1;
    _11 :: 2;
    _12 :: 3;
    _13 :: 4;
    _2 :: 5;
    _21 :: 6;
    _22 :: 7;
    _3 :: 8;
    _31 :: 9;
    _32 :: 10;
    _4 :: 11;
    _41 :: 12;
    _42 :: 13;
    _5 :: 14;
    _51 :: 15;
    _52 :: 16;
    _6 :: 17;
    _61 :: 18;
    _62 :: 19;
}

D3D12_VIDEO_ENCODER_LEVELS_H264_1 :: 0;
D3D12_VIDEO_ENCODER_LEVELS_H264_1b :: 1;
D3D12_VIDEO_ENCODER_LEVELS_H264_11 :: 2;
D3D12_VIDEO_ENCODER_LEVELS_H264_12 :: 3;
D3D12_VIDEO_ENCODER_LEVELS_H264_13 :: 4;
D3D12_VIDEO_ENCODER_LEVELS_H264_2 :: 5;
D3D12_VIDEO_ENCODER_LEVELS_H264_21 :: 6;
D3D12_VIDEO_ENCODER_LEVELS_H264_22 :: 7;
D3D12_VIDEO_ENCODER_LEVELS_H264_3 :: 8;
D3D12_VIDEO_ENCODER_LEVELS_H264_31 :: 9;
D3D12_VIDEO_ENCODER_LEVELS_H264_32 :: 10;
D3D12_VIDEO_ENCODER_LEVELS_H264_4 :: 11;
D3D12_VIDEO_ENCODER_LEVELS_H264_41 :: 12;
D3D12_VIDEO_ENCODER_LEVELS_H264_42 :: 13;
D3D12_VIDEO_ENCODER_LEVELS_H264_5 :: 14;
D3D12_VIDEO_ENCODER_LEVELS_H264_51 :: 15;
D3D12_VIDEO_ENCODER_LEVELS_H264_52 :: 16;
D3D12_VIDEO_ENCODER_LEVELS_H264_6 :: 17;
D3D12_VIDEO_ENCODER_LEVELS_H264_61 :: 18;
D3D12_VIDEO_ENCODER_LEVELS_H264_62 :: 19;

D3D12_VIDEO_ENCODER_LEVELS_HEVC :: enum s32
{
    _1 :: 0;
    _2 :: 1;
    _21 :: 2;
    _3 :: 3;
    _31 :: 4;
    _4 :: 5;
    _41 :: 6;
    _5 :: 7;
    _51 :: 8;
    _52 :: 9;
    _6 :: 10;
    _61 :: 11;
    _62 :: 12;
}

D3D12_VIDEO_ENCODER_LEVELS_HEVC_1 :: 0;
D3D12_VIDEO_ENCODER_LEVELS_HEVC_2 :: 1;
D3D12_VIDEO_ENCODER_LEVELS_HEVC_21 :: 2;
D3D12_VIDEO_ENCODER_LEVELS_HEVC_3 :: 3;
D3D12_VIDEO_ENCODER_LEVELS_HEVC_31 :: 4;
D3D12_VIDEO_ENCODER_LEVELS_HEVC_4 :: 5;
D3D12_VIDEO_ENCODER_LEVELS_HEVC_41 :: 6;
D3D12_VIDEO_ENCODER_LEVELS_HEVC_5 :: 7;
D3D12_VIDEO_ENCODER_LEVELS_HEVC_51 :: 8;
D3D12_VIDEO_ENCODER_LEVELS_HEVC_52 :: 9;
D3D12_VIDEO_ENCODER_LEVELS_HEVC_6 :: 10;
D3D12_VIDEO_ENCODER_LEVELS_HEVC_61 :: 11;
D3D12_VIDEO_ENCODER_LEVELS_HEVC_62 :: 12;

D3D12_VIDEO_ENCODER_LEVEL_SETTING :: struct
{
    DataSize : u32;
    union
    {
        pH264LevelSetting : *D3D12_VIDEO_ENCODER_LEVELS_H264;
        pHEVCLevelSetting : *D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC;
    }; // Anonymous
}

D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC :: struct
{
    Level : D3D12_VIDEO_ENCODER_LEVELS_HEVC;
    Tier : D3D12_VIDEO_ENCODER_TIER_HEVC;
}

D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE :: enum s32
{
    MAXIMUM :: 0;
    FULL_PIXEL :: 1;
    HALF_PIXEL :: 2;
    QUARTER_PIXEL :: 3;
}

D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_MAXIMUM :: 0;
D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_FULL_PIXEL :: 1;
D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_HALF_PIXEL :: 2;
D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_QUARTER_PIXEL :: 3;

D3D12_VIDEO_ENCODER_OUTPUT_METADATA :: struct
{
    EncodeErrorFlags : u64;
    EncodeStats : D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS;
    EncodedBitstreamWrittenBytesCount : u64;
    WrittenSubregionsCount : u64;
}

D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS :: struct
{
    AverageQP : u64;
    IntraCodingUnitsCount : u64;
    InterCodingUnitsCount : u64;
    SkipCodingUnitsCount : u64;
    AverageMotionEstimationXDirection : u64;
    AverageMotionEstimationYDirection : u64;
}

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA :: struct
{
    DataSize : u32;
    union
    {
        pH264PicData : *D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264;
        pHEVCPicData : *D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC;
    }; // Anonymous
}

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264 :: struct
{
    Flags : D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS;
    FrameType : D3D12_VIDEO_ENCODER_FRAME_TYPE_H264;
    pic_parameter_set_id : u32;
    idr_pic_id : u32;
    PictureOrderCountNumber : u32;
    FrameDecodingOrderNumber : u32;
    TemporalLayerIndex : u32;
    List0ReferenceFramesCount : u32;
    pList0ReferenceFrames : *u32;
    List1ReferenceFramesCount : u32;
    pList1ReferenceFrames : *u32;
    ReferenceFramesReconPictureDescriptorsCount : u32;
    pReferenceFramesReconPictureDescriptors : *D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264;
    adaptive_ref_pic_marking_mode_flag : u8;
    RefPicMarkingOperationsCommandsCount : u32;
    pRefPicMarkingOperationsCommands : *D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION;
    List0RefPicModificationsCount : u32;
    pList0RefPicModifications : *D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION;
    List1RefPicModificationsCount : u32;
    pList1RefPicModifications : *D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION;
    QPMapValuesCount : u32;
    pRateControlQPMap : *s8;
}

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS :: enum_flags u32
{
    NONE :: 0;
    REQUEST_INTRA_CONSTRAINED_SLICES :: 1;
}

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_NONE :: 0;
D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES :: 1;

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION :: struct
{
    modification_of_pic_nums_idc : u8;
    abs_diff_pic_num_minus1 : u32;
    long_term_pic_num : u32;
}

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION :: struct
{
    memory_management_control_operation : u8;
    difference_of_pic_nums_minus1 : u32;
    long_term_pic_num : u32;
    long_term_frame_idx : u32;
    max_long_term_frame_idx_plus1 : u32;
}

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC :: struct
{
    Flags : D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS;
    FrameType : D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC;
    slice_pic_parameter_set_id : u32;
    PictureOrderCountNumber : u32;
    TemporalLayerIndex : u32;
    List0ReferenceFramesCount : u32;
    pList0ReferenceFrames : *u32;
    List1ReferenceFramesCount : u32;
    pList1ReferenceFrames : *u32;
    ReferenceFramesReconPictureDescriptorsCount : u32;
    pReferenceFramesReconPictureDescriptors : *D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC;
    List0RefPicModificationsCount : u32;
    pList0RefPicModifications : *u32;
    List1RefPicModificationsCount : u32;
    pList1RefPicModifications : *u32;
    QPMapValuesCount : u32;
    pRateControlQPMap : *s8;
}

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS :: enum_flags u32
{
    NONE :: 0;
    REQUEST_INTRA_CONSTRAINED_SLICES :: 1;
}

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_NONE :: 0;
D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES :: 1;

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC :: struct
{
    IntraRefreshFrameIndex : u32;
    Flags : D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS;
    PictureControlCodecData : D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA;
    ReferenceFrames : D3D12_VIDEO_ENCODE_REFERENCE_FRAMES;
}

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS :: enum_flags u32
{
    NONE :: 0;
    USED_AS_REFERENCE_PICTURE :: 1;
}

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_NONE :: 0;
D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_USED_AS_REFERENCE_PICTURE :: 1;

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA :: struct
{
    DataSize : u32;
    union
    {
        pSlicesPartition_H264 : *D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES; // Const
        pSlicesPartition_HEVC : *D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES; // Const
    }; // Anonymous
}

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES :: struct
{
    union
    {
        MaxBytesPerSlice : u32;
        NumberOfCodingUnitsPerSlice : u32;
        NumberOfRowsPerSlice : u32;
        NumberOfSlicesPerFrame : u32;
    }; // Anonymous
}

D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC :: struct
{
    Width : u32;
    Height : u32;
}

D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC :: struct
{
    WidthRatio : u32;
    HeightRatio : u32;
}

D3D12_VIDEO_ENCODER_PROFILE_DESC :: struct
{
    DataSize : u32;
    union
    {
        pH264Profile : *D3D12_VIDEO_ENCODER_PROFILE_H264;
        pHEVCProfile : *D3D12_VIDEO_ENCODER_PROFILE_HEVC;
    }; // Anonymous
}

D3D12_VIDEO_ENCODER_PROFILE_H264 :: enum s32
{
    MAIN :: 0;
    HIGH :: 1;
    HIGH_10 :: 2;
}

D3D12_VIDEO_ENCODER_PROFILE_H264_MAIN :: 0;
D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH :: 1;
D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH_10 :: 2;

D3D12_VIDEO_ENCODER_PROFILE_HEVC :: enum s32
{
    MAIN :: 0;
    MAIN10 :: 1;
}

D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN :: 0;
D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN10 :: 1;

D3D12_VIDEO_ENCODER_RATE_CONTROL :: struct
{
    Mode : D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE;
    Flags : D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS;
    ConfigParams : D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS;
    TargetFrameRate : DXGI_RATIONAL;
}

D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR :: struct
{
    InitialQP : u32;
    MinQP : u32;
    MaxQP : u32;
    MaxFrameBitSize : u64;
    TargetBitRate : u64;
    VBVCapacity : u64;
    InitialVBVFullness : u64;
}

D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS :: struct
{
    DataSize : u32;
    union
    {
        pConfiguration_CQP : *D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP; // Const
        pConfiguration_CBR : *D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR; // Const
        pConfiguration_VBR : *D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR; // Const
        pConfiguration_QVBR : *D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR; // Const
    }; // Anonymous
}

D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP :: struct
{
    ConstantQP_FullIntracodedFrame : u32;
    ConstantQP_InterPredictedFrame_PrevRefOnly : u32;
    ConstantQP_InterPredictedFrame_BiDirectionalRef : u32;
}

D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS :: enum_flags u32
{
    NONE :: 0;
    ENABLE_DELTA_QP :: 1;
    ENABLE_FRAME_ANALYSIS :: 2;
    ENABLE_QP_RANGE :: 4;
    ENABLE_INITIAL_QP :: 8;
    ENABLE_MAX_FRAME_SIZE :: 16;
    ENABLE_VBV_SIZES :: 32;
}

D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_NONE :: 0;
D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_DELTA_QP :: 1;
D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_FRAME_ANALYSIS :: 2;
D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_QP_RANGE :: 4;
D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_INITIAL_QP :: 8;
D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_MAX_FRAME_SIZE :: 16;
D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_VBV_SIZES :: 32;

D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE :: enum s32
{
    ABSOLUTE_QP_MAP :: 0;
    CQP :: 1;
    CBR :: 2;
    VBR :: 3;
    QVBR :: 4;
}

D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_ABSOLUTE_QP_MAP :: 0;
D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CQP :: 1;
D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CBR :: 2;
D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_VBR :: 3;
D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_QVBR :: 4;

D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR :: struct
{
    InitialQP : u32;
    MinQP : u32;
    MaxQP : u32;
    MaxFrameBitSize : u64;
    TargetAvgBitRate : u64;
    PeakBitRate : u64;
    ConstantQualityTarget : u32;
}

D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR :: struct
{
    InitialQP : u32;
    MinQP : u32;
    MaxQP : u32;
    MaxFrameBitSize : u64;
    TargetAvgBitRate : u64;
    PeakBitRate : u64;
    VBVCapacity : u64;
    InitialVBVFullness : u64;
}

D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE :: struct
{
    pReconstructedPicture : *ID3D12Resource;
    ReconstructedPictureSubresource : u32;
}

D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264 :: struct
{
    ReconstructedPictureResourceIndex : u32;
    IsLongTermReference : BOOL;
    LongTermPictureIdx : u32;
    PictureOrderCountNumber : u32;
    FrameDecodingOrderNumber : u32;
    TemporalLayerIndex : u32;
}

D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC :: struct
{
    ReconstructedPictureResourceIndex : u32;
    IsRefUsedByCurrentPic : BOOL;
    IsLongTermReference : BOOL;
    PictureOrderCountNumber : u32;
    TemporalLayerIndex : u32;
}

D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS :: struct
{
    EncoderCodec : D3D12_VIDEO_ENCODER_CODEC;
    EncoderProfile : D3D12_VIDEO_ENCODER_PROFILE_DESC;
    EncoderInputFormat : DXGI_FORMAT;
    EncodedPictureEffectiveResolution : D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC;
    HWLayoutMetadata : D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER;
}

D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS :: struct
{
    ResolvedLayoutMetadata : D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER;
}

D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC :: struct
{
    Flags : D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS;
    IntraRefreshConfig : D3D12_VIDEO_ENCODER_INTRA_REFRESH;
    RateControl : D3D12_VIDEO_ENCODER_RATE_CONTROL;
    PictureTargetResolution : D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC;
    SelectedLayoutMode : D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE;
    FrameSubregionsLayoutData : D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA;
    CodecGopSequence : D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE;
}

D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS :: enum_flags u32
{
    NONE :: 0;
    RESOLUTION_CHANGE :: 1;
    RATE_CONTROL_CHANGE :: 2;
    SUBREGION_LAYOUT_CHANGE :: 4;
    REQUEST_INTRA_REFRESH :: 8;
    GOP_SEQUENCE_CHANGE :: 16;
}

D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_NONE :: 0;
D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RESOLUTION_CHANGE :: 1;
D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RATE_CONTROL_CHANGE :: 2;
D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_SUBREGION_LAYOUT_CHANGE :: 4;
D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_REQUEST_INTRA_REFRESH :: 8;
D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_GOP_SEQUENCE_CHANGE :: 16;

D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE :: struct
{
    DataSize : u32;
    union
    {
        pH264GroupOfPictures : *D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264;
        pHEVCGroupOfPictures : *D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC;
    }; // Anonymous
}

D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264 :: struct
{
    GOPLength : u32;
    PPicturePeriod : u32;
    pic_order_cnt_type : u8;
    log2_max_frame_num_minus4 : u8;
    log2_max_pic_order_cnt_lsb_minus4 : u8;
}

D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC :: struct
{
    GOPLength : u32;
    PPicturePeriod : u32;
    log2_max_pic_order_cnt_lsb_minus4 : u8;
}

D3D12_VIDEO_ENCODER_SUPPORT_FLAGS :: enum_flags u32
{
    NONE :: 0;
    GENERAL_SUPPORT_OK :: 1;
    RATE_CONTROL_RECONFIGURATION_AVAILABLE :: 2;
    RESOLUTION_RECONFIGURATION_AVAILABLE :: 4;
    RATE_CONTROL_VBV_SIZE_CONFIG_AVAILABLE :: 8;
    RATE_CONTROL_FRAME_ANALYSIS_AVAILABLE :: 16;
    RECONSTRUCTED_FRAMES_REQUIRE_TEXTURE_ARRAYS :: 32;
    RATE_CONTROL_DELTA_QP_AVAILABLE :: 64;
    SUBREGION_LAYOUT_RECONFIGURATION_AVAILABLE :: 128;
    RATE_CONTROL_ADJUSTABLE_QP_RANGE_AVAILABLE :: 256;
    RATE_CONTROL_INITIAL_QP_AVAILABLE :: 512;
    RATE_CONTROL_MAX_FRAME_SIZE_AVAILABLE :: 1024;
    SEQUENCE_GOP_RECONFIGURATION_AVAILABLE :: 2048;
    MOTION_ESTIMATION_PRECISION_MODE_LIMIT_AVAILABLE :: 4096;
}

D3D12_VIDEO_ENCODER_SUPPORT_FLAG_NONE :: 0;
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_GENERAL_SUPPORT_OK :: 1;
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_RECONFIGURATION_AVAILABLE :: 2;
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RESOLUTION_RECONFIGURATION_AVAILABLE :: 4;
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_VBV_SIZE_CONFIG_AVAILABLE :: 8;
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_FRAME_ANALYSIS_AVAILABLE :: 16;
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RECONSTRUCTED_FRAMES_REQUIRE_TEXTURE_ARRAYS :: 32;
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_DELTA_QP_AVAILABLE :: 64;
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SUBREGION_LAYOUT_RECONFIGURATION_AVAILABLE :: 128;
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_ADJUSTABLE_QP_RANGE_AVAILABLE :: 256;
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_INITIAL_QP_AVAILABLE :: 512;
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_MAX_FRAME_SIZE_AVAILABLE :: 1024;
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SEQUENCE_GOP_RECONFIGURATION_AVAILABLE :: 2048;
D3D12_VIDEO_ENCODER_SUPPORT_FLAG_MOTION_ESTIMATION_PRECISION_MODE_LIMIT_AVAILABLE :: 4096;

D3D12_VIDEO_ENCODER_TIER_HEVC :: enum s32
{
    MAIN :: 0;
    HIGH :: 1;
}

D3D12_VIDEO_ENCODER_TIER_HEVC_MAIN :: 0;
D3D12_VIDEO_ENCODER_TIER_HEVC_HIGH :: 1;

D3D12_VIDEO_ENCODER_VALIDATION_FLAGS :: enum_flags u32
{
    NONE :: 0;
    CODEC_NOT_SUPPORTED :: 1;
    INPUT_FORMAT_NOT_SUPPORTED :: 8;
    CODEC_CONFIGURATION_NOT_SUPPORTED :: 16;
    RATE_CONTROL_MODE_NOT_SUPPORTED :: 32;
    RATE_CONTROL_CONFIGURATION_NOT_SUPPORTED :: 64;
    INTRA_REFRESH_MODE_NOT_SUPPORTED :: 128;
    SUBREGION_LAYOUT_MODE_NOT_SUPPORTED :: 256;
    RESOLUTION_NOT_SUPPORTED_IN_LIST :: 512;
    GOP_STRUCTURE_NOT_SUPPORTED :: 2048;
}

D3D12_VIDEO_ENCODER_VALIDATION_FLAG_NONE :: 0;
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_NOT_SUPPORTED :: 1;
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INPUT_FORMAT_NOT_SUPPORTED :: 8;
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_CONFIGURATION_NOT_SUPPORTED :: 16;
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_MODE_NOT_SUPPORTED :: 32;
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_CONFIGURATION_NOT_SUPPORTED :: 64;
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INTRA_REFRESH_MODE_NOT_SUPPORTED :: 128;
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_SUBREGION_LAYOUT_MODE_NOT_SUPPORTED :: 256;
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RESOLUTION_NOT_SUPPORTED_IN_LIST :: 512;
D3D12_VIDEO_ENCODER_VALIDATION_FLAG_GOP_STRUCTURE_NOT_SUPPORTED :: 2048;

D3D12_VIDEO_ENCODE_REFERENCE_FRAMES :: struct
{
    NumTexture2Ds : u32;
    ppTexture2Ds : **ID3D12Resource;
    pSubresources : *u32;
}

D3D12_VIDEO_EXTENSION_COMMAND_DESC :: struct
{
    NodeMask : u32;
    CommandId : GUID;
}

D3D12_VIDEO_EXTENSION_COMMAND_INFO :: struct
{
    CommandId : GUID;
    Name : PWSTR; // Const
    CommandListSupportFlags : D3D12_COMMAND_LIST_SUPPORT_FLAGS;
}

D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS :: enum_flags u32
{
    NONE :: 0;
    READ :: 1;
    WRITE :: 2;
}

D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_NONE :: 0;
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_READ :: 1;
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_WRITE :: 2;

D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO :: struct
{
    Name : PWSTR; // Const
    _Type : D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE;
    Flags : D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS;
}

D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE :: enum s32
{
    CREATION :: 0;
    INITIALIZATION :: 1;
    EXECUTION :: 2;
    CAPS_INPUT :: 3;
    CAPS_OUTPUT :: 4;
    DEVICE_EXECUTE_INPUT :: 5;
    DEVICE_EXECUTE_OUTPUT :: 6;
}

D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CREATION :: 0;
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_INITIALIZATION :: 1;
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_EXECUTION :: 2;
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_INPUT :: 3;
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_OUTPUT :: 4;
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_INPUT :: 5;
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_OUTPUT :: 6;

D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE :: enum s32
{
    UINT8 :: 0;
    UINT16 :: 1;
    UINT32 :: 2;
    UINT64 :: 3;
    SINT8 :: 4;
    SINT16 :: 5;
    SINT32 :: 6;
    SINT64 :: 7;
    FLOAT :: 8;
    DOUBLE :: 9;
    RESOURCE :: 10;
}

D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT8 :: 0;
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT16 :: 1;
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT32 :: 2;
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT64 :: 3;
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT8 :: 4;
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT16 :: 5;
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT32 :: 6;
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT64 :: 7;
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_FLOAT :: 8;
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_DOUBLE :: 9;
D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_RESOURCE :: 10;

D3D12_VIDEO_FIELD_TYPE :: enum s32
{
    NONE :: 0;
    INTERLACED_TOP_FIELD_FIRST :: 1;
    INTERLACED_BOTTOM_FIELD_FIRST :: 2;
}

D3D12_VIDEO_FIELD_TYPE_NONE :: 0;
D3D12_VIDEO_FIELD_TYPE_INTERLACED_TOP_FIELD_FIRST :: 1;
D3D12_VIDEO_FIELD_TYPE_INTERLACED_BOTTOM_FIELD_FIRST :: 2;

D3D12_VIDEO_FORMAT :: struct
{
    Format : DXGI_FORMAT;
    ColorSpace : DXGI_COLOR_SPACE_TYPE;
}

D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE :: enum s32
{
    NONE :: 0;
    FIELD_BASED :: 1;
}

D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_NONE :: 0;
D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_FIELD_BASED :: 1;

D3D12_VIDEO_FRAME_STEREO_FORMAT :: enum s32
{
    NONE :: 0;
    MONO :: 1;
    HORIZONTAL :: 2;
    VERTICAL :: 3;
    SEPARATE :: 4;
}

D3D12_VIDEO_FRAME_STEREO_FORMAT_NONE :: 0;
D3D12_VIDEO_FRAME_STEREO_FORMAT_MONO :: 1;
D3D12_VIDEO_FRAME_STEREO_FORMAT_HORIZONTAL :: 2;
D3D12_VIDEO_FRAME_STEREO_FORMAT_VERTICAL :: 3;
D3D12_VIDEO_FRAME_STEREO_FORMAT_SEPARATE :: 4;

D3D12_VIDEO_MOTION_ESTIMATOR_DESC :: struct
{
    NodeMask : u32;
    InputFormat : DXGI_FORMAT;
    BlockSize : D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE;
    Precision : D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION;
    SizeRange : D3D12_VIDEO_SIZE_RANGE;
}

D3D12_VIDEO_MOTION_ESTIMATOR_INPUT :: struct
{
    pInputTexture2D : *ID3D12Resource;
    InputSubresourceIndex : u32;
    pReferenceTexture2D : *ID3D12Resource;
    ReferenceSubresourceIndex : u32;
    pHintMotionVectorHeap : *ID3D12VideoMotionVectorHeap;
}

D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT :: struct
{
    pMotionVectorHeap : *ID3D12VideoMotionVectorHeap;
}

D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE :: enum s32
{
    _8X8 :: 0;
    _16X16 :: 1;
}

D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_8X8 :: 0;
D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_16X16 :: 1;

D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS :: enum_flags u32
{
    NONE :: 0;
    _8X8 :: 1;
    _16X16 :: 2;
}

D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_NONE :: 0;
D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_8X8 :: 1;
D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_16X16 :: 2;

D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION :: enum s32
{
    QUARTER_PEL :: 0;
}

D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_QUARTER_PEL :: 0;

D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS :: enum_flags u32
{
    NONE :: 0;
    QUARTER_PEL :: 1;
}

D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_NONE :: 0;
D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_QUARTER_PEL :: 1;

D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC :: struct
{
    NodeMask : u32;
    InputFormat : DXGI_FORMAT;
    BlockSize : D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE;
    Precision : D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION;
    SizeRange : D3D12_VIDEO_SIZE_RANGE;
}

D3D12_VIDEO_PROCESS_ALPHA_BLENDING :: struct
{
    Enable : BOOL;
    Alpha : float;
}

D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE :: enum s32
{
    OPAQUE :: 0;
    BACKGROUND :: 1;
    DESTINATION :: 2;
    SOURCE_STREAM :: 3;
}

D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_OPAQUE :: 0;
D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_BACKGROUND :: 1;
D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_DESTINATION :: 2;
D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_SOURCE_STREAM :: 3;

D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS :: enum_flags u32
{
    NONE :: 0;
    DENOISE :: 1;
    DERINGING :: 2;
    EDGE_ENHANCEMENT :: 4;
    COLOR_CORRECTION :: 8;
    FLESH_TONE_MAPPING :: 16;
    IMAGE_STABILIZATION :: 32;
    SUPER_RESOLUTION :: 64;
    ANAMORPHIC_SCALING :: 128;
    CUSTOM :: 2147483648;
}

D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_NONE :: 0;
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DENOISE :: 1;
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DERINGING :: 2;
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_EDGE_ENHANCEMENT :: 4;
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_COLOR_CORRECTION :: 8;
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_FLESH_TONE_MAPPING :: 16;
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_IMAGE_STABILIZATION :: 32;
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_SUPER_RESOLUTION :: 64;
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_ANAMORPHIC_SCALING :: 128;
D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_CUSTOM :: 2147483648;

D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS :: enum_flags u32
{
    NONE :: 0;
    BOB :: 1;
    CUSTOM :: 2147483648;
}

D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_NONE :: 0;
D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_BOB :: 1;
D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_CUSTOM :: 2147483648;

D3D12_VIDEO_PROCESS_FEATURE_FLAGS :: enum_flags u32
{
    NONE :: 0;
    ALPHA_FILL :: 1;
    LUMA_KEY :: 2;
    STEREO :: 4;
    ROTATION :: 8;
    FLIP :: 16;
    ALPHA_BLENDING :: 32;
    PIXEL_ASPECT_RATIO :: 64;
}

D3D12_VIDEO_PROCESS_FEATURE_FLAG_NONE :: 0;
D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_FILL :: 1;
D3D12_VIDEO_PROCESS_FEATURE_FLAG_LUMA_KEY :: 2;
D3D12_VIDEO_PROCESS_FEATURE_FLAG_STEREO :: 4;
D3D12_VIDEO_PROCESS_FEATURE_FLAG_ROTATION :: 8;
D3D12_VIDEO_PROCESS_FEATURE_FLAG_FLIP :: 16;
D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_BLENDING :: 32;
D3D12_VIDEO_PROCESS_FEATURE_FLAG_PIXEL_ASPECT_RATIO :: 64;

D3D12_VIDEO_PROCESS_FILTER :: enum s32
{
    BRIGHTNESS :: 0;
    CONTRAST :: 1;
    HUE :: 2;
    SATURATION :: 3;
    NOISE_REDUCTION :: 4;
    EDGE_ENHANCEMENT :: 5;
    ANAMORPHIC_SCALING :: 6;
    STEREO_ADJUSTMENT :: 7;
}

D3D12_VIDEO_PROCESS_FILTER_BRIGHTNESS :: 0;
D3D12_VIDEO_PROCESS_FILTER_CONTRAST :: 1;
D3D12_VIDEO_PROCESS_FILTER_HUE :: 2;
D3D12_VIDEO_PROCESS_FILTER_SATURATION :: 3;
D3D12_VIDEO_PROCESS_FILTER_NOISE_REDUCTION :: 4;
D3D12_VIDEO_PROCESS_FILTER_EDGE_ENHANCEMENT :: 5;
D3D12_VIDEO_PROCESS_FILTER_ANAMORPHIC_SCALING :: 6;
D3D12_VIDEO_PROCESS_FILTER_STEREO_ADJUSTMENT :: 7;

D3D12_VIDEO_PROCESS_FILTER_FLAGS :: enum_flags u32
{
    NONE :: 0;
    BRIGHTNESS :: 1;
    CONTRAST :: 2;
    HUE :: 4;
    SATURATION :: 8;
    NOISE_REDUCTION :: 16;
    EDGE_ENHANCEMENT :: 32;
    ANAMORPHIC_SCALING :: 64;
    STEREO_ADJUSTMENT :: 128;
}

D3D12_VIDEO_PROCESS_FILTER_FLAG_NONE :: 0;
D3D12_VIDEO_PROCESS_FILTER_FLAG_BRIGHTNESS :: 1;
D3D12_VIDEO_PROCESS_FILTER_FLAG_CONTRAST :: 2;
D3D12_VIDEO_PROCESS_FILTER_FLAG_HUE :: 4;
D3D12_VIDEO_PROCESS_FILTER_FLAG_SATURATION :: 8;
D3D12_VIDEO_PROCESS_FILTER_FLAG_NOISE_REDUCTION :: 16;
D3D12_VIDEO_PROCESS_FILTER_FLAG_EDGE_ENHANCEMENT :: 32;
D3D12_VIDEO_PROCESS_FILTER_FLAG_ANAMORPHIC_SCALING :: 64;
D3D12_VIDEO_PROCESS_FILTER_FLAG_STEREO_ADJUSTMENT :: 128;

D3D12_VIDEO_PROCESS_FILTER_RANGE :: struct
{
    Minimum : s32;
    Maximum : s32;
    Default : s32;
    Multiplier : float;
}

D3D12_VIDEO_PROCESS_INPUT_STREAM :: struct
{
    pTexture2D : *ID3D12Resource;
    Subresource : u32;
    ReferenceSet : D3D12_VIDEO_PROCESS_REFERENCE_SET;
}

D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS :: struct
{
    InputStream : [2]D3D12_VIDEO_PROCESS_INPUT_STREAM;
    Transform : D3D12_VIDEO_PROCESS_TRANSFORM;
    Flags : D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS;
    RateInfo : D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE;
    FilterLevels : [32]s32;
    AlphaBlending : D3D12_VIDEO_PROCESS_ALPHA_BLENDING;
}

D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1 :: struct
{
    InputStream : [2]D3D12_VIDEO_PROCESS_INPUT_STREAM;
    Transform : D3D12_VIDEO_PROCESS_TRANSFORM;
    Flags : D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS;
    RateInfo : D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE;
    FilterLevels : [32]s32;
    AlphaBlending : D3D12_VIDEO_PROCESS_ALPHA_BLENDING;
    FieldType : D3D12_VIDEO_FIELD_TYPE;
}

D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC :: struct
{
    Format : DXGI_FORMAT;
    ColorSpace : DXGI_COLOR_SPACE_TYPE;
    SourceAspectRatio : DXGI_RATIONAL;
    DestinationAspectRatio : DXGI_RATIONAL;
    FrameRate : DXGI_RATIONAL;
    SourceSizeRange : D3D12_VIDEO_SIZE_RANGE;
    DestinationSizeRange : D3D12_VIDEO_SIZE_RANGE;
    EnableOrientation : BOOL;
    FilterFlags : D3D12_VIDEO_PROCESS_FILTER_FLAGS;
    StereoFormat : D3D12_VIDEO_FRAME_STEREO_FORMAT;
    FieldType : D3D12_VIDEO_FIELD_TYPE;
    DeinterlaceMode : D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS;
    EnableAlphaBlending : BOOL;
    LumaKey : D3D12_VIDEO_PROCESS_LUMA_KEY;
    NumPastFrames : u32;
    NumFutureFrames : u32;
    EnableAutoProcessing : BOOL;
}

D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS :: enum_flags u32
{
    NONE :: 0;
    FRAME_DISCONTINUITY :: 1;
    FRAME_REPEAT :: 2;
}

D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_NONE :: 0;
D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_DISCONTINUITY :: 1;
D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_REPEAT :: 2;

D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE :: struct
{
    OutputIndex : u32;
    InputFrameOrField : u32;
}

D3D12_VIDEO_PROCESS_LUMA_KEY :: struct
{
    Enable : BOOL;
    Lower : float;
    Upper : float;
}

D3D12_VIDEO_PROCESS_ORIENTATION :: enum s32
{
    DEFAULT :: 0;
    FLIP_HORIZONTAL :: 1;
    CLOCKWISE_90 :: 2;
    CLOCKWISE_90_FLIP_HORIZONTAL :: 3;
    CLOCKWISE_180 :: 4;
    FLIP_VERTICAL :: 5;
    CLOCKWISE_270 :: 6;
    CLOCKWISE_270_FLIP_HORIZONTAL :: 7;
}

D3D12_VIDEO_PROCESS_ORIENTATION_DEFAULT :: 0;
D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_HORIZONTAL :: 1;
D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90 :: 2;
D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90_FLIP_HORIZONTAL :: 3;
D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_180 :: 4;
D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_VERTICAL :: 5;
D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270 :: 6;
D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270_FLIP_HORIZONTAL :: 7;

D3D12_VIDEO_PROCESS_OUTPUT_STREAM :: struct
{
    pTexture2D : *ID3D12Resource;
    Subresource : u32;
}

D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS :: struct
{
    OutputStream : [2]D3D12_VIDEO_PROCESS_OUTPUT_STREAM;
    TargetRectangle : RECT;
}

D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC :: struct
{
    Format : DXGI_FORMAT;
    ColorSpace : DXGI_COLOR_SPACE_TYPE;
    AlphaFillMode : D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE;
    AlphaFillModeSourceStreamIndex : u32;
    BackgroundColor : [4]float;
    FrameRate : DXGI_RATIONAL;
    EnableStereo : BOOL;
}

D3D12_VIDEO_PROCESS_REFERENCE_SET :: struct
{
    NumPastFrames : u32;
    ppPastFrames : **ID3D12Resource;
    pPastSubresources : *u32;
    NumFutureFrames : u32;
    ppFutureFrames : **ID3D12Resource;
    pFutureSubresources : *u32;
}

D3D12_VIDEO_PROCESS_SUPPORT_FLAGS :: enum_flags u32
{
    NONE :: 0;
    SUPPORTED :: 1;
}

D3D12_VIDEO_PROCESS_SUPPORT_FLAG_NONE :: 0;
D3D12_VIDEO_PROCESS_SUPPORT_FLAG_SUPPORTED :: 1;

D3D12_VIDEO_PROCESS_TRANSFORM :: struct
{
    SourceRectangle : RECT;
    DestinationRectangle : RECT;
    Orientation : D3D12_VIDEO_PROCESS_ORIENTATION;
}

D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS :: enum_flags u32
{
    NONE :: 0;
    SUPPORTED :: 1;
}

D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_NONE :: 0;
D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_SUPPORTED :: 1;

D3D12_VIDEO_SAMPLE :: struct
{
    Width : u32;
    Height : u32;
    Format : D3D12_VIDEO_FORMAT;
}

D3D12_VIDEO_SCALE_SUPPORT :: struct
{
    OutputSizeRange : D3D12_VIDEO_SIZE_RANGE;
    Flags : D3D12_VIDEO_SCALE_SUPPORT_FLAGS;
}

D3D12_VIDEO_SCALE_SUPPORT_FLAGS :: enum_flags u32
{
    NONE :: 0;
    POW2_ONLY :: 1;
    EVEN_DIMENSIONS_ONLY :: 2;
}

D3D12_VIDEO_SCALE_SUPPORT_FLAG_NONE :: 0;
D3D12_VIDEO_SCALE_SUPPORT_FLAG_POW2_ONLY :: 1;
D3D12_VIDEO_SCALE_SUPPORT_FLAG_EVEN_DIMENSIONS_ONLY :: 2;

D3D12_VIDEO_SIZE_RANGE :: struct
{
    MaxWidth : u32;
    MaxHeight : u32;
    MinWidth : u32;
    MinHeight : u32;
}

D3D12_VIEWPORT :: struct
{
    TopLeftX : float;
    TopLeftY : float;
    Width : float;
    Height : float;
    MinDepth : float;
    MaxDepth : float;
}

D3D12_VIEW_INSTANCE_LOCATION :: struct
{
    ViewportArrayIndex : u32;
    RenderTargetArrayIndex : u32;
}

D3D12_VIEW_INSTANCING_DESC :: struct
{
    ViewInstanceCount : u32;
    pViewInstanceLocations : *D3D12_VIEW_INSTANCE_LOCATION; // Const
    Flags : D3D12_VIEW_INSTANCING_FLAGS;
}

D3D12_VIEW_INSTANCING_FLAGS :: enum_flags u32
{
    NONE :: 0;
    ENABLE_VIEW_INSTANCE_MASKING :: 1;
}

D3D12_VIEW_INSTANCING_FLAG_NONE :: 0;
D3D12_VIEW_INSTANCING_FLAG_ENABLE_VIEW_INSTANCE_MASKING :: 1;

D3D12_VIEW_INSTANCING_TIER :: enum s32
{
    NOT_SUPPORTED :: 0;
    _1 :: 1;
    _2 :: 2;
    _3 :: 3;
}

D3D12_VIEW_INSTANCING_TIER_NOT_SUPPORTED :: 0;
D3D12_VIEW_INSTANCING_TIER_1 :: 1;
D3D12_VIEW_INSTANCING_TIER_2 :: 2;
D3D12_VIEW_INSTANCING_TIER_3 :: 3;

D3D12_WAVE_MMA_TIER :: enum s32
{
    NOT_SUPPORTED :: 0;
    _1_0 :: 10;
}

D3D12_WAVE_MMA_TIER_NOT_SUPPORTED :: 0;
D3D12_WAVE_MMA_TIER_1_0 :: 10;

D3D12_WRITEBUFFERIMMEDIATE_MODE :: enum s32
{
    DEFAULT :: 0;
    MARKER_IN :: 1;
    MARKER_OUT :: 2;
}

D3D12_WRITEBUFFERIMMEDIATE_MODE_DEFAULT :: 0;
D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_IN :: 1;
D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_OUT :: 2;

D3D12_WRITEBUFFERIMMEDIATE_PARAMETER :: struct
{
    Dest : u64;
    Value : u32;
}

ID3D12CommandAllocator_UUID :: "6102dee4-af59-4b09-b999-b44d73f09b24";
ID3D12CommandAllocator :: struct
{
    UUID :: GUID.{0x6102dee4,0xaf59,0x4b09,.[0xb9,0x99,0xb4,0x4d,0x73,0xf0,0x9b,0x24]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Pageable;

    #place base;
    vtable : *ID3D12CommandAllocatorVTable;

    Reset :: inline (this : *ID3D12CommandAllocator) -> HRESULT #no_context
    {
        return this.vtable.Reset (this);
    }
}

ID3D12CommandList_UUID :: "7116d91c-e7e4-47ce-b8c6-ec8168f437e5";
ID3D12CommandList :: struct
{
    UUID :: GUID.{0x7116d91c,0xe7e4,0x47ce,.[0xb8,0xc6,0xec,0x81,0x68,0xf4,0x37,0xe5]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12DeviceChild;

    #place base;
    vtable : *ID3D12CommandListVTable;

    GetType :: inline (this : *ID3D12CommandList) -> D3D12_COMMAND_LIST_TYPE #no_context
    {
        return this.vtable.GetType (this);
    }
}

ID3D12CommandQueue_UUID :: "0ec870a6-5d7e-4c22-8cfc-5baae07616ed";
ID3D12CommandQueue :: struct
{
    UUID :: GUID.{0xec870a6,0x5d7e,0x4c22,.[0x8c,0xfc,0x5b,0xaa,0xe0,0x76,0x16,0xed]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Pageable;

    #place base;
    vtable : *ID3D12CommandQueueVTable;

    UpdateTileMappings :: inline (this : *ID3D12CommandQueue, 
        pResource : *ID3D12Resource,
        NumResourceRegions : u32,
        pResourceRegionStartCoordinates : *D3D12_TILED_RESOURCE_COORDINATE,
        pResourceRegionSizes : *D3D12_TILE_REGION_SIZE,
        pHeap : *ID3D12Heap,
        NumRanges : u32,
        pRangeFlags : *D3D12_TILE_RANGE_FLAGS,
        pHeapRangeStartOffsets : *u32,
        pRangeTileCounts : *u32,
        Flags : D3D12_TILE_MAPPING_FLAGS
    ) #no_context
    {
        this.vtable.UpdateTileMappings (this, pResource, NumResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, NumRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, Flags);
    }

    CopyTileMappings :: inline (this : *ID3D12CommandQueue, 
        pDstResource : *ID3D12Resource,
        pDstRegionStartCoordinate : *D3D12_TILED_RESOURCE_COORDINATE,
        pSrcResource : *ID3D12Resource,
        pSrcRegionStartCoordinate : *D3D12_TILED_RESOURCE_COORDINATE,
        pRegionSize : *D3D12_TILE_REGION_SIZE,
        Flags : D3D12_TILE_MAPPING_FLAGS
    ) #no_context
    {
        this.vtable.CopyTileMappings (this, pDstResource, pDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, pRegionSize, Flags);
    }

    ExecuteCommandLists :: inline (this : *ID3D12CommandQueue, NumCommandLists : u32, ppCommandLists : **ID3D12CommandList) #no_context
    {
        this.vtable.ExecuteCommandLists (this, NumCommandLists, ppCommandLists);
    }

    SetMarker :: inline (this : *ID3D12CommandQueue, Metadata : u32, pData : *void, Size : u32) #no_context
    {
        this.vtable.SetMarker (this, Metadata, pData, Size);
    }

    BeginEvent :: inline (this : *ID3D12CommandQueue, Metadata : u32, pData : *void, Size : u32) #no_context
    {
        this.vtable.BeginEvent (this, Metadata, pData, Size);
    }

    EndEvent :: inline (this : *ID3D12CommandQueue) #no_context
    {
        this.vtable.EndEvent (this);
    }

    Signal :: inline (this : *ID3D12CommandQueue, pFence : *ID3D12Fence, Value : u64) -> HRESULT #no_context
    {
        return this.vtable.Signal (this, pFence, Value);
    }

    Wait :: inline (this : *ID3D12CommandQueue, pFence : *ID3D12Fence, Value : u64) -> HRESULT #no_context
    {
        return this.vtable.Wait (this, pFence, Value);
    }

    GetTimestampFrequency :: inline (this : *ID3D12CommandQueue, pFrequency : *u64) -> HRESULT #no_context
    {
        return this.vtable.GetTimestampFrequency (this, pFrequency);
    }

    GetClockCalibration :: inline (this : *ID3D12CommandQueue, pGpuTimestamp : *u64, pCpuTimestamp : *u64) -> HRESULT #no_context
    {
        return this.vtable.GetClockCalibration (this, pGpuTimestamp, pCpuTimestamp);
    }

    GetDesc :: inline (this : *ID3D12CommandQueue) -> D3D12_COMMAND_QUEUE_DESC #no_context
    {
        return this.vtable.GetDesc (this);
    }
}

ID3D12CommandSignature_UUID :: "c36a797c-ec80-4f0a-8985-a7b2475082d1";
ID3D12CommandSignature :: struct
{
    UUID :: GUID.{0xc36a797c,0xec80,0x4f0a,.[0x89,0x85,0xa7,0xb2,0x47,0x50,0x82,0xd1]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Pageable;

    #place base;
    vtable : *ID3D12CommandSignatureVTable;
}

ID3D12Debug_UUID :: "344488b7-6846-474b-b989-f027448245e0";
ID3D12Debug :: struct
{
    UUID :: GUID.{0x344488b7,0x6846,0x474b,.[0xb9,0x89,0xf0,0x27,0x44,0x82,0x45,0xe0]};

    #as using, except (.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D12DebugVTable;

    EnableDebugLayer :: inline (this : *ID3D12Debug) #no_context
    {
        this.vtable.EnableDebugLayer (this);
    }
}

ID3D12Debug1_UUID :: "affaa4ca-63fe-4d8e-b8ad-159000af4304";
ID3D12Debug1 :: struct
{
    UUID :: GUID.{0xaffaa4ca,0x63fe,0x4d8e,.[0xb8,0xad,0x15,0x90,0x0,0xaf,0x43,0x4]};

    #as using, except (.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D12Debug1VTable;

    EnableDebugLayer :: inline (this : *ID3D12Debug1) #no_context
    {
        this.vtable.EnableDebugLayer (this);
    }

    SetEnableGPUBasedValidation :: inline (this : *ID3D12Debug1, Enable : BOOL) #no_context
    {
        this.vtable.SetEnableGPUBasedValidation (this, Enable);
    }

    SetEnableSynchronizedCommandQueueValidation :: inline (this : *ID3D12Debug1, Enable : BOOL) #no_context
    {
        this.vtable.SetEnableSynchronizedCommandQueueValidation (this, Enable);
    }
}

ID3D12Debug2_UUID :: "93a665c4-a3b2-4e5d-b692-a26ae14e3374";
ID3D12Debug2 :: struct
{
    UUID :: GUID.{0x93a665c4,0xa3b2,0x4e5d,.[0xb6,0x92,0xa2,0x6a,0xe1,0x4e,0x33,0x74]};

    #as using, except (.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D12Debug2VTable;

    SetGPUBasedValidationFlags :: inline (this : *ID3D12Debug2, Flags : D3D12_GPU_BASED_VALIDATION_FLAGS) #no_context
    {
        this.vtable.SetGPUBasedValidationFlags (this, Flags);
    }
}

ID3D12Debug3_UUID :: "5cf4e58f-f671-4ff1-a542-3686e3d153d1";
ID3D12Debug3 :: struct
{
    UUID :: GUID.{0x5cf4e58f,0xf671,0x4ff1,.[0xa5,0x42,0x36,0x86,0xe3,0xd1,0x53,0xd1]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Debug;

    #place base;
    vtable : *ID3D12Debug3VTable;

    SetEnableGPUBasedValidation :: inline (this : *ID3D12Debug3, Enable : BOOL) #no_context
    {
        this.vtable.SetEnableGPUBasedValidation (this, Enable);
    }

    SetEnableSynchronizedCommandQueueValidation :: inline (this : *ID3D12Debug3, Enable : BOOL) #no_context
    {
        this.vtable.SetEnableSynchronizedCommandQueueValidation (this, Enable);
    }

    SetGPUBasedValidationFlags :: inline (this : *ID3D12Debug3, Flags : D3D12_GPU_BASED_VALIDATION_FLAGS) #no_context
    {
        this.vtable.SetGPUBasedValidationFlags (this, Flags);
    }
}

ID3D12Debug4_UUID :: "014b816e-9ec5-4a2f-a845-ffbe441ce13a";
ID3D12Debug4 :: struct
{
    UUID :: GUID.{0x14b816e,0x9ec5,0x4a2f,.[0xa8,0x45,0xff,0xbe,0x44,0x1c,0xe1,0x3a]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Debug3;

    #place base;
    vtable : *ID3D12Debug4VTable;

    DisableDebugLayer :: inline (this : *ID3D12Debug4) #no_context
    {
        this.vtable.DisableDebugLayer (this);
    }
}

ID3D12Debug5_UUID :: "548d6b12-09fa-40e0-9069-5dcd589a52c9";
ID3D12Debug5 :: struct
{
    UUID :: GUID.{0x548d6b12,0x9fa,0x40e0,.[0x90,0x69,0x5d,0xcd,0x58,0x9a,0x52,0xc9]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Debug4;

    #place base;
    vtable : *ID3D12Debug5VTable;

    SetEnableAutoName :: inline (this : *ID3D12Debug5, Enable : BOOL) #no_context
    {
        this.vtable.SetEnableAutoName (this, Enable);
    }
}

ID3D12DebugCommandList_UUID :: "09e0bf36-54ac-484f-8847-4baeeab6053f";
ID3D12DebugCommandList :: struct
{
    UUID :: GUID.{0x9e0bf36,0x54ac,0x484f,.[0x88,0x47,0x4b,0xae,0xea,0xb6,0x5,0x3f]};

    #as using, except (.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D12DebugCommandListVTable;

    AssertResourceState :: inline (this : *ID3D12DebugCommandList, pResource : *ID3D12Resource, Subresource : u32, State : u32) -> BOOL #no_context
    {
        return this.vtable.AssertResourceState (this, pResource, Subresource, State);
    }

    SetFeatureMask :: inline (this : *ID3D12DebugCommandList, Mask : D3D12_DEBUG_FEATURE) -> HRESULT #no_context
    {
        return this.vtable.SetFeatureMask (this, Mask);
    }

    GetFeatureMask :: inline (this : *ID3D12DebugCommandList) -> D3D12_DEBUG_FEATURE #no_context
    {
        return this.vtable.GetFeatureMask (this);
    }
}

ID3D12DebugCommandList1_UUID :: "102ca951-311b-4b01-b11f-ecb83e061b37";
ID3D12DebugCommandList1 :: struct
{
    UUID :: GUID.{0x102ca951,0x311b,0x4b01,.[0xb1,0x1f,0xec,0xb8,0x3e,0x6,0x1b,0x37]};

    #as using, except (.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D12DebugCommandList1VTable;

    AssertResourceState :: inline (this : *ID3D12DebugCommandList1, pResource : *ID3D12Resource, Subresource : u32, State : u32) -> BOOL #no_context
    {
        return this.vtable.AssertResourceState (this, pResource, Subresource, State);
    }

    SetDebugParameter :: inline (this : *ID3D12DebugCommandList1, _Type : D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, pData : *void, DataSize : u32) -> HRESULT #no_context
    {
        return this.vtable.SetDebugParameter (this, _Type, pData, DataSize);
    }

    GetDebugParameter :: inline (this : *ID3D12DebugCommandList1, _Type : D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, pData : *void, DataSize : u32) -> HRESULT #no_context
    {
        return this.vtable.GetDebugParameter (this, _Type, pData, DataSize);
    }
}

ID3D12DebugCommandList2_UUID :: "aeb575cf-4e06-48be-ba3b-c450fc96652e";
ID3D12DebugCommandList2 :: struct
{
    UUID :: GUID.{0xaeb575cf,0x4e06,0x48be,.[0xba,0x3b,0xc4,0x50,0xfc,0x96,0x65,0x2e]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12DebugCommandList;

    #place base;
    vtable : *ID3D12DebugCommandList2VTable;

    SetDebugParameter :: inline (this : *ID3D12DebugCommandList2, _Type : D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, pData : *void, DataSize : u32) -> HRESULT #no_context
    {
        return this.vtable.SetDebugParameter (this, _Type, pData, DataSize);
    }

    GetDebugParameter :: inline (this : *ID3D12DebugCommandList2, _Type : D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, pData : *void, DataSize : u32) -> HRESULT #no_context
    {
        return this.vtable.GetDebugParameter (this, _Type, pData, DataSize);
    }
}

ID3D12DebugCommandQueue_UUID :: "09e0bf36-54ac-484f-8847-4baeeab6053a";
ID3D12DebugCommandQueue :: struct
{
    UUID :: GUID.{0x9e0bf36,0x54ac,0x484f,.[0x88,0x47,0x4b,0xae,0xea,0xb6,0x5,0x3a]};

    #as using, except (.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D12DebugCommandQueueVTable;

    AssertResourceState :: inline (this : *ID3D12DebugCommandQueue, pResource : *ID3D12Resource, Subresource : u32, State : u32) -> BOOL #no_context
    {
        return this.vtable.AssertResourceState (this, pResource, Subresource, State);
    }
}

ID3D12DebugDevice_UUID :: "3febd6dd-4973-4787-8194-e45f9e28923e";
ID3D12DebugDevice :: struct
{
    UUID :: GUID.{0x3febd6dd,0x4973,0x4787,.[0x81,0x94,0xe4,0x5f,0x9e,0x28,0x92,0x3e]};

    #as using, except (.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D12DebugDeviceVTable;

    SetFeatureMask :: inline (this : *ID3D12DebugDevice, Mask : D3D12_DEBUG_FEATURE) -> HRESULT #no_context
    {
        return this.vtable.SetFeatureMask (this, Mask);
    }

    GetFeatureMask :: inline (this : *ID3D12DebugDevice) -> D3D12_DEBUG_FEATURE #no_context
    {
        return this.vtable.GetFeatureMask (this);
    }

    ReportLiveDeviceObjects :: inline (this : *ID3D12DebugDevice, Flags : D3D12_RLDO_FLAGS) -> HRESULT #no_context
    {
        return this.vtable.ReportLiveDeviceObjects (this, Flags);
    }
}

ID3D12DebugDevice1_UUID :: "a9b71770-d099-4a65-a698-3dee10020f88";
ID3D12DebugDevice1 :: struct
{
    UUID :: GUID.{0xa9b71770,0xd099,0x4a65,.[0xa6,0x98,0x3d,0xee,0x10,0x2,0xf,0x88]};

    #as using, except (.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D12DebugDevice1VTable;

    SetDebugParameter :: inline (this : *ID3D12DebugDevice1, _Type : D3D12_DEBUG_DEVICE_PARAMETER_TYPE, pData : *void, DataSize : u32) -> HRESULT #no_context
    {
        return this.vtable.SetDebugParameter (this, _Type, pData, DataSize);
    }

    GetDebugParameter :: inline (this : *ID3D12DebugDevice1, _Type : D3D12_DEBUG_DEVICE_PARAMETER_TYPE, pData : *void, DataSize : u32) -> HRESULT #no_context
    {
        return this.vtable.GetDebugParameter (this, _Type, pData, DataSize);
    }

    ReportLiveDeviceObjects :: inline (this : *ID3D12DebugDevice1, Flags : D3D12_RLDO_FLAGS) -> HRESULT #no_context
    {
        return this.vtable.ReportLiveDeviceObjects (this, Flags);
    }
}

ID3D12DebugDevice2_UUID :: "60eccbc1-378d-4df1-894c-f8ac5ce4d7dd";
ID3D12DebugDevice2 :: struct
{
    UUID :: GUID.{0x60eccbc1,0x378d,0x4df1,.[0x89,0x4c,0xf8,0xac,0x5c,0xe4,0xd7,0xdd]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12DebugDevice;

    #place base;
    vtable : *ID3D12DebugDevice2VTable;

    SetDebugParameter :: inline (this : *ID3D12DebugDevice2, _Type : D3D12_DEBUG_DEVICE_PARAMETER_TYPE, pData : *void, DataSize : u32) -> HRESULT #no_context
    {
        return this.vtable.SetDebugParameter (this, _Type, pData, DataSize);
    }

    GetDebugParameter :: inline (this : *ID3D12DebugDevice2, _Type : D3D12_DEBUG_DEVICE_PARAMETER_TYPE, pData : *void, DataSize : u32) -> HRESULT #no_context
    {
        return this.vtable.GetDebugParameter (this, _Type, pData, DataSize);
    }
}

ID3D12DescriptorHeap_UUID :: "8efb471d-616c-4f49-90f7-127bb763fa51";
ID3D12DescriptorHeap :: struct
{
    UUID :: GUID.{0x8efb471d,0x616c,0x4f49,.[0x90,0xf7,0x12,0x7b,0xb7,0x63,0xfa,0x51]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Pageable;

    #place base;
    vtable : *ID3D12DescriptorHeapVTable;

    GetDesc :: inline (this : *ID3D12DescriptorHeap) -> D3D12_DESCRIPTOR_HEAP_DESC #no_context
    {
        return this.vtable.GetDesc (this);
    }

    GetCPUDescriptorHandleForHeapStart :: inline (this : *ID3D12DescriptorHeap) -> D3D12_CPU_DESCRIPTOR_HANDLE #no_context
    {
        return this.vtable.GetCPUDescriptorHandleForHeapStart (this);
    }

    GetGPUDescriptorHandleForHeapStart :: inline (this : *ID3D12DescriptorHeap) -> D3D12_GPU_DESCRIPTOR_HANDLE #no_context
    {
        return this.vtable.GetGPUDescriptorHandleForHeapStart (this);
    }
}

ID3D12Device_UUID :: "189819f1-1db6-4b57-be54-1821339b85f7";
ID3D12Device :: struct
{
    UUID :: GUID.{0x189819f1,0x1db6,0x4b57,.[0xbe,0x54,0x18,0x21,0x33,0x9b,0x85,0xf7]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Object;

    #place base;
    vtable : *ID3D12DeviceVTable;

    GetNodeCount :: inline (this : *ID3D12Device) -> u32 #no_context
    {
        return this.vtable.GetNodeCount (this);
    }

    CreateCommandQueue :: inline (this : *ID3D12Device, pDesc : *D3D12_COMMAND_QUEUE_DESC, riid : *GUID, ppCommandQueue : **void) -> HRESULT #no_context
    {
        return this.vtable.CreateCommandQueue (this, pDesc, riid, ppCommandQueue);
    }

    CreateCommandAllocator :: inline (this : *ID3D12Device, type : D3D12_COMMAND_LIST_TYPE, riid : *GUID, ppCommandAllocator : **void) -> HRESULT #no_context
    {
        return this.vtable.CreateCommandAllocator (this, type, riid, ppCommandAllocator);
    }

    CreateGraphicsPipelineState :: inline (this : *ID3D12Device, pDesc : *D3D12_GRAPHICS_PIPELINE_STATE_DESC, riid : *GUID, ppPipelineState : **void) -> HRESULT #no_context
    {
        return this.vtable.CreateGraphicsPipelineState (this, pDesc, riid, ppPipelineState);
    }

    CreateComputePipelineState :: inline (this : *ID3D12Device, pDesc : *D3D12_COMPUTE_PIPELINE_STATE_DESC, riid : *GUID, ppPipelineState : **void) -> HRESULT #no_context
    {
        return this.vtable.CreateComputePipelineState (this, pDesc, riid, ppPipelineState);
    }

    CreateCommandList :: inline (this : *ID3D12Device, 
        nodeMask : u32,
        type : D3D12_COMMAND_LIST_TYPE,
        pCommandAllocator : *ID3D12CommandAllocator,
        pInitialState : *ID3D12PipelineState,
        riid : *GUID,
        ppCommandList : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateCommandList (this, nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
    }

    CheckFeatureSupport :: inline (this : *ID3D12Device, Feature : D3D12_FEATURE, pFeatureSupportData : *void, FeatureSupportDataSize : u32) -> HRESULT #no_context
    {
        return this.vtable.CheckFeatureSupport (this, Feature, pFeatureSupportData, FeatureSupportDataSize);
    }

    CreateDescriptorHeap :: inline (this : *ID3D12Device, pDescriptorHeapDesc : *D3D12_DESCRIPTOR_HEAP_DESC, riid : *GUID, ppvHeap : **void) -> HRESULT #no_context
    {
        return this.vtable.CreateDescriptorHeap (this, pDescriptorHeapDesc, riid, ppvHeap);
    }

    GetDescriptorHandleIncrementSize :: inline (this : *ID3D12Device, DescriptorHeapType : D3D12_DESCRIPTOR_HEAP_TYPE) -> u32 #no_context
    {
        return this.vtable.GetDescriptorHandleIncrementSize (this, DescriptorHeapType);
    }

    CreateRootSignature :: inline (this : *ID3D12Device, 
        nodeMask : u32,
        pBlobWithRootSignature : *void,
        blobLengthInBytes : u64,
        riid : *GUID,
        ppvRootSignature : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateRootSignature (this, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
    }

    CreateConstantBufferView :: inline (this : *ID3D12Device, pDesc : *D3D12_CONSTANT_BUFFER_VIEW_DESC, DestDescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) #no_context
    {
        this.vtable.CreateConstantBufferView (this, pDesc, DestDescriptor);
    }

    CreateShaderResourceView :: inline (this : *ID3D12Device, pResource : *ID3D12Resource, pDesc : *D3D12_SHADER_RESOURCE_VIEW_DESC, DestDescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) #no_context
    {
        this.vtable.CreateShaderResourceView (this, pResource, pDesc, DestDescriptor);
    }

    CreateUnorderedAccessView :: inline (this : *ID3D12Device, 
        pResource : *ID3D12Resource,
        pCounterResource : *ID3D12Resource,
        pDesc : *D3D12_UNORDERED_ACCESS_VIEW_DESC,
        DestDescriptor : D3D12_CPU_DESCRIPTOR_HANDLE
    ) #no_context
    {
        this.vtable.CreateUnorderedAccessView (this, pResource, pCounterResource, pDesc, DestDescriptor);
    }

    CreateRenderTargetView :: inline (this : *ID3D12Device, pResource : *ID3D12Resource, pDesc : *D3D12_RENDER_TARGET_VIEW_DESC, DestDescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) #no_context
    {
        this.vtable.CreateRenderTargetView (this, pResource, pDesc, DestDescriptor);
    }

    CreateDepthStencilView :: inline (this : *ID3D12Device, pResource : *ID3D12Resource, pDesc : *D3D12_DEPTH_STENCIL_VIEW_DESC, DestDescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) #no_context
    {
        this.vtable.CreateDepthStencilView (this, pResource, pDesc, DestDescriptor);
    }

    CreateSampler :: inline (this : *ID3D12Device, pDesc : *D3D12_SAMPLER_DESC, DestDescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) #no_context
    {
        this.vtable.CreateSampler (this, pDesc, DestDescriptor);
    }

    CopyDescriptors :: inline (this : *ID3D12Device, 
        NumDestDescriptorRanges : u32,
        pDestDescriptorRangeStarts : *D3D12_CPU_DESCRIPTOR_HANDLE,
        pDestDescriptorRangeSizes : *u32,
        NumSrcDescriptorRanges : u32,
        pSrcDescriptorRangeStarts : *D3D12_CPU_DESCRIPTOR_HANDLE,
        pSrcDescriptorRangeSizes : *u32,
        DescriptorHeapsType : D3D12_DESCRIPTOR_HEAP_TYPE
    ) #no_context
    {
        this.vtable.CopyDescriptors (this, NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
    }

    CopyDescriptorsSimple :: inline (this : *ID3D12Device, 
        NumDescriptors : u32,
        DestDescriptorRangeStart : D3D12_CPU_DESCRIPTOR_HANDLE,
        SrcDescriptorRangeStart : D3D12_CPU_DESCRIPTOR_HANDLE,
        DescriptorHeapsType : D3D12_DESCRIPTOR_HEAP_TYPE
    ) #no_context
    {
        this.vtable.CopyDescriptorsSimple (this, NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
    }

    GetResourceAllocationInfo :: inline (this : *ID3D12Device, visibleMask : u32, numResourceDescs : u32, pResourceDescs : *D3D12_RESOURCE_DESC) -> D3D12_RESOURCE_ALLOCATION_INFO #no_context
    {
        return this.vtable.GetResourceAllocationInfo (this, visibleMask, numResourceDescs, pResourceDescs);
    }

    GetCustomHeapProperties :: inline (this : *ID3D12Device, nodeMask : u32, heapType : D3D12_HEAP_TYPE) -> D3D12_HEAP_PROPERTIES #no_context
    {
        return this.vtable.GetCustomHeapProperties (this, nodeMask, heapType);
    }

    CreateCommittedResource :: inline (this : *ID3D12Device, 
        pHeapProperties : *D3D12_HEAP_PROPERTIES,
        HeapFlags : D3D12_HEAP_FLAGS,
        pDesc : *D3D12_RESOURCE_DESC,
        InitialResourceState : D3D12_RESOURCE_STATES,
        pOptimizedClearValue : *D3D12_CLEAR_VALUE,
        riidResource : *GUID,
        ppvResource : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateCommittedResource (this, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
    }

    CreateHeap :: inline (this : *ID3D12Device, pDesc : *D3D12_HEAP_DESC, riid : *GUID, ppvHeap : **void) -> HRESULT #no_context
    {
        return this.vtable.CreateHeap (this, pDesc, riid, ppvHeap);
    }

    CreatePlacedResource :: inline (this : *ID3D12Device, 
        pHeap : *ID3D12Heap,
        HeapOffset : u64,
        pDesc : *D3D12_RESOURCE_DESC,
        InitialState : D3D12_RESOURCE_STATES,
        pOptimizedClearValue : *D3D12_CLEAR_VALUE,
        riid : *GUID,
        ppvResource : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreatePlacedResource (this, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
    }

    CreateReservedResource :: inline (this : *ID3D12Device, 
        pDesc : *D3D12_RESOURCE_DESC,
        InitialState : D3D12_RESOURCE_STATES,
        pOptimizedClearValue : *D3D12_CLEAR_VALUE,
        riid : *GUID,
        ppvResource : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateReservedResource (this, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
    }

    CreateSharedHandle :: inline (this : *ID3D12Device, 
        pObject : *ID3D12DeviceChild,
        pAttributes : *SECURITY_ATTRIBUTES,
        Access : u32,
        Name : PWSTR,
        pHandle : *HANDLE
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateSharedHandle (this, pObject, pAttributes, Access, Name, pHandle);
    }

    OpenSharedHandle :: inline (this : *ID3D12Device, NTHandle : HANDLE, riid : *GUID, ppvObj : **void) -> HRESULT #no_context
    {
        return this.vtable.OpenSharedHandle (this, NTHandle, riid, ppvObj);
    }

    OpenSharedHandleByName :: inline (this : *ID3D12Device, Name : PWSTR, Access : u32, pNTHandle : *HANDLE) -> HRESULT #no_context
    {
        return this.vtable.OpenSharedHandleByName (this, Name, Access, pNTHandle);
    }

    MakeResident :: inline (this : *ID3D12Device, NumObjects : u32, ppObjects : **ID3D12Pageable) -> HRESULT #no_context
    {
        return this.vtable.MakeResident (this, NumObjects, ppObjects);
    }

    Evict :: inline (this : *ID3D12Device, NumObjects : u32, ppObjects : **ID3D12Pageable) -> HRESULT #no_context
    {
        return this.vtable.Evict (this, NumObjects, ppObjects);
    }

    CreateFence :: inline (this : *ID3D12Device, 
        InitialValue : u64,
        Flags : D3D12_FENCE_FLAGS,
        riid : *GUID,
        ppFence : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateFence (this, InitialValue, Flags, riid, ppFence);
    }

    GetDeviceRemovedReason :: inline (this : *ID3D12Device) -> HRESULT #no_context
    {
        return this.vtable.GetDeviceRemovedReason (this);
    }

    GetCopyableFootprints :: inline (this : *ID3D12Device, 
        pResourceDesc : *D3D12_RESOURCE_DESC,
        FirstSubresource : u32,
        NumSubresources : u32,
        BaseOffset : u64,
        pLayouts : *D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
        pNumRows : *u32,
        pRowSizeInBytes : *u64,
        pTotalBytes : *u64
    ) #no_context
    {
        this.vtable.GetCopyableFootprints (this, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
    }

    CreateQueryHeap :: inline (this : *ID3D12Device, pDesc : *D3D12_QUERY_HEAP_DESC, riid : *GUID, ppvHeap : **void) -> HRESULT #no_context
    {
        return this.vtable.CreateQueryHeap (this, pDesc, riid, ppvHeap);
    }

    SetStablePowerState :: inline (this : *ID3D12Device, Enable : BOOL) -> HRESULT #no_context
    {
        return this.vtable.SetStablePowerState (this, Enable);
    }

    CreateCommandSignature :: inline (this : *ID3D12Device, 
        pDesc : *D3D12_COMMAND_SIGNATURE_DESC,
        pRootSignature : *ID3D12RootSignature,
        riid : *GUID,
        ppvCommandSignature : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateCommandSignature (this, pDesc, pRootSignature, riid, ppvCommandSignature);
    }

    GetResourceTiling :: inline (this : *ID3D12Device, 
        pTiledResource : *ID3D12Resource,
        pNumTilesForEntireResource : *u32,
        pPackedMipDesc : *D3D12_PACKED_MIP_INFO,
        pStandardTileShapeForNonPackedMips : *D3D12_TILE_SHAPE,
        pNumSubresourceTilings : *u32,
        FirstSubresourceTilingToGet : u32,
        pSubresourceTilingsForNonPackedMips : *D3D12_SUBRESOURCE_TILING
    ) #no_context
    {
        this.vtable.GetResourceTiling (this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
    }

    GetAdapterLuid :: inline (this : *ID3D12Device) -> LUID #no_context
    {
        return this.vtable.GetAdapterLuid (this);
    }
}

ID3D12Device1_UUID :: "77acce80-638e-4e65-8895-c1f23386863e";
ID3D12Device1 :: struct
{
    UUID :: GUID.{0x77acce80,0x638e,0x4e65,.[0x88,0x95,0xc1,0xf2,0x33,0x86,0x86,0x3e]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Device;

    #place base;
    vtable : *ID3D12Device1VTable;

    CreatePipelineLibrary :: inline (this : *ID3D12Device1, 
        pLibraryBlob : *void,
        BlobLength : u64,
        riid : *GUID,
        ppPipelineLibrary : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreatePipelineLibrary (this, pLibraryBlob, BlobLength, riid, ppPipelineLibrary);
    }

    SetEventOnMultipleFenceCompletion :: inline (this : *ID3D12Device1, 
        ppFences : **ID3D12Fence,
        pFenceValues : *u64,
        NumFences : u32,
        Flags : D3D12_MULTIPLE_FENCE_WAIT_FLAGS,
        hEvent : HANDLE
    ) -> HRESULT #no_context
    {
        return this.vtable.SetEventOnMultipleFenceCompletion (this, ppFences, pFenceValues, NumFences, Flags, hEvent);
    }

    SetResidencyPriority :: inline (this : *ID3D12Device1, NumObjects : u32, ppObjects : **ID3D12Pageable, pPriorities : *D3D12_RESIDENCY_PRIORITY) -> HRESULT #no_context
    {
        return this.vtable.SetResidencyPriority (this, NumObjects, ppObjects, pPriorities);
    }
}

ID3D12Device2_UUID :: "30baa41e-b15b-475c-a0bb-1af5c5b64328";
ID3D12Device2 :: struct
{
    UUID :: GUID.{0x30baa41e,0xb15b,0x475c,.[0xa0,0xbb,0x1a,0xf5,0xc5,0xb6,0x43,0x28]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Device1;

    #place base;
    vtable : *ID3D12Device2VTable;

    CreatePipelineState :: inline (this : *ID3D12Device2, pDesc : *D3D12_PIPELINE_STATE_STREAM_DESC, riid : *GUID, ppPipelineState : **void) -> HRESULT #no_context
    {
        return this.vtable.CreatePipelineState (this, pDesc, riid, ppPipelineState);
    }
}

ID3D12Device3_UUID :: "81dadc15-2bad-4392-93c5-101345c4aa98";
ID3D12Device3 :: struct
{
    UUID :: GUID.{0x81dadc15,0x2bad,0x4392,.[0x93,0xc5,0x10,0x13,0x45,0xc4,0xaa,0x98]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Device2;

    #place base;
    vtable : *ID3D12Device3VTable;

    OpenExistingHeapFromAddress :: inline (this : *ID3D12Device3, pAddress : *void, riid : *GUID, ppvHeap : **void) -> HRESULT #no_context
    {
        return this.vtable.OpenExistingHeapFromAddress (this, pAddress, riid, ppvHeap);
    }

    OpenExistingHeapFromFileMapping :: inline (this : *ID3D12Device3, hFileMapping : HANDLE, riid : *GUID, ppvHeap : **void) -> HRESULT #no_context
    {
        return this.vtable.OpenExistingHeapFromFileMapping (this, hFileMapping, riid, ppvHeap);
    }

    EnqueueMakeResident :: inline (this : *ID3D12Device3, 
        Flags : D3D12_RESIDENCY_FLAGS,
        NumObjects : u32,
        ppObjects : **ID3D12Pageable,
        pFenceToSignal : *ID3D12Fence,
        FenceValueToSignal : u64
    ) -> HRESULT #no_context
    {
        return this.vtable.EnqueueMakeResident (this, Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal);
    }
}

ID3D12Device4_UUID :: "e865df17-a9ee-46f9-a463-3098315aa2e5";
ID3D12Device4 :: struct
{
    UUID :: GUID.{0xe865df17,0xa9ee,0x46f9,.[0xa4,0x63,0x30,0x98,0x31,0x5a,0xa2,0xe5]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Device3;

    #place base;
    vtable : *ID3D12Device4VTable;

    CreateCommandList1 :: inline (this : *ID3D12Device4, 
        nodeMask : u32,
        type : D3D12_COMMAND_LIST_TYPE,
        flags : D3D12_COMMAND_LIST_FLAGS,
        riid : *GUID,
        ppCommandList : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateCommandList1 (this, nodeMask, type, flags, riid, ppCommandList);
    }

    CreateProtectedResourceSession :: inline (this : *ID3D12Device4, pDesc : *D3D12_PROTECTED_RESOURCE_SESSION_DESC, riid : *GUID, ppSession : **void) -> HRESULT #no_context
    {
        return this.vtable.CreateProtectedResourceSession (this, pDesc, riid, ppSession);
    }

    CreateCommittedResource1 :: inline (this : *ID3D12Device4, 
        pHeapProperties : *D3D12_HEAP_PROPERTIES,
        HeapFlags : D3D12_HEAP_FLAGS,
        pDesc : *D3D12_RESOURCE_DESC,
        InitialResourceState : D3D12_RESOURCE_STATES,
        pOptimizedClearValue : *D3D12_CLEAR_VALUE,
        pProtectedSession : *ID3D12ProtectedResourceSession,
        riidResource : *GUID,
        ppvResource : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateCommittedResource1 (this, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
    }

    CreateHeap1 :: inline (this : *ID3D12Device4, 
        pDesc : *D3D12_HEAP_DESC,
        pProtectedSession : *ID3D12ProtectedResourceSession,
        riid : *GUID,
        ppvHeap : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateHeap1 (this, pDesc, pProtectedSession, riid, ppvHeap);
    }

    CreateReservedResource1 :: inline (this : *ID3D12Device4, 
        pDesc : *D3D12_RESOURCE_DESC,
        InitialState : D3D12_RESOURCE_STATES,
        pOptimizedClearValue : *D3D12_CLEAR_VALUE,
        pProtectedSession : *ID3D12ProtectedResourceSession,
        riid : *GUID,
        ppvResource : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateReservedResource1 (this, pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource);
    }

    GetResourceAllocationInfo1 :: inline (this : *ID3D12Device4, 
        visibleMask : u32,
        numResourceDescs : u32,
        pResourceDescs : *D3D12_RESOURCE_DESC,
        pResourceAllocationInfo1 : *D3D12_RESOURCE_ALLOCATION_INFO1
    ) -> D3D12_RESOURCE_ALLOCATION_INFO #no_context
    {
        return this.vtable.GetResourceAllocationInfo1 (this, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1);
    }
}

ID3D12Device5_UUID :: "8b4f173b-2fea-4b80-8f58-4307191ab95d";
ID3D12Device5 :: struct
{
    UUID :: GUID.{0x8b4f173b,0x2fea,0x4b80,.[0x8f,0x58,0x43,0x7,0x19,0x1a,0xb9,0x5d]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Device4;

    #place base;
    vtable : *ID3D12Device5VTable;

    CreateLifetimeTracker :: inline (this : *ID3D12Device5, pOwner : *ID3D12LifetimeOwner, riid : *GUID, ppvTracker : **void) -> HRESULT #no_context
    {
        return this.vtable.CreateLifetimeTracker (this, pOwner, riid, ppvTracker);
    }

    RemoveDevice :: inline (this : *ID3D12Device5) #no_context
    {
        this.vtable.RemoveDevice (this);
    }

    EnumerateMetaCommands :: inline (this : *ID3D12Device5, pNumMetaCommands : *u32, pDescs : *D3D12_META_COMMAND_DESC) -> HRESULT #no_context
    {
        return this.vtable.EnumerateMetaCommands (this, pNumMetaCommands, pDescs);
    }

    EnumerateMetaCommandParameters :: inline (this : *ID3D12Device5, 
        CommandId : *GUID,
        Stage : D3D12_META_COMMAND_PARAMETER_STAGE,
        pTotalStructureSizeInBytes : *u32,
        pParameterCount : *u32,
        pParameterDescs : *D3D12_META_COMMAND_PARAMETER_DESC
    ) -> HRESULT #no_context
    {
        return this.vtable.EnumerateMetaCommandParameters (this, CommandId, Stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs);
    }

    CreateMetaCommand :: inline (this : *ID3D12Device5, 
        CommandId : *GUID,
        NodeMask : u32,
        pCreationParametersData : *void,
        CreationParametersDataSizeInBytes : u64,
        riid : *GUID,
        ppMetaCommand : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateMetaCommand (this, CommandId, NodeMask, pCreationParametersData, CreationParametersDataSizeInBytes, riid, ppMetaCommand);
    }

    CreateStateObject :: inline (this : *ID3D12Device5, pDesc : *D3D12_STATE_OBJECT_DESC, riid : *GUID, ppStateObject : **void) -> HRESULT #no_context
    {
        return this.vtable.CreateStateObject (this, pDesc, riid, ppStateObject);
    }

    GetRaytracingAccelerationStructurePrebuildInfo :: inline (this : *ID3D12Device5, pDesc : *D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS, pInfo : *D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO) #no_context
    {
        this.vtable.GetRaytracingAccelerationStructurePrebuildInfo (this, pDesc, pInfo);
    }

    CheckDriverMatchingIdentifier :: inline (this : *ID3D12Device5, SerializedDataType : D3D12_SERIALIZED_DATA_TYPE, pIdentifierToCheck : *D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER) -> D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS #no_context
    {
        return this.vtable.CheckDriverMatchingIdentifier (this, SerializedDataType, pIdentifierToCheck);
    }
}

ID3D12Device6_UUID :: "c70b221b-40e4-4a17-89af-025a0727a6dc";
ID3D12Device6 :: struct
{
    UUID :: GUID.{0xc70b221b,0x40e4,0x4a17,.[0x89,0xaf,0x2,0x5a,0x7,0x27,0xa6,0xdc]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Device5;

    #place base;
    vtable : *ID3D12Device6VTable;

    SetBackgroundProcessingMode :: inline (this : *ID3D12Device6, 
        Mode : D3D12_BACKGROUND_PROCESSING_MODE,
        MeasurementsAction : D3D12_MEASUREMENTS_ACTION,
        hEventToSignalUponCompletion : HANDLE,
        pbFurtherMeasurementsDesired : *BOOL
    ) -> HRESULT #no_context
    {
        return this.vtable.SetBackgroundProcessingMode (this, Mode, MeasurementsAction, hEventToSignalUponCompletion, pbFurtherMeasurementsDesired);
    }
}

ID3D12Device7_UUID :: "5c014b53-68a1-4b9b-8bd1-dd6046b9358b";
ID3D12Device7 :: struct
{
    UUID :: GUID.{0x5c014b53,0x68a1,0x4b9b,.[0x8b,0xd1,0xdd,0x60,0x46,0xb9,0x35,0x8b]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Device6;

    #place base;
    vtable : *ID3D12Device7VTable;

    AddToStateObject :: inline (this : *ID3D12Device7, 
        pAddition : *D3D12_STATE_OBJECT_DESC,
        pStateObjectToGrowFrom : *ID3D12StateObject,
        riid : *GUID,
        ppNewStateObject : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.AddToStateObject (this, pAddition, pStateObjectToGrowFrom, riid, ppNewStateObject);
    }

    CreateProtectedResourceSession1 :: inline (this : *ID3D12Device7, pDesc : *D3D12_PROTECTED_RESOURCE_SESSION_DESC1, riid : *GUID, ppSession : **void) -> HRESULT #no_context
    {
        return this.vtable.CreateProtectedResourceSession1 (this, pDesc, riid, ppSession);
    }
}

ID3D12Device8_UUID :: "9218e6bb-f944-4f7e-a75c-b1b2c7b701f3";
ID3D12Device8 :: struct
{
    UUID :: GUID.{0x9218e6bb,0xf944,0x4f7e,.[0xa7,0x5c,0xb1,0xb2,0xc7,0xb7,0x1,0xf3]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Device7;

    #place base;
    vtable : *ID3D12Device8VTable;

    GetResourceAllocationInfo2 :: inline (this : *ID3D12Device8, 
        visibleMask : u32,
        numResourceDescs : u32,
        pResourceDescs : *D3D12_RESOURCE_DESC1,
        pResourceAllocationInfo1 : *D3D12_RESOURCE_ALLOCATION_INFO1
    ) -> D3D12_RESOURCE_ALLOCATION_INFO #no_context
    {
        return this.vtable.GetResourceAllocationInfo2 (this, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1);
    }

    CreateCommittedResource2 :: inline (this : *ID3D12Device8, 
        pHeapProperties : *D3D12_HEAP_PROPERTIES,
        HeapFlags : D3D12_HEAP_FLAGS,
        pDesc : *D3D12_RESOURCE_DESC1,
        InitialResourceState : D3D12_RESOURCE_STATES,
        pOptimizedClearValue : *D3D12_CLEAR_VALUE,
        pProtectedSession : *ID3D12ProtectedResourceSession,
        riidResource : *GUID,
        ppvResource : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateCommittedResource2 (this, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
    }

    CreatePlacedResource1 :: inline (this : *ID3D12Device8, 
        pHeap : *ID3D12Heap,
        HeapOffset : u64,
        pDesc : *D3D12_RESOURCE_DESC1,
        InitialState : D3D12_RESOURCE_STATES,
        pOptimizedClearValue : *D3D12_CLEAR_VALUE,
        riid : *GUID,
        ppvResource : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreatePlacedResource1 (this, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
    }

    CreateSamplerFeedbackUnorderedAccessView :: inline (this : *ID3D12Device8, pTargetedResource : *ID3D12Resource, pFeedbackResource : *ID3D12Resource, DestDescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) #no_context
    {
        this.vtable.CreateSamplerFeedbackUnorderedAccessView (this, pTargetedResource, pFeedbackResource, DestDescriptor);
    }

    GetCopyableFootprints1 :: inline (this : *ID3D12Device8, 
        pResourceDesc : *D3D12_RESOURCE_DESC1,
        FirstSubresource : u32,
        NumSubresources : u32,
        BaseOffset : u64,
        pLayouts : *D3D12_PLACED_SUBRESOURCE_FOOTPRINT,
        pNumRows : *u32,
        pRowSizeInBytes : *u64,
        pTotalBytes : *u64
    ) #no_context
    {
        this.vtable.GetCopyableFootprints1 (this, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
    }
}

ID3D12Device9_UUID :: "4c80e962-f032-4f60-bc9e-ebc2cfa1d83c";
ID3D12Device9 :: struct
{
    UUID :: GUID.{0x4c80e962,0xf032,0x4f60,.[0xbc,0x9e,0xeb,0xc2,0xcf,0xa1,0xd8,0x3c]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Device8;

    #place base;
    vtable : *ID3D12Device9VTable;

    CreateShaderCacheSession :: inline (this : *ID3D12Device9, pDesc : *D3D12_SHADER_CACHE_SESSION_DESC, riid : *GUID, ppvSession : **void) -> HRESULT #no_context
    {
        return this.vtable.CreateShaderCacheSession (this, pDesc, riid, ppvSession);
    }

    ShaderCacheControl :: inline (this : *ID3D12Device9, Kinds : D3D12_SHADER_CACHE_KIND_FLAGS, Control : D3D12_SHADER_CACHE_CONTROL_FLAGS) -> HRESULT #no_context
    {
        return this.vtable.ShaderCacheControl (this, Kinds, Control);
    }

    CreateCommandQueue1 :: inline (this : *ID3D12Device9, 
        pDesc : *D3D12_COMMAND_QUEUE_DESC,
        CreatorID : *GUID,
        riid : *GUID,
        ppCommandQueue : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateCommandQueue1 (this, pDesc, CreatorID, riid, ppCommandQueue);
    }
}

ID3D12DeviceChild_UUID :: "905db94b-a00c-4140-9df5-2b64ca9ea357";
ID3D12DeviceChild :: struct
{
    UUID :: GUID.{0x905db94b,0xa00c,0x4140,.[0x9d,0xf5,0x2b,0x64,0xca,0x9e,0xa3,0x57]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Object;

    #place base;
    vtable : *ID3D12DeviceChildVTable;

    GetDevice :: inline (this : *ID3D12DeviceChild, riid : *GUID, ppvDevice : **void) -> HRESULT #no_context
    {
        return this.vtable.GetDevice (this, riid, ppvDevice);
    }
}

ID3D12DeviceRemovedExtendedData_UUID :: "98931d33-5ae8-4791-aa3c-1a73a2934e71";
ID3D12DeviceRemovedExtendedData :: struct
{
    UUID :: GUID.{0x98931d33,0x5ae8,0x4791,.[0xaa,0x3c,0x1a,0x73,0xa2,0x93,0x4e,0x71]};

    #as using, except (.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D12DeviceRemovedExtendedDataVTable;

    GetAutoBreadcrumbsOutput :: inline (this : *ID3D12DeviceRemovedExtendedData, pOutput : *D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT) -> HRESULT #no_context
    {
        return this.vtable.GetAutoBreadcrumbsOutput (this, pOutput);
    }

    GetPageFaultAllocationOutput :: inline (this : *ID3D12DeviceRemovedExtendedData, pOutput : *D3D12_DRED_PAGE_FAULT_OUTPUT) -> HRESULT #no_context
    {
        return this.vtable.GetPageFaultAllocationOutput (this, pOutput);
    }
}

ID3D12DeviceRemovedExtendedData1_UUID :: "9727a022-cf1d-4dda-9eba-effa653fc506";
ID3D12DeviceRemovedExtendedData1 :: struct
{
    UUID :: GUID.{0x9727a022,0xcf1d,0x4dda,.[0x9e,0xba,0xef,0xfa,0x65,0x3f,0xc5,0x6]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12DeviceRemovedExtendedData;

    #place base;
    vtable : *ID3D12DeviceRemovedExtendedData1VTable;

    GetAutoBreadcrumbsOutput1 :: inline (this : *ID3D12DeviceRemovedExtendedData1, pOutput : *D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1) -> HRESULT #no_context
    {
        return this.vtable.GetAutoBreadcrumbsOutput1 (this, pOutput);
    }

    GetPageFaultAllocationOutput1 :: inline (this : *ID3D12DeviceRemovedExtendedData1, pOutput : *D3D12_DRED_PAGE_FAULT_OUTPUT1) -> HRESULT #no_context
    {
        return this.vtable.GetPageFaultAllocationOutput1 (this, pOutput);
    }
}

ID3D12DeviceRemovedExtendedData2_UUID :: "67fc5816-e4ca-4915-bf18-42541272da54";
ID3D12DeviceRemovedExtendedData2 :: struct
{
    UUID :: GUID.{0x67fc5816,0xe4ca,0x4915,.[0xbf,0x18,0x42,0x54,0x12,0x72,0xda,0x54]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12DeviceRemovedExtendedData1;

    #place base;
    vtable : *ID3D12DeviceRemovedExtendedData2VTable;

    GetPageFaultAllocationOutput2 :: inline (this : *ID3D12DeviceRemovedExtendedData2, pOutput : *D3D12_DRED_PAGE_FAULT_OUTPUT2) -> HRESULT #no_context
    {
        return this.vtable.GetPageFaultAllocationOutput2 (this, pOutput);
    }

    GetDeviceState :: inline (this : *ID3D12DeviceRemovedExtendedData2) -> D3D12_DRED_DEVICE_STATE #no_context
    {
        return this.vtable.GetDeviceState (this);
    }
}

ID3D12DeviceRemovedExtendedDataSettings_UUID :: "82bc481c-6b9b-4030-aedb-7ee3d1df1e63";
ID3D12DeviceRemovedExtendedDataSettings :: struct
{
    UUID :: GUID.{0x82bc481c,0x6b9b,0x4030,.[0xae,0xdb,0x7e,0xe3,0xd1,0xdf,0x1e,0x63]};

    #as using, except (.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D12DeviceRemovedExtendedDataSettingsVTable;

    SetAutoBreadcrumbsEnablement :: inline (this : *ID3D12DeviceRemovedExtendedDataSettings, Enablement : D3D12_DRED_ENABLEMENT) #no_context
    {
        this.vtable.SetAutoBreadcrumbsEnablement (this, Enablement);
    }

    SetPageFaultEnablement :: inline (this : *ID3D12DeviceRemovedExtendedDataSettings, Enablement : D3D12_DRED_ENABLEMENT) #no_context
    {
        this.vtable.SetPageFaultEnablement (this, Enablement);
    }

    SetWatsonDumpEnablement :: inline (this : *ID3D12DeviceRemovedExtendedDataSettings, Enablement : D3D12_DRED_ENABLEMENT) #no_context
    {
        this.vtable.SetWatsonDumpEnablement (this, Enablement);
    }
}

ID3D12DeviceRemovedExtendedDataSettings1_UUID :: "dbd5ae51-3317-4f0a-adf9-1d7cedcaae0b";
ID3D12DeviceRemovedExtendedDataSettings1 :: struct
{
    UUID :: GUID.{0xdbd5ae51,0x3317,0x4f0a,.[0xad,0xf9,0x1d,0x7c,0xed,0xca,0xae,0xb]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12DeviceRemovedExtendedDataSettings;

    #place base;
    vtable : *ID3D12DeviceRemovedExtendedDataSettings1VTable;

    SetBreadcrumbContextEnablement :: inline (this : *ID3D12DeviceRemovedExtendedDataSettings1, Enablement : D3D12_DRED_ENABLEMENT) #no_context
    {
        this.vtable.SetBreadcrumbContextEnablement (this, Enablement);
    }
}

ID3D12Fence_UUID :: "0a753dcf-c4d8-4b91-adf6-be5a60d95a76";
ID3D12Fence :: struct
{
    UUID :: GUID.{0xa753dcf,0xc4d8,0x4b91,.[0xad,0xf6,0xbe,0x5a,0x60,0xd9,0x5a,0x76]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Pageable;

    #place base;
    vtable : *ID3D12FenceVTable;

    GetCompletedValue :: inline (this : *ID3D12Fence) -> u64 #no_context
    {
        return this.vtable.GetCompletedValue (this);
    }

    SetEventOnCompletion :: inline (this : *ID3D12Fence, Value : u64, hEvent : HANDLE) -> HRESULT #no_context
    {
        return this.vtable.SetEventOnCompletion (this, Value, hEvent);
    }

    Signal :: inline (this : *ID3D12Fence, Value : u64) -> HRESULT #no_context
    {
        return this.vtable.Signal (this, Value);
    }
}

ID3D12Fence1_UUID :: "433685fe-e22b-4ca0-a8db-b5b4f4dd0e4a";
ID3D12Fence1 :: struct
{
    UUID :: GUID.{0x433685fe,0xe22b,0x4ca0,.[0xa8,0xdb,0xb5,0xb4,0xf4,0xdd,0xe,0x4a]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Fence;

    #place base;
    vtable : *ID3D12Fence1VTable;

    GetCreationFlags :: inline (this : *ID3D12Fence1) -> D3D12_FENCE_FLAGS #no_context
    {
        return this.vtable.GetCreationFlags (this);
    }
}

ID3D12FunctionParameterReflection_UUID :: "ec25f42d-7006-4f2b-b33e-02cc3375733f";
ID3D12FunctionParameterReflection :: struct
{
    UUID :: GUID.{0xec25f42d,0x7006,0x4f2b,.[0xb3,0x3e,0x2,0xcc,0x33,0x75,0x73,0x3f]};

    vtable : *ID3D12FunctionParameterReflectionVTable;

    GetDesc :: inline (this : *ID3D12FunctionParameterReflection, pDesc : *D3D12_PARAMETER_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetDesc (this, pDesc);
    }
}

ID3D12FunctionReflection_UUID :: "1108795c-2772-4ba9-b2a8-d464dc7e2799";
ID3D12FunctionReflection :: struct
{
    UUID :: GUID.{0x1108795c,0x2772,0x4ba9,.[0xb2,0xa8,0xd4,0x64,0xdc,0x7e,0x27,0x99]};

    vtable : *ID3D12FunctionReflectionVTable;

    GetDesc :: inline (this : *ID3D12FunctionReflection, pDesc : *D3D12_FUNCTION_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetDesc (this, pDesc);
    }

    GetConstantBufferByIndex :: inline (this : *ID3D12FunctionReflection, BufferIndex : u32) -> *ID3D12ShaderReflectionConstantBuffer #no_context
    {
        return this.vtable.GetConstantBufferByIndex (this, BufferIndex);
    }

    GetConstantBufferByName :: inline (this : *ID3D12FunctionReflection, Name : PSTR) -> *ID3D12ShaderReflectionConstantBuffer #no_context
    {
        return this.vtable.GetConstantBufferByName (this, Name);
    }

    GetResourceBindingDesc :: inline (this : *ID3D12FunctionReflection, ResourceIndex : u32, pDesc : *D3D12_SHADER_INPUT_BIND_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetResourceBindingDesc (this, ResourceIndex, pDesc);
    }

    GetVariableByName :: inline (this : *ID3D12FunctionReflection, Name : PSTR) -> *ID3D12ShaderReflectionVariable #no_context
    {
        return this.vtable.GetVariableByName (this, Name);
    }

    GetResourceBindingDescByName :: inline (this : *ID3D12FunctionReflection, Name : PSTR, pDesc : *D3D12_SHADER_INPUT_BIND_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetResourceBindingDescByName (this, Name, pDesc);
    }

    GetFunctionParameter :: inline (this : *ID3D12FunctionReflection, ParameterIndex : s32) -> *ID3D12FunctionParameterReflection #no_context
    {
        return this.vtable.GetFunctionParameter (this, ParameterIndex);
    }
}

ID3D12GraphicsCommandList_UUID :: "5b160d0f-ac1b-4185-8ba8-b3ae42a5a455";
ID3D12GraphicsCommandList :: struct
{
    UUID :: GUID.{0x5b160d0f,0xac1b,0x4185,.[0x8b,0xa8,0xb3,0xae,0x42,0xa5,0xa4,0x55]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12CommandList;

    #place base;
    vtable : *ID3D12GraphicsCommandListVTable;

    Close :: inline (this : *ID3D12GraphicsCommandList) -> HRESULT #no_context
    {
        return this.vtable.Close (this);
    }

    Reset :: inline (this : *ID3D12GraphicsCommandList, pAllocator : *ID3D12CommandAllocator, pInitialState : *ID3D12PipelineState) -> HRESULT #no_context
    {
        return this.vtable.Reset (this, pAllocator, pInitialState);
    }

    ClearState :: inline (this : *ID3D12GraphicsCommandList, pPipelineState : *ID3D12PipelineState) #no_context
    {
        this.vtable.ClearState (this, pPipelineState);
    }

    DrawInstanced :: inline (this : *ID3D12GraphicsCommandList, 
        VertexCountPerInstance : u32,
        InstanceCount : u32,
        StartVertexLocation : u32,
        StartInstanceLocation : u32
    ) #no_context
    {
        this.vtable.DrawInstanced (this, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
    }

    DrawIndexedInstanced :: inline (this : *ID3D12GraphicsCommandList, 
        IndexCountPerInstance : u32,
        InstanceCount : u32,
        StartIndexLocation : u32,
        BaseVertexLocation : s32,
        StartInstanceLocation : u32
    ) #no_context
    {
        this.vtable.DrawIndexedInstanced (this, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
    }

    Dispatch :: inline (this : *ID3D12GraphicsCommandList, ThreadGroupCountX : u32, ThreadGroupCountY : u32, ThreadGroupCountZ : u32) #no_context
    {
        this.vtable.Dispatch (this, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
    }

    CopyBufferRegion :: inline (this : *ID3D12GraphicsCommandList, 
        pDstBuffer : *ID3D12Resource,
        DstOffset : u64,
        pSrcBuffer : *ID3D12Resource,
        SrcOffset : u64,
        NumBytes : u64
    ) #no_context
    {
        this.vtable.CopyBufferRegion (this, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, NumBytes);
    }

    CopyTextureRegion :: inline (this : *ID3D12GraphicsCommandList, 
        pDst : *D3D12_TEXTURE_COPY_LOCATION,
        DstX : u32,
        DstY : u32,
        DstZ : u32,
        pSrc : *D3D12_TEXTURE_COPY_LOCATION,
        pSrcBox : *D3D12_BOX
    ) #no_context
    {
        this.vtable.CopyTextureRegion (this, pDst, DstX, DstY, DstZ, pSrc, pSrcBox);
    }

    CopyResource :: inline (this : *ID3D12GraphicsCommandList, pDstResource : *ID3D12Resource, pSrcResource : *ID3D12Resource) #no_context
    {
        this.vtable.CopyResource (this, pDstResource, pSrcResource);
    }

    CopyTiles :: inline (this : *ID3D12GraphicsCommandList, 
        pTiledResource : *ID3D12Resource,
        pTileRegionStartCoordinate : *D3D12_TILED_RESOURCE_COORDINATE,
        pTileRegionSize : *D3D12_TILE_REGION_SIZE,
        pBuffer : *ID3D12Resource,
        BufferStartOffsetInBytes : u64,
        Flags : D3D12_TILE_COPY_FLAGS
    ) #no_context
    {
        this.vtable.CopyTiles (this, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, BufferStartOffsetInBytes, Flags);
    }

    ResolveSubresource :: inline (this : *ID3D12GraphicsCommandList, 
        pDstResource : *ID3D12Resource,
        DstSubresource : u32,
        pSrcResource : *ID3D12Resource,
        SrcSubresource : u32,
        Format : DXGI_FORMAT
    ) #no_context
    {
        this.vtable.ResolveSubresource (this, pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
    }

    IASetPrimitiveTopology :: inline (this : *ID3D12GraphicsCommandList, PrimitiveTopology : D3D_PRIMITIVE_TOPOLOGY) #no_context
    {
        this.vtable.IASetPrimitiveTopology (this, PrimitiveTopology);
    }

    RSSetViewports :: inline (this : *ID3D12GraphicsCommandList, NumViewports : u32, pViewports : *D3D12_VIEWPORT) #no_context
    {
        this.vtable.RSSetViewports (this, NumViewports, pViewports);
    }

    RSSetScissorRects :: inline (this : *ID3D12GraphicsCommandList, NumRects : u32, pRects : *RECT) #no_context
    {
        this.vtable.RSSetScissorRects (this, NumRects, pRects);
    }

    OMSetBlendFactor :: inline (this : *ID3D12GraphicsCommandList, BlendFactor : *[4]float) #no_context
    {
        this.vtable.OMSetBlendFactor (this, BlendFactor);
    }

    OMSetStencilRef :: inline (this : *ID3D12GraphicsCommandList, StencilRef : u32) #no_context
    {
        this.vtable.OMSetStencilRef (this, StencilRef);
    }

    SetPipelineState :: inline (this : *ID3D12GraphicsCommandList, pPipelineState : *ID3D12PipelineState) #no_context
    {
        this.vtable.SetPipelineState (this, pPipelineState);
    }

    ResourceBarrier :: inline (this : *ID3D12GraphicsCommandList, NumBarriers : u32, pBarriers : *D3D12_RESOURCE_BARRIER) #no_context
    {
        this.vtable.ResourceBarrier (this, NumBarriers, pBarriers);
    }

    ExecuteBundle :: inline (this : *ID3D12GraphicsCommandList, pCommandList : *ID3D12GraphicsCommandList) #no_context
    {
        this.vtable.ExecuteBundle (this, pCommandList);
    }

    SetDescriptorHeaps :: inline (this : *ID3D12GraphicsCommandList, NumDescriptorHeaps : u32, ppDescriptorHeaps : **ID3D12DescriptorHeap) #no_context
    {
        this.vtable.SetDescriptorHeaps (this, NumDescriptorHeaps, ppDescriptorHeaps);
    }

    SetComputeRootSignature :: inline (this : *ID3D12GraphicsCommandList, pRootSignature : *ID3D12RootSignature) #no_context
    {
        this.vtable.SetComputeRootSignature (this, pRootSignature);
    }

    SetGraphicsRootSignature :: inline (this : *ID3D12GraphicsCommandList, pRootSignature : *ID3D12RootSignature) #no_context
    {
        this.vtable.SetGraphicsRootSignature (this, pRootSignature);
    }

    SetComputeRootDescriptorTable :: inline (this : *ID3D12GraphicsCommandList, RootParameterIndex : u32, BaseDescriptor : D3D12_GPU_DESCRIPTOR_HANDLE) #no_context
    {
        this.vtable.SetComputeRootDescriptorTable (this, RootParameterIndex, BaseDescriptor);
    }

    SetGraphicsRootDescriptorTable :: inline (this : *ID3D12GraphicsCommandList, RootParameterIndex : u32, BaseDescriptor : D3D12_GPU_DESCRIPTOR_HANDLE) #no_context
    {
        this.vtable.SetGraphicsRootDescriptorTable (this, RootParameterIndex, BaseDescriptor);
    }

    SetComputeRoot32BitConstant :: inline (this : *ID3D12GraphicsCommandList, RootParameterIndex : u32, SrcData : u32, DestOffsetIn32BitValues : u32) #no_context
    {
        this.vtable.SetComputeRoot32BitConstant (this, RootParameterIndex, SrcData, DestOffsetIn32BitValues);
    }

    SetGraphicsRoot32BitConstant :: inline (this : *ID3D12GraphicsCommandList, RootParameterIndex : u32, SrcData : u32, DestOffsetIn32BitValues : u32) #no_context
    {
        this.vtable.SetGraphicsRoot32BitConstant (this, RootParameterIndex, SrcData, DestOffsetIn32BitValues);
    }

    SetComputeRoot32BitConstants :: inline (this : *ID3D12GraphicsCommandList, 
        RootParameterIndex : u32,
        Num32BitValuesToSet : u32,
        pSrcData : *void,
        DestOffsetIn32BitValues : u32
    ) #no_context
    {
        this.vtable.SetComputeRoot32BitConstants (this, RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
    }

    SetGraphicsRoot32BitConstants :: inline (this : *ID3D12GraphicsCommandList, 
        RootParameterIndex : u32,
        Num32BitValuesToSet : u32,
        pSrcData : *void,
        DestOffsetIn32BitValues : u32
    ) #no_context
    {
        this.vtable.SetGraphicsRoot32BitConstants (this, RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
    }

    SetComputeRootConstantBufferView :: inline (this : *ID3D12GraphicsCommandList, RootParameterIndex : u32, BufferLocation : u64) #no_context
    {
        this.vtable.SetComputeRootConstantBufferView (this, RootParameterIndex, BufferLocation);
    }

    SetGraphicsRootConstantBufferView :: inline (this : *ID3D12GraphicsCommandList, RootParameterIndex : u32, BufferLocation : u64) #no_context
    {
        this.vtable.SetGraphicsRootConstantBufferView (this, RootParameterIndex, BufferLocation);
    }

    SetComputeRootShaderResourceView :: inline (this : *ID3D12GraphicsCommandList, RootParameterIndex : u32, BufferLocation : u64) #no_context
    {
        this.vtable.SetComputeRootShaderResourceView (this, RootParameterIndex, BufferLocation);
    }

    SetGraphicsRootShaderResourceView :: inline (this : *ID3D12GraphicsCommandList, RootParameterIndex : u32, BufferLocation : u64) #no_context
    {
        this.vtable.SetGraphicsRootShaderResourceView (this, RootParameterIndex, BufferLocation);
    }

    SetComputeRootUnorderedAccessView :: inline (this : *ID3D12GraphicsCommandList, RootParameterIndex : u32, BufferLocation : u64) #no_context
    {
        this.vtable.SetComputeRootUnorderedAccessView (this, RootParameterIndex, BufferLocation);
    }

    SetGraphicsRootUnorderedAccessView :: inline (this : *ID3D12GraphicsCommandList, RootParameterIndex : u32, BufferLocation : u64) #no_context
    {
        this.vtable.SetGraphicsRootUnorderedAccessView (this, RootParameterIndex, BufferLocation);
    }

    IASetIndexBuffer :: inline (this : *ID3D12GraphicsCommandList, pView : *D3D12_INDEX_BUFFER_VIEW) #no_context
    {
        this.vtable.IASetIndexBuffer (this, pView);
    }

    IASetVertexBuffers :: inline (this : *ID3D12GraphicsCommandList, StartSlot : u32, NumViews : u32, pViews : *D3D12_VERTEX_BUFFER_VIEW) #no_context
    {
        this.vtable.IASetVertexBuffers (this, StartSlot, NumViews, pViews);
    }

    SOSetTargets :: inline (this : *ID3D12GraphicsCommandList, StartSlot : u32, NumViews : u32, pViews : *D3D12_STREAM_OUTPUT_BUFFER_VIEW) #no_context
    {
        this.vtable.SOSetTargets (this, StartSlot, NumViews, pViews);
    }

    OMSetRenderTargets :: inline (this : *ID3D12GraphicsCommandList, 
        NumRenderTargetDescriptors : u32,
        pRenderTargetDescriptors : *D3D12_CPU_DESCRIPTOR_HANDLE,
        RTsSingleHandleToDescriptorRange : BOOL,
        pDepthStencilDescriptor : *D3D12_CPU_DESCRIPTOR_HANDLE
    ) #no_context
    {
        this.vtable.OMSetRenderTargets (this, NumRenderTargetDescriptors, pRenderTargetDescriptors, RTsSingleHandleToDescriptorRange, pDepthStencilDescriptor);
    }

    ClearDepthStencilView :: inline (this : *ID3D12GraphicsCommandList, 
        DepthStencilView : D3D12_CPU_DESCRIPTOR_HANDLE,
        ClearFlags : D3D12_CLEAR_FLAGS,
        Depth : float,
        Stencil : u8,
        NumRects : u32,
        pRects : *RECT
    ) #no_context
    {
        this.vtable.ClearDepthStencilView (this, DepthStencilView, ClearFlags, Depth, Stencil, NumRects, pRects);
    }

    ClearRenderTargetView :: inline (this : *ID3D12GraphicsCommandList, 
        RenderTargetView : D3D12_CPU_DESCRIPTOR_HANDLE,
        ColorRGBA : *float,
        NumRects : u32,
        pRects : *RECT
    ) #no_context
    {
        this.vtable.ClearRenderTargetView (this, RenderTargetView, ColorRGBA, NumRects, pRects);
    }

    ClearUnorderedAccessViewUint :: inline (this : *ID3D12GraphicsCommandList, 
        ViewGPUHandleInCurrentHeap : D3D12_GPU_DESCRIPTOR_HANDLE,
        ViewCPUHandle : D3D12_CPU_DESCRIPTOR_HANDLE,
        pResource : *ID3D12Resource,
        Values : *u32,
        NumRects : u32,
        pRects : *RECT
    ) #no_context
    {
        this.vtable.ClearUnorderedAccessViewUint (this, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
    }

    ClearUnorderedAccessViewFloat :: inline (this : *ID3D12GraphicsCommandList, 
        ViewGPUHandleInCurrentHeap : D3D12_GPU_DESCRIPTOR_HANDLE,
        ViewCPUHandle : D3D12_CPU_DESCRIPTOR_HANDLE,
        pResource : *ID3D12Resource,
        Values : *float,
        NumRects : u32,
        pRects : *RECT
    ) #no_context
    {
        this.vtable.ClearUnorderedAccessViewFloat (this, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
    }

    DiscardResource :: inline (this : *ID3D12GraphicsCommandList, pResource : *ID3D12Resource, pRegion : *D3D12_DISCARD_REGION) #no_context
    {
        this.vtable.DiscardResource (this, pResource, pRegion);
    }

    BeginQuery :: inline (this : *ID3D12GraphicsCommandList, pQueryHeap : *ID3D12QueryHeap, _Type : D3D12_QUERY_TYPE, Index : u32) #no_context
    {
        this.vtable.BeginQuery (this, pQueryHeap, _Type, Index);
    }

    EndQuery :: inline (this : *ID3D12GraphicsCommandList, pQueryHeap : *ID3D12QueryHeap, _Type : D3D12_QUERY_TYPE, Index : u32) #no_context
    {
        this.vtable.EndQuery (this, pQueryHeap, _Type, Index);
    }

    ResolveQueryData :: inline (this : *ID3D12GraphicsCommandList, 
        pQueryHeap : *ID3D12QueryHeap,
        _Type : D3D12_QUERY_TYPE,
        StartIndex : u32,
        NumQueries : u32,
        pDestinationBuffer : *ID3D12Resource,
        AlignedDestinationBufferOffset : u64
    ) #no_context
    {
        this.vtable.ResolveQueryData (this, pQueryHeap, _Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
    }

    SetPredication :: inline (this : *ID3D12GraphicsCommandList, pBuffer : *ID3D12Resource, AlignedBufferOffset : u64, Operation : D3D12_PREDICATION_OP) #no_context
    {
        this.vtable.SetPredication (this, pBuffer, AlignedBufferOffset, Operation);
    }

    SetMarker :: inline (this : *ID3D12GraphicsCommandList, Metadata : u32, pData : *void, Size : u32) #no_context
    {
        this.vtable.SetMarker (this, Metadata, pData, Size);
    }

    BeginEvent :: inline (this : *ID3D12GraphicsCommandList, Metadata : u32, pData : *void, Size : u32) #no_context
    {
        this.vtable.BeginEvent (this, Metadata, pData, Size);
    }

    EndEvent :: inline (this : *ID3D12GraphicsCommandList) #no_context
    {
        this.vtable.EndEvent (this);
    }

    ExecuteIndirect :: inline (this : *ID3D12GraphicsCommandList, 
        pCommandSignature : *ID3D12CommandSignature,
        MaxCommandCount : u32,
        pArgumentBuffer : *ID3D12Resource,
        ArgumentBufferOffset : u64,
        pCountBuffer : *ID3D12Resource,
        CountBufferOffset : u64
    ) #no_context
    {
        this.vtable.ExecuteIndirect (this, pCommandSignature, MaxCommandCount, pArgumentBuffer, ArgumentBufferOffset, pCountBuffer, CountBufferOffset);
    }
}

ID3D12GraphicsCommandList1_UUID :: "553103fb-1fe7-4557-bb38-946d7d0e7ca7";
ID3D12GraphicsCommandList1 :: struct
{
    UUID :: GUID.{0x553103fb,0x1fe7,0x4557,.[0xbb,0x38,0x94,0x6d,0x7d,0xe,0x7c,0xa7]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12GraphicsCommandList;

    #place base;
    vtable : *ID3D12GraphicsCommandList1VTable;

    AtomicCopyBufferUINT :: inline (this : *ID3D12GraphicsCommandList1, 
        pDstBuffer : *ID3D12Resource,
        DstOffset : u64,
        pSrcBuffer : *ID3D12Resource,
        SrcOffset : u64,
        Dependencies : u32,
        ppDependentResources : **ID3D12Resource,
        pDependentSubresourceRanges : *D3D12_SUBRESOURCE_RANGE_UINT64
    ) #no_context
    {
        this.vtable.AtomicCopyBufferUINT (this, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
    }

    AtomicCopyBufferUINT64 :: inline (this : *ID3D12GraphicsCommandList1, 
        pDstBuffer : *ID3D12Resource,
        DstOffset : u64,
        pSrcBuffer : *ID3D12Resource,
        SrcOffset : u64,
        Dependencies : u32,
        ppDependentResources : **ID3D12Resource,
        pDependentSubresourceRanges : *D3D12_SUBRESOURCE_RANGE_UINT64
    ) #no_context
    {
        this.vtable.AtomicCopyBufferUINT64 (this, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
    }

    OMSetDepthBounds :: inline (this : *ID3D12GraphicsCommandList1, Min : float, Max : float) #no_context
    {
        this.vtable.OMSetDepthBounds (this, Min, Max);
    }

    SetSamplePositions :: inline (this : *ID3D12GraphicsCommandList1, NumSamplesPerPixel : u32, NumPixels : u32, pSamplePositions : *D3D12_SAMPLE_POSITION) #no_context
    {
        this.vtable.SetSamplePositions (this, NumSamplesPerPixel, NumPixels, pSamplePositions);
    }

    ResolveSubresourceRegion :: inline (this : *ID3D12GraphicsCommandList1, 
        pDstResource : *ID3D12Resource,
        DstSubresource : u32,
        DstX : u32,
        DstY : u32,
        pSrcResource : *ID3D12Resource,
        SrcSubresource : u32,
        pSrcRect : *RECT,
        Format : DXGI_FORMAT,
        ResolveMode : D3D12_RESOLVE_MODE
    ) #no_context
    {
        this.vtable.ResolveSubresourceRegion (this, pDstResource, DstSubresource, DstX, DstY, pSrcResource, SrcSubresource, pSrcRect, Format, ResolveMode);
    }

    SetViewInstanceMask :: inline (this : *ID3D12GraphicsCommandList1, Mask : u32) #no_context
    {
        this.vtable.SetViewInstanceMask (this, Mask);
    }
}

ID3D12GraphicsCommandList2_UUID :: "38c3e585-ff17-412c-9150-4fc6f9d72a28";
ID3D12GraphicsCommandList2 :: struct
{
    UUID :: GUID.{0x38c3e585,0xff17,0x412c,.[0x91,0x50,0x4f,0xc6,0xf9,0xd7,0x2a,0x28]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12GraphicsCommandList1;

    #place base;
    vtable : *ID3D12GraphicsCommandList2VTable;

    WriteBufferImmediate :: inline (this : *ID3D12GraphicsCommandList2, Count : u32, pParams : *D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pModes : *D3D12_WRITEBUFFERIMMEDIATE_MODE) #no_context
    {
        this.vtable.WriteBufferImmediate (this, Count, pParams, pModes);
    }
}

ID3D12GraphicsCommandList3_UUID :: "6fda83a7-b84c-4e38-9ac8-c7bd22016b3d";
ID3D12GraphicsCommandList3 :: struct
{
    UUID :: GUID.{0x6fda83a7,0xb84c,0x4e38,.[0x9a,0xc8,0xc7,0xbd,0x22,0x1,0x6b,0x3d]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12GraphicsCommandList2;

    #place base;
    vtable : *ID3D12GraphicsCommandList3VTable;

    SetProtectedResourceSession :: inline (this : *ID3D12GraphicsCommandList3, pProtectedResourceSession : *ID3D12ProtectedResourceSession) #no_context
    {
        this.vtable.SetProtectedResourceSession (this, pProtectedResourceSession);
    }
}

ID3D12GraphicsCommandList4_UUID :: "8754318e-d3a9-4541-98cf-645b50dc4874";
ID3D12GraphicsCommandList4 :: struct
{
    UUID :: GUID.{0x8754318e,0xd3a9,0x4541,.[0x98,0xcf,0x64,0x5b,0x50,0xdc,0x48,0x74]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12GraphicsCommandList3;

    #place base;
    vtable : *ID3D12GraphicsCommandList4VTable;

    BeginRenderPass :: inline (this : *ID3D12GraphicsCommandList4, 
        NumRenderTargets : u32,
        pRenderTargets : *D3D12_RENDER_PASS_RENDER_TARGET_DESC,
        pDepthStencil : *D3D12_RENDER_PASS_DEPTH_STENCIL_DESC,
        Flags : D3D12_RENDER_PASS_FLAGS
    ) #no_context
    {
        this.vtable.BeginRenderPass (this, NumRenderTargets, pRenderTargets, pDepthStencil, Flags);
    }

    EndRenderPass :: inline (this : *ID3D12GraphicsCommandList4) #no_context
    {
        this.vtable.EndRenderPass (this);
    }

    InitializeMetaCommand :: inline (this : *ID3D12GraphicsCommandList4, pMetaCommand : *ID3D12MetaCommand, pInitializationParametersData : *void, InitializationParametersDataSizeInBytes : u64) #no_context
    {
        this.vtable.InitializeMetaCommand (this, pMetaCommand, pInitializationParametersData, InitializationParametersDataSizeInBytes);
    }

    ExecuteMetaCommand :: inline (this : *ID3D12GraphicsCommandList4, pMetaCommand : *ID3D12MetaCommand, pExecutionParametersData : *void, ExecutionParametersDataSizeInBytes : u64) #no_context
    {
        this.vtable.ExecuteMetaCommand (this, pMetaCommand, pExecutionParametersData, ExecutionParametersDataSizeInBytes);
    }

    BuildRaytracingAccelerationStructure :: inline (this : *ID3D12GraphicsCommandList4, pDesc : *D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC, NumPostbuildInfoDescs : u32, pPostbuildInfoDescs : *D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC) #no_context
    {
        this.vtable.BuildRaytracingAccelerationStructure (this, pDesc, NumPostbuildInfoDescs, pPostbuildInfoDescs);
    }

    EmitRaytracingAccelerationStructurePostbuildInfo :: inline (this : *ID3D12GraphicsCommandList4, pDesc : *D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC, NumSourceAccelerationStructures : u32, pSourceAccelerationStructureData : *u64) #no_context
    {
        this.vtable.EmitRaytracingAccelerationStructurePostbuildInfo (this, pDesc, NumSourceAccelerationStructures, pSourceAccelerationStructureData);
    }

    CopyRaytracingAccelerationStructure :: inline (this : *ID3D12GraphicsCommandList4, DestAccelerationStructureData : u64, SourceAccelerationStructureData : u64, Mode : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE) #no_context
    {
        this.vtable.CopyRaytracingAccelerationStructure (this, DestAccelerationStructureData, SourceAccelerationStructureData, Mode);
    }

    SetPipelineState1 :: inline (this : *ID3D12GraphicsCommandList4, pStateObject : *ID3D12StateObject) #no_context
    {
        this.vtable.SetPipelineState1 (this, pStateObject);
    }

    DispatchRays :: inline (this : *ID3D12GraphicsCommandList4, pDesc : *D3D12_DISPATCH_RAYS_DESC) #no_context
    {
        this.vtable.DispatchRays (this, pDesc);
    }
}

ID3D12GraphicsCommandList5_UUID :: "55050859-4024-474c-87f5-6472eaee44ea";
ID3D12GraphicsCommandList5 :: struct
{
    UUID :: GUID.{0x55050859,0x4024,0x474c,.[0x87,0xf5,0x64,0x72,0xea,0xee,0x44,0xea]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12GraphicsCommandList4;

    #place base;
    vtable : *ID3D12GraphicsCommandList5VTable;

    RSSetShadingRate :: inline (this : *ID3D12GraphicsCommandList5, baseShadingRate : D3D12_SHADING_RATE, combiners : *D3D12_SHADING_RATE_COMBINER) #no_context
    {
        this.vtable.RSSetShadingRate (this, baseShadingRate, combiners);
    }

    RSSetShadingRateImage :: inline (this : *ID3D12GraphicsCommandList5, shadingRateImage : *ID3D12Resource) #no_context
    {
        this.vtable.RSSetShadingRateImage (this, shadingRateImage);
    }
}

ID3D12GraphicsCommandList6_UUID :: "c3827890-e548-4cfa-96cf-5689a9370f80";
ID3D12GraphicsCommandList6 :: struct
{
    UUID :: GUID.{0xc3827890,0xe548,0x4cfa,.[0x96,0xcf,0x56,0x89,0xa9,0x37,0xf,0x80]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12GraphicsCommandList5;

    #place base;
    vtable : *ID3D12GraphicsCommandList6VTable;

    DispatchMesh :: inline (this : *ID3D12GraphicsCommandList6, ThreadGroupCountX : u32, ThreadGroupCountY : u32, ThreadGroupCountZ : u32) #no_context
    {
        this.vtable.DispatchMesh (this, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
    }
}

ID3D12Heap_UUID :: "6b3b2502-6e51-45b3-90ee-9884265e8df3";
ID3D12Heap :: struct
{
    UUID :: GUID.{0x6b3b2502,0x6e51,0x45b3,.[0x90,0xee,0x98,0x84,0x26,0x5e,0x8d,0xf3]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Pageable;

    #place base;
    vtable : *ID3D12HeapVTable;

    GetDesc :: inline (this : *ID3D12Heap) -> D3D12_HEAP_DESC #no_context
    {
        return this.vtable.GetDesc (this);
    }
}

ID3D12Heap1_UUID :: "572f7389-2168-49e3-9693-d6df5871bf6d";
ID3D12Heap1 :: struct
{
    UUID :: GUID.{0x572f7389,0x2168,0x49e3,.[0x96,0x93,0xd6,0xdf,0x58,0x71,0xbf,0x6d]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Heap;

    #place base;
    vtable : *ID3D12Heap1VTable;

    GetProtectedResourceSession :: inline (this : *ID3D12Heap1, riid : *GUID, ppProtectedSession : **void) -> HRESULT #no_context
    {
        return this.vtable.GetProtectedResourceSession (this, riid, ppProtectedSession);
    }
}

ID3D12InfoQueue_UUID :: "0742a90b-c387-483f-b946-30a7e4e61458";
ID3D12InfoQueue :: struct
{
    UUID :: GUID.{0x742a90b,0xc387,0x483f,.[0xb9,0x46,0x30,0xa7,0xe4,0xe6,0x14,0x58]};

    #as using, except (.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D12InfoQueueVTable;

    SetMessageCountLimit :: inline (this : *ID3D12InfoQueue, MessageCountLimit : u64) -> HRESULT #no_context
    {
        return this.vtable.SetMessageCountLimit (this, MessageCountLimit);
    }

    ClearStoredMessages :: inline (this : *ID3D12InfoQueue) #no_context
    {
        this.vtable.ClearStoredMessages (this);
    }

    GetMessage :: inline (this : *ID3D12InfoQueue, MessageIndex : u64, pMessage : *D3D12_MESSAGE, pMessageByteLength : *u64) -> HRESULT #no_context
    {
        return this.vtable.GetMessage (this, MessageIndex, pMessage, pMessageByteLength);
    }

    GetNumMessagesAllowedByStorageFilter :: inline (this : *ID3D12InfoQueue) -> u64 #no_context
    {
        return this.vtable.GetNumMessagesAllowedByStorageFilter (this);
    }

    GetNumMessagesDeniedByStorageFilter :: inline (this : *ID3D12InfoQueue) -> u64 #no_context
    {
        return this.vtable.GetNumMessagesDeniedByStorageFilter (this);
    }

    GetNumStoredMessages :: inline (this : *ID3D12InfoQueue) -> u64 #no_context
    {
        return this.vtable.GetNumStoredMessages (this);
    }

    GetNumStoredMessagesAllowedByRetrievalFilter :: inline (this : *ID3D12InfoQueue) -> u64 #no_context
    {
        return this.vtable.GetNumStoredMessagesAllowedByRetrievalFilter (this);
    }

    GetNumMessagesDiscardedByMessageCountLimit :: inline (this : *ID3D12InfoQueue) -> u64 #no_context
    {
        return this.vtable.GetNumMessagesDiscardedByMessageCountLimit (this);
    }

    GetMessageCountLimit :: inline (this : *ID3D12InfoQueue) -> u64 #no_context
    {
        return this.vtable.GetMessageCountLimit (this);
    }

    AddStorageFilterEntries :: inline (this : *ID3D12InfoQueue, pFilter : *D3D12_INFO_QUEUE_FILTER) -> HRESULT #no_context
    {
        return this.vtable.AddStorageFilterEntries (this, pFilter);
    }

    GetStorageFilter :: inline (this : *ID3D12InfoQueue, pFilter : *D3D12_INFO_QUEUE_FILTER, pFilterByteLength : *u64) -> HRESULT #no_context
    {
        return this.vtable.GetStorageFilter (this, pFilter, pFilterByteLength);
    }

    ClearStorageFilter :: inline (this : *ID3D12InfoQueue) #no_context
    {
        this.vtable.ClearStorageFilter (this);
    }

    PushEmptyStorageFilter :: inline (this : *ID3D12InfoQueue) -> HRESULT #no_context
    {
        return this.vtable.PushEmptyStorageFilter (this);
    }

    PushCopyOfStorageFilter :: inline (this : *ID3D12InfoQueue) -> HRESULT #no_context
    {
        return this.vtable.PushCopyOfStorageFilter (this);
    }

    PushStorageFilter :: inline (this : *ID3D12InfoQueue, pFilter : *D3D12_INFO_QUEUE_FILTER) -> HRESULT #no_context
    {
        return this.vtable.PushStorageFilter (this, pFilter);
    }

    PopStorageFilter :: inline (this : *ID3D12InfoQueue) #no_context
    {
        this.vtable.PopStorageFilter (this);
    }

    GetStorageFilterStackSize :: inline (this : *ID3D12InfoQueue) -> u32 #no_context
    {
        return this.vtable.GetStorageFilterStackSize (this);
    }

    AddRetrievalFilterEntries :: inline (this : *ID3D12InfoQueue, pFilter : *D3D12_INFO_QUEUE_FILTER) -> HRESULT #no_context
    {
        return this.vtable.AddRetrievalFilterEntries (this, pFilter);
    }

    GetRetrievalFilter :: inline (this : *ID3D12InfoQueue, pFilter : *D3D12_INFO_QUEUE_FILTER, pFilterByteLength : *u64) -> HRESULT #no_context
    {
        return this.vtable.GetRetrievalFilter (this, pFilter, pFilterByteLength);
    }

    ClearRetrievalFilter :: inline (this : *ID3D12InfoQueue) #no_context
    {
        this.vtable.ClearRetrievalFilter (this);
    }

    PushEmptyRetrievalFilter :: inline (this : *ID3D12InfoQueue) -> HRESULT #no_context
    {
        return this.vtable.PushEmptyRetrievalFilter (this);
    }

    PushCopyOfRetrievalFilter :: inline (this : *ID3D12InfoQueue) -> HRESULT #no_context
    {
        return this.vtable.PushCopyOfRetrievalFilter (this);
    }

    PushRetrievalFilter :: inline (this : *ID3D12InfoQueue, pFilter : *D3D12_INFO_QUEUE_FILTER) -> HRESULT #no_context
    {
        return this.vtable.PushRetrievalFilter (this, pFilter);
    }

    PopRetrievalFilter :: inline (this : *ID3D12InfoQueue) #no_context
    {
        this.vtable.PopRetrievalFilter (this);
    }

    GetRetrievalFilterStackSize :: inline (this : *ID3D12InfoQueue) -> u32 #no_context
    {
        return this.vtable.GetRetrievalFilterStackSize (this);
    }

    AddMessage :: inline (this : *ID3D12InfoQueue, 
        Category : D3D12_MESSAGE_CATEGORY,
        Severity : D3D12_MESSAGE_SEVERITY,
        ID : D3D12_MESSAGE_ID,
        pDescription : PSTR
    ) -> HRESULT #no_context
    {
        return this.vtable.AddMessage (this, Category, Severity, ID, pDescription);
    }

    AddApplicationMessage :: inline (this : *ID3D12InfoQueue, Severity : D3D12_MESSAGE_SEVERITY, pDescription : PSTR) -> HRESULT #no_context
    {
        return this.vtable.AddApplicationMessage (this, Severity, pDescription);
    }

    SetBreakOnCategory :: inline (this : *ID3D12InfoQueue, Category : D3D12_MESSAGE_CATEGORY, bEnable : BOOL) -> HRESULT #no_context
    {
        return this.vtable.SetBreakOnCategory (this, Category, bEnable);
    }

    SetBreakOnSeverity :: inline (this : *ID3D12InfoQueue, Severity : D3D12_MESSAGE_SEVERITY, bEnable : BOOL) -> HRESULT #no_context
    {
        return this.vtable.SetBreakOnSeverity (this, Severity, bEnable);
    }

    SetBreakOnID :: inline (this : *ID3D12InfoQueue, ID : D3D12_MESSAGE_ID, bEnable : BOOL) -> HRESULT #no_context
    {
        return this.vtable.SetBreakOnID (this, ID, bEnable);
    }

    GetBreakOnCategory :: inline (this : *ID3D12InfoQueue, Category : D3D12_MESSAGE_CATEGORY) -> BOOL #no_context
    {
        return this.vtable.GetBreakOnCategory (this, Category);
    }

    GetBreakOnSeverity :: inline (this : *ID3D12InfoQueue, Severity : D3D12_MESSAGE_SEVERITY) -> BOOL #no_context
    {
        return this.vtable.GetBreakOnSeverity (this, Severity);
    }

    GetBreakOnID :: inline (this : *ID3D12InfoQueue, ID : D3D12_MESSAGE_ID) -> BOOL #no_context
    {
        return this.vtable.GetBreakOnID (this, ID);
    }

    SetMuteDebugOutput :: inline (this : *ID3D12InfoQueue, bMute : BOOL) #no_context
    {
        this.vtable.SetMuteDebugOutput (this, bMute);
    }

    GetMuteDebugOutput :: inline (this : *ID3D12InfoQueue) -> BOOL #no_context
    {
        return this.vtable.GetMuteDebugOutput (this);
    }
}

ID3D12InfoQueue1_UUID :: "2852dd88-b484-4c0c-b6b1-67168500e600";
ID3D12InfoQueue1 :: struct
{
    UUID :: GUID.{0x2852dd88,0xb484,0x4c0c,.[0xb6,0xb1,0x67,0x16,0x85,0x0,0xe6,0x0]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12InfoQueue;

    #place base;
    vtable : *ID3D12InfoQueue1VTable;

    RegisterMessageCallback :: inline (this : *ID3D12InfoQueue1, 
        CallbackFunc : D3D12MessageFunc,
        CallbackFilterFlags : D3D12_MESSAGE_CALLBACK_FLAGS,
        pContext : *void,
        pCallbackCookie : *u32
    ) -> HRESULT #no_context
    {
        return this.vtable.RegisterMessageCallback (this, CallbackFunc, CallbackFilterFlags, pContext, pCallbackCookie);
    }

    UnregisterMessageCallback :: inline (this : *ID3D12InfoQueue1, CallbackCookie : u32) -> HRESULT #no_context
    {
        return this.vtable.UnregisterMessageCallback (this, CallbackCookie);
    }
}

ID3D12LibraryReflection_UUID :: "8e349d19-54db-4a56-9dc9-119d87bdb804";
ID3D12LibraryReflection :: struct
{
    UUID :: GUID.{0x8e349d19,0x54db,0x4a56,.[0x9d,0xc9,0x11,0x9d,0x87,0xbd,0xb8,0x4]};

    #as using, except (.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D12LibraryReflectionVTable;

    GetDesc :: inline (this : *ID3D12LibraryReflection, pDesc : *D3D12_LIBRARY_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetDesc (this, pDesc);
    }

    GetFunctionByIndex :: inline (this : *ID3D12LibraryReflection, FunctionIndex : s32) -> *ID3D12FunctionReflection #no_context
    {
        return this.vtable.GetFunctionByIndex (this, FunctionIndex);
    }
}

ID3D12LifetimeOwner_UUID :: "e667af9f-cd56-4f46-83ce-032e595d70a8";
ID3D12LifetimeOwner :: struct
{
    UUID :: GUID.{0xe667af9f,0xcd56,0x4f46,.[0x83,0xce,0x3,0x2e,0x59,0x5d,0x70,0xa8]};

    #as using, except (.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D12LifetimeOwnerVTable;

    LifetimeStateUpdated :: inline (this : *ID3D12LifetimeOwner, NewState : D3D12_LIFETIME_STATE) #no_context
    {
        this.vtable.LifetimeStateUpdated (this, NewState);
    }
}

ID3D12LifetimeTracker_UUID :: "3fd03d36-4eb1-424a-a582-494ecb8ba813";
ID3D12LifetimeTracker :: struct
{
    UUID :: GUID.{0x3fd03d36,0x4eb1,0x424a,.[0xa5,0x82,0x49,0x4e,0xcb,0x8b,0xa8,0x13]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12DeviceChild;

    #place base;
    vtable : *ID3D12LifetimeTrackerVTable;

    DestroyOwnedObject :: inline (this : *ID3D12LifetimeTracker, pObject : *ID3D12DeviceChild) -> HRESULT #no_context
    {
        return this.vtable.DestroyOwnedObject (this, pObject);
    }
}

ID3D12MetaCommand_UUID :: "dbb84c27-36ce-4fc9-b801-f048c46ac570";
ID3D12MetaCommand :: struct
{
    UUID :: GUID.{0xdbb84c27,0x36ce,0x4fc9,.[0xb8,0x1,0xf0,0x48,0xc4,0x6a,0xc5,0x70]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Pageable;

    #place base;
    vtable : *ID3D12MetaCommandVTable;

    GetRequiredParameterResourceSize :: inline (this : *ID3D12MetaCommand, Stage : D3D12_META_COMMAND_PARAMETER_STAGE, ParameterIndex : u32) -> u64 #no_context
    {
        return this.vtable.GetRequiredParameterResourceSize (this, Stage, ParameterIndex);
    }
}

ID3D12Object_UUID :: "c4fec28f-7966-4e95-9f94-f431cb56c3b8";
ID3D12Object :: struct
{
    UUID :: GUID.{0xc4fec28f,0x7966,0x4e95,.[0x9f,0x94,0xf4,0x31,0xcb,0x56,0xc3,0xb8]};

    #as using, except (.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D12ObjectVTable;

    GetPrivateData :: inline (this : *ID3D12Object, guid : *GUID, pDataSize : *u32, pData : *void) -> HRESULT #no_context
    {
        return this.vtable.GetPrivateData (this, guid, pDataSize, pData);
    }

    SetPrivateData :: inline (this : *ID3D12Object, guid : *GUID, DataSize : u32, pData : *void) -> HRESULT #no_context
    {
        return this.vtable.SetPrivateData (this, guid, DataSize, pData);
    }

    SetPrivateDataInterface :: inline (this : *ID3D12Object, guid : *GUID, pData : *IUnknown) -> HRESULT #no_context
    {
        return this.vtable.SetPrivateDataInterface (this, guid, pData);
    }

    SetName :: inline (this : *ID3D12Object, Name : PWSTR) -> HRESULT #no_context
    {
        return this.vtable.SetName (this, Name);
    }
}

ID3D12Pageable_UUID :: "63ee58fb-1268-4835-86da-f008ce62f0d6";
ID3D12Pageable :: struct
{
    UUID :: GUID.{0x63ee58fb,0x1268,0x4835,.[0x86,0xda,0xf0,0x8,0xce,0x62,0xf0,0xd6]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12DeviceChild;

    #place base;
    vtable : *ID3D12PageableVTable;
}

ID3D12PipelineLibrary_UUID :: "c64226a8-9201-46af-b4cc-53fb9ff7414f";
ID3D12PipelineLibrary :: struct
{
    UUID :: GUID.{0xc64226a8,0x9201,0x46af,.[0xb4,0xcc,0x53,0xfb,0x9f,0xf7,0x41,0x4f]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12DeviceChild;

    #place base;
    vtable : *ID3D12PipelineLibraryVTable;

    StorePipeline :: inline (this : *ID3D12PipelineLibrary, pName : PWSTR, pPipeline : *ID3D12PipelineState) -> HRESULT #no_context
    {
        return this.vtable.StorePipeline (this, pName, pPipeline);
    }

    LoadGraphicsPipeline :: inline (this : *ID3D12PipelineLibrary, 
        pName : PWSTR,
        pDesc : *D3D12_GRAPHICS_PIPELINE_STATE_DESC,
        riid : *GUID,
        ppPipelineState : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.LoadGraphicsPipeline (this, pName, pDesc, riid, ppPipelineState);
    }

    LoadComputePipeline :: inline (this : *ID3D12PipelineLibrary, 
        pName : PWSTR,
        pDesc : *D3D12_COMPUTE_PIPELINE_STATE_DESC,
        riid : *GUID,
        ppPipelineState : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.LoadComputePipeline (this, pName, pDesc, riid, ppPipelineState);
    }

    GetSerializedSize :: inline (this : *ID3D12PipelineLibrary) -> u64 #no_context
    {
        return this.vtable.GetSerializedSize (this);
    }

    Serialize :: inline (this : *ID3D12PipelineLibrary, pData : *void, DataSizeInBytes : u64) -> HRESULT #no_context
    {
        return this.vtable.Serialize (this, pData, DataSizeInBytes);
    }
}

ID3D12PipelineLibrary1_UUID :: "80eabf42-2568-4e5e-bd82-c37f86961dc3";
ID3D12PipelineLibrary1 :: struct
{
    UUID :: GUID.{0x80eabf42,0x2568,0x4e5e,.[0xbd,0x82,0xc3,0x7f,0x86,0x96,0x1d,0xc3]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12PipelineLibrary;

    #place base;
    vtable : *ID3D12PipelineLibrary1VTable;

    LoadPipeline :: inline (this : *ID3D12PipelineLibrary1, 
        pName : PWSTR,
        pDesc : *D3D12_PIPELINE_STATE_STREAM_DESC,
        riid : *GUID,
        ppPipelineState : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.LoadPipeline (this, pName, pDesc, riid, ppPipelineState);
    }
}

ID3D12PipelineState_UUID :: "765a30f3-f624-4c6f-a828-ace948622445";
ID3D12PipelineState :: struct
{
    UUID :: GUID.{0x765a30f3,0xf624,0x4c6f,.[0xa8,0x28,0xac,0xe9,0x48,0x62,0x24,0x45]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Pageable;

    #place base;
    vtable : *ID3D12PipelineStateVTable;

    GetCachedBlob :: inline (this : *ID3D12PipelineState, ppBlob : **ID3DBlob) -> HRESULT #no_context
    {
        return this.vtable.GetCachedBlob (this, ppBlob);
    }
}

ID3D12ProtectedResourceSession_UUID :: "6cd696f4-f289-40cc-8091-5a6c0a099c3d";
ID3D12ProtectedResourceSession :: struct
{
    UUID :: GUID.{0x6cd696f4,0xf289,0x40cc,.[0x80,0x91,0x5a,0x6c,0xa,0x9,0x9c,0x3d]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12ProtectedSession;

    #place base;
    vtable : *ID3D12ProtectedResourceSessionVTable;

    GetDesc :: inline (this : *ID3D12ProtectedResourceSession) -> D3D12_PROTECTED_RESOURCE_SESSION_DESC #no_context
    {
        return this.vtable.GetDesc (this);
    }
}

ID3D12ProtectedResourceSession1_UUID :: "d6f12dd6-76fb-406e-8961-4296eefc0409";
ID3D12ProtectedResourceSession1 :: struct
{
    UUID :: GUID.{0xd6f12dd6,0x76fb,0x406e,.[0x89,0x61,0x42,0x96,0xee,0xfc,0x4,0x9]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12ProtectedResourceSession;

    #place base;
    vtable : *ID3D12ProtectedResourceSession1VTable;

    GetDesc1 :: inline (this : *ID3D12ProtectedResourceSession1) -> D3D12_PROTECTED_RESOURCE_SESSION_DESC1 #no_context
    {
        return this.vtable.GetDesc1 (this);
    }
}

ID3D12ProtectedSession_UUID :: "a1533d18-0ac1-4084-85b9-89a96116806b";
ID3D12ProtectedSession :: struct
{
    UUID :: GUID.{0xa1533d18,0xac1,0x4084,.[0x85,0xb9,0x89,0xa9,0x61,0x16,0x80,0x6b]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12DeviceChild;

    #place base;
    vtable : *ID3D12ProtectedSessionVTable;

    GetStatusFence :: inline (this : *ID3D12ProtectedSession, riid : *GUID, ppFence : **void) -> HRESULT #no_context
    {
        return this.vtable.GetStatusFence (this, riid, ppFence);
    }

    GetSessionStatus :: inline (this : *ID3D12ProtectedSession) -> D3D12_PROTECTED_SESSION_STATUS #no_context
    {
        return this.vtable.GetSessionStatus (this);
    }
}

ID3D12QueryHeap_UUID :: "0d9658ae-ed45-469e-a61d-970ec583cab4";
ID3D12QueryHeap :: struct
{
    UUID :: GUID.{0xd9658ae,0xed45,0x469e,.[0xa6,0x1d,0x97,0xe,0xc5,0x83,0xca,0xb4]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Pageable;

    #place base;
    vtable : *ID3D12QueryHeapVTable;
}

ID3D12Resource_UUID :: "696442be-a72e-4059-bc79-5b5c98040fad";
ID3D12Resource :: struct
{
    UUID :: GUID.{0x696442be,0xa72e,0x4059,.[0xbc,0x79,0x5b,0x5c,0x98,0x4,0xf,0xad]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Pageable;

    #place base;
    vtable : *ID3D12ResourceVTable;

    Map :: inline (this : *ID3D12Resource, Subresource : u32, pReadRange : *D3D12_RANGE, ppData : **void) -> HRESULT #no_context
    {
        return this.vtable.Map (this, Subresource, pReadRange, ppData);
    }

    Unmap :: inline (this : *ID3D12Resource, Subresource : u32, pWrittenRange : *D3D12_RANGE) #no_context
    {
        this.vtable.Unmap (this, Subresource, pWrittenRange);
    }

    GetDesc :: inline (this : *ID3D12Resource) -> D3D12_RESOURCE_DESC #no_context
    {
        return this.vtable.GetDesc (this);
    }

    GetGPUVirtualAddress :: inline (this : *ID3D12Resource) -> u64 #no_context
    {
        return this.vtable.GetGPUVirtualAddress (this);
    }

    WriteToSubresource :: inline (this : *ID3D12Resource, 
        DstSubresource : u32,
        pDstBox : *D3D12_BOX,
        pSrcData : *void,
        SrcRowPitch : u32,
        SrcDepthPitch : u32
    ) -> HRESULT #no_context
    {
        return this.vtable.WriteToSubresource (this, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
    }

    ReadFromSubresource :: inline (this : *ID3D12Resource, 
        pDstData : *void,
        DstRowPitch : u32,
        DstDepthPitch : u32,
        SrcSubresource : u32,
        pSrcBox : *D3D12_BOX
    ) -> HRESULT #no_context
    {
        return this.vtable.ReadFromSubresource (this, pDstData, DstRowPitch, DstDepthPitch, SrcSubresource, pSrcBox);
    }

    GetHeapProperties :: inline (this : *ID3D12Resource, pHeapProperties : *D3D12_HEAP_PROPERTIES, pHeapFlags : *D3D12_HEAP_FLAGS) -> HRESULT #no_context
    {
        return this.vtable.GetHeapProperties (this, pHeapProperties, pHeapFlags);
    }
}

ID3D12Resource1_UUID :: "9d5e227a-4430-4161-88b3-3eca6bb16e19";
ID3D12Resource1 :: struct
{
    UUID :: GUID.{0x9d5e227a,0x4430,0x4161,.[0x88,0xb3,0x3e,0xca,0x6b,0xb1,0x6e,0x19]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Resource;

    #place base;
    vtable : *ID3D12Resource1VTable;

    GetProtectedResourceSession :: inline (this : *ID3D12Resource1, riid : *GUID, ppProtectedSession : **void) -> HRESULT #no_context
    {
        return this.vtable.GetProtectedResourceSession (this, riid, ppProtectedSession);
    }
}

ID3D12Resource2_UUID :: "be36ec3b-ea85-4aeb-a45a-e9d76404a495";
ID3D12Resource2 :: struct
{
    UUID :: GUID.{0xbe36ec3b,0xea85,0x4aeb,.[0xa4,0x5a,0xe9,0xd7,0x64,0x4,0xa4,0x95]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Resource1;

    #place base;
    vtable : *ID3D12Resource2VTable;

    GetDesc1 :: inline (this : *ID3D12Resource2) -> D3D12_RESOURCE_DESC1 #no_context
    {
        return this.vtable.GetDesc1 (this);
    }
}

ID3D12RootSignature_UUID :: "c54a6b66-72df-4ee8-8be5-a946a1429214";
ID3D12RootSignature :: struct
{
    UUID :: GUID.{0xc54a6b66,0x72df,0x4ee8,.[0x8b,0xe5,0xa9,0x46,0xa1,0x42,0x92,0x14]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12DeviceChild;

    #place base;
    vtable : *ID3D12RootSignatureVTable;
}

ID3D12RootSignatureDeserializer_UUID :: "34ab647b-3cc8-46ac-841b-c0965645c046";
ID3D12RootSignatureDeserializer :: struct
{
    UUID :: GUID.{0x34ab647b,0x3cc8,0x46ac,.[0x84,0x1b,0xc0,0x96,0x56,0x45,0xc0,0x46]};

    #as using, except (.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D12RootSignatureDeserializerVTable;

    GetRootSignatureDesc :: inline (this : *ID3D12RootSignatureDeserializer) -> *D3D12_ROOT_SIGNATURE_DESC #no_context
    {
        return this.vtable.GetRootSignatureDesc (this);
    }
}

ID3D12SDKConfiguration_UUID :: "e9eb5314-33aa-42b2-a718-d77f58b1f1c7";
ID3D12SDKConfiguration :: struct
{
    UUID :: GUID.{0xe9eb5314,0x33aa,0x42b2,.[0xa7,0x18,0xd7,0x7f,0x58,0xb1,0xf1,0xc7]};

    #as using, except (.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D12SDKConfigurationVTable;

    SetSDKVersion :: inline (this : *ID3D12SDKConfiguration, SDKVersion : u32, SDKPath : PSTR) -> HRESULT #no_context
    {
        return this.vtable.SetSDKVersion (this, SDKVersion, SDKPath);
    }
}

ID3D12ShaderCacheSession_UUID :: "28e2495d-0f64-4ae4-a6ec-129255dc49a8";
ID3D12ShaderCacheSession :: struct
{
    UUID :: GUID.{0x28e2495d,0xf64,0x4ae4,.[0xa6,0xec,0x12,0x92,0x55,0xdc,0x49,0xa8]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12DeviceChild;

    #place base;
    vtable : *ID3D12ShaderCacheSessionVTable;

    FindValue :: inline (this : *ID3D12ShaderCacheSession, 
        pKey : *void,
        KeySize : u32,
        pValue : *void,
        pValueSize : *u32
    ) -> HRESULT #no_context
    {
        return this.vtable.FindValue (this, pKey, KeySize, pValue, pValueSize);
    }

    StoreValue :: inline (this : *ID3D12ShaderCacheSession, 
        pKey : *void,
        KeySize : u32,
        pValue : *void,
        ValueSize : u32
    ) -> HRESULT #no_context
    {
        return this.vtable.StoreValue (this, pKey, KeySize, pValue, ValueSize);
    }

    SetDeleteOnDestroy :: inline (this : *ID3D12ShaderCacheSession) #no_context
    {
        this.vtable.SetDeleteOnDestroy (this);
    }

    GetDesc :: inline (this : *ID3D12ShaderCacheSession) -> D3D12_SHADER_CACHE_SESSION_DESC #no_context
    {
        return this.vtable.GetDesc (this);
    }
}

ID3D12ShaderReflection_UUID :: "5a58797d-a72c-478d-8ba2-efc6b0efe88e";
ID3D12ShaderReflection :: struct
{
    UUID :: GUID.{0x5a58797d,0xa72c,0x478d,.[0x8b,0xa2,0xef,0xc6,0xb0,0xef,0xe8,0x8e]};

    #as using, except (.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D12ShaderReflectionVTable;

    GetDesc :: inline (this : *ID3D12ShaderReflection, pDesc : *D3D12_SHADER_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetDesc (this, pDesc);
    }

    GetConstantBufferByIndex :: inline (this : *ID3D12ShaderReflection, Index : u32) -> *ID3D12ShaderReflectionConstantBuffer #no_context
    {
        return this.vtable.GetConstantBufferByIndex (this, Index);
    }

    GetConstantBufferByName :: inline (this : *ID3D12ShaderReflection, Name : PSTR) -> *ID3D12ShaderReflectionConstantBuffer #no_context
    {
        return this.vtable.GetConstantBufferByName (this, Name);
    }

    GetResourceBindingDesc :: inline (this : *ID3D12ShaderReflection, ResourceIndex : u32, pDesc : *D3D12_SHADER_INPUT_BIND_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetResourceBindingDesc (this, ResourceIndex, pDesc);
    }

    GetInputParameterDesc :: inline (this : *ID3D12ShaderReflection, ParameterIndex : u32, pDesc : *D3D12_SIGNATURE_PARAMETER_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetInputParameterDesc (this, ParameterIndex, pDesc);
    }

    GetOutputParameterDesc :: inline (this : *ID3D12ShaderReflection, ParameterIndex : u32, pDesc : *D3D12_SIGNATURE_PARAMETER_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetOutputParameterDesc (this, ParameterIndex, pDesc);
    }

    GetPatchConstantParameterDesc :: inline (this : *ID3D12ShaderReflection, ParameterIndex : u32, pDesc : *D3D12_SIGNATURE_PARAMETER_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetPatchConstantParameterDesc (this, ParameterIndex, pDesc);
    }

    GetVariableByName :: inline (this : *ID3D12ShaderReflection, Name : PSTR) -> *ID3D12ShaderReflectionVariable #no_context
    {
        return this.vtable.GetVariableByName (this, Name);
    }

    GetResourceBindingDescByName :: inline (this : *ID3D12ShaderReflection, Name : PSTR, pDesc : *D3D12_SHADER_INPUT_BIND_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetResourceBindingDescByName (this, Name, pDesc);
    }

    GetMovInstructionCount :: inline (this : *ID3D12ShaderReflection) -> u32 #no_context
    {
        return this.vtable.GetMovInstructionCount (this);
    }

    GetMovcInstructionCount :: inline (this : *ID3D12ShaderReflection) -> u32 #no_context
    {
        return this.vtable.GetMovcInstructionCount (this);
    }

    GetConversionInstructionCount :: inline (this : *ID3D12ShaderReflection) -> u32 #no_context
    {
        return this.vtable.GetConversionInstructionCount (this);
    }

    GetBitwiseInstructionCount :: inline (this : *ID3D12ShaderReflection) -> u32 #no_context
    {
        return this.vtable.GetBitwiseInstructionCount (this);
    }

    GetGSInputPrimitive :: inline (this : *ID3D12ShaderReflection) -> D3D_PRIMITIVE #no_context
    {
        return this.vtable.GetGSInputPrimitive (this);
    }

    IsSampleFrequencyShader :: inline (this : *ID3D12ShaderReflection) -> BOOL #no_context
    {
        return this.vtable.IsSampleFrequencyShader (this);
    }

    GetNumInterfaceSlots :: inline (this : *ID3D12ShaderReflection) -> u32 #no_context
    {
        return this.vtable.GetNumInterfaceSlots (this);
    }

    GetMinFeatureLevel :: inline (this : *ID3D12ShaderReflection, pLevel : *D3D_FEATURE_LEVEL) -> HRESULT #no_context
    {
        return this.vtable.GetMinFeatureLevel (this, pLevel);
    }

    GetThreadGroupSize :: inline (this : *ID3D12ShaderReflection, pSizeX : *u32, pSizeY : *u32, pSizeZ : *u32) -> u32 #no_context
    {
        return this.vtable.GetThreadGroupSize (this, pSizeX, pSizeY, pSizeZ);
    }

    GetRequiresFlags :: inline (this : *ID3D12ShaderReflection) -> u64 #no_context
    {
        return this.vtable.GetRequiresFlags (this);
    }
}

ID3D12ShaderReflectionConstantBuffer_UUID :: "c59598b4-48b3-4869-b9b1-b1618b14a8b7";
ID3D12ShaderReflectionConstantBuffer :: struct
{
    UUID :: GUID.{0xc59598b4,0x48b3,0x4869,.[0xb9,0xb1,0xb1,0x61,0x8b,0x14,0xa8,0xb7]};

    vtable : *ID3D12ShaderReflectionConstantBufferVTable;

    GetDesc :: inline (this : *ID3D12ShaderReflectionConstantBuffer, pDesc : *D3D12_SHADER_BUFFER_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetDesc (this, pDesc);
    }

    GetVariableByIndex :: inline (this : *ID3D12ShaderReflectionConstantBuffer, Index : u32) -> *ID3D12ShaderReflectionVariable #no_context
    {
        return this.vtable.GetVariableByIndex (this, Index);
    }

    GetVariableByName :: inline (this : *ID3D12ShaderReflectionConstantBuffer, Name : PSTR) -> *ID3D12ShaderReflectionVariable #no_context
    {
        return this.vtable.GetVariableByName (this, Name);
    }
}

ID3D12ShaderReflectionType_UUID :: "e913c351-783d-48ca-a1d1-4f306284ad56";
ID3D12ShaderReflectionType :: struct
{
    UUID :: GUID.{0xe913c351,0x783d,0x48ca,.[0xa1,0xd1,0x4f,0x30,0x62,0x84,0xad,0x56]};

    vtable : *ID3D12ShaderReflectionTypeVTable;

    GetDesc :: inline (this : *ID3D12ShaderReflectionType, pDesc : *D3D12_SHADER_TYPE_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetDesc (this, pDesc);
    }

    GetMemberTypeByIndex :: inline (this : *ID3D12ShaderReflectionType, Index : u32) -> *ID3D12ShaderReflectionType #no_context
    {
        return this.vtable.GetMemberTypeByIndex (this, Index);
    }

    GetMemberTypeByName :: inline (this : *ID3D12ShaderReflectionType, Name : PSTR) -> *ID3D12ShaderReflectionType #no_context
    {
        return this.vtable.GetMemberTypeByName (this, Name);
    }

    GetMemberTypeName :: inline (this : *ID3D12ShaderReflectionType, Index : u32) -> PSTR #no_context
    {
        return this.vtable.GetMemberTypeName (this, Index);
    }

    IsEqual :: inline (this : *ID3D12ShaderReflectionType, pType : *ID3D12ShaderReflectionType) -> HRESULT #no_context
    {
        return this.vtable.IsEqual (this, pType);
    }

    GetSubType :: inline (this : *ID3D12ShaderReflectionType) -> *ID3D12ShaderReflectionType #no_context
    {
        return this.vtable.GetSubType (this);
    }

    GetBaseClass :: inline (this : *ID3D12ShaderReflectionType) -> *ID3D12ShaderReflectionType #no_context
    {
        return this.vtable.GetBaseClass (this);
    }

    GetNumInterfaces :: inline (this : *ID3D12ShaderReflectionType) -> u32 #no_context
    {
        return this.vtable.GetNumInterfaces (this);
    }

    GetInterfaceByIndex :: inline (this : *ID3D12ShaderReflectionType, uIndex : u32) -> *ID3D12ShaderReflectionType #no_context
    {
        return this.vtable.GetInterfaceByIndex (this, uIndex);
    }

    IsOfType :: inline (this : *ID3D12ShaderReflectionType, pType : *ID3D12ShaderReflectionType) -> HRESULT #no_context
    {
        return this.vtable.IsOfType (this, pType);
    }

    ImplementsInterface :: inline (this : *ID3D12ShaderReflectionType, pBase : *ID3D12ShaderReflectionType) -> HRESULT #no_context
    {
        return this.vtable.ImplementsInterface (this, pBase);
    }
}

ID3D12ShaderReflectionVariable_UUID :: "8337a8a6-a216-444a-b2f4-314733a73aea";
ID3D12ShaderReflectionVariable :: struct
{
    UUID :: GUID.{0x8337a8a6,0xa216,0x444a,.[0xb2,0xf4,0x31,0x47,0x33,0xa7,0x3a,0xea]};

    vtable : *ID3D12ShaderReflectionVariableVTable;

    GetDesc :: inline (this : *ID3D12ShaderReflectionVariable, pDesc : *D3D12_SHADER_VARIABLE_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetDesc (this, pDesc);
    }

    GetType :: inline (this : *ID3D12ShaderReflectionVariable) -> *ID3D12ShaderReflectionType #no_context
    {
        return this.vtable.GetType (this);
    }

    GetBuffer :: inline (this : *ID3D12ShaderReflectionVariable) -> *ID3D12ShaderReflectionConstantBuffer #no_context
    {
        return this.vtable.GetBuffer (this);
    }

    GetInterfaceSlot :: inline (this : *ID3D12ShaderReflectionVariable, uArrayIndex : u32) -> u32 #no_context
    {
        return this.vtable.GetInterfaceSlot (this, uArrayIndex);
    }
}

ID3D12SharingContract_UUID :: "0adf7d52-929c-4e61-addb-ffed30de66ef";
ID3D12SharingContract :: struct
{
    UUID :: GUID.{0xadf7d52,0x929c,0x4e61,.[0xad,0xdb,0xff,0xed,0x30,0xde,0x66,0xef]};

    #as using, except (.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D12SharingContractVTable;

    Present :: inline (this : *ID3D12SharingContract, pResource : *ID3D12Resource, Subresource : u32, window : HWND) #no_context
    {
        this.vtable.Present (this, pResource, Subresource, window);
    }

    SharedFenceSignal :: inline (this : *ID3D12SharingContract, pFence : *ID3D12Fence, FenceValue : u64) #no_context
    {
        this.vtable.SharedFenceSignal (this, pFence, FenceValue);
    }

    BeginCapturableWork :: inline (this : *ID3D12SharingContract, guid : *GUID) #no_context
    {
        this.vtable.BeginCapturableWork (this, guid);
    }

    EndCapturableWork :: inline (this : *ID3D12SharingContract, guid : *GUID) #no_context
    {
        this.vtable.EndCapturableWork (this, guid);
    }
}

ID3D12StateObject_UUID :: "47016943-fca8-4594-93ea-af258b55346d";
ID3D12StateObject :: struct
{
    UUID :: GUID.{0x47016943,0xfca8,0x4594,.[0x93,0xea,0xaf,0x25,0x8b,0x55,0x34,0x6d]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Pageable;

    #place base;
    vtable : *ID3D12StateObjectVTable;
}

ID3D12StateObjectProperties_UUID :: "de5fa827-9bf9-4f26-89ff-d7f56fde3860";
ID3D12StateObjectProperties :: struct
{
    UUID :: GUID.{0xde5fa827,0x9bf9,0x4f26,.[0x89,0xff,0xd7,0xf5,0x6f,0xde,0x38,0x60]};

    #as using, except (.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D12StateObjectPropertiesVTable;

    GetShaderIdentifier :: inline (this : *ID3D12StateObjectProperties, pExportName : PWSTR) -> *void #no_context
    {
        return this.vtable.GetShaderIdentifier (this, pExportName);
    }

    GetShaderStackSize :: inline (this : *ID3D12StateObjectProperties, pExportName : PWSTR) -> u64 #no_context
    {
        return this.vtable.GetShaderStackSize (this, pExportName);
    }

    GetPipelineStackSize :: inline (this : *ID3D12StateObjectProperties) -> u64 #no_context
    {
        return this.vtable.GetPipelineStackSize (this);
    }

    SetPipelineStackSize :: inline (this : *ID3D12StateObjectProperties, PipelineStackSizeInBytes : u64) #no_context
    {
        this.vtable.SetPipelineStackSize (this, PipelineStackSizeInBytes);
    }
}

ID3D12SwapChainAssistant_UUID :: "f1df64b6-57fd-49cd-8807-c0eb88b45c8f";
ID3D12SwapChainAssistant :: struct
{
    UUID :: GUID.{0xf1df64b6,0x57fd,0x49cd,.[0x88,0x7,0xc0,0xeb,0x88,0xb4,0x5c,0x8f]};

    #as using, except (.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D12SwapChainAssistantVTable;

    GetLUID :: inline (this : *ID3D12SwapChainAssistant) -> LUID #no_context
    {
        return this.vtable.GetLUID (this);
    }

    GetSwapChainObject :: inline (this : *ID3D12SwapChainAssistant, riid : *GUID, ppv : **void) -> HRESULT #no_context
    {
        return this.vtable.GetSwapChainObject (this, riid, ppv);
    }

    GetCurrentResourceAndCommandQueue :: inline (this : *ID3D12SwapChainAssistant, 
        riidResource : *GUID,
        ppvResource : **void,
        riidQueue : *GUID,
        ppvQueue : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.GetCurrentResourceAndCommandQueue (this, riidResource, ppvResource, riidQueue, ppvQueue);
    }

    InsertImplicitSync :: inline (this : *ID3D12SwapChainAssistant) -> HRESULT #no_context
    {
        return this.vtable.InsertImplicitSync (this);
    }
}

ID3D12Tools_UUID :: "7071e1f0-e84b-4b33-974f-12fa49de65c5";
ID3D12Tools :: struct
{
    UUID :: GUID.{0x7071e1f0,0xe84b,0x4b33,.[0x97,0x4f,0x12,0xfa,0x49,0xde,0x65,0xc5]};

    #as using, except (.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D12ToolsVTable;

    EnableShaderInstrumentation :: inline (this : *ID3D12Tools, bEnable : BOOL) #no_context
    {
        this.vtable.EnableShaderInstrumentation (this, bEnable);
    }

    ShaderInstrumentationEnabled :: inline (this : *ID3D12Tools) -> BOOL #no_context
    {
        return this.vtable.ShaderInstrumentationEnabled (this);
    }
}

ID3D12VersionedRootSignatureDeserializer_UUID :: "7f91ce67-090c-4bb7-b78e-ed8ff2e31da0";
ID3D12VersionedRootSignatureDeserializer :: struct
{
    UUID :: GUID.{0x7f91ce67,0x90c,0x4bb7,.[0xb7,0x8e,0xed,0x8f,0xf2,0xe3,0x1d,0xa0]};

    #as using, except (.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D12VersionedRootSignatureDeserializerVTable;

    GetRootSignatureDescAtVersion :: inline (this : *ID3D12VersionedRootSignatureDeserializer, convertToVersion : D3D_ROOT_SIGNATURE_VERSION, ppDesc : **D3D12_VERSIONED_ROOT_SIGNATURE_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetRootSignatureDescAtVersion (this, convertToVersion, ppDesc);
    }

    GetUnconvertedRootSignatureDesc :: inline (this : *ID3D12VersionedRootSignatureDeserializer) -> *D3D12_VERSIONED_ROOT_SIGNATURE_DESC #no_context
    {
        return this.vtable.GetUnconvertedRootSignatureDesc (this);
    }
}

ID3D12VideoDecodeCommandList_UUID :: "3b60536e-ad29-4e64-a269-f853837e5e53";
ID3D12VideoDecodeCommandList :: struct
{
    UUID :: GUID.{0x3b60536e,0xad29,0x4e64,.[0xa2,0x69,0xf8,0x53,0x83,0x7e,0x5e,0x53]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12CommandList;

    #place base;
    vtable : *ID3D12VideoDecodeCommandListVTable;

    Close :: inline (this : *ID3D12VideoDecodeCommandList) -> HRESULT #no_context
    {
        return this.vtable.Close (this);
    }

    Reset :: inline (this : *ID3D12VideoDecodeCommandList, pAllocator : *ID3D12CommandAllocator) -> HRESULT #no_context
    {
        return this.vtable.Reset (this, pAllocator);
    }

    ClearState :: inline (this : *ID3D12VideoDecodeCommandList) #no_context
    {
        this.vtable.ClearState (this);
    }

    ResourceBarrier :: inline (this : *ID3D12VideoDecodeCommandList, NumBarriers : u32, pBarriers : *D3D12_RESOURCE_BARRIER) #no_context
    {
        this.vtable.ResourceBarrier (this, NumBarriers, pBarriers);
    }

    DiscardResource :: inline (this : *ID3D12VideoDecodeCommandList, pResource : *ID3D12Resource, pRegion : *D3D12_DISCARD_REGION) #no_context
    {
        this.vtable.DiscardResource (this, pResource, pRegion);
    }

    BeginQuery :: inline (this : *ID3D12VideoDecodeCommandList, pQueryHeap : *ID3D12QueryHeap, _Type : D3D12_QUERY_TYPE, Index : u32) #no_context
    {
        this.vtable.BeginQuery (this, pQueryHeap, _Type, Index);
    }

    EndQuery :: inline (this : *ID3D12VideoDecodeCommandList, pQueryHeap : *ID3D12QueryHeap, _Type : D3D12_QUERY_TYPE, Index : u32) #no_context
    {
        this.vtable.EndQuery (this, pQueryHeap, _Type, Index);
    }

    ResolveQueryData :: inline (this : *ID3D12VideoDecodeCommandList, 
        pQueryHeap : *ID3D12QueryHeap,
        _Type : D3D12_QUERY_TYPE,
        StartIndex : u32,
        NumQueries : u32,
        pDestinationBuffer : *ID3D12Resource,
        AlignedDestinationBufferOffset : u64
    ) #no_context
    {
        this.vtable.ResolveQueryData (this, pQueryHeap, _Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
    }

    SetPredication :: inline (this : *ID3D12VideoDecodeCommandList, pBuffer : *ID3D12Resource, AlignedBufferOffset : u64, Operation : D3D12_PREDICATION_OP) #no_context
    {
        this.vtable.SetPredication (this, pBuffer, AlignedBufferOffset, Operation);
    }

    SetMarker :: inline (this : *ID3D12VideoDecodeCommandList, Metadata : u32, pData : *void, Size : u32) #no_context
    {
        this.vtable.SetMarker (this, Metadata, pData, Size);
    }

    BeginEvent :: inline (this : *ID3D12VideoDecodeCommandList, Metadata : u32, pData : *void, Size : u32) #no_context
    {
        this.vtable.BeginEvent (this, Metadata, pData, Size);
    }

    EndEvent :: inline (this : *ID3D12VideoDecodeCommandList) #no_context
    {
        this.vtable.EndEvent (this);
    }

    DecodeFrame :: inline (this : *ID3D12VideoDecodeCommandList, pDecoder : *ID3D12VideoDecoder, pOutputArguments : *D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS, pInputArguments : *D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS) #no_context
    {
        this.vtable.DecodeFrame (this, pDecoder, pOutputArguments, pInputArguments);
    }

    WriteBufferImmediate :: inline (this : *ID3D12VideoDecodeCommandList, Count : u32, pParams : *D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pModes : *D3D12_WRITEBUFFERIMMEDIATE_MODE) #no_context
    {
        this.vtable.WriteBufferImmediate (this, Count, pParams, pModes);
    }
}

ID3D12VideoDecodeCommandList1_UUID :: "d52f011b-b56e-453c-a05a-a7f311c8f472";
ID3D12VideoDecodeCommandList1 :: struct
{
    UUID :: GUID.{0xd52f011b,0xb56e,0x453c,.[0xa0,0x5a,0xa7,0xf3,0x11,0xc8,0xf4,0x72]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12VideoDecodeCommandList;

    #place base;
    vtable : *ID3D12VideoDecodeCommandList1VTable;

    DecodeFrame1 :: inline (this : *ID3D12VideoDecodeCommandList1, pDecoder : *ID3D12VideoDecoder, pOutputArguments : *D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1, pInputArguments : *D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS) #no_context
    {
        this.vtable.DecodeFrame1 (this, pDecoder, pOutputArguments, pInputArguments);
    }
}

ID3D12VideoDecodeCommandList2_UUID :: "6e120880-c114-4153-8036-d247051e1729";
ID3D12VideoDecodeCommandList2 :: struct
{
    UUID :: GUID.{0x6e120880,0xc114,0x4153,.[0x80,0x36,0xd2,0x47,0x5,0x1e,0x17,0x29]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12VideoDecodeCommandList1;

    #place base;
    vtable : *ID3D12VideoDecodeCommandList2VTable;

    SetProtectedResourceSession :: inline (this : *ID3D12VideoDecodeCommandList2, pProtectedResourceSession : *ID3D12ProtectedResourceSession) #no_context
    {
        this.vtable.SetProtectedResourceSession (this, pProtectedResourceSession);
    }

    InitializeExtensionCommand :: inline (this : *ID3D12VideoDecodeCommandList2, pExtensionCommand : *ID3D12VideoExtensionCommand, pInitializationParameters : *void, InitializationParametersSizeInBytes : u64) #no_context
    {
        this.vtable.InitializeExtensionCommand (this, pExtensionCommand, pInitializationParameters, InitializationParametersSizeInBytes);
    }

    ExecuteExtensionCommand :: inline (this : *ID3D12VideoDecodeCommandList2, pExtensionCommand : *ID3D12VideoExtensionCommand, pExecutionParameters : *void, ExecutionParametersSizeInBytes : u64) #no_context
    {
        this.vtable.ExecuteExtensionCommand (this, pExtensionCommand, pExecutionParameters, ExecutionParametersSizeInBytes);
    }
}

ID3D12VideoDecoder_UUID :: "c59b6bdc-7720-4074-a136-17a156037470";
ID3D12VideoDecoder :: struct
{
    UUID :: GUID.{0xc59b6bdc,0x7720,0x4074,.[0xa1,0x36,0x17,0xa1,0x56,0x3,0x74,0x70]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Pageable;

    #place base;
    vtable : *ID3D12VideoDecoderVTable;

    GetDesc :: inline (this : *ID3D12VideoDecoder) -> D3D12_VIDEO_DECODER_DESC #no_context
    {
        return this.vtable.GetDesc (this);
    }
}

ID3D12VideoDecoder1_UUID :: "79a2e5fb-ccd2-469a-9fde-195d10951f7e";
ID3D12VideoDecoder1 :: struct
{
    UUID :: GUID.{0x79a2e5fb,0xccd2,0x469a,.[0x9f,0xde,0x19,0x5d,0x10,0x95,0x1f,0x7e]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12VideoDecoder;

    #place base;
    vtable : *ID3D12VideoDecoder1VTable;

    GetProtectedResourceSession :: inline (this : *ID3D12VideoDecoder1, riid : *GUID, ppProtectedSession : **void) -> HRESULT #no_context
    {
        return this.vtable.GetProtectedResourceSession (this, riid, ppProtectedSession);
    }
}

ID3D12VideoDecoderHeap_UUID :: "0946b7c9-ebf6-4047-bb73-8683e27dbb1f";
ID3D12VideoDecoderHeap :: struct
{
    UUID :: GUID.{0x946b7c9,0xebf6,0x4047,.[0xbb,0x73,0x86,0x83,0xe2,0x7d,0xbb,0x1f]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Pageable;

    #place base;
    vtable : *ID3D12VideoDecoderHeapVTable;

    GetDesc :: inline (this : *ID3D12VideoDecoderHeap) -> D3D12_VIDEO_DECODER_HEAP_DESC #no_context
    {
        return this.vtable.GetDesc (this);
    }
}

ID3D12VideoDecoderHeap1_UUID :: "da1d98c5-539f-41b2-bf6b-1198a03b6d26";
ID3D12VideoDecoderHeap1 :: struct
{
    UUID :: GUID.{0xda1d98c5,0x539f,0x41b2,.[0xbf,0x6b,0x11,0x98,0xa0,0x3b,0x6d,0x26]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12VideoDecoderHeap;

    #place base;
    vtable : *ID3D12VideoDecoderHeap1VTable;

    GetProtectedResourceSession :: inline (this : *ID3D12VideoDecoderHeap1, riid : *GUID, ppProtectedSession : **void) -> HRESULT #no_context
    {
        return this.vtable.GetProtectedResourceSession (this, riid, ppProtectedSession);
    }
}

ID3D12VideoDevice_UUID :: "1f052807-0b46-4acc-8a89-364f793718a4";
ID3D12VideoDevice :: struct
{
    UUID :: GUID.{0x1f052807,0xb46,0x4acc,.[0x8a,0x89,0x36,0x4f,0x79,0x37,0x18,0xa4]};

    #as using, except (.["vtable", "base", "UUID"]) base : IUnknown;

    #place base;
    vtable : *ID3D12VideoDeviceVTable;

    CheckFeatureSupport :: inline (this : *ID3D12VideoDevice, FeatureVideo : D3D12_FEATURE_VIDEO, pFeatureSupportData : *void, FeatureSupportDataSize : u32) -> HRESULT #no_context
    {
        return this.vtable.CheckFeatureSupport (this, FeatureVideo, pFeatureSupportData, FeatureSupportDataSize);
    }

    CreateVideoDecoder :: inline (this : *ID3D12VideoDevice, pDesc : *D3D12_VIDEO_DECODER_DESC, riid : *GUID, ppVideoDecoder : **void) -> HRESULT #no_context
    {
        return this.vtable.CreateVideoDecoder (this, pDesc, riid, ppVideoDecoder);
    }

    CreateVideoDecoderHeap :: inline (this : *ID3D12VideoDevice, pVideoDecoderHeapDesc : *D3D12_VIDEO_DECODER_HEAP_DESC, riid : *GUID, ppVideoDecoderHeap : **void) -> HRESULT #no_context
    {
        return this.vtable.CreateVideoDecoderHeap (this, pVideoDecoderHeapDesc, riid, ppVideoDecoderHeap);
    }

    CreateVideoProcessor :: inline (this : *ID3D12VideoDevice, 
        NodeMask : u32,
        pOutputStreamDesc : *D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC,
        NumInputStreamDescs : u32,
        pInputStreamDescs : *D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC,
        riid : *GUID,
        ppVideoProcessor : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateVideoProcessor (this, NodeMask, pOutputStreamDesc, NumInputStreamDescs, pInputStreamDescs, riid, ppVideoProcessor);
    }
}

ID3D12VideoDevice1_UUID :: "981611ad-a144-4c83-9890-f30e26d658ab";
ID3D12VideoDevice1 :: struct
{
    UUID :: GUID.{0x981611ad,0xa144,0x4c83,.[0x98,0x90,0xf3,0xe,0x26,0xd6,0x58,0xab]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12VideoDevice;

    #place base;
    vtable : *ID3D12VideoDevice1VTable;

    CreateVideoMotionEstimator :: inline (this : *ID3D12VideoDevice1, 
        pDesc : *D3D12_VIDEO_MOTION_ESTIMATOR_DESC,
        pProtectedResourceSession : *ID3D12ProtectedResourceSession,
        riid : *GUID,
        ppVideoMotionEstimator : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateVideoMotionEstimator (this, pDesc, pProtectedResourceSession, riid, ppVideoMotionEstimator);
    }

    CreateVideoMotionVectorHeap :: inline (this : *ID3D12VideoDevice1, 
        pDesc : *D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC,
        pProtectedResourceSession : *ID3D12ProtectedResourceSession,
        riid : *GUID,
        ppVideoMotionVectorHeap : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateVideoMotionVectorHeap (this, pDesc, pProtectedResourceSession, riid, ppVideoMotionVectorHeap);
    }
}

ID3D12VideoDevice2_UUID :: "f019ac49-f838-4a95-9b17-579437c8f513";
ID3D12VideoDevice2 :: struct
{
    UUID :: GUID.{0xf019ac49,0xf838,0x4a95,.[0x9b,0x17,0x57,0x94,0x37,0xc8,0xf5,0x13]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12VideoDevice1;

    #place base;
    vtable : *ID3D12VideoDevice2VTable;

    CreateVideoDecoder1 :: inline (this : *ID3D12VideoDevice2, 
        pDesc : *D3D12_VIDEO_DECODER_DESC,
        pProtectedResourceSession : *ID3D12ProtectedResourceSession,
        riid : *GUID,
        ppVideoDecoder : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateVideoDecoder1 (this, pDesc, pProtectedResourceSession, riid, ppVideoDecoder);
    }

    CreateVideoDecoderHeap1 :: inline (this : *ID3D12VideoDevice2, 
        pVideoDecoderHeapDesc : *D3D12_VIDEO_DECODER_HEAP_DESC,
        pProtectedResourceSession : *ID3D12ProtectedResourceSession,
        riid : *GUID,
        ppVideoDecoderHeap : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateVideoDecoderHeap1 (this, pVideoDecoderHeapDesc, pProtectedResourceSession, riid, ppVideoDecoderHeap);
    }

    CreateVideoProcessor1 :: inline (this : *ID3D12VideoDevice2, 
        NodeMask : u32,
        pOutputStreamDesc : *D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC,
        NumInputStreamDescs : u32,
        pInputStreamDescs : *D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC,
        pProtectedResourceSession : *ID3D12ProtectedResourceSession,
        riid : *GUID,
        ppVideoProcessor : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateVideoProcessor1 (this, NodeMask, pOutputStreamDesc, NumInputStreamDescs, pInputStreamDescs, pProtectedResourceSession, riid, ppVideoProcessor);
    }

    CreateVideoExtensionCommand :: inline (this : *ID3D12VideoDevice2, 
        pDesc : *D3D12_VIDEO_EXTENSION_COMMAND_DESC,
        pCreationParameters : *void,
        CreationParametersDataSizeInBytes : u64,
        pProtectedResourceSession : *ID3D12ProtectedResourceSession,
        riid : *GUID,
        ppVideoExtensionCommand : **void
    ) -> HRESULT #no_context
    {
        return this.vtable.CreateVideoExtensionCommand (this, pDesc, pCreationParameters, CreationParametersDataSizeInBytes, pProtectedResourceSession, riid, ppVideoExtensionCommand);
    }

    ExecuteExtensionCommand :: inline (this : *ID3D12VideoDevice2, 
        pExtensionCommand : *ID3D12VideoExtensionCommand,
        pExecutionParameters : *void,
        ExecutionParametersSizeInBytes : u64,
        pOutputData : *void,
        OutputDataSizeInBytes : u64
    ) -> HRESULT #no_context
    {
        return this.vtable.ExecuteExtensionCommand (this, pExtensionCommand, pExecutionParameters, ExecutionParametersSizeInBytes, pOutputData, OutputDataSizeInBytes);
    }
}

ID3D12VideoDevice3_UUID :: "4243adb4-3a32-4666-973c-0ccc5625dc44";
ID3D12VideoDevice3 :: struct
{
    UUID :: GUID.{0x4243adb4,0x3a32,0x4666,.[0x97,0x3c,0xc,0xcc,0x56,0x25,0xdc,0x44]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12VideoDevice2;

    #place base;
    vtable : *ID3D12VideoDevice3VTable;

    CreateVideoEncoder :: inline (this : *ID3D12VideoDevice3, pDesc : *D3D12_VIDEO_ENCODER_DESC, riid : *GUID, ppVideoEncoder : **void) -> HRESULT #no_context
    {
        return this.vtable.CreateVideoEncoder (this, pDesc, riid, ppVideoEncoder);
    }

    CreateVideoEncoderHeap :: inline (this : *ID3D12VideoDevice3, pDesc : *D3D12_VIDEO_ENCODER_HEAP_DESC, riid : *GUID, ppVideoEncoderHeap : **void) -> HRESULT #no_context
    {
        return this.vtable.CreateVideoEncoderHeap (this, pDesc, riid, ppVideoEncoderHeap);
    }
}

ID3D12VideoEncodeCommandList_UUID :: "8455293a-0cbd-4831-9b39-fbdbab724723";
ID3D12VideoEncodeCommandList :: struct
{
    UUID :: GUID.{0x8455293a,0xcbd,0x4831,.[0x9b,0x39,0xfb,0xdb,0xab,0x72,0x47,0x23]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12CommandList;

    #place base;
    vtable : *ID3D12VideoEncodeCommandListVTable;

    Close :: inline (this : *ID3D12VideoEncodeCommandList) -> HRESULT #no_context
    {
        return this.vtable.Close (this);
    }

    Reset :: inline (this : *ID3D12VideoEncodeCommandList, pAllocator : *ID3D12CommandAllocator) -> HRESULT #no_context
    {
        return this.vtable.Reset (this, pAllocator);
    }

    ClearState :: inline (this : *ID3D12VideoEncodeCommandList) #no_context
    {
        this.vtable.ClearState (this);
    }

    ResourceBarrier :: inline (this : *ID3D12VideoEncodeCommandList, NumBarriers : u32, pBarriers : *D3D12_RESOURCE_BARRIER) #no_context
    {
        this.vtable.ResourceBarrier (this, NumBarriers, pBarriers);
    }

    DiscardResource :: inline (this : *ID3D12VideoEncodeCommandList, pResource : *ID3D12Resource, pRegion : *D3D12_DISCARD_REGION) #no_context
    {
        this.vtable.DiscardResource (this, pResource, pRegion);
    }

    BeginQuery :: inline (this : *ID3D12VideoEncodeCommandList, pQueryHeap : *ID3D12QueryHeap, _Type : D3D12_QUERY_TYPE, Index : u32) #no_context
    {
        this.vtable.BeginQuery (this, pQueryHeap, _Type, Index);
    }

    EndQuery :: inline (this : *ID3D12VideoEncodeCommandList, pQueryHeap : *ID3D12QueryHeap, _Type : D3D12_QUERY_TYPE, Index : u32) #no_context
    {
        this.vtable.EndQuery (this, pQueryHeap, _Type, Index);
    }

    ResolveQueryData :: inline (this : *ID3D12VideoEncodeCommandList, 
        pQueryHeap : *ID3D12QueryHeap,
        _Type : D3D12_QUERY_TYPE,
        StartIndex : u32,
        NumQueries : u32,
        pDestinationBuffer : *ID3D12Resource,
        AlignedDestinationBufferOffset : u64
    ) #no_context
    {
        this.vtable.ResolveQueryData (this, pQueryHeap, _Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
    }

    SetPredication :: inline (this : *ID3D12VideoEncodeCommandList, pBuffer : *ID3D12Resource, AlignedBufferOffset : u64, Operation : D3D12_PREDICATION_OP) #no_context
    {
        this.vtable.SetPredication (this, pBuffer, AlignedBufferOffset, Operation);
    }

    SetMarker :: inline (this : *ID3D12VideoEncodeCommandList, Metadata : u32, pData : *void, Size : u32) #no_context
    {
        this.vtable.SetMarker (this, Metadata, pData, Size);
    }

    BeginEvent :: inline (this : *ID3D12VideoEncodeCommandList, Metadata : u32, pData : *void, Size : u32) #no_context
    {
        this.vtable.BeginEvent (this, Metadata, pData, Size);
    }

    EndEvent :: inline (this : *ID3D12VideoEncodeCommandList) #no_context
    {
        this.vtable.EndEvent (this);
    }

    EstimateMotion :: inline (this : *ID3D12VideoEncodeCommandList, pMotionEstimator : *ID3D12VideoMotionEstimator, pOutputArguments : *D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT, pInputArguments : *D3D12_VIDEO_MOTION_ESTIMATOR_INPUT) #no_context
    {
        this.vtable.EstimateMotion (this, pMotionEstimator, pOutputArguments, pInputArguments);
    }

    ResolveMotionVectorHeap :: inline (this : *ID3D12VideoEncodeCommandList, pOutputArguments : *D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT, pInputArguments : *D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT) #no_context
    {
        this.vtable.ResolveMotionVectorHeap (this, pOutputArguments, pInputArguments);
    }

    WriteBufferImmediate :: inline (this : *ID3D12VideoEncodeCommandList, Count : u32, pParams : *D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pModes : *D3D12_WRITEBUFFERIMMEDIATE_MODE) #no_context
    {
        this.vtable.WriteBufferImmediate (this, Count, pParams, pModes);
    }

    SetProtectedResourceSession :: inline (this : *ID3D12VideoEncodeCommandList, pProtectedResourceSession : *ID3D12ProtectedResourceSession) #no_context
    {
        this.vtable.SetProtectedResourceSession (this, pProtectedResourceSession);
    }
}

ID3D12VideoEncodeCommandList1_UUID :: "94971eca-2bdb-4769-88cf-3675ea757ebc";
ID3D12VideoEncodeCommandList1 :: struct
{
    UUID :: GUID.{0x94971eca,0x2bdb,0x4769,.[0x88,0xcf,0x36,0x75,0xea,0x75,0x7e,0xbc]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12VideoEncodeCommandList;

    #place base;
    vtable : *ID3D12VideoEncodeCommandList1VTable;

    InitializeExtensionCommand :: inline (this : *ID3D12VideoEncodeCommandList1, pExtensionCommand : *ID3D12VideoExtensionCommand, pInitializationParameters : *void, InitializationParametersSizeInBytes : u64) #no_context
    {
        this.vtable.InitializeExtensionCommand (this, pExtensionCommand, pInitializationParameters, InitializationParametersSizeInBytes);
    }

    ExecuteExtensionCommand :: inline (this : *ID3D12VideoEncodeCommandList1, pExtensionCommand : *ID3D12VideoExtensionCommand, pExecutionParameters : *void, ExecutionParametersSizeInBytes : u64) #no_context
    {
        this.vtable.ExecuteExtensionCommand (this, pExtensionCommand, pExecutionParameters, ExecutionParametersSizeInBytes);
    }
}

ID3D12VideoEncodeCommandList2_UUID :: "895491e2-e701-46a9-9a1f-8d3480ed867a";
ID3D12VideoEncodeCommandList2 :: struct
{
    UUID :: GUID.{0x895491e2,0xe701,0x46a9,.[0x9a,0x1f,0x8d,0x34,0x80,0xed,0x86,0x7a]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12VideoEncodeCommandList1;

    #place base;
    vtable : *ID3D12VideoEncodeCommandList2VTable;

    EncodeFrame :: inline (this : *ID3D12VideoEncodeCommandList2, 
        pEncoder : *ID3D12VideoEncoder,
        pHeap : *ID3D12VideoEncoderHeap,
        pInputArguments : *D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS,
        pOutputArguments : *D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS
    ) #no_context
    {
        this.vtable.EncodeFrame (this, pEncoder, pHeap, pInputArguments, pOutputArguments);
    }

    ResolveEncoderOutputMetadata :: inline (this : *ID3D12VideoEncodeCommandList2, pInputArguments : *D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS, pOutputArguments : *D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS) #no_context
    {
        this.vtable.ResolveEncoderOutputMetadata (this, pInputArguments, pOutputArguments);
    }
}

ID3D12VideoEncoder_UUID :: "2e0d212d-8df9-44a6-a770-bb289b182737";
ID3D12VideoEncoder :: struct
{
    UUID :: GUID.{0x2e0d212d,0x8df9,0x44a6,.[0xa7,0x70,0xbb,0x28,0x9b,0x18,0x27,0x37]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Pageable;

    #place base;
    vtable : *ID3D12VideoEncoderVTable;

    GetNodeMask :: inline (this : *ID3D12VideoEncoder) -> u32 #no_context
    {
        return this.vtable.GetNodeMask (this);
    }

    GetEncoderFlags :: inline (this : *ID3D12VideoEncoder) -> D3D12_VIDEO_ENCODER_FLAGS #no_context
    {
        return this.vtable.GetEncoderFlags (this);
    }

    GetCodec :: inline (this : *ID3D12VideoEncoder) -> D3D12_VIDEO_ENCODER_CODEC #no_context
    {
        return this.vtable.GetCodec (this);
    }

    GetCodecProfile :: inline (this : *ID3D12VideoEncoder, dstProfile : D3D12_VIDEO_ENCODER_PROFILE_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetCodecProfile (this, dstProfile);
    }

    GetCodecConfiguration :: inline (this : *ID3D12VideoEncoder, dstCodecConfig : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION) -> HRESULT #no_context
    {
        return this.vtable.GetCodecConfiguration (this, dstCodecConfig);
    }

    GetInputFormat :: inline (this : *ID3D12VideoEncoder) -> DXGI_FORMAT #no_context
    {
        return this.vtable.GetInputFormat (this);
    }

    GetMaxMotionEstimationPrecision :: inline (this : *ID3D12VideoEncoder) -> D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE #no_context
    {
        return this.vtable.GetMaxMotionEstimationPrecision (this);
    }
}

ID3D12VideoEncoderHeap_UUID :: "22b35d96-876a-44c0-b25e-fb8c9c7f1c4a";
ID3D12VideoEncoderHeap :: struct
{
    UUID :: GUID.{0x22b35d96,0x876a,0x44c0,.[0xb2,0x5e,0xfb,0x8c,0x9c,0x7f,0x1c,0x4a]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Pageable;

    #place base;
    vtable : *ID3D12VideoEncoderHeapVTable;

    GetNodeMask :: inline (this : *ID3D12VideoEncoderHeap) -> u32 #no_context
    {
        return this.vtable.GetNodeMask (this);
    }

    GetEncoderHeapFlags :: inline (this : *ID3D12VideoEncoderHeap) -> D3D12_VIDEO_ENCODER_HEAP_FLAGS #no_context
    {
        return this.vtable.GetEncoderHeapFlags (this);
    }

    GetCodec :: inline (this : *ID3D12VideoEncoderHeap) -> D3D12_VIDEO_ENCODER_CODEC #no_context
    {
        return this.vtable.GetCodec (this);
    }

    GetCodecProfile :: inline (this : *ID3D12VideoEncoderHeap, dstProfile : D3D12_VIDEO_ENCODER_PROFILE_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetCodecProfile (this, dstProfile);
    }

    GetCodecLevel :: inline (this : *ID3D12VideoEncoderHeap, dstLevel : D3D12_VIDEO_ENCODER_LEVEL_SETTING) -> HRESULT #no_context
    {
        return this.vtable.GetCodecLevel (this, dstLevel);
    }

    GetResolutionListCount :: inline (this : *ID3D12VideoEncoderHeap) -> u32 #no_context
    {
        return this.vtable.GetResolutionListCount (this);
    }

    GetResolutionList :: inline (this : *ID3D12VideoEncoderHeap, ResolutionsListCount : u32, pResolutionList : *D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetResolutionList (this, ResolutionsListCount, pResolutionList);
    }
}

ID3D12VideoExtensionCommand_UUID :: "554e41e8-ae8e-4a8c-b7d2-5b4f274a30e4";
ID3D12VideoExtensionCommand :: struct
{
    UUID :: GUID.{0x554e41e8,0xae8e,0x4a8c,.[0xb7,0xd2,0x5b,0x4f,0x27,0x4a,0x30,0xe4]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Pageable;

    #place base;
    vtable : *ID3D12VideoExtensionCommandVTable;

    GetDesc :: inline (this : *ID3D12VideoExtensionCommand) -> D3D12_VIDEO_EXTENSION_COMMAND_DESC #no_context
    {
        return this.vtable.GetDesc (this);
    }

    GetProtectedResourceSession :: inline (this : *ID3D12VideoExtensionCommand, riid : *GUID, ppProtectedSession : **void) -> HRESULT #no_context
    {
        return this.vtable.GetProtectedResourceSession (this, riid, ppProtectedSession);
    }
}

ID3D12VideoMotionEstimator_UUID :: "33fdae0e-098b-428f-87bb-34b695de08f8";
ID3D12VideoMotionEstimator :: struct
{
    UUID :: GUID.{0x33fdae0e,0x98b,0x428f,.[0x87,0xbb,0x34,0xb6,0x95,0xde,0x8,0xf8]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Pageable;

    #place base;
    vtable : *ID3D12VideoMotionEstimatorVTable;

    GetDesc :: inline (this : *ID3D12VideoMotionEstimator) -> D3D12_VIDEO_MOTION_ESTIMATOR_DESC #no_context
    {
        return this.vtable.GetDesc (this);
    }

    GetProtectedResourceSession :: inline (this : *ID3D12VideoMotionEstimator, riid : *GUID, ppProtectedSession : **void) -> HRESULT #no_context
    {
        return this.vtable.GetProtectedResourceSession (this, riid, ppProtectedSession);
    }
}

ID3D12VideoMotionVectorHeap_UUID :: "5be17987-743a-4061-834b-23d22daea505";
ID3D12VideoMotionVectorHeap :: struct
{
    UUID :: GUID.{0x5be17987,0x743a,0x4061,.[0x83,0x4b,0x23,0xd2,0x2d,0xae,0xa5,0x5]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Pageable;

    #place base;
    vtable : *ID3D12VideoMotionVectorHeapVTable;

    GetDesc :: inline (this : *ID3D12VideoMotionVectorHeap) -> D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC #no_context
    {
        return this.vtable.GetDesc (this);
    }

    GetProtectedResourceSession :: inline (this : *ID3D12VideoMotionVectorHeap, riid : *GUID, ppProtectedSession : **void) -> HRESULT #no_context
    {
        return this.vtable.GetProtectedResourceSession (this, riid, ppProtectedSession);
    }
}

ID3D12VideoProcessCommandList_UUID :: "aeb2543a-167f-4682-acc8-d159ed4a6209";
ID3D12VideoProcessCommandList :: struct
{
    UUID :: GUID.{0xaeb2543a,0x167f,0x4682,.[0xac,0xc8,0xd1,0x59,0xed,0x4a,0x62,0x9]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12CommandList;

    #place base;
    vtable : *ID3D12VideoProcessCommandListVTable;

    Close :: inline (this : *ID3D12VideoProcessCommandList) -> HRESULT #no_context
    {
        return this.vtable.Close (this);
    }

    Reset :: inline (this : *ID3D12VideoProcessCommandList, pAllocator : *ID3D12CommandAllocator) -> HRESULT #no_context
    {
        return this.vtable.Reset (this, pAllocator);
    }

    ClearState :: inline (this : *ID3D12VideoProcessCommandList) #no_context
    {
        this.vtable.ClearState (this);
    }

    ResourceBarrier :: inline (this : *ID3D12VideoProcessCommandList, NumBarriers : u32, pBarriers : *D3D12_RESOURCE_BARRIER) #no_context
    {
        this.vtable.ResourceBarrier (this, NumBarriers, pBarriers);
    }

    DiscardResource :: inline (this : *ID3D12VideoProcessCommandList, pResource : *ID3D12Resource, pRegion : *D3D12_DISCARD_REGION) #no_context
    {
        this.vtable.DiscardResource (this, pResource, pRegion);
    }

    BeginQuery :: inline (this : *ID3D12VideoProcessCommandList, pQueryHeap : *ID3D12QueryHeap, _Type : D3D12_QUERY_TYPE, Index : u32) #no_context
    {
        this.vtable.BeginQuery (this, pQueryHeap, _Type, Index);
    }

    EndQuery :: inline (this : *ID3D12VideoProcessCommandList, pQueryHeap : *ID3D12QueryHeap, _Type : D3D12_QUERY_TYPE, Index : u32) #no_context
    {
        this.vtable.EndQuery (this, pQueryHeap, _Type, Index);
    }

    ResolveQueryData :: inline (this : *ID3D12VideoProcessCommandList, 
        pQueryHeap : *ID3D12QueryHeap,
        _Type : D3D12_QUERY_TYPE,
        StartIndex : u32,
        NumQueries : u32,
        pDestinationBuffer : *ID3D12Resource,
        AlignedDestinationBufferOffset : u64
    ) #no_context
    {
        this.vtable.ResolveQueryData (this, pQueryHeap, _Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
    }

    SetPredication :: inline (this : *ID3D12VideoProcessCommandList, pBuffer : *ID3D12Resource, AlignedBufferOffset : u64, Operation : D3D12_PREDICATION_OP) #no_context
    {
        this.vtable.SetPredication (this, pBuffer, AlignedBufferOffset, Operation);
    }

    SetMarker :: inline (this : *ID3D12VideoProcessCommandList, Metadata : u32, pData : *void, Size : u32) #no_context
    {
        this.vtable.SetMarker (this, Metadata, pData, Size);
    }

    BeginEvent :: inline (this : *ID3D12VideoProcessCommandList, Metadata : u32, pData : *void, Size : u32) #no_context
    {
        this.vtable.BeginEvent (this, Metadata, pData, Size);
    }

    EndEvent :: inline (this : *ID3D12VideoProcessCommandList) #no_context
    {
        this.vtable.EndEvent (this);
    }

    ProcessFrames :: inline (this : *ID3D12VideoProcessCommandList, 
        pVideoProcessor : *ID3D12VideoProcessor,
        pOutputArguments : *D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS,
        NumInputStreams : u32,
        pInputArguments : *D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS
    ) #no_context
    {
        this.vtable.ProcessFrames (this, pVideoProcessor, pOutputArguments, NumInputStreams, pInputArguments);
    }

    WriteBufferImmediate :: inline (this : *ID3D12VideoProcessCommandList, Count : u32, pParams : *D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pModes : *D3D12_WRITEBUFFERIMMEDIATE_MODE) #no_context
    {
        this.vtable.WriteBufferImmediate (this, Count, pParams, pModes);
    }
}

ID3D12VideoProcessCommandList1_UUID :: "542c5c4d-7596-434f-8c93-4efa6766f267";
ID3D12VideoProcessCommandList1 :: struct
{
    UUID :: GUID.{0x542c5c4d,0x7596,0x434f,.[0x8c,0x93,0x4e,0xfa,0x67,0x66,0xf2,0x67]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12VideoProcessCommandList;

    #place base;
    vtable : *ID3D12VideoProcessCommandList1VTable;

    ProcessFrames1 :: inline (this : *ID3D12VideoProcessCommandList1, 
        pVideoProcessor : *ID3D12VideoProcessor,
        pOutputArguments : *D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS,
        NumInputStreams : u32,
        pInputArguments : *D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1
    ) #no_context
    {
        this.vtable.ProcessFrames1 (this, pVideoProcessor, pOutputArguments, NumInputStreams, pInputArguments);
    }
}

ID3D12VideoProcessCommandList2_UUID :: "db525ae4-6ad6-473c-baa7-59b2e37082e4";
ID3D12VideoProcessCommandList2 :: struct
{
    UUID :: GUID.{0xdb525ae4,0x6ad6,0x473c,.[0xba,0xa7,0x59,0xb2,0xe3,0x70,0x82,0xe4]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12VideoProcessCommandList1;

    #place base;
    vtable : *ID3D12VideoProcessCommandList2VTable;

    SetProtectedResourceSession :: inline (this : *ID3D12VideoProcessCommandList2, pProtectedResourceSession : *ID3D12ProtectedResourceSession) #no_context
    {
        this.vtable.SetProtectedResourceSession (this, pProtectedResourceSession);
    }

    InitializeExtensionCommand :: inline (this : *ID3D12VideoProcessCommandList2, pExtensionCommand : *ID3D12VideoExtensionCommand, pInitializationParameters : *void, InitializationParametersSizeInBytes : u64) #no_context
    {
        this.vtable.InitializeExtensionCommand (this, pExtensionCommand, pInitializationParameters, InitializationParametersSizeInBytes);
    }

    ExecuteExtensionCommand :: inline (this : *ID3D12VideoProcessCommandList2, pExtensionCommand : *ID3D12VideoExtensionCommand, pExecutionParameters : *void, ExecutionParametersSizeInBytes : u64) #no_context
    {
        this.vtable.ExecuteExtensionCommand (this, pExtensionCommand, pExecutionParameters, ExecutionParametersSizeInBytes);
    }
}

ID3D12VideoProcessor_UUID :: "304fdb32-bede-410a-8545-943ac6a46138";
ID3D12VideoProcessor :: struct
{
    UUID :: GUID.{0x304fdb32,0xbede,0x410a,.[0x85,0x45,0x94,0x3a,0xc6,0xa4,0x61,0x38]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12Pageable;

    #place base;
    vtable : *ID3D12VideoProcessorVTable;

    GetNodeMask :: inline (this : *ID3D12VideoProcessor) -> u32 #no_context
    {
        return this.vtable.GetNodeMask (this);
    }

    GetNumInputStreamDescs :: inline (this : *ID3D12VideoProcessor) -> u32 #no_context
    {
        return this.vtable.GetNumInputStreamDescs (this);
    }

    GetInputStreamDescs :: inline (this : *ID3D12VideoProcessor, NumInputStreamDescs : u32, pInputStreamDescs : *D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC) -> HRESULT #no_context
    {
        return this.vtable.GetInputStreamDescs (this, NumInputStreamDescs, pInputStreamDescs);
    }

    GetOutputStreamDesc :: inline (this : *ID3D12VideoProcessor) -> D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC #no_context
    {
        return this.vtable.GetOutputStreamDesc (this);
    }
}

ID3D12VideoProcessor1_UUID :: "f3cfe615-553f-425c-86d8-ee8c1b1fb01c";
ID3D12VideoProcessor1 :: struct
{
    UUID :: GUID.{0xf3cfe615,0x553f,0x425c,.[0x86,0xd8,0xee,0x8c,0x1b,0x1f,0xb0,0x1c]};

    #as using, except (.["vtable", "base", "UUID"]) base : ID3D12VideoProcessor;

    #place base;
    vtable : *ID3D12VideoProcessor1VTable;

    GetProtectedResourceSession :: inline (this : *ID3D12VideoProcessor1, riid : *GUID, ppProtectedSession : **void) -> HRESULT #no_context
    {
        return this.vtable.GetProtectedResourceSession (this, riid, ppProtectedSession);
    }
}

PFN_D3D12_CREATE_DEVICE :: #type (param0 : *IUnknown, param1 : D3D_FEATURE_LEVEL, param2 : *GUID, param3 : **void) -> HRESULT #c_call;

PFN_D3D12_CREATE_ROOT_SIGNATURE_DESERIALIZER :: #type (pSrcData : *void, SrcDataSizeInBytes : u64, pRootSignatureDeserializerInterface : *GUID, ppRootSignatureDeserializer : **void) -> HRESULT #c_call;

PFN_D3D12_CREATE_VERSIONED_ROOT_SIGNATURE_DESERIALIZER :: #type (pSrcData : *void, SrcDataSizeInBytes : u64, pRootSignatureDeserializerInterface : *GUID, ppRootSignatureDeserializer : **void) -> HRESULT #c_call;

PFN_D3D12_GET_DEBUG_INTERFACE :: #type (param0 : *GUID, param1 : **void) -> HRESULT #c_call;

PFN_D3D12_GET_INTERFACE :: #type (param0 : *GUID, param1 : *GUID, param2 : **void) -> HRESULT #c_call;

PFN_D3D12_SERIALIZE_ROOT_SIGNATURE :: #type (pRootSignature : *D3D12_ROOT_SIGNATURE_DESC, Version : D3D_ROOT_SIGNATURE_VERSION, ppBlob : **ID3DBlob, ppErrorBlob : **ID3DBlob) -> HRESULT #c_call;

PFN_D3D12_SERIALIZE_VERSIONED_ROOT_SIGNATURE :: #type (pRootSignature : *D3D12_VERSIONED_ROOT_SIGNATURE_DESC, ppBlob : **ID3DBlob, ppErrorBlob : **ID3DBlob) -> HRESULT #c_call;

// Functions

D3D12CreateDevice :: (pAdapter : *IUnknown, MinimumFeatureLevel : D3D_FEATURE_LEVEL, riid : *GUID, ppDevice : **void) -> HRESULT #foreign d3d12;
D3D12CreateRootSignatureDeserializer :: (pSrcData : *void, SrcDataSizeInBytes : u64, pRootSignatureDeserializerInterface : *GUID, ppRootSignatureDeserializer : **void) -> HRESULT #foreign d3d12;
D3D12CreateVersionedRootSignatureDeserializer :: (pSrcData : *void, SrcDataSizeInBytes : u64, pRootSignatureDeserializerInterface : *GUID, ppRootSignatureDeserializer : **void) -> HRESULT #foreign d3d12;
D3D12EnableExperimentalFeatures :: (NumFeatures : u32, pIIDs : *GUID, pConfigurationStructs : *void, pConfigurationStructSizes : *u32) -> HRESULT #foreign d3d12;
D3D12GetDebugInterface :: (riid : *GUID, ppvDebug : **void) -> HRESULT #foreign d3d12;
D3D12GetInterface :: (rclsid : *GUID, riid : *GUID, ppvDebug : **void) -> HRESULT #foreign d3d12;
D3D12SerializeRootSignature :: (pRootSignature : *D3D12_ROOT_SIGNATURE_DESC, Version : D3D_ROOT_SIGNATURE_VERSION, ppBlob : **ID3DBlob, ppErrorBlob : **ID3DBlob) -> HRESULT #foreign d3d12;
D3D12SerializeVersionedRootSignature :: (pRootSignature : *D3D12_VERSIONED_ROOT_SIGNATURE_DESC, ppBlob : **ID3DBlob, ppErrorBlob : **ID3DBlob) -> HRESULT #foreign d3d12;

// COM interface vtables


ID3D12CommandAllocatorVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12PageableVTable;

    Reset : (this : *ID3D12CommandAllocator) -> HRESULT #cpp_method;
}

ID3D12CommandListVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12DeviceChildVTable;

    GetType : (this : *ID3D12CommandList) -> D3D12_COMMAND_LIST_TYPE #cpp_method;
}

ID3D12CommandQueueVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12PageableVTable;

    UpdateTileMappings : (this : *ID3D12CommandQueue, pResource : *ID3D12Resource, NumResourceRegions : u32, pResourceRegionStartCoordinates : *D3D12_TILED_RESOURCE_COORDINATE, pResourceRegionSizes : *D3D12_TILE_REGION_SIZE, pHeap : *ID3D12Heap, NumRanges : u32, pRangeFlags : *D3D12_TILE_RANGE_FLAGS, pHeapRangeStartOffsets : *u32, pRangeTileCounts : *u32, Flags : D3D12_TILE_MAPPING_FLAGS) #cpp_method;
    CopyTileMappings : (this : *ID3D12CommandQueue, pDstResource : *ID3D12Resource, pDstRegionStartCoordinate : *D3D12_TILED_RESOURCE_COORDINATE, pSrcResource : *ID3D12Resource, pSrcRegionStartCoordinate : *D3D12_TILED_RESOURCE_COORDINATE, pRegionSize : *D3D12_TILE_REGION_SIZE, Flags : D3D12_TILE_MAPPING_FLAGS) #cpp_method;
    ExecuteCommandLists : (this : *ID3D12CommandQueue, NumCommandLists : u32, ppCommandLists : **ID3D12CommandList) #cpp_method;
    SetMarker : (this : *ID3D12CommandQueue, Metadata : u32, pData : *void, Size : u32) #cpp_method;
    BeginEvent : (this : *ID3D12CommandQueue, Metadata : u32, pData : *void, Size : u32) #cpp_method;
    EndEvent : (this : *ID3D12CommandQueue) #cpp_method;
    Signal : (this : *ID3D12CommandQueue, pFence : *ID3D12Fence, Value : u64) -> HRESULT #cpp_method;
    Wait : (this : *ID3D12CommandQueue, pFence : *ID3D12Fence, Value : u64) -> HRESULT #cpp_method;
    GetTimestampFrequency : (this : *ID3D12CommandQueue, pFrequency : *u64) -> HRESULT #cpp_method;
    GetClockCalibration : (this : *ID3D12CommandQueue, pGpuTimestamp : *u64, pCpuTimestamp : *u64) -> HRESULT #cpp_method;
    GetDesc : (this : *ID3D12CommandQueue) -> D3D12_COMMAND_QUEUE_DESC #cpp_method;
}

ID3D12CommandSignatureVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12PageableVTable;

}

ID3D12DebugVTable :: struct
{
    #as using, except (.["base"]) base : IUnknownVTable;

    EnableDebugLayer : (this : *ID3D12Debug) #cpp_method;
}

ID3D12Debug1VTable :: struct
{
    #as using, except (.["base"]) base : IUnknownVTable;

    EnableDebugLayer : (this : *ID3D12Debug1) #cpp_method;
    SetEnableGPUBasedValidation : (this : *ID3D12Debug1, Enable : BOOL) #cpp_method;
    SetEnableSynchronizedCommandQueueValidation : (this : *ID3D12Debug1, Enable : BOOL) #cpp_method;
}

ID3D12Debug2VTable :: struct
{
    #as using, except (.["base"]) base : IUnknownVTable;

    SetGPUBasedValidationFlags : (this : *ID3D12Debug2, Flags : D3D12_GPU_BASED_VALIDATION_FLAGS) #cpp_method;
}

ID3D12Debug3VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12DebugVTable;

    SetEnableGPUBasedValidation : (this : *ID3D12Debug3, Enable : BOOL) #cpp_method;
    SetEnableSynchronizedCommandQueueValidation : (this : *ID3D12Debug3, Enable : BOOL) #cpp_method;
    SetGPUBasedValidationFlags : (this : *ID3D12Debug3, Flags : D3D12_GPU_BASED_VALIDATION_FLAGS) #cpp_method;
}

ID3D12Debug4VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12Debug3VTable;

    DisableDebugLayer : (this : *ID3D12Debug4) #cpp_method;
}

ID3D12Debug5VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12Debug4VTable;

    SetEnableAutoName : (this : *ID3D12Debug5, Enable : BOOL) #cpp_method;
}

ID3D12DebugCommandListVTable :: struct
{
    #as using, except (.["base"]) base : IUnknownVTable;

    AssertResourceState : (this : *ID3D12DebugCommandList, pResource : *ID3D12Resource, Subresource : u32, State : u32) -> BOOL #cpp_method;
    SetFeatureMask : (this : *ID3D12DebugCommandList, Mask : D3D12_DEBUG_FEATURE) -> HRESULT #cpp_method;
    GetFeatureMask : (this : *ID3D12DebugCommandList) -> D3D12_DEBUG_FEATURE #cpp_method;
}

ID3D12DebugCommandList1VTable :: struct
{
    #as using, except (.["base"]) base : IUnknownVTable;

    AssertResourceState : (this : *ID3D12DebugCommandList1, pResource : *ID3D12Resource, Subresource : u32, State : u32) -> BOOL #cpp_method;
    SetDebugParameter : (this : *ID3D12DebugCommandList1, _Type : D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, pData : *void, DataSize : u32) -> HRESULT #cpp_method;
    GetDebugParameter : (this : *ID3D12DebugCommandList1, _Type : D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, pData : *void, DataSize : u32) -> HRESULT #cpp_method;
}

ID3D12DebugCommandList2VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12DebugCommandListVTable;

    SetDebugParameter : (this : *ID3D12DebugCommandList2, _Type : D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, pData : *void, DataSize : u32) -> HRESULT #cpp_method;
    GetDebugParameter : (this : *ID3D12DebugCommandList2, _Type : D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, pData : *void, DataSize : u32) -> HRESULT #cpp_method;
}

ID3D12DebugCommandQueueVTable :: struct
{
    #as using, except (.["base"]) base : IUnknownVTable;

    AssertResourceState : (this : *ID3D12DebugCommandQueue, pResource : *ID3D12Resource, Subresource : u32, State : u32) -> BOOL #cpp_method;
}

ID3D12DebugDeviceVTable :: struct
{
    #as using, except (.["base"]) base : IUnknownVTable;

    SetFeatureMask : (this : *ID3D12DebugDevice, Mask : D3D12_DEBUG_FEATURE) -> HRESULT #cpp_method;
    GetFeatureMask : (this : *ID3D12DebugDevice) -> D3D12_DEBUG_FEATURE #cpp_method;
    ReportLiveDeviceObjects : (this : *ID3D12DebugDevice, Flags : D3D12_RLDO_FLAGS) -> HRESULT #cpp_method;
}

ID3D12DebugDevice1VTable :: struct
{
    #as using, except (.["base"]) base : IUnknownVTable;

    SetDebugParameter : (this : *ID3D12DebugDevice1, _Type : D3D12_DEBUG_DEVICE_PARAMETER_TYPE, pData : *void, DataSize : u32) -> HRESULT #cpp_method;
    GetDebugParameter : (this : *ID3D12DebugDevice1, _Type : D3D12_DEBUG_DEVICE_PARAMETER_TYPE, pData : *void, DataSize : u32) -> HRESULT #cpp_method;
    ReportLiveDeviceObjects : (this : *ID3D12DebugDevice1, Flags : D3D12_RLDO_FLAGS) -> HRESULT #cpp_method;
}

ID3D12DebugDevice2VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12DebugDeviceVTable;

    SetDebugParameter : (this : *ID3D12DebugDevice2, _Type : D3D12_DEBUG_DEVICE_PARAMETER_TYPE, pData : *void, DataSize : u32) -> HRESULT #cpp_method;
    GetDebugParameter : (this : *ID3D12DebugDevice2, _Type : D3D12_DEBUG_DEVICE_PARAMETER_TYPE, pData : *void, DataSize : u32) -> HRESULT #cpp_method;
}

ID3D12DescriptorHeapVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12PageableVTable;

    GetDesc : (this : *ID3D12DescriptorHeap) -> D3D12_DESCRIPTOR_HEAP_DESC #cpp_method;
    GetCPUDescriptorHandleForHeapStart : (this : *ID3D12DescriptorHeap) -> D3D12_CPU_DESCRIPTOR_HANDLE #cpp_method;
    GetGPUDescriptorHandleForHeapStart : (this : *ID3D12DescriptorHeap) -> D3D12_GPU_DESCRIPTOR_HANDLE #cpp_method;
}

ID3D12DeviceVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12ObjectVTable;

    GetNodeCount : (this : *ID3D12Device) -> u32 #cpp_method;
    CreateCommandQueue : (this : *ID3D12Device, pDesc : *D3D12_COMMAND_QUEUE_DESC, riid : *GUID, ppCommandQueue : **void) -> HRESULT #cpp_method;
    CreateCommandAllocator : (this : *ID3D12Device, type : D3D12_COMMAND_LIST_TYPE, riid : *GUID, ppCommandAllocator : **void) -> HRESULT #cpp_method;
    CreateGraphicsPipelineState : (this : *ID3D12Device, pDesc : *D3D12_GRAPHICS_PIPELINE_STATE_DESC, riid : *GUID, ppPipelineState : **void) -> HRESULT #cpp_method;
    CreateComputePipelineState : (this : *ID3D12Device, pDesc : *D3D12_COMPUTE_PIPELINE_STATE_DESC, riid : *GUID, ppPipelineState : **void) -> HRESULT #cpp_method;
    CreateCommandList : (this : *ID3D12Device, nodeMask : u32, type : D3D12_COMMAND_LIST_TYPE, pCommandAllocator : *ID3D12CommandAllocator, pInitialState : *ID3D12PipelineState, riid : *GUID, ppCommandList : **void) -> HRESULT #cpp_method;
    CheckFeatureSupport : (this : *ID3D12Device, Feature : D3D12_FEATURE, pFeatureSupportData : *void, FeatureSupportDataSize : u32) -> HRESULT #cpp_method;
    CreateDescriptorHeap : (this : *ID3D12Device, pDescriptorHeapDesc : *D3D12_DESCRIPTOR_HEAP_DESC, riid : *GUID, ppvHeap : **void) -> HRESULT #cpp_method;
    GetDescriptorHandleIncrementSize : (this : *ID3D12Device, DescriptorHeapType : D3D12_DESCRIPTOR_HEAP_TYPE) -> u32 #cpp_method;
    CreateRootSignature : (this : *ID3D12Device, nodeMask : u32, pBlobWithRootSignature : *void, blobLengthInBytes : u64, riid : *GUID, ppvRootSignature : **void) -> HRESULT #cpp_method;
    CreateConstantBufferView : (this : *ID3D12Device, pDesc : *D3D12_CONSTANT_BUFFER_VIEW_DESC, DestDescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) #cpp_method;
    CreateShaderResourceView : (this : *ID3D12Device, pResource : *ID3D12Resource, pDesc : *D3D12_SHADER_RESOURCE_VIEW_DESC, DestDescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) #cpp_method;
    CreateUnorderedAccessView : (this : *ID3D12Device, pResource : *ID3D12Resource, pCounterResource : *ID3D12Resource, pDesc : *D3D12_UNORDERED_ACCESS_VIEW_DESC, DestDescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) #cpp_method;
    CreateRenderTargetView : (this : *ID3D12Device, pResource : *ID3D12Resource, pDesc : *D3D12_RENDER_TARGET_VIEW_DESC, DestDescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) #cpp_method;
    CreateDepthStencilView : (this : *ID3D12Device, pResource : *ID3D12Resource, pDesc : *D3D12_DEPTH_STENCIL_VIEW_DESC, DestDescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) #cpp_method;
    CreateSampler : (this : *ID3D12Device, pDesc : *D3D12_SAMPLER_DESC, DestDescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) #cpp_method;
    CopyDescriptors : (this : *ID3D12Device, NumDestDescriptorRanges : u32, pDestDescriptorRangeStarts : *D3D12_CPU_DESCRIPTOR_HANDLE, pDestDescriptorRangeSizes : *u32, NumSrcDescriptorRanges : u32, pSrcDescriptorRangeStarts : *D3D12_CPU_DESCRIPTOR_HANDLE, pSrcDescriptorRangeSizes : *u32, DescriptorHeapsType : D3D12_DESCRIPTOR_HEAP_TYPE) #cpp_method;
    CopyDescriptorsSimple : (this : *ID3D12Device, NumDescriptors : u32, DestDescriptorRangeStart : D3D12_CPU_DESCRIPTOR_HANDLE, SrcDescriptorRangeStart : D3D12_CPU_DESCRIPTOR_HANDLE, DescriptorHeapsType : D3D12_DESCRIPTOR_HEAP_TYPE) #cpp_method;
    GetResourceAllocationInfo : (this : *ID3D12Device, visibleMask : u32, numResourceDescs : u32, pResourceDescs : *D3D12_RESOURCE_DESC) -> D3D12_RESOURCE_ALLOCATION_INFO #cpp_method;
    GetCustomHeapProperties : (this : *ID3D12Device, nodeMask : u32, heapType : D3D12_HEAP_TYPE) -> D3D12_HEAP_PROPERTIES #cpp_method;
    CreateCommittedResource : (this : *ID3D12Device, pHeapProperties : *D3D12_HEAP_PROPERTIES, HeapFlags : D3D12_HEAP_FLAGS, pDesc : *D3D12_RESOURCE_DESC, InitialResourceState : D3D12_RESOURCE_STATES, pOptimizedClearValue : *D3D12_CLEAR_VALUE, riidResource : *GUID, ppvResource : **void) -> HRESULT #cpp_method;
    CreateHeap : (this : *ID3D12Device, pDesc : *D3D12_HEAP_DESC, riid : *GUID, ppvHeap : **void) -> HRESULT #cpp_method;
    CreatePlacedResource : (this : *ID3D12Device, pHeap : *ID3D12Heap, HeapOffset : u64, pDesc : *D3D12_RESOURCE_DESC, InitialState : D3D12_RESOURCE_STATES, pOptimizedClearValue : *D3D12_CLEAR_VALUE, riid : *GUID, ppvResource : **void) -> HRESULT #cpp_method;
    CreateReservedResource : (this : *ID3D12Device, pDesc : *D3D12_RESOURCE_DESC, InitialState : D3D12_RESOURCE_STATES, pOptimizedClearValue : *D3D12_CLEAR_VALUE, riid : *GUID, ppvResource : **void) -> HRESULT #cpp_method;
    CreateSharedHandle : (this : *ID3D12Device, pObject : *ID3D12DeviceChild, pAttributes : *SECURITY_ATTRIBUTES, Access : u32, Name : PWSTR, pHandle : *HANDLE) -> HRESULT #cpp_method;
    OpenSharedHandle : (this : *ID3D12Device, NTHandle : HANDLE, riid : *GUID, ppvObj : **void) -> HRESULT #cpp_method;
    OpenSharedHandleByName : (this : *ID3D12Device, Name : PWSTR, Access : u32, pNTHandle : *HANDLE) -> HRESULT #cpp_method;
    MakeResident : (this : *ID3D12Device, NumObjects : u32, ppObjects : **ID3D12Pageable) -> HRESULT #cpp_method;
    Evict : (this : *ID3D12Device, NumObjects : u32, ppObjects : **ID3D12Pageable) -> HRESULT #cpp_method;
    CreateFence : (this : *ID3D12Device, InitialValue : u64, Flags : D3D12_FENCE_FLAGS, riid : *GUID, ppFence : **void) -> HRESULT #cpp_method;
    GetDeviceRemovedReason : (this : *ID3D12Device) -> HRESULT #cpp_method;
    GetCopyableFootprints : (this : *ID3D12Device, pResourceDesc : *D3D12_RESOURCE_DESC, FirstSubresource : u32, NumSubresources : u32, BaseOffset : u64, pLayouts : *D3D12_PLACED_SUBRESOURCE_FOOTPRINT, pNumRows : *u32, pRowSizeInBytes : *u64, pTotalBytes : *u64) #cpp_method;
    CreateQueryHeap : (this : *ID3D12Device, pDesc : *D3D12_QUERY_HEAP_DESC, riid : *GUID, ppvHeap : **void) -> HRESULT #cpp_method;
    SetStablePowerState : (this : *ID3D12Device, Enable : BOOL) -> HRESULT #cpp_method;
    CreateCommandSignature : (this : *ID3D12Device, pDesc : *D3D12_COMMAND_SIGNATURE_DESC, pRootSignature : *ID3D12RootSignature, riid : *GUID, ppvCommandSignature : **void) -> HRESULT #cpp_method;
    GetResourceTiling : (this : *ID3D12Device, pTiledResource : *ID3D12Resource, pNumTilesForEntireResource : *u32, pPackedMipDesc : *D3D12_PACKED_MIP_INFO, pStandardTileShapeForNonPackedMips : *D3D12_TILE_SHAPE, pNumSubresourceTilings : *u32, FirstSubresourceTilingToGet : u32, pSubresourceTilingsForNonPackedMips : *D3D12_SUBRESOURCE_TILING) #cpp_method;
    GetAdapterLuid : (this : *ID3D12Device) -> LUID #cpp_method;
}

ID3D12Device1VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12DeviceVTable;

    CreatePipelineLibrary : (this : *ID3D12Device1, pLibraryBlob : *void, BlobLength : u64, riid : *GUID, ppPipelineLibrary : **void) -> HRESULT #cpp_method;
    SetEventOnMultipleFenceCompletion : (this : *ID3D12Device1, ppFences : **ID3D12Fence, pFenceValues : *u64, NumFences : u32, Flags : D3D12_MULTIPLE_FENCE_WAIT_FLAGS, hEvent : HANDLE) -> HRESULT #cpp_method;
    SetResidencyPriority : (this : *ID3D12Device1, NumObjects : u32, ppObjects : **ID3D12Pageable, pPriorities : *D3D12_RESIDENCY_PRIORITY) -> HRESULT #cpp_method;
}

ID3D12Device2VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12Device1VTable;

    CreatePipelineState : (this : *ID3D12Device2, pDesc : *D3D12_PIPELINE_STATE_STREAM_DESC, riid : *GUID, ppPipelineState : **void) -> HRESULT #cpp_method;
}

ID3D12Device3VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12Device2VTable;

    OpenExistingHeapFromAddress : (this : *ID3D12Device3, pAddress : *void, riid : *GUID, ppvHeap : **void) -> HRESULT #cpp_method;
    OpenExistingHeapFromFileMapping : (this : *ID3D12Device3, hFileMapping : HANDLE, riid : *GUID, ppvHeap : **void) -> HRESULT #cpp_method;
    EnqueueMakeResident : (this : *ID3D12Device3, Flags : D3D12_RESIDENCY_FLAGS, NumObjects : u32, ppObjects : **ID3D12Pageable, pFenceToSignal : *ID3D12Fence, FenceValueToSignal : u64) -> HRESULT #cpp_method;
}

ID3D12Device4VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12Device3VTable;

    CreateCommandList1 : (this : *ID3D12Device4, nodeMask : u32, type : D3D12_COMMAND_LIST_TYPE, flags : D3D12_COMMAND_LIST_FLAGS, riid : *GUID, ppCommandList : **void) -> HRESULT #cpp_method;
    CreateProtectedResourceSession : (this : *ID3D12Device4, pDesc : *D3D12_PROTECTED_RESOURCE_SESSION_DESC, riid : *GUID, ppSession : **void) -> HRESULT #cpp_method;
    CreateCommittedResource1 : (this : *ID3D12Device4, pHeapProperties : *D3D12_HEAP_PROPERTIES, HeapFlags : D3D12_HEAP_FLAGS, pDesc : *D3D12_RESOURCE_DESC, InitialResourceState : D3D12_RESOURCE_STATES, pOptimizedClearValue : *D3D12_CLEAR_VALUE, pProtectedSession : *ID3D12ProtectedResourceSession, riidResource : *GUID, ppvResource : **void) -> HRESULT #cpp_method;
    CreateHeap1 : (this : *ID3D12Device4, pDesc : *D3D12_HEAP_DESC, pProtectedSession : *ID3D12ProtectedResourceSession, riid : *GUID, ppvHeap : **void) -> HRESULT #cpp_method;
    CreateReservedResource1 : (this : *ID3D12Device4, pDesc : *D3D12_RESOURCE_DESC, InitialState : D3D12_RESOURCE_STATES, pOptimizedClearValue : *D3D12_CLEAR_VALUE, pProtectedSession : *ID3D12ProtectedResourceSession, riid : *GUID, ppvResource : **void) -> HRESULT #cpp_method;
    GetResourceAllocationInfo1 : (this : *ID3D12Device4, visibleMask : u32, numResourceDescs : u32, pResourceDescs : *D3D12_RESOURCE_DESC, pResourceAllocationInfo1 : *D3D12_RESOURCE_ALLOCATION_INFO1) -> D3D12_RESOURCE_ALLOCATION_INFO #cpp_method;
}

ID3D12Device5VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12Device4VTable;

    CreateLifetimeTracker : (this : *ID3D12Device5, pOwner : *ID3D12LifetimeOwner, riid : *GUID, ppvTracker : **void) -> HRESULT #cpp_method;
    RemoveDevice : (this : *ID3D12Device5) #cpp_method;
    EnumerateMetaCommands : (this : *ID3D12Device5, pNumMetaCommands : *u32, pDescs : *D3D12_META_COMMAND_DESC) -> HRESULT #cpp_method;
    EnumerateMetaCommandParameters : (this : *ID3D12Device5, CommandId : *GUID, Stage : D3D12_META_COMMAND_PARAMETER_STAGE, pTotalStructureSizeInBytes : *u32, pParameterCount : *u32, pParameterDescs : *D3D12_META_COMMAND_PARAMETER_DESC) -> HRESULT #cpp_method;
    CreateMetaCommand : (this : *ID3D12Device5, CommandId : *GUID, NodeMask : u32, pCreationParametersData : *void, CreationParametersDataSizeInBytes : u64, riid : *GUID, ppMetaCommand : **void) -> HRESULT #cpp_method;
    CreateStateObject : (this : *ID3D12Device5, pDesc : *D3D12_STATE_OBJECT_DESC, riid : *GUID, ppStateObject : **void) -> HRESULT #cpp_method;
    GetRaytracingAccelerationStructurePrebuildInfo : (this : *ID3D12Device5, pDesc : *D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS, pInfo : *D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO) #cpp_method;
    CheckDriverMatchingIdentifier : (this : *ID3D12Device5, SerializedDataType : D3D12_SERIALIZED_DATA_TYPE, pIdentifierToCheck : *D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER) -> D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS #cpp_method;
}

ID3D12Device6VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12Device5VTable;

    SetBackgroundProcessingMode : (this : *ID3D12Device6, Mode : D3D12_BACKGROUND_PROCESSING_MODE, MeasurementsAction : D3D12_MEASUREMENTS_ACTION, hEventToSignalUponCompletion : HANDLE, pbFurtherMeasurementsDesired : *BOOL) -> HRESULT #cpp_method;
}

ID3D12Device7VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12Device6VTable;

    AddToStateObject : (this : *ID3D12Device7, pAddition : *D3D12_STATE_OBJECT_DESC, pStateObjectToGrowFrom : *ID3D12StateObject, riid : *GUID, ppNewStateObject : **void) -> HRESULT #cpp_method;
    CreateProtectedResourceSession1 : (this : *ID3D12Device7, pDesc : *D3D12_PROTECTED_RESOURCE_SESSION_DESC1, riid : *GUID, ppSession : **void) -> HRESULT #cpp_method;
}

ID3D12Device8VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12Device7VTable;

    GetResourceAllocationInfo2 : (this : *ID3D12Device8, visibleMask : u32, numResourceDescs : u32, pResourceDescs : *D3D12_RESOURCE_DESC1, pResourceAllocationInfo1 : *D3D12_RESOURCE_ALLOCATION_INFO1) -> D3D12_RESOURCE_ALLOCATION_INFO #cpp_method;
    CreateCommittedResource2 : (this : *ID3D12Device8, pHeapProperties : *D3D12_HEAP_PROPERTIES, HeapFlags : D3D12_HEAP_FLAGS, pDesc : *D3D12_RESOURCE_DESC1, InitialResourceState : D3D12_RESOURCE_STATES, pOptimizedClearValue : *D3D12_CLEAR_VALUE, pProtectedSession : *ID3D12ProtectedResourceSession, riidResource : *GUID, ppvResource : **void) -> HRESULT #cpp_method;
    CreatePlacedResource1 : (this : *ID3D12Device8, pHeap : *ID3D12Heap, HeapOffset : u64, pDesc : *D3D12_RESOURCE_DESC1, InitialState : D3D12_RESOURCE_STATES, pOptimizedClearValue : *D3D12_CLEAR_VALUE, riid : *GUID, ppvResource : **void) -> HRESULT #cpp_method;
    CreateSamplerFeedbackUnorderedAccessView : (this : *ID3D12Device8, pTargetedResource : *ID3D12Resource, pFeedbackResource : *ID3D12Resource, DestDescriptor : D3D12_CPU_DESCRIPTOR_HANDLE) #cpp_method;
    GetCopyableFootprints1 : (this : *ID3D12Device8, pResourceDesc : *D3D12_RESOURCE_DESC1, FirstSubresource : u32, NumSubresources : u32, BaseOffset : u64, pLayouts : *D3D12_PLACED_SUBRESOURCE_FOOTPRINT, pNumRows : *u32, pRowSizeInBytes : *u64, pTotalBytes : *u64) #cpp_method;
}

ID3D12Device9VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12Device8VTable;

    CreateShaderCacheSession : (this : *ID3D12Device9, pDesc : *D3D12_SHADER_CACHE_SESSION_DESC, riid : *GUID, ppvSession : **void) -> HRESULT #cpp_method;
    ShaderCacheControl : (this : *ID3D12Device9, Kinds : D3D12_SHADER_CACHE_KIND_FLAGS, Control : D3D12_SHADER_CACHE_CONTROL_FLAGS) -> HRESULT #cpp_method;
    CreateCommandQueue1 : (this : *ID3D12Device9, pDesc : *D3D12_COMMAND_QUEUE_DESC, CreatorID : *GUID, riid : *GUID, ppCommandQueue : **void) -> HRESULT #cpp_method;
}

ID3D12DeviceChildVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12ObjectVTable;

    GetDevice : (this : *ID3D12DeviceChild, riid : *GUID, ppvDevice : **void) -> HRESULT #cpp_method;
}

ID3D12DeviceRemovedExtendedDataVTable :: struct
{
    #as using, except (.["base"]) base : IUnknownVTable;

    GetAutoBreadcrumbsOutput : (this : *ID3D12DeviceRemovedExtendedData, pOutput : *D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT) -> HRESULT #cpp_method;
    GetPageFaultAllocationOutput : (this : *ID3D12DeviceRemovedExtendedData, pOutput : *D3D12_DRED_PAGE_FAULT_OUTPUT) -> HRESULT #cpp_method;
}

ID3D12DeviceRemovedExtendedData1VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12DeviceRemovedExtendedDataVTable;

    GetAutoBreadcrumbsOutput1 : (this : *ID3D12DeviceRemovedExtendedData1, pOutput : *D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1) -> HRESULT #cpp_method;
    GetPageFaultAllocationOutput1 : (this : *ID3D12DeviceRemovedExtendedData1, pOutput : *D3D12_DRED_PAGE_FAULT_OUTPUT1) -> HRESULT #cpp_method;
}

ID3D12DeviceRemovedExtendedData2VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12DeviceRemovedExtendedData1VTable;

    GetPageFaultAllocationOutput2 : (this : *ID3D12DeviceRemovedExtendedData2, pOutput : *D3D12_DRED_PAGE_FAULT_OUTPUT2) -> HRESULT #cpp_method;
    GetDeviceState : (this : *ID3D12DeviceRemovedExtendedData2) -> D3D12_DRED_DEVICE_STATE #cpp_method;
}

ID3D12DeviceRemovedExtendedDataSettingsVTable :: struct
{
    #as using, except (.["base"]) base : IUnknownVTable;

    SetAutoBreadcrumbsEnablement : (this : *ID3D12DeviceRemovedExtendedDataSettings, Enablement : D3D12_DRED_ENABLEMENT) #cpp_method;
    SetPageFaultEnablement : (this : *ID3D12DeviceRemovedExtendedDataSettings, Enablement : D3D12_DRED_ENABLEMENT) #cpp_method;
    SetWatsonDumpEnablement : (this : *ID3D12DeviceRemovedExtendedDataSettings, Enablement : D3D12_DRED_ENABLEMENT) #cpp_method;
}

ID3D12DeviceRemovedExtendedDataSettings1VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12DeviceRemovedExtendedDataSettingsVTable;

    SetBreadcrumbContextEnablement : (this : *ID3D12DeviceRemovedExtendedDataSettings1, Enablement : D3D12_DRED_ENABLEMENT) #cpp_method;
}

ID3D12FenceVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12PageableVTable;

    GetCompletedValue : (this : *ID3D12Fence) -> u64 #cpp_method;
    SetEventOnCompletion : (this : *ID3D12Fence, Value : u64, hEvent : HANDLE) -> HRESULT #cpp_method;
    Signal : (this : *ID3D12Fence, Value : u64) -> HRESULT #cpp_method;
}

ID3D12Fence1VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12FenceVTable;

    GetCreationFlags : (this : *ID3D12Fence1) -> D3D12_FENCE_FLAGS #cpp_method;
}

ID3D12FunctionParameterReflectionVTable :: struct
{
    GetDesc : (this : *ID3D12FunctionParameterReflection, pDesc : *D3D12_PARAMETER_DESC) -> HRESULT #cpp_method;
}

ID3D12FunctionReflectionVTable :: struct
{
    GetDesc : (this : *ID3D12FunctionReflection, pDesc : *D3D12_FUNCTION_DESC) -> HRESULT #cpp_method;
    GetConstantBufferByIndex : (this : *ID3D12FunctionReflection, BufferIndex : u32) -> *ID3D12ShaderReflectionConstantBuffer #cpp_method;
    GetConstantBufferByName : (this : *ID3D12FunctionReflection, Name : PSTR) -> *ID3D12ShaderReflectionConstantBuffer #cpp_method;
    GetResourceBindingDesc : (this : *ID3D12FunctionReflection, ResourceIndex : u32, pDesc : *D3D12_SHADER_INPUT_BIND_DESC) -> HRESULT #cpp_method;
    GetVariableByName : (this : *ID3D12FunctionReflection, Name : PSTR) -> *ID3D12ShaderReflectionVariable #cpp_method;
    GetResourceBindingDescByName : (this : *ID3D12FunctionReflection, Name : PSTR, pDesc : *D3D12_SHADER_INPUT_BIND_DESC) -> HRESULT #cpp_method;
    GetFunctionParameter : (this : *ID3D12FunctionReflection, ParameterIndex : s32) -> *ID3D12FunctionParameterReflection #cpp_method;
}

ID3D12GraphicsCommandListVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12CommandListVTable;

    Close : (this : *ID3D12GraphicsCommandList) -> HRESULT #cpp_method;
    Reset : (this : *ID3D12GraphicsCommandList, pAllocator : *ID3D12CommandAllocator, pInitialState : *ID3D12PipelineState) -> HRESULT #cpp_method;
    ClearState : (this : *ID3D12GraphicsCommandList, pPipelineState : *ID3D12PipelineState) #cpp_method;
    DrawInstanced : (this : *ID3D12GraphicsCommandList, VertexCountPerInstance : u32, InstanceCount : u32, StartVertexLocation : u32, StartInstanceLocation : u32) #cpp_method;
    DrawIndexedInstanced : (this : *ID3D12GraphicsCommandList, IndexCountPerInstance : u32, InstanceCount : u32, StartIndexLocation : u32, BaseVertexLocation : s32, StartInstanceLocation : u32) #cpp_method;
    Dispatch : (this : *ID3D12GraphicsCommandList, ThreadGroupCountX : u32, ThreadGroupCountY : u32, ThreadGroupCountZ : u32) #cpp_method;
    CopyBufferRegion : (this : *ID3D12GraphicsCommandList, pDstBuffer : *ID3D12Resource, DstOffset : u64, pSrcBuffer : *ID3D12Resource, SrcOffset : u64, NumBytes : u64) #cpp_method;
    CopyTextureRegion : (this : *ID3D12GraphicsCommandList, pDst : *D3D12_TEXTURE_COPY_LOCATION, DstX : u32, DstY : u32, DstZ : u32, pSrc : *D3D12_TEXTURE_COPY_LOCATION, pSrcBox : *D3D12_BOX) #cpp_method;
    CopyResource : (this : *ID3D12GraphicsCommandList, pDstResource : *ID3D12Resource, pSrcResource : *ID3D12Resource) #cpp_method;
    CopyTiles : (this : *ID3D12GraphicsCommandList, pTiledResource : *ID3D12Resource, pTileRegionStartCoordinate : *D3D12_TILED_RESOURCE_COORDINATE, pTileRegionSize : *D3D12_TILE_REGION_SIZE, pBuffer : *ID3D12Resource, BufferStartOffsetInBytes : u64, Flags : D3D12_TILE_COPY_FLAGS) #cpp_method;
    ResolveSubresource : (this : *ID3D12GraphicsCommandList, pDstResource : *ID3D12Resource, DstSubresource : u32, pSrcResource : *ID3D12Resource, SrcSubresource : u32, Format : DXGI_FORMAT) #cpp_method;
    IASetPrimitiveTopology : (this : *ID3D12GraphicsCommandList, PrimitiveTopology : D3D_PRIMITIVE_TOPOLOGY) #cpp_method;
    RSSetViewports : (this : *ID3D12GraphicsCommandList, NumViewports : u32, pViewports : *D3D12_VIEWPORT) #cpp_method;
    RSSetScissorRects : (this : *ID3D12GraphicsCommandList, NumRects : u32, pRects : *RECT) #cpp_method;
    OMSetBlendFactor : (this : *ID3D12GraphicsCommandList, BlendFactor : *[4]float) #cpp_method;
    OMSetStencilRef : (this : *ID3D12GraphicsCommandList, StencilRef : u32) #cpp_method;
    SetPipelineState : (this : *ID3D12GraphicsCommandList, pPipelineState : *ID3D12PipelineState) #cpp_method;
    ResourceBarrier : (this : *ID3D12GraphicsCommandList, NumBarriers : u32, pBarriers : *D3D12_RESOURCE_BARRIER) #cpp_method;
    ExecuteBundle : (this : *ID3D12GraphicsCommandList, pCommandList : *ID3D12GraphicsCommandList) #cpp_method;
    SetDescriptorHeaps : (this : *ID3D12GraphicsCommandList, NumDescriptorHeaps : u32, ppDescriptorHeaps : **ID3D12DescriptorHeap) #cpp_method;
    SetComputeRootSignature : (this : *ID3D12GraphicsCommandList, pRootSignature : *ID3D12RootSignature) #cpp_method;
    SetGraphicsRootSignature : (this : *ID3D12GraphicsCommandList, pRootSignature : *ID3D12RootSignature) #cpp_method;
    SetComputeRootDescriptorTable : (this : *ID3D12GraphicsCommandList, RootParameterIndex : u32, BaseDescriptor : D3D12_GPU_DESCRIPTOR_HANDLE) #cpp_method;
    SetGraphicsRootDescriptorTable : (this : *ID3D12GraphicsCommandList, RootParameterIndex : u32, BaseDescriptor : D3D12_GPU_DESCRIPTOR_HANDLE) #cpp_method;
    SetComputeRoot32BitConstant : (this : *ID3D12GraphicsCommandList, RootParameterIndex : u32, SrcData : u32, DestOffsetIn32BitValues : u32) #cpp_method;
    SetGraphicsRoot32BitConstant : (this : *ID3D12GraphicsCommandList, RootParameterIndex : u32, SrcData : u32, DestOffsetIn32BitValues : u32) #cpp_method;
    SetComputeRoot32BitConstants : (this : *ID3D12GraphicsCommandList, RootParameterIndex : u32, Num32BitValuesToSet : u32, pSrcData : *void, DestOffsetIn32BitValues : u32) #cpp_method;
    SetGraphicsRoot32BitConstants : (this : *ID3D12GraphicsCommandList, RootParameterIndex : u32, Num32BitValuesToSet : u32, pSrcData : *void, DestOffsetIn32BitValues : u32) #cpp_method;
    SetComputeRootConstantBufferView : (this : *ID3D12GraphicsCommandList, RootParameterIndex : u32, BufferLocation : u64) #cpp_method;
    SetGraphicsRootConstantBufferView : (this : *ID3D12GraphicsCommandList, RootParameterIndex : u32, BufferLocation : u64) #cpp_method;
    SetComputeRootShaderResourceView : (this : *ID3D12GraphicsCommandList, RootParameterIndex : u32, BufferLocation : u64) #cpp_method;
    SetGraphicsRootShaderResourceView : (this : *ID3D12GraphicsCommandList, RootParameterIndex : u32, BufferLocation : u64) #cpp_method;
    SetComputeRootUnorderedAccessView : (this : *ID3D12GraphicsCommandList, RootParameterIndex : u32, BufferLocation : u64) #cpp_method;
    SetGraphicsRootUnorderedAccessView : (this : *ID3D12GraphicsCommandList, RootParameterIndex : u32, BufferLocation : u64) #cpp_method;
    IASetIndexBuffer : (this : *ID3D12GraphicsCommandList, pView : *D3D12_INDEX_BUFFER_VIEW) #cpp_method;
    IASetVertexBuffers : (this : *ID3D12GraphicsCommandList, StartSlot : u32, NumViews : u32, pViews : *D3D12_VERTEX_BUFFER_VIEW) #cpp_method;
    SOSetTargets : (this : *ID3D12GraphicsCommandList, StartSlot : u32, NumViews : u32, pViews : *D3D12_STREAM_OUTPUT_BUFFER_VIEW) #cpp_method;
    OMSetRenderTargets : (this : *ID3D12GraphicsCommandList, NumRenderTargetDescriptors : u32, pRenderTargetDescriptors : *D3D12_CPU_DESCRIPTOR_HANDLE, RTsSingleHandleToDescriptorRange : BOOL, pDepthStencilDescriptor : *D3D12_CPU_DESCRIPTOR_HANDLE) #cpp_method;
    ClearDepthStencilView : (this : *ID3D12GraphicsCommandList, DepthStencilView : D3D12_CPU_DESCRIPTOR_HANDLE, ClearFlags : D3D12_CLEAR_FLAGS, Depth : float, Stencil : u8, NumRects : u32, pRects : *RECT) #cpp_method;
    ClearRenderTargetView : (this : *ID3D12GraphicsCommandList, RenderTargetView : D3D12_CPU_DESCRIPTOR_HANDLE, ColorRGBA : *float, NumRects : u32, pRects : *RECT) #cpp_method;
    ClearUnorderedAccessViewUint : (this : *ID3D12GraphicsCommandList, ViewGPUHandleInCurrentHeap : D3D12_GPU_DESCRIPTOR_HANDLE, ViewCPUHandle : D3D12_CPU_DESCRIPTOR_HANDLE, pResource : *ID3D12Resource, Values : *u32, NumRects : u32, pRects : *RECT) #cpp_method;
    ClearUnorderedAccessViewFloat : (this : *ID3D12GraphicsCommandList, ViewGPUHandleInCurrentHeap : D3D12_GPU_DESCRIPTOR_HANDLE, ViewCPUHandle : D3D12_CPU_DESCRIPTOR_HANDLE, pResource : *ID3D12Resource, Values : *float, NumRects : u32, pRects : *RECT) #cpp_method;
    DiscardResource : (this : *ID3D12GraphicsCommandList, pResource : *ID3D12Resource, pRegion : *D3D12_DISCARD_REGION) #cpp_method;
    BeginQuery : (this : *ID3D12GraphicsCommandList, pQueryHeap : *ID3D12QueryHeap, _Type : D3D12_QUERY_TYPE, Index : u32) #cpp_method;
    EndQuery : (this : *ID3D12GraphicsCommandList, pQueryHeap : *ID3D12QueryHeap, _Type : D3D12_QUERY_TYPE, Index : u32) #cpp_method;
    ResolveQueryData : (this : *ID3D12GraphicsCommandList, pQueryHeap : *ID3D12QueryHeap, _Type : D3D12_QUERY_TYPE, StartIndex : u32, NumQueries : u32, pDestinationBuffer : *ID3D12Resource, AlignedDestinationBufferOffset : u64) #cpp_method;
    SetPredication : (this : *ID3D12GraphicsCommandList, pBuffer : *ID3D12Resource, AlignedBufferOffset : u64, Operation : D3D12_PREDICATION_OP) #cpp_method;
    SetMarker : (this : *ID3D12GraphicsCommandList, Metadata : u32, pData : *void, Size : u32) #cpp_method;
    BeginEvent : (this : *ID3D12GraphicsCommandList, Metadata : u32, pData : *void, Size : u32) #cpp_method;
    EndEvent : (this : *ID3D12GraphicsCommandList) #cpp_method;
    ExecuteIndirect : (this : *ID3D12GraphicsCommandList, pCommandSignature : *ID3D12CommandSignature, MaxCommandCount : u32, pArgumentBuffer : *ID3D12Resource, ArgumentBufferOffset : u64, pCountBuffer : *ID3D12Resource, CountBufferOffset : u64) #cpp_method;
}

ID3D12GraphicsCommandList1VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12GraphicsCommandListVTable;

    AtomicCopyBufferUINT : (this : *ID3D12GraphicsCommandList1, pDstBuffer : *ID3D12Resource, DstOffset : u64, pSrcBuffer : *ID3D12Resource, SrcOffset : u64, Dependencies : u32, ppDependentResources : **ID3D12Resource, pDependentSubresourceRanges : *D3D12_SUBRESOURCE_RANGE_UINT64) #cpp_method;
    AtomicCopyBufferUINT64 : (this : *ID3D12GraphicsCommandList1, pDstBuffer : *ID3D12Resource, DstOffset : u64, pSrcBuffer : *ID3D12Resource, SrcOffset : u64, Dependencies : u32, ppDependentResources : **ID3D12Resource, pDependentSubresourceRanges : *D3D12_SUBRESOURCE_RANGE_UINT64) #cpp_method;
    OMSetDepthBounds : (this : *ID3D12GraphicsCommandList1, Min : float, Max : float) #cpp_method;
    SetSamplePositions : (this : *ID3D12GraphicsCommandList1, NumSamplesPerPixel : u32, NumPixels : u32, pSamplePositions : *D3D12_SAMPLE_POSITION) #cpp_method;
    ResolveSubresourceRegion : (this : *ID3D12GraphicsCommandList1, pDstResource : *ID3D12Resource, DstSubresource : u32, DstX : u32, DstY : u32, pSrcResource : *ID3D12Resource, SrcSubresource : u32, pSrcRect : *RECT, Format : DXGI_FORMAT, ResolveMode : D3D12_RESOLVE_MODE) #cpp_method;
    SetViewInstanceMask : (this : *ID3D12GraphicsCommandList1, Mask : u32) #cpp_method;
}

ID3D12GraphicsCommandList2VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12GraphicsCommandList1VTable;

    WriteBufferImmediate : (this : *ID3D12GraphicsCommandList2, Count : u32, pParams : *D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pModes : *D3D12_WRITEBUFFERIMMEDIATE_MODE) #cpp_method;
}

ID3D12GraphicsCommandList3VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12GraphicsCommandList2VTable;

    SetProtectedResourceSession : (this : *ID3D12GraphicsCommandList3, pProtectedResourceSession : *ID3D12ProtectedResourceSession) #cpp_method;
}

ID3D12GraphicsCommandList4VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12GraphicsCommandList3VTable;

    BeginRenderPass : (this : *ID3D12GraphicsCommandList4, NumRenderTargets : u32, pRenderTargets : *D3D12_RENDER_PASS_RENDER_TARGET_DESC, pDepthStencil : *D3D12_RENDER_PASS_DEPTH_STENCIL_DESC, Flags : D3D12_RENDER_PASS_FLAGS) #cpp_method;
    EndRenderPass : (this : *ID3D12GraphicsCommandList4) #cpp_method;
    InitializeMetaCommand : (this : *ID3D12GraphicsCommandList4, pMetaCommand : *ID3D12MetaCommand, pInitializationParametersData : *void, InitializationParametersDataSizeInBytes : u64) #cpp_method;
    ExecuteMetaCommand : (this : *ID3D12GraphicsCommandList4, pMetaCommand : *ID3D12MetaCommand, pExecutionParametersData : *void, ExecutionParametersDataSizeInBytes : u64) #cpp_method;
    BuildRaytracingAccelerationStructure : (this : *ID3D12GraphicsCommandList4, pDesc : *D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC, NumPostbuildInfoDescs : u32, pPostbuildInfoDescs : *D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC) #cpp_method;
    EmitRaytracingAccelerationStructurePostbuildInfo : (this : *ID3D12GraphicsCommandList4, pDesc : *D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC, NumSourceAccelerationStructures : u32, pSourceAccelerationStructureData : *u64) #cpp_method;
    CopyRaytracingAccelerationStructure : (this : *ID3D12GraphicsCommandList4, DestAccelerationStructureData : u64, SourceAccelerationStructureData : u64, Mode : D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE) #cpp_method;
    SetPipelineState1 : (this : *ID3D12GraphicsCommandList4, pStateObject : *ID3D12StateObject) #cpp_method;
    DispatchRays : (this : *ID3D12GraphicsCommandList4, pDesc : *D3D12_DISPATCH_RAYS_DESC) #cpp_method;
}

ID3D12GraphicsCommandList5VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12GraphicsCommandList4VTable;

    RSSetShadingRate : (this : *ID3D12GraphicsCommandList5, baseShadingRate : D3D12_SHADING_RATE, combiners : *D3D12_SHADING_RATE_COMBINER) #cpp_method;
    RSSetShadingRateImage : (this : *ID3D12GraphicsCommandList5, shadingRateImage : *ID3D12Resource) #cpp_method;
}

ID3D12GraphicsCommandList6VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12GraphicsCommandList5VTable;

    DispatchMesh : (this : *ID3D12GraphicsCommandList6, ThreadGroupCountX : u32, ThreadGroupCountY : u32, ThreadGroupCountZ : u32) #cpp_method;
}

ID3D12HeapVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12PageableVTable;

    GetDesc : (this : *ID3D12Heap) -> D3D12_HEAP_DESC #cpp_method;
}

ID3D12Heap1VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12HeapVTable;

    GetProtectedResourceSession : (this : *ID3D12Heap1, riid : *GUID, ppProtectedSession : **void) -> HRESULT #cpp_method;
}

ID3D12InfoQueueVTable :: struct
{
    #as using, except (.["base"]) base : IUnknownVTable;

    SetMessageCountLimit : (this : *ID3D12InfoQueue, MessageCountLimit : u64) -> HRESULT #cpp_method;
    ClearStoredMessages : (this : *ID3D12InfoQueue) #cpp_method;
    GetMessage : (this : *ID3D12InfoQueue, MessageIndex : u64, pMessage : *D3D12_MESSAGE, pMessageByteLength : *u64) -> HRESULT #cpp_method;
    GetNumMessagesAllowedByStorageFilter : (this : *ID3D12InfoQueue) -> u64 #cpp_method;
    GetNumMessagesDeniedByStorageFilter : (this : *ID3D12InfoQueue) -> u64 #cpp_method;
    GetNumStoredMessages : (this : *ID3D12InfoQueue) -> u64 #cpp_method;
    GetNumStoredMessagesAllowedByRetrievalFilter : (this : *ID3D12InfoQueue) -> u64 #cpp_method;
    GetNumMessagesDiscardedByMessageCountLimit : (this : *ID3D12InfoQueue) -> u64 #cpp_method;
    GetMessageCountLimit : (this : *ID3D12InfoQueue) -> u64 #cpp_method;
    AddStorageFilterEntries : (this : *ID3D12InfoQueue, pFilter : *D3D12_INFO_QUEUE_FILTER) -> HRESULT #cpp_method;
    GetStorageFilter : (this : *ID3D12InfoQueue, pFilter : *D3D12_INFO_QUEUE_FILTER, pFilterByteLength : *u64) -> HRESULT #cpp_method;
    ClearStorageFilter : (this : *ID3D12InfoQueue) #cpp_method;
    PushEmptyStorageFilter : (this : *ID3D12InfoQueue) -> HRESULT #cpp_method;
    PushCopyOfStorageFilter : (this : *ID3D12InfoQueue) -> HRESULT #cpp_method;
    PushStorageFilter : (this : *ID3D12InfoQueue, pFilter : *D3D12_INFO_QUEUE_FILTER) -> HRESULT #cpp_method;
    PopStorageFilter : (this : *ID3D12InfoQueue) #cpp_method;
    GetStorageFilterStackSize : (this : *ID3D12InfoQueue) -> u32 #cpp_method;
    AddRetrievalFilterEntries : (this : *ID3D12InfoQueue, pFilter : *D3D12_INFO_QUEUE_FILTER) -> HRESULT #cpp_method;
    GetRetrievalFilter : (this : *ID3D12InfoQueue, pFilter : *D3D12_INFO_QUEUE_FILTER, pFilterByteLength : *u64) -> HRESULT #cpp_method;
    ClearRetrievalFilter : (this : *ID3D12InfoQueue) #cpp_method;
    PushEmptyRetrievalFilter : (this : *ID3D12InfoQueue) -> HRESULT #cpp_method;
    PushCopyOfRetrievalFilter : (this : *ID3D12InfoQueue) -> HRESULT #cpp_method;
    PushRetrievalFilter : (this : *ID3D12InfoQueue, pFilter : *D3D12_INFO_QUEUE_FILTER) -> HRESULT #cpp_method;
    PopRetrievalFilter : (this : *ID3D12InfoQueue) #cpp_method;
    GetRetrievalFilterStackSize : (this : *ID3D12InfoQueue) -> u32 #cpp_method;
    AddMessage : (this : *ID3D12InfoQueue, Category : D3D12_MESSAGE_CATEGORY, Severity : D3D12_MESSAGE_SEVERITY, ID : D3D12_MESSAGE_ID, pDescription : PSTR) -> HRESULT #cpp_method;
    AddApplicationMessage : (this : *ID3D12InfoQueue, Severity : D3D12_MESSAGE_SEVERITY, pDescription : PSTR) -> HRESULT #cpp_method;
    SetBreakOnCategory : (this : *ID3D12InfoQueue, Category : D3D12_MESSAGE_CATEGORY, bEnable : BOOL) -> HRESULT #cpp_method;
    SetBreakOnSeverity : (this : *ID3D12InfoQueue, Severity : D3D12_MESSAGE_SEVERITY, bEnable : BOOL) -> HRESULT #cpp_method;
    SetBreakOnID : (this : *ID3D12InfoQueue, ID : D3D12_MESSAGE_ID, bEnable : BOOL) -> HRESULT #cpp_method;
    GetBreakOnCategory : (this : *ID3D12InfoQueue, Category : D3D12_MESSAGE_CATEGORY) -> BOOL #cpp_method;
    GetBreakOnSeverity : (this : *ID3D12InfoQueue, Severity : D3D12_MESSAGE_SEVERITY) -> BOOL #cpp_method;
    GetBreakOnID : (this : *ID3D12InfoQueue, ID : D3D12_MESSAGE_ID) -> BOOL #cpp_method;
    SetMuteDebugOutput : (this : *ID3D12InfoQueue, bMute : BOOL) #cpp_method;
    GetMuteDebugOutput : (this : *ID3D12InfoQueue) -> BOOL #cpp_method;
}

ID3D12InfoQueue1VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12InfoQueueVTable;

    RegisterMessageCallback : (this : *ID3D12InfoQueue1, CallbackFunc : D3D12MessageFunc, CallbackFilterFlags : D3D12_MESSAGE_CALLBACK_FLAGS, pContext : *void, pCallbackCookie : *u32) -> HRESULT #cpp_method;
    UnregisterMessageCallback : (this : *ID3D12InfoQueue1, CallbackCookie : u32) -> HRESULT #cpp_method;
}

ID3D12LibraryReflectionVTable :: struct
{
    #as using, except (.["base"]) base : IUnknownVTable;

    GetDesc : (this : *ID3D12LibraryReflection, pDesc : *D3D12_LIBRARY_DESC) -> HRESULT #cpp_method;
    GetFunctionByIndex : (this : *ID3D12LibraryReflection, FunctionIndex : s32) -> *ID3D12FunctionReflection #cpp_method;
}

ID3D12LifetimeOwnerVTable :: struct
{
    #as using, except (.["base"]) base : IUnknownVTable;

    LifetimeStateUpdated : (this : *ID3D12LifetimeOwner, NewState : D3D12_LIFETIME_STATE) #cpp_method;
}

ID3D12LifetimeTrackerVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12DeviceChildVTable;

    DestroyOwnedObject : (this : *ID3D12LifetimeTracker, pObject : *ID3D12DeviceChild) -> HRESULT #cpp_method;
}

ID3D12MetaCommandVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12PageableVTable;

    GetRequiredParameterResourceSize : (this : *ID3D12MetaCommand, Stage : D3D12_META_COMMAND_PARAMETER_STAGE, ParameterIndex : u32) -> u64 #cpp_method;
}

ID3D12ObjectVTable :: struct
{
    #as using, except (.["base"]) base : IUnknownVTable;

    GetPrivateData : (this : *ID3D12Object, guid : *GUID, pDataSize : *u32, pData : *void) -> HRESULT #cpp_method;
    SetPrivateData : (this : *ID3D12Object, guid : *GUID, DataSize : u32, pData : *void) -> HRESULT #cpp_method;
    SetPrivateDataInterface : (this : *ID3D12Object, guid : *GUID, pData : *IUnknown) -> HRESULT #cpp_method;
    SetName : (this : *ID3D12Object, Name : PWSTR) -> HRESULT #cpp_method;
}

ID3D12PageableVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12DeviceChildVTable;

}

ID3D12PipelineLibraryVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12DeviceChildVTable;

    StorePipeline : (this : *ID3D12PipelineLibrary, pName : PWSTR, pPipeline : *ID3D12PipelineState) -> HRESULT #cpp_method;
    LoadGraphicsPipeline : (this : *ID3D12PipelineLibrary, pName : PWSTR, pDesc : *D3D12_GRAPHICS_PIPELINE_STATE_DESC, riid : *GUID, ppPipelineState : **void) -> HRESULT #cpp_method;
    LoadComputePipeline : (this : *ID3D12PipelineLibrary, pName : PWSTR, pDesc : *D3D12_COMPUTE_PIPELINE_STATE_DESC, riid : *GUID, ppPipelineState : **void) -> HRESULT #cpp_method;
    GetSerializedSize : (this : *ID3D12PipelineLibrary) -> u64 #cpp_method;
    Serialize : (this : *ID3D12PipelineLibrary, pData : *void, DataSizeInBytes : u64) -> HRESULT #cpp_method;
}

ID3D12PipelineLibrary1VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12PipelineLibraryVTable;

    LoadPipeline : (this : *ID3D12PipelineLibrary1, pName : PWSTR, pDesc : *D3D12_PIPELINE_STATE_STREAM_DESC, riid : *GUID, ppPipelineState : **void) -> HRESULT #cpp_method;
}

ID3D12PipelineStateVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12PageableVTable;

    GetCachedBlob : (this : *ID3D12PipelineState, ppBlob : **ID3DBlob) -> HRESULT #cpp_method;
}

ID3D12ProtectedResourceSessionVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12ProtectedSessionVTable;

    GetDesc : (this : *ID3D12ProtectedResourceSession) -> D3D12_PROTECTED_RESOURCE_SESSION_DESC #cpp_method;
}

ID3D12ProtectedResourceSession1VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12ProtectedResourceSessionVTable;

    GetDesc1 : (this : *ID3D12ProtectedResourceSession1) -> D3D12_PROTECTED_RESOURCE_SESSION_DESC1 #cpp_method;
}

ID3D12ProtectedSessionVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12DeviceChildVTable;

    GetStatusFence : (this : *ID3D12ProtectedSession, riid : *GUID, ppFence : **void) -> HRESULT #cpp_method;
    GetSessionStatus : (this : *ID3D12ProtectedSession) -> D3D12_PROTECTED_SESSION_STATUS #cpp_method;
}

ID3D12QueryHeapVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12PageableVTable;

}

ID3D12ResourceVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12PageableVTable;

    Map : (this : *ID3D12Resource, Subresource : u32, pReadRange : *D3D12_RANGE, ppData : **void) -> HRESULT #cpp_method;
    Unmap : (this : *ID3D12Resource, Subresource : u32, pWrittenRange : *D3D12_RANGE) #cpp_method;
    GetDesc : (this : *ID3D12Resource) -> D3D12_RESOURCE_DESC #cpp_method;
    GetGPUVirtualAddress : (this : *ID3D12Resource) -> u64 #cpp_method;
    WriteToSubresource : (this : *ID3D12Resource, DstSubresource : u32, pDstBox : *D3D12_BOX, pSrcData : *void, SrcRowPitch : u32, SrcDepthPitch : u32) -> HRESULT #cpp_method;
    ReadFromSubresource : (this : *ID3D12Resource, pDstData : *void, DstRowPitch : u32, DstDepthPitch : u32, SrcSubresource : u32, pSrcBox : *D3D12_BOX) -> HRESULT #cpp_method;
    GetHeapProperties : (this : *ID3D12Resource, pHeapProperties : *D3D12_HEAP_PROPERTIES, pHeapFlags : *D3D12_HEAP_FLAGS) -> HRESULT #cpp_method;
}

ID3D12Resource1VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12ResourceVTable;

    GetProtectedResourceSession : (this : *ID3D12Resource1, riid : *GUID, ppProtectedSession : **void) -> HRESULT #cpp_method;
}

ID3D12Resource2VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12Resource1VTable;

    GetDesc1 : (this : *ID3D12Resource2) -> D3D12_RESOURCE_DESC1 #cpp_method;
}

ID3D12RootSignatureVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12DeviceChildVTable;

}

ID3D12RootSignatureDeserializerVTable :: struct
{
    #as using, except (.["base"]) base : IUnknownVTable;

    GetRootSignatureDesc : (this : *ID3D12RootSignatureDeserializer) -> *D3D12_ROOT_SIGNATURE_DESC #cpp_method;
}

ID3D12SDKConfigurationVTable :: struct
{
    #as using, except (.["base"]) base : IUnknownVTable;

    SetSDKVersion : (this : *ID3D12SDKConfiguration, SDKVersion : u32, SDKPath : PSTR) -> HRESULT #cpp_method;
}

ID3D12ShaderCacheSessionVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12DeviceChildVTable;

    FindValue : (this : *ID3D12ShaderCacheSession, pKey : *void, KeySize : u32, pValue : *void, pValueSize : *u32) -> HRESULT #cpp_method;
    StoreValue : (this : *ID3D12ShaderCacheSession, pKey : *void, KeySize : u32, pValue : *void, ValueSize : u32) -> HRESULT #cpp_method;
    SetDeleteOnDestroy : (this : *ID3D12ShaderCacheSession) #cpp_method;
    GetDesc : (this : *ID3D12ShaderCacheSession) -> D3D12_SHADER_CACHE_SESSION_DESC #cpp_method;
}

ID3D12ShaderReflectionVTable :: struct
{
    #as using, except (.["base"]) base : IUnknownVTable;

    GetDesc : (this : *ID3D12ShaderReflection, pDesc : *D3D12_SHADER_DESC) -> HRESULT #cpp_method;
    GetConstantBufferByIndex : (this : *ID3D12ShaderReflection, Index : u32) -> *ID3D12ShaderReflectionConstantBuffer #cpp_method;
    GetConstantBufferByName : (this : *ID3D12ShaderReflection, Name : PSTR) -> *ID3D12ShaderReflectionConstantBuffer #cpp_method;
    GetResourceBindingDesc : (this : *ID3D12ShaderReflection, ResourceIndex : u32, pDesc : *D3D12_SHADER_INPUT_BIND_DESC) -> HRESULT #cpp_method;
    GetInputParameterDesc : (this : *ID3D12ShaderReflection, ParameterIndex : u32, pDesc : *D3D12_SIGNATURE_PARAMETER_DESC) -> HRESULT #cpp_method;
    GetOutputParameterDesc : (this : *ID3D12ShaderReflection, ParameterIndex : u32, pDesc : *D3D12_SIGNATURE_PARAMETER_DESC) -> HRESULT #cpp_method;
    GetPatchConstantParameterDesc : (this : *ID3D12ShaderReflection, ParameterIndex : u32, pDesc : *D3D12_SIGNATURE_PARAMETER_DESC) -> HRESULT #cpp_method;
    GetVariableByName : (this : *ID3D12ShaderReflection, Name : PSTR) -> *ID3D12ShaderReflectionVariable #cpp_method;
    GetResourceBindingDescByName : (this : *ID3D12ShaderReflection, Name : PSTR, pDesc : *D3D12_SHADER_INPUT_BIND_DESC) -> HRESULT #cpp_method;
    GetMovInstructionCount : (this : *ID3D12ShaderReflection) -> u32 #cpp_method;
    GetMovcInstructionCount : (this : *ID3D12ShaderReflection) -> u32 #cpp_method;
    GetConversionInstructionCount : (this : *ID3D12ShaderReflection) -> u32 #cpp_method;
    GetBitwiseInstructionCount : (this : *ID3D12ShaderReflection) -> u32 #cpp_method;
    GetGSInputPrimitive : (this : *ID3D12ShaderReflection) -> D3D_PRIMITIVE #cpp_method;
    IsSampleFrequencyShader : (this : *ID3D12ShaderReflection) -> BOOL #cpp_method;
    GetNumInterfaceSlots : (this : *ID3D12ShaderReflection) -> u32 #cpp_method;
    GetMinFeatureLevel : (this : *ID3D12ShaderReflection, pLevel : *D3D_FEATURE_LEVEL) -> HRESULT #cpp_method;
    GetThreadGroupSize : (this : *ID3D12ShaderReflection, pSizeX : *u32, pSizeY : *u32, pSizeZ : *u32) -> u32 #cpp_method;
    GetRequiresFlags : (this : *ID3D12ShaderReflection) -> u64 #cpp_method;
}

ID3D12ShaderReflectionConstantBufferVTable :: struct
{
    GetDesc : (this : *ID3D12ShaderReflectionConstantBuffer, pDesc : *D3D12_SHADER_BUFFER_DESC) -> HRESULT #cpp_method;
    GetVariableByIndex : (this : *ID3D12ShaderReflectionConstantBuffer, Index : u32) -> *ID3D12ShaderReflectionVariable #cpp_method;
    GetVariableByName : (this : *ID3D12ShaderReflectionConstantBuffer, Name : PSTR) -> *ID3D12ShaderReflectionVariable #cpp_method;
}

ID3D12ShaderReflectionTypeVTable :: struct
{
    GetDesc : (this : *ID3D12ShaderReflectionType, pDesc : *D3D12_SHADER_TYPE_DESC) -> HRESULT #cpp_method;
    GetMemberTypeByIndex : (this : *ID3D12ShaderReflectionType, Index : u32) -> *ID3D12ShaderReflectionType #cpp_method;
    GetMemberTypeByName : (this : *ID3D12ShaderReflectionType, Name : PSTR) -> *ID3D12ShaderReflectionType #cpp_method;
    GetMemberTypeName : (this : *ID3D12ShaderReflectionType, Index : u32) -> PSTR #cpp_method;
    IsEqual : (this : *ID3D12ShaderReflectionType, pType : *ID3D12ShaderReflectionType) -> HRESULT #cpp_method;
    GetSubType : (this : *ID3D12ShaderReflectionType) -> *ID3D12ShaderReflectionType #cpp_method;
    GetBaseClass : (this : *ID3D12ShaderReflectionType) -> *ID3D12ShaderReflectionType #cpp_method;
    GetNumInterfaces : (this : *ID3D12ShaderReflectionType) -> u32 #cpp_method;
    GetInterfaceByIndex : (this : *ID3D12ShaderReflectionType, uIndex : u32) -> *ID3D12ShaderReflectionType #cpp_method;
    IsOfType : (this : *ID3D12ShaderReflectionType, pType : *ID3D12ShaderReflectionType) -> HRESULT #cpp_method;
    ImplementsInterface : (this : *ID3D12ShaderReflectionType, pBase : *ID3D12ShaderReflectionType) -> HRESULT #cpp_method;
}

ID3D12ShaderReflectionVariableVTable :: struct
{
    GetDesc : (this : *ID3D12ShaderReflectionVariable, pDesc : *D3D12_SHADER_VARIABLE_DESC) -> HRESULT #cpp_method;
    GetType : (this : *ID3D12ShaderReflectionVariable) -> *ID3D12ShaderReflectionType #cpp_method;
    GetBuffer : (this : *ID3D12ShaderReflectionVariable) -> *ID3D12ShaderReflectionConstantBuffer #cpp_method;
    GetInterfaceSlot : (this : *ID3D12ShaderReflectionVariable, uArrayIndex : u32) -> u32 #cpp_method;
}

ID3D12SharingContractVTable :: struct
{
    #as using, except (.["base"]) base : IUnknownVTable;

    Present : (this : *ID3D12SharingContract, pResource : *ID3D12Resource, Subresource : u32, window : HWND) #cpp_method;
    SharedFenceSignal : (this : *ID3D12SharingContract, pFence : *ID3D12Fence, FenceValue : u64) #cpp_method;
    BeginCapturableWork : (this : *ID3D12SharingContract, guid : *GUID) #cpp_method;
    EndCapturableWork : (this : *ID3D12SharingContract, guid : *GUID) #cpp_method;
}

ID3D12StateObjectVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12PageableVTable;

}

ID3D12StateObjectPropertiesVTable :: struct
{
    #as using, except (.["base"]) base : IUnknownVTable;

    GetShaderIdentifier : (this : *ID3D12StateObjectProperties, pExportName : PWSTR) -> *void #cpp_method;
    GetShaderStackSize : (this : *ID3D12StateObjectProperties, pExportName : PWSTR) -> u64 #cpp_method;
    GetPipelineStackSize : (this : *ID3D12StateObjectProperties) -> u64 #cpp_method;
    SetPipelineStackSize : (this : *ID3D12StateObjectProperties, PipelineStackSizeInBytes : u64) #cpp_method;
}

ID3D12SwapChainAssistantVTable :: struct
{
    #as using, except (.["base"]) base : IUnknownVTable;

    GetLUID : (this : *ID3D12SwapChainAssistant) -> LUID #cpp_method;
    GetSwapChainObject : (this : *ID3D12SwapChainAssistant, riid : *GUID, ppv : **void) -> HRESULT #cpp_method;
    GetCurrentResourceAndCommandQueue : (this : *ID3D12SwapChainAssistant, riidResource : *GUID, ppvResource : **void, riidQueue : *GUID, ppvQueue : **void) -> HRESULT #cpp_method;
    InsertImplicitSync : (this : *ID3D12SwapChainAssistant) -> HRESULT #cpp_method;
}

ID3D12ToolsVTable :: struct
{
    #as using, except (.["base"]) base : IUnknownVTable;

    EnableShaderInstrumentation : (this : *ID3D12Tools, bEnable : BOOL) #cpp_method;
    ShaderInstrumentationEnabled : (this : *ID3D12Tools) -> BOOL #cpp_method;
}

ID3D12VersionedRootSignatureDeserializerVTable :: struct
{
    #as using, except (.["base"]) base : IUnknownVTable;

    GetRootSignatureDescAtVersion : (this : *ID3D12VersionedRootSignatureDeserializer, convertToVersion : D3D_ROOT_SIGNATURE_VERSION, ppDesc : **D3D12_VERSIONED_ROOT_SIGNATURE_DESC) -> HRESULT #cpp_method;
    GetUnconvertedRootSignatureDesc : (this : *ID3D12VersionedRootSignatureDeserializer) -> *D3D12_VERSIONED_ROOT_SIGNATURE_DESC #cpp_method;
}

ID3D12VideoDecodeCommandListVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12CommandListVTable;

    Close : (this : *ID3D12VideoDecodeCommandList) -> HRESULT #cpp_method;
    Reset : (this : *ID3D12VideoDecodeCommandList, pAllocator : *ID3D12CommandAllocator) -> HRESULT #cpp_method;
    ClearState : (this : *ID3D12VideoDecodeCommandList) #cpp_method;
    ResourceBarrier : (this : *ID3D12VideoDecodeCommandList, NumBarriers : u32, pBarriers : *D3D12_RESOURCE_BARRIER) #cpp_method;
    DiscardResource : (this : *ID3D12VideoDecodeCommandList, pResource : *ID3D12Resource, pRegion : *D3D12_DISCARD_REGION) #cpp_method;
    BeginQuery : (this : *ID3D12VideoDecodeCommandList, pQueryHeap : *ID3D12QueryHeap, _Type : D3D12_QUERY_TYPE, Index : u32) #cpp_method;
    EndQuery : (this : *ID3D12VideoDecodeCommandList, pQueryHeap : *ID3D12QueryHeap, _Type : D3D12_QUERY_TYPE, Index : u32) #cpp_method;
    ResolveQueryData : (this : *ID3D12VideoDecodeCommandList, pQueryHeap : *ID3D12QueryHeap, _Type : D3D12_QUERY_TYPE, StartIndex : u32, NumQueries : u32, pDestinationBuffer : *ID3D12Resource, AlignedDestinationBufferOffset : u64) #cpp_method;
    SetPredication : (this : *ID3D12VideoDecodeCommandList, pBuffer : *ID3D12Resource, AlignedBufferOffset : u64, Operation : D3D12_PREDICATION_OP) #cpp_method;
    SetMarker : (this : *ID3D12VideoDecodeCommandList, Metadata : u32, pData : *void, Size : u32) #cpp_method;
    BeginEvent : (this : *ID3D12VideoDecodeCommandList, Metadata : u32, pData : *void, Size : u32) #cpp_method;
    EndEvent : (this : *ID3D12VideoDecodeCommandList) #cpp_method;
    DecodeFrame : (this : *ID3D12VideoDecodeCommandList, pDecoder : *ID3D12VideoDecoder, pOutputArguments : *D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS, pInputArguments : *D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS) #cpp_method;
    WriteBufferImmediate : (this : *ID3D12VideoDecodeCommandList, Count : u32, pParams : *D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pModes : *D3D12_WRITEBUFFERIMMEDIATE_MODE) #cpp_method;
}

ID3D12VideoDecodeCommandList1VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12VideoDecodeCommandListVTable;

    DecodeFrame1 : (this : *ID3D12VideoDecodeCommandList1, pDecoder : *ID3D12VideoDecoder, pOutputArguments : *D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1, pInputArguments : *D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS) #cpp_method;
}

ID3D12VideoDecodeCommandList2VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12VideoDecodeCommandList1VTable;

    SetProtectedResourceSession : (this : *ID3D12VideoDecodeCommandList2, pProtectedResourceSession : *ID3D12ProtectedResourceSession) #cpp_method;
    InitializeExtensionCommand : (this : *ID3D12VideoDecodeCommandList2, pExtensionCommand : *ID3D12VideoExtensionCommand, pInitializationParameters : *void, InitializationParametersSizeInBytes : u64) #cpp_method;
    ExecuteExtensionCommand : (this : *ID3D12VideoDecodeCommandList2, pExtensionCommand : *ID3D12VideoExtensionCommand, pExecutionParameters : *void, ExecutionParametersSizeInBytes : u64) #cpp_method;
}

ID3D12VideoDecoderVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12PageableVTable;

    GetDesc : (this : *ID3D12VideoDecoder) -> D3D12_VIDEO_DECODER_DESC #cpp_method;
}

ID3D12VideoDecoder1VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12VideoDecoderVTable;

    GetProtectedResourceSession : (this : *ID3D12VideoDecoder1, riid : *GUID, ppProtectedSession : **void) -> HRESULT #cpp_method;
}

ID3D12VideoDecoderHeapVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12PageableVTable;

    GetDesc : (this : *ID3D12VideoDecoderHeap) -> D3D12_VIDEO_DECODER_HEAP_DESC #cpp_method;
}

ID3D12VideoDecoderHeap1VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12VideoDecoderHeapVTable;

    GetProtectedResourceSession : (this : *ID3D12VideoDecoderHeap1, riid : *GUID, ppProtectedSession : **void) -> HRESULT #cpp_method;
}

ID3D12VideoDeviceVTable :: struct
{
    #as using, except (.["base"]) base : IUnknownVTable;

    CheckFeatureSupport : (this : *ID3D12VideoDevice, FeatureVideo : D3D12_FEATURE_VIDEO, pFeatureSupportData : *void, FeatureSupportDataSize : u32) -> HRESULT #cpp_method;
    CreateVideoDecoder : (this : *ID3D12VideoDevice, pDesc : *D3D12_VIDEO_DECODER_DESC, riid : *GUID, ppVideoDecoder : **void) -> HRESULT #cpp_method;
    CreateVideoDecoderHeap : (this : *ID3D12VideoDevice, pVideoDecoderHeapDesc : *D3D12_VIDEO_DECODER_HEAP_DESC, riid : *GUID, ppVideoDecoderHeap : **void) -> HRESULT #cpp_method;
    CreateVideoProcessor : (this : *ID3D12VideoDevice, NodeMask : u32, pOutputStreamDesc : *D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC, NumInputStreamDescs : u32, pInputStreamDescs : *D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC, riid : *GUID, ppVideoProcessor : **void) -> HRESULT #cpp_method;
}

ID3D12VideoDevice1VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12VideoDeviceVTable;

    CreateVideoMotionEstimator : (this : *ID3D12VideoDevice1, pDesc : *D3D12_VIDEO_MOTION_ESTIMATOR_DESC, pProtectedResourceSession : *ID3D12ProtectedResourceSession, riid : *GUID, ppVideoMotionEstimator : **void) -> HRESULT #cpp_method;
    CreateVideoMotionVectorHeap : (this : *ID3D12VideoDevice1, pDesc : *D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC, pProtectedResourceSession : *ID3D12ProtectedResourceSession, riid : *GUID, ppVideoMotionVectorHeap : **void) -> HRESULT #cpp_method;
}

ID3D12VideoDevice2VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12VideoDevice1VTable;

    CreateVideoDecoder1 : (this : *ID3D12VideoDevice2, pDesc : *D3D12_VIDEO_DECODER_DESC, pProtectedResourceSession : *ID3D12ProtectedResourceSession, riid : *GUID, ppVideoDecoder : **void) -> HRESULT #cpp_method;
    CreateVideoDecoderHeap1 : (this : *ID3D12VideoDevice2, pVideoDecoderHeapDesc : *D3D12_VIDEO_DECODER_HEAP_DESC, pProtectedResourceSession : *ID3D12ProtectedResourceSession, riid : *GUID, ppVideoDecoderHeap : **void) -> HRESULT #cpp_method;
    CreateVideoProcessor1 : (this : *ID3D12VideoDevice2, NodeMask : u32, pOutputStreamDesc : *D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC, NumInputStreamDescs : u32, pInputStreamDescs : *D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC, pProtectedResourceSession : *ID3D12ProtectedResourceSession, riid : *GUID, ppVideoProcessor : **void) -> HRESULT #cpp_method;
    CreateVideoExtensionCommand : (this : *ID3D12VideoDevice2, pDesc : *D3D12_VIDEO_EXTENSION_COMMAND_DESC, pCreationParameters : *void, CreationParametersDataSizeInBytes : u64, pProtectedResourceSession : *ID3D12ProtectedResourceSession, riid : *GUID, ppVideoExtensionCommand : **void) -> HRESULT #cpp_method;
    ExecuteExtensionCommand : (this : *ID3D12VideoDevice2, pExtensionCommand : *ID3D12VideoExtensionCommand, pExecutionParameters : *void, ExecutionParametersSizeInBytes : u64, pOutputData : *void, OutputDataSizeInBytes : u64) -> HRESULT #cpp_method;
}

ID3D12VideoDevice3VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12VideoDevice2VTable;

    CreateVideoEncoder : (this : *ID3D12VideoDevice3, pDesc : *D3D12_VIDEO_ENCODER_DESC, riid : *GUID, ppVideoEncoder : **void) -> HRESULT #cpp_method;
    CreateVideoEncoderHeap : (this : *ID3D12VideoDevice3, pDesc : *D3D12_VIDEO_ENCODER_HEAP_DESC, riid : *GUID, ppVideoEncoderHeap : **void) -> HRESULT #cpp_method;
}

ID3D12VideoEncodeCommandListVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12CommandListVTable;

    Close : (this : *ID3D12VideoEncodeCommandList) -> HRESULT #cpp_method;
    Reset : (this : *ID3D12VideoEncodeCommandList, pAllocator : *ID3D12CommandAllocator) -> HRESULT #cpp_method;
    ClearState : (this : *ID3D12VideoEncodeCommandList) #cpp_method;
    ResourceBarrier : (this : *ID3D12VideoEncodeCommandList, NumBarriers : u32, pBarriers : *D3D12_RESOURCE_BARRIER) #cpp_method;
    DiscardResource : (this : *ID3D12VideoEncodeCommandList, pResource : *ID3D12Resource, pRegion : *D3D12_DISCARD_REGION) #cpp_method;
    BeginQuery : (this : *ID3D12VideoEncodeCommandList, pQueryHeap : *ID3D12QueryHeap, _Type : D3D12_QUERY_TYPE, Index : u32) #cpp_method;
    EndQuery : (this : *ID3D12VideoEncodeCommandList, pQueryHeap : *ID3D12QueryHeap, _Type : D3D12_QUERY_TYPE, Index : u32) #cpp_method;
    ResolveQueryData : (this : *ID3D12VideoEncodeCommandList, pQueryHeap : *ID3D12QueryHeap, _Type : D3D12_QUERY_TYPE, StartIndex : u32, NumQueries : u32, pDestinationBuffer : *ID3D12Resource, AlignedDestinationBufferOffset : u64) #cpp_method;
    SetPredication : (this : *ID3D12VideoEncodeCommandList, pBuffer : *ID3D12Resource, AlignedBufferOffset : u64, Operation : D3D12_PREDICATION_OP) #cpp_method;
    SetMarker : (this : *ID3D12VideoEncodeCommandList, Metadata : u32, pData : *void, Size : u32) #cpp_method;
    BeginEvent : (this : *ID3D12VideoEncodeCommandList, Metadata : u32, pData : *void, Size : u32) #cpp_method;
    EndEvent : (this : *ID3D12VideoEncodeCommandList) #cpp_method;
    EstimateMotion : (this : *ID3D12VideoEncodeCommandList, pMotionEstimator : *ID3D12VideoMotionEstimator, pOutputArguments : *D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT, pInputArguments : *D3D12_VIDEO_MOTION_ESTIMATOR_INPUT) #cpp_method;
    ResolveMotionVectorHeap : (this : *ID3D12VideoEncodeCommandList, pOutputArguments : *D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT, pInputArguments : *D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT) #cpp_method;
    WriteBufferImmediate : (this : *ID3D12VideoEncodeCommandList, Count : u32, pParams : *D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pModes : *D3D12_WRITEBUFFERIMMEDIATE_MODE) #cpp_method;
    SetProtectedResourceSession : (this : *ID3D12VideoEncodeCommandList, pProtectedResourceSession : *ID3D12ProtectedResourceSession) #cpp_method;
}

ID3D12VideoEncodeCommandList1VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12VideoEncodeCommandListVTable;

    InitializeExtensionCommand : (this : *ID3D12VideoEncodeCommandList1, pExtensionCommand : *ID3D12VideoExtensionCommand, pInitializationParameters : *void, InitializationParametersSizeInBytes : u64) #cpp_method;
    ExecuteExtensionCommand : (this : *ID3D12VideoEncodeCommandList1, pExtensionCommand : *ID3D12VideoExtensionCommand, pExecutionParameters : *void, ExecutionParametersSizeInBytes : u64) #cpp_method;
}

ID3D12VideoEncodeCommandList2VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12VideoEncodeCommandList1VTable;

    EncodeFrame : (this : *ID3D12VideoEncodeCommandList2, pEncoder : *ID3D12VideoEncoder, pHeap : *ID3D12VideoEncoderHeap, pInputArguments : *D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS, pOutputArguments : *D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS) #cpp_method;
    ResolveEncoderOutputMetadata : (this : *ID3D12VideoEncodeCommandList2, pInputArguments : *D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS, pOutputArguments : *D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS) #cpp_method;
}

ID3D12VideoEncoderVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12PageableVTable;

    GetNodeMask : (this : *ID3D12VideoEncoder) -> u32 #cpp_method;
    GetEncoderFlags : (this : *ID3D12VideoEncoder) -> D3D12_VIDEO_ENCODER_FLAGS #cpp_method;
    GetCodec : (this : *ID3D12VideoEncoder) -> D3D12_VIDEO_ENCODER_CODEC #cpp_method;
    GetCodecProfile : (this : *ID3D12VideoEncoder, dstProfile : D3D12_VIDEO_ENCODER_PROFILE_DESC) -> HRESULT #cpp_method;
    GetCodecConfiguration : (this : *ID3D12VideoEncoder, dstCodecConfig : D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION) -> HRESULT #cpp_method;
    GetInputFormat : (this : *ID3D12VideoEncoder) -> DXGI_FORMAT #cpp_method;
    GetMaxMotionEstimationPrecision : (this : *ID3D12VideoEncoder) -> D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE #cpp_method;
}

ID3D12VideoEncoderHeapVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12PageableVTable;

    GetNodeMask : (this : *ID3D12VideoEncoderHeap) -> u32 #cpp_method;
    GetEncoderHeapFlags : (this : *ID3D12VideoEncoderHeap) -> D3D12_VIDEO_ENCODER_HEAP_FLAGS #cpp_method;
    GetCodec : (this : *ID3D12VideoEncoderHeap) -> D3D12_VIDEO_ENCODER_CODEC #cpp_method;
    GetCodecProfile : (this : *ID3D12VideoEncoderHeap, dstProfile : D3D12_VIDEO_ENCODER_PROFILE_DESC) -> HRESULT #cpp_method;
    GetCodecLevel : (this : *ID3D12VideoEncoderHeap, dstLevel : D3D12_VIDEO_ENCODER_LEVEL_SETTING) -> HRESULT #cpp_method;
    GetResolutionListCount : (this : *ID3D12VideoEncoderHeap) -> u32 #cpp_method;
    GetResolutionList : (this : *ID3D12VideoEncoderHeap, ResolutionsListCount : u32, pResolutionList : *D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC) -> HRESULT #cpp_method;
}

ID3D12VideoExtensionCommandVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12PageableVTable;

    GetDesc : (this : *ID3D12VideoExtensionCommand) -> D3D12_VIDEO_EXTENSION_COMMAND_DESC #cpp_method;
    GetProtectedResourceSession : (this : *ID3D12VideoExtensionCommand, riid : *GUID, ppProtectedSession : **void) -> HRESULT #cpp_method;
}

ID3D12VideoMotionEstimatorVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12PageableVTable;

    GetDesc : (this : *ID3D12VideoMotionEstimator) -> D3D12_VIDEO_MOTION_ESTIMATOR_DESC #cpp_method;
    GetProtectedResourceSession : (this : *ID3D12VideoMotionEstimator, riid : *GUID, ppProtectedSession : **void) -> HRESULT #cpp_method;
}

ID3D12VideoMotionVectorHeapVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12PageableVTable;

    GetDesc : (this : *ID3D12VideoMotionVectorHeap) -> D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC #cpp_method;
    GetProtectedResourceSession : (this : *ID3D12VideoMotionVectorHeap, riid : *GUID, ppProtectedSession : **void) -> HRESULT #cpp_method;
}

ID3D12VideoProcessCommandListVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12CommandListVTable;

    Close : (this : *ID3D12VideoProcessCommandList) -> HRESULT #cpp_method;
    Reset : (this : *ID3D12VideoProcessCommandList, pAllocator : *ID3D12CommandAllocator) -> HRESULT #cpp_method;
    ClearState : (this : *ID3D12VideoProcessCommandList) #cpp_method;
    ResourceBarrier : (this : *ID3D12VideoProcessCommandList, NumBarriers : u32, pBarriers : *D3D12_RESOURCE_BARRIER) #cpp_method;
    DiscardResource : (this : *ID3D12VideoProcessCommandList, pResource : *ID3D12Resource, pRegion : *D3D12_DISCARD_REGION) #cpp_method;
    BeginQuery : (this : *ID3D12VideoProcessCommandList, pQueryHeap : *ID3D12QueryHeap, _Type : D3D12_QUERY_TYPE, Index : u32) #cpp_method;
    EndQuery : (this : *ID3D12VideoProcessCommandList, pQueryHeap : *ID3D12QueryHeap, _Type : D3D12_QUERY_TYPE, Index : u32) #cpp_method;
    ResolveQueryData : (this : *ID3D12VideoProcessCommandList, pQueryHeap : *ID3D12QueryHeap, _Type : D3D12_QUERY_TYPE, StartIndex : u32, NumQueries : u32, pDestinationBuffer : *ID3D12Resource, AlignedDestinationBufferOffset : u64) #cpp_method;
    SetPredication : (this : *ID3D12VideoProcessCommandList, pBuffer : *ID3D12Resource, AlignedBufferOffset : u64, Operation : D3D12_PREDICATION_OP) #cpp_method;
    SetMarker : (this : *ID3D12VideoProcessCommandList, Metadata : u32, pData : *void, Size : u32) #cpp_method;
    BeginEvent : (this : *ID3D12VideoProcessCommandList, Metadata : u32, pData : *void, Size : u32) #cpp_method;
    EndEvent : (this : *ID3D12VideoProcessCommandList) #cpp_method;
    ProcessFrames : (this : *ID3D12VideoProcessCommandList, pVideoProcessor : *ID3D12VideoProcessor, pOutputArguments : *D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS, NumInputStreams : u32, pInputArguments : *D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS) #cpp_method;
    WriteBufferImmediate : (this : *ID3D12VideoProcessCommandList, Count : u32, pParams : *D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pModes : *D3D12_WRITEBUFFERIMMEDIATE_MODE) #cpp_method;
}

ID3D12VideoProcessCommandList1VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12VideoProcessCommandListVTable;

    ProcessFrames1 : (this : *ID3D12VideoProcessCommandList1, pVideoProcessor : *ID3D12VideoProcessor, pOutputArguments : *D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS, NumInputStreams : u32, pInputArguments : *D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1) #cpp_method;
}

ID3D12VideoProcessCommandList2VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12VideoProcessCommandList1VTable;

    SetProtectedResourceSession : (this : *ID3D12VideoProcessCommandList2, pProtectedResourceSession : *ID3D12ProtectedResourceSession) #cpp_method;
    InitializeExtensionCommand : (this : *ID3D12VideoProcessCommandList2, pExtensionCommand : *ID3D12VideoExtensionCommand, pInitializationParameters : *void, InitializationParametersSizeInBytes : u64) #cpp_method;
    ExecuteExtensionCommand : (this : *ID3D12VideoProcessCommandList2, pExtensionCommand : *ID3D12VideoExtensionCommand, pExecutionParameters : *void, ExecutionParametersSizeInBytes : u64) #cpp_method;
}

ID3D12VideoProcessorVTable :: struct
{
    #as using, except (.["base"]) base : ID3D12PageableVTable;

    GetNodeMask : (this : *ID3D12VideoProcessor) -> u32 #cpp_method;
    GetNumInputStreamDescs : (this : *ID3D12VideoProcessor) -> u32 #cpp_method;
    GetInputStreamDescs : (this : *ID3D12VideoProcessor, NumInputStreamDescs : u32, pInputStreamDescs : *D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC) -> HRESULT #cpp_method;
    GetOutputStreamDesc : (this : *ID3D12VideoProcessor) -> D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC #cpp_method;
}

ID3D12VideoProcessor1VTable :: struct
{
    #as using, except (.["base"]) base : ID3D12VideoProcessorVTable;

    GetProtectedResourceSession : (this : *ID3D12VideoProcessor1, riid : *GUID, ppProtectedSession : **void) -> HRESULT #cpp_method;
}

// System libraries

#scope_file

d3d12 :: #system_library "d3d12";

#scope_export

SetName :: inline (obj : *ID3D12Object, name : string) -> HRESULT
{
    wide_str := Utf8ToWide (name);
    defer context.allocator.proc (.FREE, 0, 0, wide_str, context.allocator.data);

    return obj.SetName (obj, wide_str);
}

D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING :: inline (Src0 : s32, Src1 : s32, Src2 : s32, Src3 : s32) -> D3D12_SHADER_COMPONENT_MAPPING #must
{
    return cast (D3D12_SHADER_COMPONENT_MAPPING) ((Src0 & D3D12_SHADER_COMPONENT_MAPPING_MASK)
        | ((Src1 & D3D12_SHADER_COMPONENT_MAPPING_MASK) << D3D12_SHADER_COMPONENT_MAPPING_SHIFT)
        | ((Src2 & D3D12_SHADER_COMPONENT_MAPPING_MASK) << (D3D12_SHADER_COMPONENT_MAPPING_SHIFT * 2))
        | ((Src3 & D3D12_SHADER_COMPONENT_MAPPING_MASK) << (D3D12_SHADER_COMPONENT_MAPPING_SHIFT * 3))
        | D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES);
}

D3D12_DECODE_SHADER_4_COMPONENT_MAPPING :: inline (ComponentToExtract : s32, Mapping : s32) -> D3D12_SHADER_COMPONENT_MAPPING #must
{
    return (cast (D3D12_SHADER_COMPONENT_MAPPING) (Mapping >> (D3D12_SHADER_COMPONENT_MAPPING_SHIFT * ComponentToExtract) & D3D12_SHADER_COMPONENT_MAPPING_MASK));
}

D3D12_ENCODE_BASIC_FILTER :: inline (min: D3D12_FILTER_TYPE, mag: D3D12_FILTER_TYPE, mip: D3D12_FILTER_TYPE, reduction: D3D12_FILTER_REDUCTION_TYPE) -> D3D12_FILTER #must
{
    return cast (D3D12_FILTER) (
        ((xx min & D3D12_FILTER_TYPE_MASK) << D3D12_MIN_FILTER_SHIFT)
        | ((xx mag & D3D12_FILTER_TYPE_MASK) << D3D12_MAG_FILTER_SHIFT)
        | ((xx mip & D3D12_FILTER_TYPE_MASK) << D3D12_MIP_FILTER_SHIFT)
        | ((xx reduction & D3D12_FILTER_REDUCTION_TYPE_MASK) << D3D12_FILTER_REDUCTION_TYPE_SHIFT));
}

D3D12_ENCODE_ANISOTROPIC_FILTER :: inline (reduction: D3D12_FILTER_REDUCTION_TYPE) -> D3D12_FILTER #must
{
    return cast (D3D12_FILTER) (D3D12_ANISOTROPIC_FILTERING_BIT | xx D3D12_ENCODE_BASIC_FILTER (.LINEAR, .LINEAR, .LINEAR, reduction));
}

D3D12_DECODE_MIN_FILTER :: inline (D3D12Filter: D3D12_FILTER) -> D3D12_FILTER_TYPE #must
{
    return cast (D3D12_FILTER_TYPE) ((cast (s64) D3D12Filter >> D3D12_MIN_FILTER_SHIFT) & D3D12_FILTER_TYPE_MASK);
}

D3D12_DECODE_MAG_FILTER :: inline (D3D12Filter: D3D12_FILTER) -> D3D12_FILTER_TYPE #must
{
    return cast (D3D12_FILTER_TYPE) ((cast (s64) D3D12Filter >> D3D12_MAG_FILTER_SHIFT) & D3D12_FILTER_TYPE_MASK);
}

D3D12_DECODE_MIP_FILTER :: inline (D3D12Filter: D3D12_FILTER) -> D3D12_FILTER_TYPE #must
{
    return cast (D3D12_FILTER_TYPE) ((cast (s64) D3D12Filter >> D3D12_MIP_FILTER_SHIFT) & D3D12_FILTER_TYPE_MASK);
}

D3D12_DECODE_FILTER_REDUCTION :: inline (D3D12Filter: D3D12_FILTER) -> D3D12_FILTER_REDUCTION_TYPE #must
{
     return cast (D3D12_FILTER_REDUCTION_TYPE) ((cast(s64) D3D12Filter >> D3D12_FILTER_REDUCTION_TYPE_SHIFT) & D3D12_FILTER_REDUCTION_TYPE_MASK);
}

D3D12_DECODE_IS_COMPARISON_FILTER :: inline (D3D12Filter: D3D12_FILTER) -> bool #must
{
    return D3D12_DECODE_FILTER_REDUCTION (D3D12Filter) == D3D12_FILTER_REDUCTION_TYPE.COMPARISON;
}

D3D12_DECODE_IS_ANISOTROPIC_FILTER :: inline (D3D12Filter: D3D12_FILTER) -> bool #must
{
    return (xx D3D12Filter & D3D12_ANISOTROPIC_FILTERING_BIT)
        && D3D12_DECODE_MIN_FILTER (D3D12Filter) == D3D12_FILTER_TYPE.LINEAR
        && D3D12_DECODE_MAG_FILTER (D3D12Filter) == D3D12_FILTER_TYPE.LINEAR
        && D3D12_DECODE_MIP_FILTER (D3D12Filter) == D3D12_FILTER_TYPE.LINEAR;
}
